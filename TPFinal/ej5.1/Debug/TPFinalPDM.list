
TPFinalPDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c34  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08007de8  08007de8  00017de8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008268  08008268  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08008268  08008268  00018268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008270  08008270  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008270  08008270  00018270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008274  08008274  00018274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          000000b0  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000029c  2000029c  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e29  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a27  00000000  00000000  00031045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b40  00000000  00000000  00033a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a18  00000000  00000000  000345b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028300  00000000  00000000  00034fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012211  00000000  00000000  0005d2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb761  00000000  00000000  0006f4d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015ac3a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f20  00000000  00000000  0015ac90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007dcc 	.word	0x08007dcc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	08007dcc 	.word	0x08007dcc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96e 	b.w	8000f9c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468c      	mov	ip, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8083 	bne.w	8000dee <__udivmoddi4+0x116>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d947      	bls.n	8000d7e <__udivmoddi4+0xa6>
 8000cee:	fab2 f282 	clz	r2, r2
 8000cf2:	b142      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	f1c2 0020 	rsb	r0, r2, #32
 8000cf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	4097      	lsls	r7, r2
 8000d00:	ea40 0c01 	orr.w	ip, r0, r1
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d10:	fa1f fe87 	uxth.w	lr, r7
 8000d14:	fb08 c116 	mls	r1, r8, r6, ip
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 8119 	bcs.w	8000f60 <__udivmoddi4+0x288>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8116 	bls.w	8000f60 <__udivmoddi4+0x288>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8105 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f240 8102 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d60:	3802      	subs	r0, #2
 8000d62:	443c      	add	r4, r7
 8000d64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d68:	eba4 040e 	sub.w	r4, r4, lr
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	b902      	cbnz	r2, 8000d82 <__udivmoddi4+0xaa>
 8000d80:	deff      	udf	#255	; 0xff
 8000d82:	fab2 f282 	clz	r2, r2
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d150      	bne.n	8000e2c <__udivmoddi4+0x154>
 8000d8a:	1bcb      	subs	r3, r1, r7
 8000d8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d90:	fa1f f887 	uxth.w	r8, r7
 8000d94:	2601      	movs	r6, #1
 8000d96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d9a:	0c21      	lsrs	r1, r4, #16
 8000d9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb08 f30c 	mul.w	r3, r8, ip
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0xe2>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	f200 80e9 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1ac9      	subs	r1, r1, r3
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x10c>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x10a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80d9 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e7bf      	b.n	8000d6e <__udivmoddi4+0x96>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0x12e>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80b1 	beq.w	8000f5a <__udivmoddi4+0x282>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x1cc>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0x140>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80b8 	bhi.w	8000f88 <__udivmoddi4+0x2b0>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	468c      	mov	ip, r1
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0a8      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000e26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e2a:	e7a5      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f603 	lsr.w	r6, r0, r3
 8000e34:	4097      	lsls	r7, r2
 8000e36:	fa01 f002 	lsl.w	r0, r1, r2
 8000e3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3e:	40d9      	lsrs	r1, r3
 8000e40:	4330      	orrs	r0, r6
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e48:	fa1f f887 	uxth.w	r8, r7
 8000e4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e54:	fb06 f108 	mul.w	r1, r6, r8
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5e:	d909      	bls.n	8000e74 <__udivmoddi4+0x19c>
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e66:	f080 808d 	bcs.w	8000f84 <__udivmoddi4+0x2ac>
 8000e6a:	4299      	cmp	r1, r3
 8000e6c:	f240 808a 	bls.w	8000f84 <__udivmoddi4+0x2ac>
 8000e70:	3e02      	subs	r6, #2
 8000e72:	443b      	add	r3, r7
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b281      	uxth	r1, r0
 8000e78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e84:	fb00 f308 	mul.w	r3, r0, r8
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x1c4>
 8000e8c:	1879      	adds	r1, r7, r1
 8000e8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e92:	d273      	bcs.n	8000f7c <__udivmoddi4+0x2a4>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d971      	bls.n	8000f7c <__udivmoddi4+0x2a4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4439      	add	r1, r7
 8000e9c:	1acb      	subs	r3, r1, r3
 8000e9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ea2:	e778      	b.n	8000d96 <__udivmoddi4+0xbe>
 8000ea4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ea8:	fa03 f406 	lsl.w	r4, r3, r6
 8000eac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000eb0:	431c      	orrs	r4, r3
 8000eb2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ebe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ec2:	431f      	orrs	r7, r3
 8000ec4:	0c3b      	lsrs	r3, r7, #16
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fa1f f884 	uxth.w	r8, r4
 8000ece:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ed2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ed6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eda:	458a      	cmp	sl, r1
 8000edc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x220>
 8000ee6:	1861      	adds	r1, r4, r1
 8000ee8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eec:	d248      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000eee:	458a      	cmp	sl, r1
 8000ef0:	d946      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000ef2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef6:	4421      	add	r1, r4
 8000ef8:	eba1 010a 	sub.w	r1, r1, sl
 8000efc:	b2bf      	uxth	r7, r7
 8000efe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f0a:	fb00 f808 	mul.w	r8, r0, r8
 8000f0e:	45b8      	cmp	r8, r7
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x24a>
 8000f12:	19e7      	adds	r7, r4, r7
 8000f14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f18:	d22e      	bcs.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1a:	45b8      	cmp	r8, r7
 8000f1c:	d92c      	bls.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	4427      	add	r7, r4
 8000f22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f26:	eba7 0708 	sub.w	r7, r7, r8
 8000f2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2e:	454f      	cmp	r7, r9
 8000f30:	46c6      	mov	lr, r8
 8000f32:	4649      	mov	r1, r9
 8000f34:	d31a      	bcc.n	8000f6c <__udivmoddi4+0x294>
 8000f36:	d017      	beq.n	8000f68 <__udivmoddi4+0x290>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x27a>
 8000f3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f46:	40f2      	lsrs	r2, r6
 8000f48:	ea4c 0202 	orr.w	r2, ip, r2
 8000f4c:	40f7      	lsrs	r7, r6
 8000f4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f52:	2600      	movs	r6, #0
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e70b      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6fd      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f68:	4543      	cmp	r3, r8
 8000f6a:	d2e5      	bcs.n	8000f38 <__udivmoddi4+0x260>
 8000f6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f70:	eb69 0104 	sbc.w	r1, r9, r4
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7df      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e7d2      	b.n	8000f22 <__udivmoddi4+0x24a>
 8000f7c:	4660      	mov	r0, ip
 8000f7e:	e78d      	b.n	8000e9c <__udivmoddi4+0x1c4>
 8000f80:	4681      	mov	r9, r0
 8000f82:	e7b9      	b.n	8000ef8 <__udivmoddi4+0x220>
 8000f84:	4666      	mov	r6, ip
 8000f86:	e775      	b.n	8000e74 <__udivmoddi4+0x19c>
 8000f88:	4630      	mov	r0, r6
 8000f8a:	e74a      	b.n	8000e22 <__udivmoddi4+0x14a>
 8000f8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f90:	4439      	add	r1, r7
 8000f92:	e713      	b.n	8000dbc <__udivmoddi4+0xe4>
 8000f94:	3802      	subs	r0, #2
 8000f96:	443c      	add	r4, r7
 8000f98:	e724      	b.n	8000de4 <__udivmoddi4+0x10c>
 8000f9a:	bf00      	nop

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <initFSMButton>:
static uint16_t number_port ;
static GPIO_TypeDef *GPIO_sel ;
static uint32_t tickstart = 0 ;


void initFSMButton(char p, uint8_t num_port){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	460a      	mov	r2, r1
 8000faa:	71fb      	strb	r3, [r7, #7]
 8000fac:	4613      	mov	r3, r2
 8000fae:	71bb      	strb	r3, [r7, #6]
	button_state = BUTTON_UP ;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <initFSMButton+0x2c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
	selectPortButton(p, num_port) ;
 8000fb6:	79ba      	ldrb	r2, [r7, #6]
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f807 	bl	8000fd0 <selectPortButton>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000208 	.word	0x20000208

08000fd0 <selectPortButton>:
 *
 * @param p: letra de puerto seleccionado
 * @param num_port: numero de puerto seleccionado
 *
 */
static void selectPortButton(char p, uint8_t num_port){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b092      	sub	sp, #72	; 0x48
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	460a      	mov	r2, r1
 8000fda:	71fb      	strb	r3, [r7, #7]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	71bb      	strb	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Pin = selectGPIOport(num_port);
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f97c 	bl	80012f8 <selectGPIOport>
 8001000:	4603      	mov	r3, r0
 8001002:	637b      	str	r3, [r7, #52]	; 0x34
	number_port = GPIO_InitStruct.Pin ;
 8001004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001006:	b29a      	uxth	r2, r3
 8001008:	4bad      	ldr	r3, [pc, #692]	; (80012c0 <selectPortButton+0x2f0>)
 800100a:	801a      	strh	r2, [r3, #0]

	switch(p){
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	3b41      	subs	r3, #65	; 0x41
 8001010:	2b2a      	cmp	r3, #42	; 0x2a
 8001012:	f200 8150 	bhi.w	80012b6 <selectPortButton+0x2e6>
 8001016:	a201      	add	r2, pc, #4	; (adr r2, 800101c <selectPortButton+0x4c>)
 8001018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101c:	080010c9 	.word	0x080010c9
 8001020:	080010f9 	.word	0x080010f9
 8001024:	0800112d 	.word	0x0800112d
 8001028:	0800115d 	.word	0x0800115d
 800102c:	08001191 	.word	0x08001191
 8001030:	080011bb 	.word	0x080011bb
 8001034:	080011e5 	.word	0x080011e5
 8001038:	0800120f 	.word	0x0800120f
 800103c:	08001239 	.word	0x08001239
 8001040:	08001263 	.word	0x08001263
 8001044:	0800128d 	.word	0x0800128d
 8001048:	080012b7 	.word	0x080012b7
 800104c:	080012b7 	.word	0x080012b7
 8001050:	080012b7 	.word	0x080012b7
 8001054:	080012b7 	.word	0x080012b7
 8001058:	080012b7 	.word	0x080012b7
 800105c:	080012b7 	.word	0x080012b7
 8001060:	080012b7 	.word	0x080012b7
 8001064:	080012b7 	.word	0x080012b7
 8001068:	080012b7 	.word	0x080012b7
 800106c:	080012b7 	.word	0x080012b7
 8001070:	080012b7 	.word	0x080012b7
 8001074:	080012b7 	.word	0x080012b7
 8001078:	080012b7 	.word	0x080012b7
 800107c:	080012b7 	.word	0x080012b7
 8001080:	080012b7 	.word	0x080012b7
 8001084:	080012b7 	.word	0x080012b7
 8001088:	080012b7 	.word	0x080012b7
 800108c:	080012b7 	.word	0x080012b7
 8001090:	080012b7 	.word	0x080012b7
 8001094:	080012b7 	.word	0x080012b7
 8001098:	080012b7 	.word	0x080012b7
 800109c:	080010c9 	.word	0x080010c9
 80010a0:	080010f9 	.word	0x080010f9
 80010a4:	0800112d 	.word	0x0800112d
 80010a8:	0800115d 	.word	0x0800115d
 80010ac:	08001191 	.word	0x08001191
 80010b0:	080011bb 	.word	0x080011bb
 80010b4:	080011e5 	.word	0x080011e5
 80010b8:	0800120f 	.word	0x0800120f
 80010bc:	08001239 	.word	0x08001239
 80010c0:	08001263 	.word	0x08001263
 80010c4:	0800128d 	.word	0x0800128d
	case 'a':
	case 'A':
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	633b      	str	r3, [r7, #48]	; 0x30
 80010cc:	4b7d      	ldr	r3, [pc, #500]	; (80012c4 <selectPortButton+0x2f4>)
 80010ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d0:	4a7c      	ldr	r2, [pc, #496]	; (80012c4 <selectPortButton+0x2f4>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6313      	str	r3, [r2, #48]	; 0x30
 80010d8:	4b7a      	ldr	r3, [pc, #488]	; (80012c4 <selectPortButton+0x2f4>)
 80010da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	633b      	str	r3, [r7, #48]	; 0x30
 80010e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    	GPIO_sel = GPIOA ;
 80010e4:	4b78      	ldr	r3, [pc, #480]	; (80012c8 <selectPortButton+0x2f8>)
 80010e6:	4a79      	ldr	r2, [pc, #484]	; (80012cc <selectPortButton+0x2fc>)
 80010e8:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_Init(&GPIO_sel, &GPIO_InitStruct);
    	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010ee:	4619      	mov	r1, r3
 80010f0:	4876      	ldr	r0, [pc, #472]	; (80012cc <selectPortButton+0x2fc>)
 80010f2:	f001 f96f 	bl	80023d4 <HAL_GPIO_Init>

    	break ;
 80010f6:	e0df      	b.n	80012b8 <selectPortButton+0x2e8>
	case 'b':
	case 'B':
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80010f8:	2300      	movs	r3, #0
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010fc:	4b71      	ldr	r3, [pc, #452]	; (80012c4 <selectPortButton+0x2f4>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	4a70      	ldr	r2, [pc, #448]	; (80012c4 <selectPortButton+0x2f4>)
 8001102:	f043 0302 	orr.w	r3, r3, #2
 8001106:	6313      	str	r3, [r2, #48]	; 0x30
 8001108:	4b6e      	ldr	r3, [pc, #440]	; (80012c4 <selectPortButton+0x2f4>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		GPIO_sel = GPIOB ;
 8001114:	4b6c      	ldr	r3, [pc, #432]	; (80012c8 <selectPortButton+0x2f8>)
 8001116:	4a6e      	ldr	r2, [pc, #440]	; (80012d0 <selectPortButton+0x300>)
 8001118:	601a      	str	r2, [r3, #0]
		HAL_GPIO_Init(GPIO_sel, &GPIO_InitStruct);
 800111a:	4b6b      	ldr	r3, [pc, #428]	; (80012c8 <selectPortButton+0x2f8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f001 f955 	bl	80023d4 <HAL_GPIO_Init>

		break ;
 800112a:	e0c5      	b.n	80012b8 <selectPortButton+0x2e8>
	case 'c':
	case 'C':
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001130:	4b64      	ldr	r3, [pc, #400]	; (80012c4 <selectPortButton+0x2f4>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	4a63      	ldr	r2, [pc, #396]	; (80012c4 <selectPortButton+0x2f4>)
 8001136:	f043 0304 	orr.w	r3, r3, #4
 800113a:	6313      	str	r3, [r2, #48]	; 0x30
 800113c:	4b61      	ldr	r3, [pc, #388]	; (80012c4 <selectPortButton+0x2f4>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
 8001146:	6abb      	ldr	r3, [r7, #40]	; 0x28
		GPIO_sel = GPIOC ;
 8001148:	4b5f      	ldr	r3, [pc, #380]	; (80012c8 <selectPortButton+0x2f8>)
 800114a:	4a62      	ldr	r2, [pc, #392]	; (80012d4 <selectPortButton+0x304>)
 800114c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001152:	4619      	mov	r1, r3
 8001154:	485f      	ldr	r0, [pc, #380]	; (80012d4 <selectPortButton+0x304>)
 8001156:	f001 f93d 	bl	80023d4 <HAL_GPIO_Init>

		break ;
 800115a:	e0ad      	b.n	80012b8 <selectPortButton+0x2e8>
	case 'd':
	case 'D':
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800115c:	2300      	movs	r3, #0
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
 8001160:	4b58      	ldr	r3, [pc, #352]	; (80012c4 <selectPortButton+0x2f4>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001164:	4a57      	ldr	r2, [pc, #348]	; (80012c4 <selectPortButton+0x2f4>)
 8001166:	f043 0308 	orr.w	r3, r3, #8
 800116a:	6313      	str	r3, [r2, #48]	; 0x30
 800116c:	4b55      	ldr	r3, [pc, #340]	; (80012c4 <selectPortButton+0x2f4>)
 800116e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001170:	f003 0308 	and.w	r3, r3, #8
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		GPIO_sel = GPIOD ;
 8001178:	4b53      	ldr	r3, [pc, #332]	; (80012c8 <selectPortButton+0x2f8>)
 800117a:	4a57      	ldr	r2, [pc, #348]	; (80012d8 <selectPortButton+0x308>)
 800117c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_Init(GPIO_sel, &GPIO_InitStruct);
 800117e:	4b52      	ldr	r3, [pc, #328]	; (80012c8 <selectPortButton+0x2f8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f001 f923 	bl	80023d4 <HAL_GPIO_Init>

		break ;
 800118e:	e093      	b.n	80012b8 <selectPortButton+0x2e8>
	case 'e':
	case 'E':
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
 8001194:	4b4b      	ldr	r3, [pc, #300]	; (80012c4 <selectPortButton+0x2f4>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	4a4a      	ldr	r2, [pc, #296]	; (80012c4 <selectPortButton+0x2f4>)
 800119a:	f043 0310 	orr.w	r3, r3, #16
 800119e:	6313      	str	r3, [r2, #48]	; 0x30
 80011a0:	4b48      	ldr	r3, [pc, #288]	; (80012c4 <selectPortButton+0x2f4>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a4:	f003 0310 	and.w	r3, r3, #16
 80011a8:	623b      	str	r3, [r7, #32]
 80011aa:	6a3b      	ldr	r3, [r7, #32]
    	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011b0:	4619      	mov	r1, r3
 80011b2:	484a      	ldr	r0, [pc, #296]	; (80012dc <selectPortButton+0x30c>)
 80011b4:	f001 f90e 	bl	80023d4 <HAL_GPIO_Init>

		break ;
 80011b8:	e07e      	b.n	80012b8 <selectPortButton+0x2e8>
	case 'f':
	case 'F':
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
 80011be:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <selectPortButton+0x2f4>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a40      	ldr	r2, [pc, #256]	; (80012c4 <selectPortButton+0x2f4>)
 80011c4:	f043 0320 	orr.w	r3, r3, #32
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <selectPortButton+0x2f4>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0320 	and.w	r3, r3, #32
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	69fb      	ldr	r3, [r7, #28]
    	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011da:	4619      	mov	r1, r3
 80011dc:	4840      	ldr	r0, [pc, #256]	; (80012e0 <selectPortButton+0x310>)
 80011de:	f001 f8f9 	bl	80023d4 <HAL_GPIO_Init>

		break ;
 80011e2:	e069      	b.n	80012b8 <selectPortButton+0x2e8>
	case 'g':
	case 'G':
		__HAL_RCC_GPIOG_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
 80011e8:	4b36      	ldr	r3, [pc, #216]	; (80012c4 <selectPortButton+0x2f4>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	4a35      	ldr	r2, [pc, #212]	; (80012c4 <selectPortButton+0x2f4>)
 80011ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011f2:	6313      	str	r3, [r2, #48]	; 0x30
 80011f4:	4b33      	ldr	r3, [pc, #204]	; (80012c4 <selectPortButton+0x2f4>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011fc:	61bb      	str	r3, [r7, #24]
 80011fe:	69bb      	ldr	r3, [r7, #24]
    	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001200:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001204:	4619      	mov	r1, r3
 8001206:	4837      	ldr	r0, [pc, #220]	; (80012e4 <selectPortButton+0x314>)
 8001208:	f001 f8e4 	bl	80023d4 <HAL_GPIO_Init>

		break ;
 800120c:	e054      	b.n	80012b8 <selectPortButton+0x2e8>
	case 'h':
	case 'H':
		__HAL_RCC_GPIOH_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	4b2c      	ldr	r3, [pc, #176]	; (80012c4 <selectPortButton+0x2f4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a2b      	ldr	r2, [pc, #172]	; (80012c4 <selectPortButton+0x2f4>)
 8001218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <selectPortButton+0x2f4>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	697b      	ldr	r3, [r7, #20]
    	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800122a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800122e:	4619      	mov	r1, r3
 8001230:	482d      	ldr	r0, [pc, #180]	; (80012e8 <selectPortButton+0x318>)
 8001232:	f001 f8cf 	bl	80023d4 <HAL_GPIO_Init>

		break ;
 8001236:	e03f      	b.n	80012b8 <selectPortButton+0x2e8>
	case 'i':
	case 'I':
		__HAL_RCC_GPIOI_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <selectPortButton+0x2f4>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001240:	4a20      	ldr	r2, [pc, #128]	; (80012c4 <selectPortButton+0x2f4>)
 8001242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001246:	6313      	str	r3, [r2, #48]	; 0x30
 8001248:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <selectPortButton+0x2f4>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	693b      	ldr	r3, [r7, #16]
    	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001254:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001258:	4619      	mov	r1, r3
 800125a:	4824      	ldr	r0, [pc, #144]	; (80012ec <selectPortButton+0x31c>)
 800125c:	f001 f8ba 	bl	80023d4 <HAL_GPIO_Init>

		break ;
 8001260:	e02a      	b.n	80012b8 <selectPortButton+0x2e8>
	case 'j':
	case 'J':
		__HAL_RCC_GPIOJ_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <selectPortButton+0x2f4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a16      	ldr	r2, [pc, #88]	; (80012c4 <selectPortButton+0x2f4>)
 800126c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <selectPortButton+0x2f4>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    	HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800127e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001282:	4619      	mov	r1, r3
 8001284:	481a      	ldr	r0, [pc, #104]	; (80012f0 <selectPortButton+0x320>)
 8001286:	f001 f8a5 	bl	80023d4 <HAL_GPIO_Init>

		break ;
 800128a:	e015      	b.n	80012b8 <selectPortButton+0x2e8>
	case 'k':
	case 'K':
		__HAL_RCC_GPIOK_CLK_ENABLE();
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <selectPortButton+0x2f4>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <selectPortButton+0x2f4>)
 8001296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800129a:	6313      	str	r3, [r2, #48]	; 0x30
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <selectPortButton+0x2f4>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
    	HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80012a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012ac:	4619      	mov	r1, r3
 80012ae:	4811      	ldr	r0, [pc, #68]	; (80012f4 <selectPortButton+0x324>)
 80012b0:	f001 f890 	bl	80023d4 <HAL_GPIO_Init>

		break ;
 80012b4:	e000      	b.n	80012b8 <selectPortButton+0x2e8>
	default:
		//management of error
		break ;
 80012b6:	bf00      	nop
	}

}
 80012b8:	bf00      	nop
 80012ba:	3748      	adds	r7, #72	; 0x48
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	2000020a 	.word	0x2000020a
 80012c4:	40023800 	.word	0x40023800
 80012c8:	2000020c 	.word	0x2000020c
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020c00 	.word	0x40020c00
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40021400 	.word	0x40021400
 80012e4:	40021800 	.word	0x40021800
 80012e8:	40021c00 	.word	0x40021c00
 80012ec:	40022000 	.word	0x40022000
 80012f0:	40022400 	.word	0x40022400
 80012f4:	40022800 	.word	0x40022800

080012f8 <selectGPIOport>:

static uint32_t selectGPIOport(uint8_t numport){
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
	uint32_t responsePortNumber ;
	switch(numport){
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b0f      	cmp	r3, #15
 8001306:	d85b      	bhi.n	80013c0 <selectGPIOport+0xc8>
 8001308:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <selectGPIOport+0x18>)
 800130a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130e:	bf00      	nop
 8001310:	08001351 	.word	0x08001351
 8001314:	08001357 	.word	0x08001357
 8001318:	0800135d 	.word	0x0800135d
 800131c:	08001363 	.word	0x08001363
 8001320:	08001369 	.word	0x08001369
 8001324:	0800136f 	.word	0x0800136f
 8001328:	08001375 	.word	0x08001375
 800132c:	0800137b 	.word	0x0800137b
 8001330:	08001381 	.word	0x08001381
 8001334:	08001389 	.word	0x08001389
 8001338:	08001391 	.word	0x08001391
 800133c:	08001399 	.word	0x08001399
 8001340:	080013a1 	.word	0x080013a1
 8001344:	080013a9 	.word	0x080013a9
 8001348:	080013b1 	.word	0x080013b1
 800134c:	080013b9 	.word	0x080013b9
	case 0:
		responsePortNumber = GPIO_PIN_0 ;
 8001350:	2301      	movs	r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
		break ;
 8001354:	e038      	b.n	80013c8 <selectGPIOport+0xd0>
	case 1:
		responsePortNumber = GPIO_PIN_1 ;
 8001356:	2302      	movs	r3, #2
 8001358:	60fb      	str	r3, [r7, #12]
		break ;
 800135a:	e035      	b.n	80013c8 <selectGPIOport+0xd0>
	case 2:
		responsePortNumber = GPIO_PIN_2 ;
 800135c:	2304      	movs	r3, #4
 800135e:	60fb      	str	r3, [r7, #12]
		break ;
 8001360:	e032      	b.n	80013c8 <selectGPIOport+0xd0>
	case 3:
		responsePortNumber = GPIO_PIN_3 ;
 8001362:	2308      	movs	r3, #8
 8001364:	60fb      	str	r3, [r7, #12]
		break ;
 8001366:	e02f      	b.n	80013c8 <selectGPIOport+0xd0>
	case 4:
		responsePortNumber = GPIO_PIN_4 ;
 8001368:	2310      	movs	r3, #16
 800136a:	60fb      	str	r3, [r7, #12]
		break ;
 800136c:	e02c      	b.n	80013c8 <selectGPIOport+0xd0>
	case 5:
		responsePortNumber = GPIO_PIN_5 ;
 800136e:	2320      	movs	r3, #32
 8001370:	60fb      	str	r3, [r7, #12]
		break ;
 8001372:	e029      	b.n	80013c8 <selectGPIOport+0xd0>
	case 6:
		responsePortNumber = GPIO_PIN_6 ;
 8001374:	2340      	movs	r3, #64	; 0x40
 8001376:	60fb      	str	r3, [r7, #12]
		break ;
 8001378:	e026      	b.n	80013c8 <selectGPIOport+0xd0>
	case 7:
		responsePortNumber = GPIO_PIN_7 ;
 800137a:	2380      	movs	r3, #128	; 0x80
 800137c:	60fb      	str	r3, [r7, #12]
		break ;
 800137e:	e023      	b.n	80013c8 <selectGPIOport+0xd0>
	case 8:
		responsePortNumber = GPIO_PIN_8 ;
 8001380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001384:	60fb      	str	r3, [r7, #12]
		break ;
 8001386:	e01f      	b.n	80013c8 <selectGPIOport+0xd0>
	case 9:
		responsePortNumber = GPIO_PIN_9 ;
 8001388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800138c:	60fb      	str	r3, [r7, #12]
		break ;
 800138e:	e01b      	b.n	80013c8 <selectGPIOport+0xd0>
	case 10:
		responsePortNumber = GPIO_PIN_10 ;
 8001390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001394:	60fb      	str	r3, [r7, #12]
		break ;
 8001396:	e017      	b.n	80013c8 <selectGPIOport+0xd0>
	case 11:
		responsePortNumber = GPIO_PIN_11 ;
 8001398:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800139c:	60fb      	str	r3, [r7, #12]
		break ;
 800139e:	e013      	b.n	80013c8 <selectGPIOport+0xd0>
	case 12:
		responsePortNumber = GPIO_PIN_12 ;
 80013a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a4:	60fb      	str	r3, [r7, #12]
		break ;
 80013a6:	e00f      	b.n	80013c8 <selectGPIOport+0xd0>
	case 13:
		responsePortNumber = GPIO_PIN_13;
 80013a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ac:	60fb      	str	r3, [r7, #12]
		break ;
 80013ae:	e00b      	b.n	80013c8 <selectGPIOport+0xd0>
	case 14:
		responsePortNumber = GPIO_PIN_14 ;
 80013b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013b4:	60fb      	str	r3, [r7, #12]
		break ;
 80013b6:	e007      	b.n	80013c8 <selectGPIOport+0xd0>
	case 15:
		responsePortNumber = GPIO_PIN_15 ;
 80013b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013bc:	60fb      	str	r3, [r7, #12]
		break ;
 80013be:	e003      	b.n	80013c8 <selectGPIOport+0xd0>
	default:
		responsePortNumber = -1 ;
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
 80013c4:	60fb      	str	r3, [r7, #12]
		break ;
 80013c6:	bf00      	nop
	}
	return responsePortNumber ;
 80013c8:	68fb      	ldr	r3, [r7, #12]

}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop

080013d8 <debounceFSM_update>:
 * Se implementa una máquina de estados de la siguientes estados
 * Estado inicial: BUTTON_UP
 * BUTTON_UP <-> BUTTON_FALLING <->BUTTON_DOWN <-> BUTTON_RAISING ->BUTTON_UP
 *
 */
void debounceFSM_update(){
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	// Devuelve 0 sin presionar, 1  con boton presionado


	switch(button_state)
 80013dc:	4b3a      	ldr	r3, [pc, #232]	; (80014c8 <debounceFSM_update+0xf0>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d865      	bhi.n	80014b0 <debounceFSM_update+0xd8>
 80013e4:	a201      	add	r2, pc, #4	; (adr r2, 80013ec <debounceFSM_update+0x14>)
 80013e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ea:	bf00      	nop
 80013ec:	080013fd 	.word	0x080013fd
 80013f0:	08001425 	.word	0x08001425
 80013f4:	0800145d 	.word	0x0800145d
 80013f8:	08001481 	.word	0x08001481
	{
		case BUTTON_UP:


			if (HAL_GPIO_ReadPin(GPIO_sel,number_port) ==   GPIO_PIN_RESET )
 80013fc:	4b33      	ldr	r3, [pc, #204]	; (80014cc <debounceFSM_update+0xf4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a33      	ldr	r2, [pc, #204]	; (80014d0 <debounceFSM_update+0xf8>)
 8001402:	8812      	ldrh	r2, [r2, #0]
 8001404:	4611      	mov	r1, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f001 f990 	bl	800272c <HAL_GPIO_ReadPin>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d152      	bne.n	80014b8 <debounceFSM_update+0xe0>
			{
				button_state = BUTTON_FALLING ;
 8001412:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <debounceFSM_update+0xf0>)
 8001414:	2201      	movs	r2, #1
 8001416:	701a      	strb	r2, [r3, #0]
				tickstart = HAL_GetTick() ;
 8001418:	f000 fec6 	bl	80021a8 <HAL_GetTick>
 800141c:	4603      	mov	r3, r0
 800141e:	4a2d      	ldr	r2, [pc, #180]	; (80014d4 <debounceFSM_update+0xfc>)
 8001420:	6013      	str	r3, [r2, #0]
			}
			break ;
 8001422:	e049      	b.n	80014b8 <debounceFSM_update+0xe0>
		case BUTTON_FALLING:
			//espera 40 ms y lee el estado del boton
			if (HAL_GetTick() - tickstart >TIME_FALLING_READ)
 8001424:	f000 fec0 	bl	80021a8 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <debounceFSM_update+0xfc>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b28      	cmp	r3, #40	; 0x28
 8001432:	d943      	bls.n	80014bc <debounceFSM_update+0xe4>
			{
				//GPIO_sel ;
				//HAL_GPIO_ReadPin()
				if (HAL_GPIO_ReadPin(GPIOA,number_port) ==   GPIO_PIN_RESET )
 8001434:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <debounceFSM_update+0xf8>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	4827      	ldr	r0, [pc, #156]	; (80014d8 <debounceFSM_update+0x100>)
 800143c:	f001 f976 	bl	800272c <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d106      	bne.n	8001454 <debounceFSM_update+0x7c>
				{
					button_state = BUTTON_DOWN; // SE PRESIONO EL BOTON
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <debounceFSM_update+0xf0>)
 8001448:	2202      	movs	r2, #2
 800144a:	701a      	strb	r2, [r3, #0]
					is_press_button = true ;
 800144c:	4b23      	ldr	r3, [pc, #140]	; (80014dc <debounceFSM_update+0x104>)
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
					// ACCIÓN A REALIZAR !
				}else{
					button_state = BUTTON_UP ;
				}
			}
			break ;
 8001452:	e033      	b.n	80014bc <debounceFSM_update+0xe4>
					button_state = BUTTON_UP ;
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <debounceFSM_update+0xf0>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
			break ;
 800145a:	e02f      	b.n	80014bc <debounceFSM_update+0xe4>
		case BUTTON_DOWN:
			if (HAL_GPIO_ReadPin(GPIOA,number_port) ==   GPIO_PIN_SET )
 800145c:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <debounceFSM_update+0xf8>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	481d      	ldr	r0, [pc, #116]	; (80014d8 <debounceFSM_update+0x100>)
 8001464:	f001 f962 	bl	800272c <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
 800146a:	2b01      	cmp	r3, #1
 800146c:	d128      	bne.n	80014c0 <debounceFSM_update+0xe8>
			{

				button_state = BUTTON_RAISING ;
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <debounceFSM_update+0xf0>)
 8001470:	2203      	movs	r2, #3
 8001472:	701a      	strb	r2, [r3, #0]
				tickstart = HAL_GetTick() ;
 8001474:	f000 fe98 	bl	80021a8 <HAL_GetTick>
 8001478:	4603      	mov	r3, r0
 800147a:	4a16      	ldr	r2, [pc, #88]	; (80014d4 <debounceFSM_update+0xfc>)
 800147c:	6013      	str	r3, [r2, #0]
			}
			break ;
 800147e:	e01f      	b.n	80014c0 <debounceFSM_update+0xe8>
		case BUTTON_RAISING:
			if (HAL_GetTick() - tickstart >TIME_FALLING_READ){
 8001480:	f000 fe92 	bl	80021a8 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <debounceFSM_update+0xfc>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b28      	cmp	r3, #40	; 0x28
 800148e:	d90f      	bls.n	80014b0 <debounceFSM_update+0xd8>
				if (HAL_GPIO_ReadPin(GPIOA,number_port) ==   GPIO_PIN_SET ){
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <debounceFSM_update+0xf8>)
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	4810      	ldr	r0, [pc, #64]	; (80014d8 <debounceFSM_update+0x100>)
 8001498:	f001 f948 	bl	800272c <HAL_GPIO_ReadPin>
 800149c:	4603      	mov	r3, r0
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d103      	bne.n	80014aa <debounceFSM_update+0xd2>
					button_state = BUTTON_UP ;
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <debounceFSM_update+0xf0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e002      	b.n	80014b0 <debounceFSM_update+0xd8>
				}else {
					button_state = BUTTON_DOWN ;
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <debounceFSM_update+0xf0>)
 80014ac:	2202      	movs	r2, #2
 80014ae:	701a      	strb	r2, [r3, #0]
				}
			}
		default:
			button_state = BUTTON_UP ; // ESTADO DE INICIO !
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <debounceFSM_update+0xf0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
		break ;
 80014b6:	e004      	b.n	80014c2 <debounceFSM_update+0xea>
			break ;
 80014b8:	bf00      	nop
 80014ba:	e002      	b.n	80014c2 <debounceFSM_update+0xea>
			break ;
 80014bc:	bf00      	nop
 80014be:	e000      	b.n	80014c2 <debounceFSM_update+0xea>
			break ;
 80014c0:	bf00      	nop

	}

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000208 	.word	0x20000208
 80014cc:	2000020c 	.word	0x2000020c
 80014d0:	2000020a 	.word	0x2000020a
 80014d4:	20000210 	.word	0x20000210
 80014d8:	40020000 	.word	0x40020000
 80014dc:	20000209 	.word	0x20000209

080014e0 <getPressButton>:



bool getPressButton(void ){
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
	bool value_press = is_press_button ;
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <getPressButton+0x28>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	71fb      	strb	r3, [r7, #7]
	if (value_press == true){
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d002      	beq.n	80014f8 <getPressButton+0x18>
		is_press_button = false ;
 80014f2:	4b05      	ldr	r3, [pc, #20]	; (8001508 <getPressButton+0x28>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
	}

	return value_press ;
 80014f8:	79fb      	ldrb	r3, [r7, #7]



}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000209 	.word	0x20000209

0800150c <initFSM>:
 SENDSERIALST
}handle_FSM ;

static handle_FSM FSM ; //FIXME: cambiar nombre por un nombre mas representativo

void initFSM(void){
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	FSM = RTCCONFIG ;
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <initFSM+0x14>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	20000214 	.word	0x20000214

08001524 <FSM_loop>:


void FSM_loop(){
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	switch(FSM){
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <FSM_loop+0x64>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d01d      	beq.n	800156c <FSM_loop+0x48>
 8001530:	2b02      	cmp	r3, #2
 8001532:	dc21      	bgt.n	8001578 <FSM_loop+0x54>
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <FSM_loop+0x1a>
 8001538:	2b01      	cmp	r3, #1
 800153a:	d00c      	beq.n	8001556 <FSM_loop+0x32>
 800153c:	e01c      	b.n	8001578 <FSM_loop+0x54>
	case RTCCONFIG:
		FSM = WAITBUTTON ;
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <FSM_loop+0x64>)
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
		rtcInit() ;
 8001544:	f000 f822 	bl	800158c <rtcInit>
		initFSMButton('a', 15) ;
 8001548:	210f      	movs	r1, #15
 800154a:	2061      	movs	r0, #97	; 0x61
 800154c:	f7ff fd28 	bl	8000fa0 <initFSMButton>
		sendSiderealTime() ;
 8001550:	f000 fbd0 	bl	8001cf4 <sendSiderealTime>
		break ;
 8001554:	e015      	b.n	8001582 <FSM_loop+0x5e>
	case WAITBUTTON:
		//uartSendString("updateWAIT\r\n") ;

		debounceFSM_update() ;
 8001556:	f7ff ff3f 	bl	80013d8 <debounceFSM_update>
		if (getPressButton() == true){
 800155a:	f7ff ffc1 	bl	80014e0 <getPressButton>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00d      	beq.n	8001580 <FSM_loop+0x5c>
			FSM = SENDSERIALST ;
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <FSM_loop+0x64>)
 8001566:	2202      	movs	r2, #2
 8001568:	701a      	strb	r2, [r3, #0]

		}
		break ;
 800156a:	e009      	b.n	8001580 <FSM_loop+0x5c>
	case SENDSERIALST:
		sendSiderealTime() ;
 800156c:	f000 fbc2 	bl	8001cf4 <sendSiderealTime>
		// CODE FOR SEND UART
		FSM = WAITBUTTON ;
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <FSM_loop+0x64>)
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
		break ;
 8001576:	e004      	b.n	8001582 <FSM_loop+0x5e>
	default:

		FSM = RTCCONFIG ;
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <FSM_loop+0x64>)
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
		break  ;
 800157e:	e000      	b.n	8001582 <FSM_loop+0x5e>
		break ;
 8001580:	bf00      	nop
	}

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000214 	.word	0x20000214

0800158c <rtcInit>:

static fecha_t getDateTime() ;
static void setDayAndHour(void) ;

void rtcInit()
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
	BSP_LED_Init(LED1) ;
 8001592:	2000      	movs	r0, #0
 8001594:	f000 fbfa 	bl	8001d8c <BSP_LED_Init>
	BSP_LED_Init(LED2) ;
 8001598:	2001      	movs	r0, #1
 800159a:	f000 fbf7 	bl	8001d8c <BSP_LED_Init>
	// HABILITA EL DOMINIO DE BACKUP PARA QUE EL SISTEMA RTC PUEDA SER
	// USADO.
	__HAL_RCC_PWR_CLK_ENABLE() ;
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	4b22      	ldr	r3, [pc, #136]	; (800162c <rtcInit+0xa0>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	4a21      	ldr	r2, [pc, #132]	; (800162c <rtcInit+0xa0>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ac:	6413      	str	r3, [r2, #64]	; 0x40
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <rtcInit+0xa0>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
	HAL_PWR_EnableBkUpAccess() ;
 80015ba:	f001 f95d 	bl	8002878 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE) ;
 80015be:	4b1b      	ldr	r3, [pc, #108]	; (800162c <rtcInit+0xa0>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	4a1a      	ldr	r2, [pc, #104]	; (800162c <rtcInit+0xa0>)
 80015c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80015c8:	6093      	str	r3, [r2, #8]
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <rtcInit+0xa0>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ce:	4a17      	ldr	r2, [pc, #92]	; (800162c <rtcInit+0xa0>)
 80015d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d4:	6713      	str	r3, [r2, #112]	; 0x70
	__HAL_RCC_RTC_ENABLE();
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <rtcInit+0xa4>)
 80015d8:	2201      	movs	r2, #1
 80015da:	601a      	str	r2, [r3, #0]
	rtc.Instance = RTC;
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <rtcInit+0xa8>)
 80015de:	4a16      	ldr	r2, [pc, #88]	; (8001638 <rtcInit+0xac>)
 80015e0:	601a      	str	r2, [r3, #0]
	rtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <rtcInit+0xa8>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	605a      	str	r2, [r3, #4]
	rtc.Init.AsynchPrediv = 127;
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <rtcInit+0xa8>)
 80015ea:	227f      	movs	r2, #127	; 0x7f
 80015ec:	609a      	str	r2, [r3, #8]
	rtc.Init.SynchPrediv = 255;
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <rtcInit+0xa8>)
 80015f0:	22ff      	movs	r2, #255	; 0xff
 80015f2:	60da      	str	r2, [r3, #12]
	rtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <rtcInit+0xa8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	611a      	str	r2, [r3, #16]
	rtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <rtcInit+0xa8>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	615a      	str	r2, [r3, #20]
	rtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <rtcInit+0xa8>)
 8001602:	2200      	movs	r2, #0
 8001604:	619a      	str	r2, [r3, #24]
	// verifica si el RTC se inicia correctamente
	if (HAL_RTC_Init(&rtc) != HAL_OK)
 8001606:	480b      	ldr	r0, [pc, #44]	; (8001634 <rtcInit+0xa8>)
 8001608:	f001 fe0e 	bl	8003228 <HAL_RTC_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d002      	beq.n	8001618 <rtcInit+0x8c>
	{
		BSP_LED_On(LED2) ;
 8001612:	2001      	movs	r0, #1
 8001614:	f000 fc0a 	bl	8001e2c <BSP_LED_On>

	}

	setDayAndHour() ;
 8001618:	f000 f810 	bl	800163c <setDayAndHour>
	BSP_LED_On(LED1) ;
 800161c:	2000      	movs	r0, #0
 800161e:	f000 fc05 	bl	8001e2c <BSP_LED_On>

}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	42470e3c 	.word	0x42470e3c
 8001634:	20000218 	.word	0x20000218
 8001638:	40002800 	.word	0x40002800

0800163c <setDayAndHour>:
 * Se usan las macros __TIME__ y __DATE__
 *
 *
 */
static void setDayAndHour(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0

	  RTC_TimeTypeDef sTime = {0};
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 8001650:	2300      	movs	r3, #0
 8001652:	603b      	str	r3, [r7, #0]
	  // Se obtiene la hora de compilación y se carga como valor inicial en el RTC.
	  // Dado que __TIME__[0] ... son variables de tipo char, se le resta 0x30 para obtener
	  // el entero correspondiente.
	  sTime.Hours = (__TIME__[0] - 0x30)*10 + __TIME__[1] - 0x30 ;
 8001654:	2331      	movs	r3, #49	; 0x31
 8001656:	3b30      	subs	r3, #48	; 0x30
 8001658:	b2db      	uxtb	r3, r3
 800165a:	461a      	mov	r2, r3
 800165c:	0092      	lsls	r2, r2, #2
 800165e:	4413      	add	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2238      	movs	r2, #56	; 0x38
 8001666:	4413      	add	r3, r2
 8001668:	b2db      	uxtb	r3, r3
 800166a:	3b30      	subs	r3, #48	; 0x30
 800166c:	b2db      	uxtb	r3, r3
 800166e:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = (__TIME__[3] - 0x30)*10+ __TIME__[4] - 0x30 ;
 8001670:	2333      	movs	r3, #51	; 0x33
 8001672:	3b30      	subs	r3, #48	; 0x30
 8001674:	b2db      	uxtb	r3, r3
 8001676:	461a      	mov	r2, r3
 8001678:	0092      	lsls	r2, r2, #2
 800167a:	4413      	add	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2234      	movs	r2, #52	; 0x34
 8001682:	4413      	add	r3, r2
 8001684:	b2db      	uxtb	r3, r3
 8001686:	3b30      	subs	r3, #48	; 0x30
 8001688:	b2db      	uxtb	r3, r3
 800168a:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 10;
 800168c:	230a      	movs	r3, #10
 800168e:	71bb      	strb	r3, [r7, #6]
	  sTime.TimeFormat = RTC_HOURFORMAT_24;
 8001690:	2300      	movs	r3, #0
 8001692:	71fb      	strb	r3, [r7, #7]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_SET; // DEPRECATED ! ??
 8001698:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800169c:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&rtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	2200      	movs	r2, #0
 80016a2:	4619      	mov	r1, r3
 80016a4:	480b      	ldr	r0, [pc, #44]	; (80016d4 <setDayAndHour+0x98>)
 80016a6:	f001 fe5a 	bl	800335e <HAL_RTC_SetTime>
	  {
	     //uartSendString("\r\nerror set Time\r\n") ;
	   }
	   // FECHA EN FORMATO J2000: (1° de enero del año 2000, 12:00:00 GMT)
	   sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80016aa:	2301      	movs	r3, #1
 80016ac:	703b      	strb	r3, [r7, #0]
	   sDate.Month = RTC_MONTH_JANUARY;
 80016ae:	2301      	movs	r3, #1
 80016b0:	707b      	strb	r3, [r7, #1]
	   sDate.Date = 1;
 80016b2:	2301      	movs	r3, #1
 80016b4:	70bb      	strb	r3, [r7, #2]
	   sDate.Year = 50;
 80016b6:	2332      	movs	r3, #50	; 0x32
 80016b8:	70fb      	strb	r3, [r7, #3]

	   if (HAL_RTC_SetDate(&rtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80016ba:	463b      	mov	r3, r7
 80016bc:	2200      	movs	r2, #0
 80016be:	4619      	mov	r1, r3
 80016c0:	4804      	ldr	r0, [pc, #16]	; (80016d4 <setDayAndHour+0x98>)
 80016c2:	f001 ff67 	bl	8003594 <HAL_RTC_SetDate>
	   {
	   }
	   /** Enable the reference Clock input
	   */
	   if (HAL_RTCEx_SetRefClock(&rtc) != HAL_OK)
 80016c6:	4803      	ldr	r0, [pc, #12]	; (80016d4 <setDayAndHour+0x98>)
 80016c8:	f002 f8ea 	bl	80038a0 <HAL_RTCEx_SetRefClock>
	   }
	   /* USER CODE BEGIN RTC_Init 2 */
	   // HAL_RTCEx_BKUPWrite(&rtc,  RTC_BKP_DR1, 0x32F2); // HABILITA EL REGISTRO DE GUARDADO
	   /* USER CODE END RTC_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000218 	.word	0x20000218

080016d8 <computeSiderealTime>:
 *
 * @param sidereal_time: Parámetro donde se va a cargar la hora siderea calculada. En caso de error
 * 		  al realizar el cálculo se carga un parámetro NULL
 * @return Retorna si se ha realizado o no correctamente el cálculo de la hora siderea
 */
uint8_t computeSiderealTime(sidereal_t *sidereal_time){
 80016d8:	b5b0      	push	{r4, r5, r7, lr}
 80016da:	ed2d 8b02 	vpush	{d8}
 80016de:	b092      	sub	sp, #72	; 0x48
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	fecha_t sd_time = getDateTime() ;
 80016e4:	f107 0320 	add.w	r3, r7, #32
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 fa8d 	bl	8001c08 <getDateTime>
	uint8_t error ;
	uint8_t hs,ms,ss ;
	char debug_values [20] ;
	const float multiplicador_term_negativo = (7.0/4.0) ;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <computeSiderealTime+0x38>)
 80016f0:	643b      	str	r3, [r7, #64]	; 0x40
	// j0 calcula el número de dias julianos
	float j0,fract_day,sid_time,jul_cent ; // dia juliano hasta las 12:00:00. JD fraccion de dia para completar el día
	float negative_term ;
	// Error de lectura en día o fecha en el RTC
	if (sd_time.error == ERROR_RTC_DATE ||  sd_time.error == ERROR_RTC_TIME)
 80016f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d003      	beq.n	8001702 <computeSiderealTime+0x2a>
 80016fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d108      	bne.n	8001714 <computeSiderealTime+0x3c>
	{
		sidereal_time = NULL  ;
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
		error = ERROR_SIDEREAL ;
 8001706:	23ff      	movs	r3, #255	; 0xff
 8001708:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800170c:	e271      	b.n	8001bf2 <computeSiderealTime+0x51a>
 800170e:	bf00      	nop
 8001710:	3fe00000 	.word	0x3fe00000
	}else{
		//uartSendString(debug_values) ;
		sd_time.year = 2004 ; sd_time.day = 3 ;sd_time.month = 3 ;
 8001714:	f240 73d4 	movw	r3, #2004	; 0x7d4
 8001718:	843b      	strh	r3, [r7, #32]
 800171a:	2303      	movs	r3, #3
 800171c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001720:	2303      	movs	r3, #3
 8001722:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		sd_time.hour = 4 ; sd_time.minute=30 ; sd_time.second = 0 ;
 8001726:	2304      	movs	r3, #4
 8001728:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800172c:	231e      	movs	r3, #30
 800172e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001732:	2300      	movs	r3, #0
 8001734:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		j0 = K1*sd_time.year + (float) (int )(K2*(float)sd_time.month/K3)
 8001738:	8c3b      	ldrh	r3, [r7, #32]
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe ff02 	bl	8000544 <__aeabi_i2d>
 8001740:	f20f 4300 	addw	r3, pc, #1024	; 0x400
 8001744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001748:	f7fe ff66 	bl	8000618 <__aeabi_dmul>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4614      	mov	r4, r2
 8001752:	461d      	mov	r5, r3
 8001754:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001758:	ee07 3a90 	vmov	s15, r3
 800175c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001760:	ee17 0a90 	vmov	r0, s15
 8001764:	f7fe ff00 	bl	8000568 <__aeabi_f2d>
 8001768:	a3f8      	add	r3, pc, #992	; (adr r3, 8001b4c <computeSiderealTime+0x474>)
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	f7fe ff53 	bl	8000618 <__aeabi_dmul>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	4be8      	ldr	r3, [pc, #928]	; (8001b20 <computeSiderealTime+0x448>)
 8001780:	f7ff f874 	bl	800086c <__aeabi_ddiv>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	f7ff f9f4 	bl	8000b78 <__aeabi_d2iz>
 8001790:	ee07 0a90 	vmov	s15, r0
 8001794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001798:	ee17 0a90 	vmov	r0, s15
 800179c:	f7fe fee4 	bl	8000568 <__aeabi_f2d>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4620      	mov	r0, r4
 80017a6:	4629      	mov	r1, r5
 80017a8:	f7fe fd80 	bl	80002ac <__adddf3>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4614      	mov	r4, r2
 80017b2:	461d      	mov	r5, r3
			+ (float) sd_time.day +  K4 ;
 80017b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017b8:	ee07 3a90 	vmov	s15, r3
 80017bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017c0:	ee17 0a90 	vmov	r0, s15
 80017c4:	f7fe fed0 	bl	8000568 <__aeabi_f2d>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4620      	mov	r0, r4
 80017ce:	4629      	mov	r1, r5
 80017d0:	f7fe fd6c 	bl	80002ac <__adddf3>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	a3be      	add	r3, pc, #760	; (adr r3, 8001ad8 <computeSiderealTime+0x400>)
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	f7fe fd63 	bl	80002ac <__adddf3>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
		j0 = K1*sd_time.year + (float) (int )(K2*(float)sd_time.month/K3)
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	f7ff fa0b 	bl	8000c08 <__aeabi_d2f>
 80017f2:	4603      	mov	r3, r0
 80017f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		negative_term =(float) (int) (multiplicador_term_negativo *((float )sd_time.year
 80017f6:	8c3b      	ldrh	r3, [r7, #32]
 80017f8:	ee07 3a90 	vmov	s15, r3
 80017fc:	eeb8 8a67 	vcvt.f32.u32	s16, s15
					   + (int)(float)((sd_time.month+9.0)/12.0))) ;
 8001800:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fe9d 	bl	8000544 <__aeabi_i2d>
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	4bc4      	ldr	r3, [pc, #784]	; (8001b20 <computeSiderealTime+0x448>)
 8001810:	f7fe fd4c 	bl	80002ac <__adddf3>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	4bc0      	ldr	r3, [pc, #768]	; (8001b24 <computeSiderealTime+0x44c>)
 8001822:	f7ff f823 	bl	800086c <__aeabi_ddiv>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f9eb 	bl	8000c08 <__aeabi_d2f>
 8001832:	ee07 0a90 	vmov	s15, r0
 8001836:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800183a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183e:	ee38 7a27 	vadd.f32	s14, s16, s15
		negative_term =(float) (int) (multiplicador_term_negativo *((float )sd_time.year
 8001842:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800184a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800184e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001852:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		j0 = j0-negative_term ;
 8001856:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800185a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800185e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001862:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		fract_day = (float) sd_time.hour +  (float)sd_time.minute/60.0
 8001866:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800186a:	ee07 3a90 	vmov	s15, r3
 800186e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001872:	ee17 0a90 	vmov	r0, s15
 8001876:	f7fe fe77 	bl	8000568 <__aeabi_f2d>
 800187a:	4604      	mov	r4, r0
 800187c:	460d      	mov	r5, r1
 800187e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001882:	ee07 3a90 	vmov	s15, r3
 8001886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800188a:	ee17 0a90 	vmov	r0, s15
 800188e:	f7fe fe6b 	bl	8000568 <__aeabi_f2d>
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	4ba4      	ldr	r3, [pc, #656]	; (8001b28 <computeSiderealTime+0x450>)
 8001898:	f7fe ffe8 	bl	800086c <__aeabi_ddiv>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4620      	mov	r0, r4
 80018a2:	4629      	mov	r1, r5
 80018a4:	f7fe fd02 	bl	80002ac <__adddf3>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4614      	mov	r4, r2
 80018ae:	461d      	mov	r5, r3
					+ (float)sd_time.second/3600.0 ;
 80018b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018b4:	ee07 3a90 	vmov	s15, r3
 80018b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018bc:	ee17 0a90 	vmov	r0, s15
 80018c0:	f7fe fe52 	bl	8000568 <__aeabi_f2d>
 80018c4:	a386      	add	r3, pc, #536	; (adr r3, 8001ae0 <computeSiderealTime+0x408>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	f7fe ffcf 	bl	800086c <__aeabi_ddiv>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4620      	mov	r0, r4
 80018d4:	4629      	mov	r1, r5
 80018d6:	f7fe fce9 	bl	80002ac <__adddf3>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
		fract_day = (float) sd_time.hour +  (float)sd_time.minute/60.0
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7ff f991 	bl	8000c08 <__aeabi_d2f>
 80018e6:	4603      	mov	r3, r0
 80018e8:	637b      	str	r3, [r7, #52]	; 0x34
		// calculo de centurias julianas
		jul_cent = (j0 - 2451545)/36525 ;
 80018ea:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80018ee:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8001b2c <computeSiderealTime+0x454>
 80018f2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80018f6:	eddf 6a8e 	vldr	s13, [pc, #568]	; 8001b30 <computeSiderealTime+0x458>
 80018fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018fe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		sid_time = KS1 + KS2 * jul_cent + KS3 * pow(jul_cent,2) + KS4 * pow(jul_cent,3) ;
 8001902:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001904:	f7fe fe30 	bl	8000568 <__aeabi_f2d>
 8001908:	a377      	add	r3, pc, #476	; (adr r3, 8001ae8 <computeSiderealTime+0x410>)
 800190a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190e:	f7fe fe83 	bl	8000618 <__aeabi_dmul>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	a375      	add	r3, pc, #468	; (adr r3, 8001af0 <computeSiderealTime+0x418>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	f7fe fcc4 	bl	80002ac <__adddf3>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4614      	mov	r4, r2
 800192a:	461d      	mov	r5, r3
 800192c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800192e:	f7fe fe1b 	bl	8000568 <__aeabi_f2d>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	ed9f 1b70 	vldr	d1, [pc, #448]	; 8001af8 <computeSiderealTime+0x420>
 800193a:	ec43 2b10 	vmov	d0, r2, r3
 800193e:	f005 fa91 	bl	8006e64 <pow>
 8001942:	ec51 0b10 	vmov	r0, r1, d0
 8001946:	a36e      	add	r3, pc, #440	; (adr r3, 8001b00 <computeSiderealTime+0x428>)
 8001948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194c:	f7fe fe64 	bl	8000618 <__aeabi_dmul>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4620      	mov	r0, r4
 8001956:	4629      	mov	r1, r5
 8001958:	f7fe fca8 	bl	80002ac <__adddf3>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4614      	mov	r4, r2
 8001962:	461d      	mov	r5, r3
 8001964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001966:	f7fe fdff 	bl	8000568 <__aeabi_f2d>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	ed9f 1b66 	vldr	d1, [pc, #408]	; 8001b08 <computeSiderealTime+0x430>
 8001972:	ec43 2b10 	vmov	d0, r2, r3
 8001976:	f005 fa75 	bl	8006e64 <pow>
 800197a:	ec51 0b10 	vmov	r0, r1, d0
 800197e:	a364      	add	r3, pc, #400	; (adr r3, 8001b10 <computeSiderealTime+0x438>)
 8001980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001984:	f7fe fe48 	bl	8000618 <__aeabi_dmul>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4620      	mov	r0, r4
 800198e:	4629      	mov	r1, r5
 8001990:	f7fe fc8c 	bl	80002ac <__adddf3>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f7ff f934 	bl	8000c08 <__aeabi_d2f>
 80019a0:	4603      	mov	r3, r0
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(debug_values,"J0 = %f  \r\n",j0) ;
 80019a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80019a6:	f7fe fddf 	bl	8000568 <__aeabi_f2d>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	f107 000c 	add.w	r0, r7, #12
 80019b2:	4960      	ldr	r1, [pc, #384]	; (8001b34 <computeSiderealTime+0x45c>)
 80019b4:	f003 f82c 	bl	8004a10 <siprintf>
		uartSendString(debug_values) ;
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 f9cf 	bl	8001d60 <uartSendString>
		// el cálculo anterior sid_time puede ser mayor a 360°. Para quedarnos con el giro que corresponde
		// a la unidad angular restamos 360°. Lo calculado esta a las 12:00:00. Se debe pasar a UTC con UTC/24
		sid_time = sid_time - (float) (int)(sid_time/360.0) * 360.0 ;
 80019c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019c4:	f7fe fdd0 	bl	8000568 <__aeabi_f2d>
 80019c8:	4604      	mov	r4, r0
 80019ca:	460d      	mov	r5, r1
 80019cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019ce:	f7fe fdcb 	bl	8000568 <__aeabi_f2d>
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	4b58      	ldr	r3, [pc, #352]	; (8001b38 <computeSiderealTime+0x460>)
 80019d8:	f7fe ff48 	bl	800086c <__aeabi_ddiv>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	f7ff f8c8 	bl	8000b78 <__aeabi_d2iz>
 80019e8:	ee07 0a90 	vmov	s15, r0
 80019ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f0:	ee17 0a90 	vmov	r0, s15
 80019f4:	f7fe fdb8 	bl	8000568 <__aeabi_f2d>
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	4b4e      	ldr	r3, [pc, #312]	; (8001b38 <computeSiderealTime+0x460>)
 80019fe:	f7fe fe0b 	bl	8000618 <__aeabi_dmul>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4620      	mov	r0, r4
 8001a08:	4629      	mov	r1, r5
 8001a0a:	f7fe fc4d 	bl	80002a8 <__aeabi_dsub>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	f7ff f8f7 	bl	8000c08 <__aeabi_d2f>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
		// Puede ser superior a 360°, idem al caso anterior
		sid_time = sid_time + 360.98564724*(fract_day/24.0);
 8001a1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a20:	f7fe fda2 	bl	8000568 <__aeabi_f2d>
 8001a24:	4604      	mov	r4, r0
 8001a26:	460d      	mov	r5, r1
 8001a28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a2a:	f7fe fd9d 	bl	8000568 <__aeabi_f2d>
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	4b42      	ldr	r3, [pc, #264]	; (8001b3c <computeSiderealTime+0x464>)
 8001a34:	f7fe ff1a 	bl	800086c <__aeabi_ddiv>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	a335      	add	r3, pc, #212	; (adr r3, 8001b18 <computeSiderealTime+0x440>)
 8001a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a46:	f7fe fde7 	bl	8000618 <__aeabi_dmul>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4620      	mov	r0, r4
 8001a50:	4629      	mov	r1, r5
 8001a52:	f7fe fc2b 	bl	80002ac <__adddf3>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f7ff f8d3 	bl	8000c08 <__aeabi_d2f>
 8001a62:	4603      	mov	r3, r0
 8001a64:	62fb      	str	r3, [r7, #44]	; 0x2c
		sid_time = sid_time - (float) (int)(sid_time/360.0) * 360.0 ;
 8001a66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a68:	f7fe fd7e 	bl	8000568 <__aeabi_f2d>
 8001a6c:	4604      	mov	r4, r0
 8001a6e:	460d      	mov	r5, r1
 8001a70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a72:	f7fe fd79 	bl	8000568 <__aeabi_f2d>
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <computeSiderealTime+0x460>)
 8001a7c:	f7fe fef6 	bl	800086c <__aeabi_ddiv>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	f7ff f876 	bl	8000b78 <__aeabi_d2iz>
 8001a8c:	ee07 0a90 	vmov	s15, r0
 8001a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a94:	ee17 0a90 	vmov	r0, s15
 8001a98:	f7fe fd66 	bl	8000568 <__aeabi_f2d>
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <computeSiderealTime+0x460>)
 8001aa2:	f7fe fdb9 	bl	8000618 <__aeabi_dmul>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4620      	mov	r0, r4
 8001aac:	4629      	mov	r1, r5
 8001aae:	f7fe fbfb 	bl	80002a8 <__aeabi_dsub>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f7ff f8a5 	bl	8000c08 <__aeabi_d2f>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
		// transformación a hora, minuto y segundo: 360° -- 24hs, 60min -- 1h y 60s -- 1min
		sprintf(debug_values,"st = %f  \r\n",sid_time) ;
 8001ac2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ac4:	f7fe fd50 	bl	8000568 <__aeabi_f2d>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	f107 000c 	add.w	r0, r7, #12
 8001ad0:	491b      	ldr	r1, [pc, #108]	; (8001b40 <computeSiderealTime+0x468>)
 8001ad2:	f002 ff9d 	bl	8004a10 <siprintf>
 8001ad6:	e03d      	b.n	8001b54 <computeSiderealTime+0x47c>
 8001ad8:	80000000 	.word	0x80000000
 8001adc:	413a42b5 	.word	0x413a42b5
 8001ae0:	00000000 	.word	0x00000000
 8001ae4:	40ac2000 	.word	0x40ac2000
 8001ae8:	a3d70a3d 	.word	0xa3d70a3d
 8001aec:	40e19418 	.word	0x40e19418
 8001af0:	c598fbe5 	.word	0xc598fbe5
 8001af4:	40591d7a 	.word	0x40591d7a
 8001af8:	00000000 	.word	0x00000000
 8001afc:	40000000 	.word	0x40000000
 8001b00:	8c4c4b7f 	.word	0x8c4c4b7f
 8001b04:	3f396c6f 	.word	0x3f396c6f
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	40080000 	.word	0x40080000
 8001b10:	a97ffabc 	.word	0xa97ffabc
 8001b14:	be5bbc18 	.word	0xbe5bbc18
 8001b18:	360a5315 	.word	0x360a5315
 8001b1c:	40768fc5 	.word	0x40768fc5
 8001b20:	40220000 	.word	0x40220000
 8001b24:	40280000 	.word	0x40280000
 8001b28:	404e0000 	.word	0x404e0000
 8001b2c:	4a15a164 	.word	0x4a15a164
 8001b30:	470ead00 	.word	0x470ead00
 8001b34:	08007de8 	.word	0x08007de8
 8001b38:	40768000 	.word	0x40768000
 8001b3c:	40380000 	.word	0x40380000
 8001b40:	08007df4 	.word	0x08007df4
 8001b44:	00000000 	.word	0x00000000
 8001b48:	4076f000 	.word	0x4076f000
 8001b4c:	00000000 	.word	0x00000000
 8001b50:	40713000 	.word	0x40713000
		uartSendString(debug_values) ;
 8001b54:	f107 030c 	add.w	r3, r7, #12
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f000 f901 	bl	8001d60 <uartSendString>

		hs = (uint8_t) ((sid_time*24)/360.0 ) ;
 8001b5e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001b62:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001b66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b6a:	ee17 0a90 	vmov	r0, s15
 8001b6e:	f7fe fcfb 	bl	8000568 <__aeabi_f2d>
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <computeSiderealTime+0x52c>)
 8001b78:	f7fe fe78 	bl	800086c <__aeabi_ddiv>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	f7ff f820 	bl	8000bc8 <__aeabi_d2uiz>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		sidereal_time->h = hs ;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001b94:	701a      	strb	r2, [r3, #0]
		ms  = (uint8_t)  ((sid_time*24)/360.0  - hs) ;
 8001b96:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001b9a:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001b9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ba2:	ee17 0a90 	vmov	r0, s15
 8001ba6:	f7fe fcdf 	bl	8000568 <__aeabi_f2d>
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <computeSiderealTime+0x52c>)
 8001bb0:	f7fe fe5c 	bl	800086c <__aeabi_ddiv>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4614      	mov	r4, r2
 8001bba:	461d      	mov	r5, r3
 8001bbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fcbf 	bl	8000544 <__aeabi_i2d>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4620      	mov	r0, r4
 8001bcc:	4629      	mov	r1, r5
 8001bce:	f7fe fb6b 	bl	80002a8 <__aeabi_dsub>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f7fe fff5 	bl	8000bc8 <__aeabi_d2uiz>
 8001bde:	4603      	mov	r3, r0
 8001be0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		sidereal_time->m = ms ;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001bea:	705a      	strb	r2, [r3, #1]
		error = NO_ERROR_SIDEREAL;
 8001bec:	2301      	movs	r3, #1
 8001bee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	}
	return error ;
 8001bf2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47

}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3748      	adds	r7, #72	; 0x48
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	ecbd 8b02 	vpop	{d8}
 8001c00:	bdb0      	pop	{r4, r5, r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40768000 	.word	0x40768000

08001c08 <getDateTime>:
 * 		   							 3:  error al obtener la hora del RTC
 * 		   Al usar esta estructura se prescinde de la libreria "time.h" nativa de C
 *
 */
fecha_t getDateTime()
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef sdatestructureget ;
	RTC_TimeTypeDef stimestructureget ;
	fecha_t response  ;
	/* USER CODE END WHILE */
	if (HAL_RTC_GetTime(&rtc, &stimestructureget, RTC_FORMAT_BIN) != HAL_OK)
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	2200      	movs	r2, #0
 8001c16:	4619      	mov	r1, r3
 8001c18:	4819      	ldr	r0, [pc, #100]	; (8001c80 <getDateTime+0x78>)
 8001c1a:	f001 fc5d 	bl	80034d8 <HAL_RTC_GetTime>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <getDateTime+0x22>
	{
		response.error = ERROR_RTC_TIME ;
 8001c24:	2302      	movs	r3, #2
 8001c26:	73fb      	strb	r3, [r7, #15]
 8001c28:	e01e      	b.n	8001c68 <getDateTime+0x60>
	}else{
		if(HAL_RTC_GetDate(&rtc, &sdatestructureget, RTC_FORMAT_BIN) == HAL_OK)
 8001c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2e:	2200      	movs	r2, #0
 8001c30:	4619      	mov	r1, r3
 8001c32:	4813      	ldr	r0, [pc, #76]	; (8001c80 <getDateTime+0x78>)
 8001c34:	f001 fd55 	bl	80036e2 <HAL_RTC_GetDate>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d112      	bne.n	8001c64 <getDateTime+0x5c>
		{
			//lectura del RTC de la placa nucleo y carga de valores en fecha_t
			response.year = sdatestructureget.Year ;
 8001c3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	813b      	strh	r3, [r7, #8]
			response.day = sdatestructureget.Date;
 8001c46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c4a:	72fb      	strb	r3, [r7, #11]
			response.month = sdatestructureget.Month ;
 8001c4c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c50:	72bb      	strb	r3, [r7, #10]
			response.minute = stimestructureget.Minutes ;
 8001c52:	7c7b      	ldrb	r3, [r7, #17]
 8001c54:	737b      	strb	r3, [r7, #13]
			response.hour = stimestructureget.Hours ;
 8001c56:	7c3b      	ldrb	r3, [r7, #16]
 8001c58:	733b      	strb	r3, [r7, #12]
			response.second = stimestructureget.Seconds ;
 8001c5a:	7cbb      	ldrb	r3, [r7, #18]
 8001c5c:	73bb      	strb	r3, [r7, #14]
			response.error = NO_ERROR_GET_RTC ;// 0x01 --> correct!
 8001c5e:	2301      	movs	r3, #1
 8001c60:	73fb      	strb	r3, [r7, #15]
 8001c62:	e001      	b.n	8001c68 <getDateTime+0x60>
		}else{
			response.error = ERROR_RTC_DATE ;
 8001c64:	2303      	movs	r3, #3
 8001c66:	73fb      	strb	r3, [r7, #15]
		}
	}
	return response ;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	f107 0308 	add.w	r3, r7, #8
 8001c70:	cb03      	ldmia	r3!, {r0, r1}
 8001c72:	6010      	str	r0, [r2, #0]
 8001c74:	6051      	str	r1, [r2, #4]
}
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000218 	.word	0x20000218

08001c84 <uartInit>:

//static void uartSendString( char *uart_tx) ;

UART_HandleTypeDef uart_handle ;

uint8_t uartInit(uint32_t baud_rate){
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	if (baud_rate == 0){
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <uartInit+0x12>
		return 0xFF ;
 8001c92:	23ff      	movs	r3, #255	; 0xff
 8001c94:	e023      	b.n	8001cde <uartInit+0x5a>
	}

	uart_handle.Instance 		  = USART3;
 8001c96:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <uartInit+0x64>)
 8001c98:	4a14      	ldr	r2, [pc, #80]	; (8001cec <uartInit+0x68>)
 8001c9a:	601a      	str	r2, [r3, #0]
	uart_handle.Init.BaudRate     = baud_rate;
 8001c9c:	4a12      	ldr	r2, [pc, #72]	; (8001ce8 <uartInit+0x64>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6053      	str	r3, [r2, #4]
	uart_handle.Init.WordLength   = UART_WORDLENGTH_8B;
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <uartInit+0x64>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
	uart_handle.Init.StopBits     = UART_STOPBITS_1;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <uartInit+0x64>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	60da      	str	r2, [r3, #12]
	uart_handle.Init.Parity       = UART_PARITY_NONE ;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <uartInit+0x64>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
	uart_handle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <uartInit+0x64>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	619a      	str	r2, [r3, #24]
	uart_handle.Init.Mode         = UART_MODE_TX_RX;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <uartInit+0x64>)
 8001cbc:	220c      	movs	r2, #12
 8001cbe:	615a      	str	r2, [r3, #20]
	uart_handle.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <uartInit+0x64>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&uart_handle)){
 8001cc6:	4808      	ldr	r0, [pc, #32]	; (8001ce8 <uartInit+0x64>)
 8001cc8:	f001 fe33 	bl	8003932 <HAL_UART_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <uartInit+0x52>
		return 0xFF ;
 8001cd2:	23ff      	movs	r3, #255	; 0xff
 8001cd4:	e003      	b.n	8001cde <uartInit+0x5a>
	}
	uartSendString("INICIO CORRECTO\r\n") ;
 8001cd6:	4806      	ldr	r0, [pc, #24]	; (8001cf0 <uartInit+0x6c>)
 8001cd8:	f000 f842 	bl	8001d60 <uartSendString>
	return 1 ;
 8001cdc:	2301      	movs	r3, #1
	//(&uart_handle, &data_rx, 2) ;
	//HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(USART3_IRQn);


}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000244 	.word	0x20000244
 8001cec:	40004800 	.word	0x40004800
 8001cf0:	08007e00 	.word	0x08007e00

08001cf4 <sendSiderealTime>:


uint8_t sendSiderealTime(){
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af02      	add	r7, sp, #8
	sidereal_t stime ;
	char uart_tx [10] ; //"hh:mm:ss" ;
	uint8_t get_sidereal_time =computeSiderealTime(&stime) ;
 8001cfa:	f107 0310 	add.w	r3, r7, #16
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fcea 	bl	80016d8 <computeSiderealTime>
 8001d04:	4603      	mov	r3, r0
 8001d06:	75bb      	strb	r3, [r7, #22]
	uint8_t response ;
	if (get_sidereal_time ==0xFF){
 8001d08:	7dbb      	ldrb	r3, [r7, #22]
 8001d0a:	2bff      	cmp	r3, #255	; 0xff
 8001d0c:	d10d      	bne.n	8001d2a <sendSiderealTime+0x36>
		//transmitir "error RTC" por puerto serie
		sprintf(uart_tx,"%02d:%02d:%02d",stime.h,stime.m,0) ;
 8001d0e:	7c3b      	ldrb	r3, [r7, #16]
 8001d10:	461a      	mov	r2, r3
 8001d12:	7c7b      	ldrb	r3, [r7, #17]
 8001d14:	4619      	mov	r1, r3
 8001d16:	1d38      	adds	r0, r7, #4
 8001d18:	2300      	movs	r3, #0
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	490f      	ldr	r1, [pc, #60]	; (8001d5c <sendSiderealTime+0x68>)
 8001d20:	f002 fe76 	bl	8004a10 <siprintf>
		response = 0xFF ;
 8001d24:	23ff      	movs	r3, #255	; 0xff
 8001d26:	75fb      	strb	r3, [r7, #23]
 8001d28:	e00f      	b.n	8001d4a <sendSiderealTime+0x56>

	}else if (get_sidereal_time==0x01){
 8001d2a:	7dbb      	ldrb	r3, [r7, #22]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d10c      	bne.n	8001d4a <sendSiderealTime+0x56>
		sprintf(uart_tx,"%02d:%02d:%02d",stime.h,stime.m,0) ;
 8001d30:	7c3b      	ldrb	r3, [r7, #16]
 8001d32:	461a      	mov	r2, r3
 8001d34:	7c7b      	ldrb	r3, [r7, #17]
 8001d36:	4619      	mov	r1, r3
 8001d38:	1d38      	adds	r0, r7, #4
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4906      	ldr	r1, [pc, #24]	; (8001d5c <sendSiderealTime+0x68>)
 8001d42:	f002 fe65 	bl	8004a10 <siprintf>
		response = 0x01 ;
 8001d46:	2301      	movs	r3, #1
 8001d48:	75fb      	strb	r3, [r7, #23]
	}


	uartSendString(uart_tx) ;
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 f807 	bl	8001d60 <uartSendString>
	return response ;
 8001d52:	7dfb      	ldrb	r3, [r7, #23]

}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	08007e14 	.word	0x08007e14

08001d60 <uartSendString>:

//uint8_t uartSendString(const char *uart_tx)
//static void uartSendString( char *uart_tx)
void uartSendString( char *uart_tx)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&uart_handle,uart_tx, strlen(uart_tx), 500) ;
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7fe fa41 	bl	80001f0 <strlen>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4803      	ldr	r0, [pc, #12]	; (8001d88 <uartSendString+0x28>)
 8001d7a:	f001 fe27 	bl	80039cc <HAL_UART_Transmit>

}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000244 	.word	0x20000244

08001d8c <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10e      	bne.n	8001dba <BSP_LED_Init+0x2e>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <BSP_LED_Init+0x94>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	4a1e      	ldr	r2, [pc, #120]	; (8001e20 <BSP_LED_Init+0x94>)
 8001da6:	f043 0302 	orr.w	r3, r3, #2
 8001daa:	6313      	str	r3, [r2, #48]	; 0x30
 8001dac:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <BSP_LED_Init+0x94>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	e00d      	b.n	8001dd6 <BSP_LED_Init+0x4a>
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <BSP_LED_Init+0x94>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a17      	ldr	r2, [pc, #92]	; (8001e20 <BSP_LED_Init+0x94>)
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <BSP_LED_Init+0x94>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <BSP_LED_Init+0x98>)
 8001dda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de0:	2301      	movs	r3, #1
 8001de2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001de8:	2302      	movs	r3, #2
 8001dea:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	4a0e      	ldr	r2, [pc, #56]	; (8001e28 <BSP_LED_Init+0x9c>)
 8001df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df4:	f107 0214 	add.w	r2, r7, #20
 8001df8:	4611      	mov	r1, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 faea 	bl	80023d4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	4a09      	ldr	r2, [pc, #36]	; (8001e28 <BSP_LED_Init+0x9c>)
 8001e04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	4a06      	ldr	r2, [pc, #24]	; (8001e24 <BSP_LED_Init+0x98>)
 8001e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e10:	2200      	movs	r2, #0
 8001e12:	4619      	mov	r1, r3
 8001e14:	f000 fca2 	bl	800275c <HAL_GPIO_WritePin>
}
 8001e18:	bf00      	nop
 8001e1a:	3728      	adds	r7, #40	; 0x28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40023800 	.word	0x40023800
 8001e24:	08007e24 	.word	0x08007e24
 8001e28:	20000000 	.word	0x20000000

08001e2c <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	4a07      	ldr	r2, [pc, #28]	; (8001e58 <BSP_LED_On+0x2c>)
 8001e3a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	4a06      	ldr	r2, [pc, #24]	; (8001e5c <BSP_LED_On+0x30>)
 8001e42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e46:	2201      	movs	r2, #1
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f000 fc87 	bl	800275c <HAL_GPIO_WritePin>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	08007e24 	.word	0x08007e24

08001e60 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <BSP_LED_Toggle+0x2c>)
 8001e6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	4906      	ldr	r1, [pc, #24]	; (8001e90 <BSP_LED_Toggle+0x30>)
 8001e76:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	f000 fc86 	bl	800278e <HAL_GPIO_TogglePin>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	08007e24 	.word	0x08007e24

08001e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e98:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <SystemInit+0x60>)
 8001e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9e:	4a15      	ldr	r2, [pc, #84]	; (8001ef4 <SystemInit+0x60>)
 8001ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001ea8:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <SystemInit+0x64>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a12      	ldr	r2, [pc, #72]	; (8001ef8 <SystemInit+0x64>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001eb4:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <SystemInit+0x64>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001eba:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <SystemInit+0x64>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a0e      	ldr	r2, [pc, #56]	; (8001ef8 <SystemInit+0x64>)
 8001ec0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001eca:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <SystemInit+0x64>)
 8001ecc:	4a0b      	ldr	r2, [pc, #44]	; (8001efc <SystemInit+0x68>)
 8001ece:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ed0:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <SystemInit+0x64>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <SystemInit+0x64>)
 8001ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <SystemInit+0x64>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ee2:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <SystemInit+0x60>)
 8001ee4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ee8:	609a      	str	r2, [r3, #8]
#endif
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	24003010 	.word	0x24003010

08001f00 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001f12:	e7fe      	b.n	8001f12 <HardFault_Handler+0x4>

08001f14 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <MemManage_Handler+0x4>

08001f1a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001f1e:	e7fe      	b.n	8001f1e <BusFault_Handler+0x4>

08001f20 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <UsageFault_Handler+0x4>

08001f26 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
}
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001f54:	f000 f914 	bl	8002180 <HAL_IncTick>
}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
	return 1;
 8001f60:	2301      	movs	r3, #1
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <_kill>:

int _kill(int pid, int sig)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f76:	f002 f8af 	bl	80040d8 <__errno>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2216      	movs	r2, #22
 8001f7e:	601a      	str	r2, [r3, #0]
	return -1;
 8001f80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <_exit>:

void _exit (int status)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f94:	f04f 31ff 	mov.w	r1, #4294967295
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ffe7 	bl	8001f6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f9e:	e7fe      	b.n	8001f9e <_exit+0x12>

08001fa0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	e00a      	b.n	8001fc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fb2:	f3af 8000 	nop.w
 8001fb6:	4601      	mov	r1, r0
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	60ba      	str	r2, [r7, #8]
 8001fbe:	b2ca      	uxtb	r2, r1
 8001fc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	dbf0      	blt.n	8001fb2 <_read+0x12>
	}

return len;
 8001fd0:	687b      	ldr	r3, [r7, #4]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b086      	sub	sp, #24
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	60f8      	str	r0, [r7, #12]
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	e009      	b.n	8002000 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	60ba      	str	r2, [r7, #8]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	429a      	cmp	r2, r3
 8002006:	dbf1      	blt.n	8001fec <_write+0x12>
	}
	return len;
 8002008:	687b      	ldr	r3, [r7, #4]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <_close>:

int _close(int file)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
	return -1;
 800201a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800203a:	605a      	str	r2, [r3, #4]
	return 0;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <_isatty>:

int _isatty(int file)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
	return 1;
 8002052:	2301      	movs	r3, #1
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
	return 0;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002084:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <_sbrk+0x5c>)
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <_sbrk+0x60>)
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002090:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <_sbrk+0x64>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d102      	bne.n	800209e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <_sbrk+0x64>)
 800209a:	4a12      	ldr	r2, [pc, #72]	; (80020e4 <_sbrk+0x68>)
 800209c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800209e:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <_sbrk+0x64>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d207      	bcs.n	80020bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020ac:	f002 f814 	bl	80040d8 <__errno>
 80020b0:	4603      	mov	r3, r0
 80020b2:	220c      	movs	r2, #12
 80020b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020b6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ba:	e009      	b.n	80020d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020bc:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <_sbrk+0x64>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020c2:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <_sbrk+0x64>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	4a05      	ldr	r2, [pc, #20]	; (80020e0 <_sbrk+0x64>)
 80020cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ce:	68fb      	ldr	r3, [r7, #12]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20030000 	.word	0x20030000
 80020dc:	00000400 	.word	0x00000400
 80020e0:	20000238 	.word	0x20000238
 80020e4:	200002a0 	.word	0x200002a0

080020e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_Init+0x34>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a0a      	ldr	r2, [pc, #40]	; (800211c <HAL_Init+0x34>)
 80020f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020f6:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020f8:	4b08      	ldr	r3, [pc, #32]	; (800211c <HAL_Init+0x34>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a07      	ldr	r2, [pc, #28]	; (800211c <HAL_Init+0x34>)
 80020fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002102:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002104:	2003      	movs	r0, #3
 8002106:	f000 f931 	bl	800236c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800210a:	200f      	movs	r0, #15
 800210c:	f000 f808 	bl	8002120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002110:	f000 fbaa 	bl	8002868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40023c00 	.word	0x40023c00

08002120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <HAL_InitTick+0x54>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_InitTick+0x58>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	4619      	mov	r1, r3
 8002132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002136:	fbb3 f3f1 	udiv	r3, r3, r1
 800213a:	fbb2 f3f3 	udiv	r3, r2, r3
 800213e:	4618      	mov	r0, r3
 8002140:	f000 f93b 	bl	80023ba <HAL_SYSTICK_Config>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e00e      	b.n	800216c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b0f      	cmp	r3, #15
 8002152:	d80a      	bhi.n	800216a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002154:	2200      	movs	r2, #0
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	f04f 30ff 	mov.w	r0, #4294967295
 800215c:	f000 f911 	bl	8002382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002160:	4a06      	ldr	r2, [pc, #24]	; (800217c <HAL_InitTick+0x5c>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	e000      	b.n	800216c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	2000000c 	.word	0x2000000c
 8002178:	20000014 	.word	0x20000014
 800217c:	20000010 	.word	0x20000010

08002180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_IncTick+0x20>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_IncTick+0x24>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4413      	add	r3, r2
 8002190:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <HAL_IncTick+0x24>)
 8002192:	6013      	str	r3, [r2, #0]
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	20000014 	.word	0x20000014
 80021a4:	20000288 	.word	0x20000288

080021a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return uwTick;
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <HAL_GetTick+0x14>)
 80021ae:	681b      	ldr	r3, [r3, #0]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	20000288 	.word	0x20000288

080021c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c8:	f7ff ffee 	bl	80021a8 <HAL_GetTick>
 80021cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d8:	d005      	beq.n	80021e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_Delay+0x44>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	461a      	mov	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4413      	add	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021e6:	bf00      	nop
 80021e8:	f7ff ffde 	bl	80021a8 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d8f7      	bhi.n	80021e8 <HAL_Delay+0x28>
  {
  }
}
 80021f8:	bf00      	nop
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000014 	.word	0x20000014

08002208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002224:	4013      	ands	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223a:	4a04      	ldr	r2, [pc, #16]	; (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	60d3      	str	r3, [r2, #12]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002254:	4b04      	ldr	r3, [pc, #16]	; (8002268 <__NVIC_GetPriorityGrouping+0x18>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	f003 0307 	and.w	r3, r3, #7
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	6039      	str	r1, [r7, #0]
 8002276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227c:	2b00      	cmp	r3, #0
 800227e:	db0a      	blt.n	8002296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	b2da      	uxtb	r2, r3
 8002284:	490c      	ldr	r1, [pc, #48]	; (80022b8 <__NVIC_SetPriority+0x4c>)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	0112      	lsls	r2, r2, #4
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	440b      	add	r3, r1
 8002290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002294:	e00a      	b.n	80022ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4908      	ldr	r1, [pc, #32]	; (80022bc <__NVIC_SetPriority+0x50>)
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	3b04      	subs	r3, #4
 80022a4:	0112      	lsls	r2, r2, #4
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	440b      	add	r3, r1
 80022aa:	761a      	strb	r2, [r3, #24]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000e100 	.word	0xe000e100
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b089      	sub	sp, #36	; 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f1c3 0307 	rsb	r3, r3, #7
 80022da:	2b04      	cmp	r3, #4
 80022dc:	bf28      	it	cs
 80022de:	2304      	movcs	r3, #4
 80022e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3304      	adds	r3, #4
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d902      	bls.n	80022f0 <NVIC_EncodePriority+0x30>
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3b03      	subs	r3, #3
 80022ee:	e000      	b.n	80022f2 <NVIC_EncodePriority+0x32>
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f4:	f04f 32ff 	mov.w	r2, #4294967295
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43da      	mvns	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	401a      	ands	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002308:	f04f 31ff 	mov.w	r1, #4294967295
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	fa01 f303 	lsl.w	r3, r1, r3
 8002312:	43d9      	mvns	r1, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	4313      	orrs	r3, r2
         );
}
 800231a:	4618      	mov	r0, r3
 800231c:	3724      	adds	r7, #36	; 0x24
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3b01      	subs	r3, #1
 8002334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002338:	d301      	bcc.n	800233e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800233a:	2301      	movs	r3, #1
 800233c:	e00f      	b.n	800235e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800233e:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <SysTick_Config+0x40>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3b01      	subs	r3, #1
 8002344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002346:	210f      	movs	r1, #15
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	f7ff ff8e 	bl	800226c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <SysTick_Config+0x40>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002356:	4b04      	ldr	r3, [pc, #16]	; (8002368 <SysTick_Config+0x40>)
 8002358:	2207      	movs	r2, #7
 800235a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	e000e010 	.word	0xe000e010

0800236c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ff47 	bl	8002208 <__NVIC_SetPriorityGrouping>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002394:	f7ff ff5c 	bl	8002250 <__NVIC_GetPriorityGrouping>
 8002398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	6978      	ldr	r0, [r7, #20]
 80023a0:	f7ff ff8e 	bl	80022c0 <NVIC_EncodePriority>
 80023a4:	4602      	mov	r2, r0
 80023a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff5d 	bl	800226c <__NVIC_SetPriority>
}
 80023b2:	bf00      	nop
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ffb0 	bl	8002328 <SysTick_Config>
 80023c8:	4603      	mov	r3, r0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b089      	sub	sp, #36	; 0x24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
 80023ee:	e177      	b.n	80026e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023f0:	2201      	movs	r2, #1
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	4013      	ands	r3, r2
 8002402:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	429a      	cmp	r2, r3
 800240a:	f040 8166 	bne.w	80026da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b01      	cmp	r3, #1
 8002418:	d005      	beq.n	8002426 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002422:	2b02      	cmp	r3, #2
 8002424:	d130      	bne.n	8002488 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	2203      	movs	r2, #3
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800245c:	2201      	movs	r2, #1
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	f003 0201 	and.w	r2, r3, #1
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	2b03      	cmp	r3, #3
 8002492:	d017      	beq.n	80024c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	2203      	movs	r2, #3
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d123      	bne.n	8002518 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	08da      	lsrs	r2, r3, #3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3208      	adds	r2, #8
 80024d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	220f      	movs	r2, #15
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	08da      	lsrs	r2, r3, #3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3208      	adds	r2, #8
 8002512:	69b9      	ldr	r1, [r7, #24]
 8002514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	2203      	movs	r2, #3
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0203 	and.w	r2, r3, #3
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80c0 	beq.w	80026da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	4b66      	ldr	r3, [pc, #408]	; (80026f8 <HAL_GPIO_Init+0x324>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	4a65      	ldr	r2, [pc, #404]	; (80026f8 <HAL_GPIO_Init+0x324>)
 8002564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002568:	6453      	str	r3, [r2, #68]	; 0x44
 800256a:	4b63      	ldr	r3, [pc, #396]	; (80026f8 <HAL_GPIO_Init+0x324>)
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002576:	4a61      	ldr	r2, [pc, #388]	; (80026fc <HAL_GPIO_Init+0x328>)
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	089b      	lsrs	r3, r3, #2
 800257c:	3302      	adds	r3, #2
 800257e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	220f      	movs	r2, #15
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a58      	ldr	r2, [pc, #352]	; (8002700 <HAL_GPIO_Init+0x32c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d037      	beq.n	8002612 <HAL_GPIO_Init+0x23e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a57      	ldr	r2, [pc, #348]	; (8002704 <HAL_GPIO_Init+0x330>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d031      	beq.n	800260e <HAL_GPIO_Init+0x23a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a56      	ldr	r2, [pc, #344]	; (8002708 <HAL_GPIO_Init+0x334>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d02b      	beq.n	800260a <HAL_GPIO_Init+0x236>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a55      	ldr	r2, [pc, #340]	; (800270c <HAL_GPIO_Init+0x338>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d025      	beq.n	8002606 <HAL_GPIO_Init+0x232>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a54      	ldr	r2, [pc, #336]	; (8002710 <HAL_GPIO_Init+0x33c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d01f      	beq.n	8002602 <HAL_GPIO_Init+0x22e>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a53      	ldr	r2, [pc, #332]	; (8002714 <HAL_GPIO_Init+0x340>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d019      	beq.n	80025fe <HAL_GPIO_Init+0x22a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a52      	ldr	r2, [pc, #328]	; (8002718 <HAL_GPIO_Init+0x344>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d013      	beq.n	80025fa <HAL_GPIO_Init+0x226>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a51      	ldr	r2, [pc, #324]	; (800271c <HAL_GPIO_Init+0x348>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00d      	beq.n	80025f6 <HAL_GPIO_Init+0x222>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a50      	ldr	r2, [pc, #320]	; (8002720 <HAL_GPIO_Init+0x34c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d007      	beq.n	80025f2 <HAL_GPIO_Init+0x21e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4f      	ldr	r2, [pc, #316]	; (8002724 <HAL_GPIO_Init+0x350>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d101      	bne.n	80025ee <HAL_GPIO_Init+0x21a>
 80025ea:	2309      	movs	r3, #9
 80025ec:	e012      	b.n	8002614 <HAL_GPIO_Init+0x240>
 80025ee:	230a      	movs	r3, #10
 80025f0:	e010      	b.n	8002614 <HAL_GPIO_Init+0x240>
 80025f2:	2308      	movs	r3, #8
 80025f4:	e00e      	b.n	8002614 <HAL_GPIO_Init+0x240>
 80025f6:	2307      	movs	r3, #7
 80025f8:	e00c      	b.n	8002614 <HAL_GPIO_Init+0x240>
 80025fa:	2306      	movs	r3, #6
 80025fc:	e00a      	b.n	8002614 <HAL_GPIO_Init+0x240>
 80025fe:	2305      	movs	r3, #5
 8002600:	e008      	b.n	8002614 <HAL_GPIO_Init+0x240>
 8002602:	2304      	movs	r3, #4
 8002604:	e006      	b.n	8002614 <HAL_GPIO_Init+0x240>
 8002606:	2303      	movs	r3, #3
 8002608:	e004      	b.n	8002614 <HAL_GPIO_Init+0x240>
 800260a:	2302      	movs	r3, #2
 800260c:	e002      	b.n	8002614 <HAL_GPIO_Init+0x240>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_GPIO_Init+0x240>
 8002612:	2300      	movs	r3, #0
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	f002 0203 	and.w	r2, r2, #3
 800261a:	0092      	lsls	r2, r2, #2
 800261c:	4093      	lsls	r3, r2
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002624:	4935      	ldr	r1, [pc, #212]	; (80026fc <HAL_GPIO_Init+0x328>)
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	3302      	adds	r3, #2
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002632:	4b3d      	ldr	r3, [pc, #244]	; (8002728 <HAL_GPIO_Init+0x354>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002656:	4a34      	ldr	r2, [pc, #208]	; (8002728 <HAL_GPIO_Init+0x354>)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800265c:	4b32      	ldr	r3, [pc, #200]	; (8002728 <HAL_GPIO_Init+0x354>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002680:	4a29      	ldr	r2, [pc, #164]	; (8002728 <HAL_GPIO_Init+0x354>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002686:	4b28      	ldr	r3, [pc, #160]	; (8002728 <HAL_GPIO_Init+0x354>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026aa:	4a1f      	ldr	r2, [pc, #124]	; (8002728 <HAL_GPIO_Init+0x354>)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b0:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <HAL_GPIO_Init+0x354>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d4:	4a14      	ldr	r2, [pc, #80]	; (8002728 <HAL_GPIO_Init+0x354>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3301      	adds	r3, #1
 80026de:	61fb      	str	r3, [r7, #28]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	2b0f      	cmp	r3, #15
 80026e4:	f67f ae84 	bls.w	80023f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40013800 	.word	0x40013800
 8002700:	40020000 	.word	0x40020000
 8002704:	40020400 	.word	0x40020400
 8002708:	40020800 	.word	0x40020800
 800270c:	40020c00 	.word	0x40020c00
 8002710:	40021000 	.word	0x40021000
 8002714:	40021400 	.word	0x40021400
 8002718:	40021800 	.word	0x40021800
 800271c:	40021c00 	.word	0x40021c00
 8002720:	40022000 	.word	0x40022000
 8002724:	40022400 	.word	0x40022400
 8002728:	40013c00 	.word	0x40013c00

0800272c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	887b      	ldrh	r3, [r7, #2]
 800273e:	4013      	ands	r3, r2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002744:	2301      	movs	r3, #1
 8002746:	73fb      	strb	r3, [r7, #15]
 8002748:	e001      	b.n	800274e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800274e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	807b      	strh	r3, [r7, #2]
 8002768:	4613      	mov	r3, r2
 800276a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800276c:	787b      	ldrb	r3, [r7, #1]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002772:	887a      	ldrh	r2, [r7, #2]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002778:	e003      	b.n	8002782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800277a:	887b      	ldrh	r3, [r7, #2]
 800277c:	041a      	lsls	r2, r3, #16
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	619a      	str	r2, [r3, #24]
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800278e:	b480      	push	{r7}
 8002790:	b085      	sub	sp, #20
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	460b      	mov	r3, r1
 8002798:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027a0:	887a      	ldrh	r2, [r7, #2]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4013      	ands	r3, r2
 80027a6:	041a      	lsls	r2, r3, #16
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	43d9      	mvns	r1, r3
 80027ac:	887b      	ldrh	r3, [r7, #2]
 80027ae:	400b      	ands	r3, r1
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	619a      	str	r2, [r3, #24]
}
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
	...

080027c4 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08a      	sub	sp, #40	; 0x28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 80027cc:	2300      	movs	r3, #0
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	4b23      	ldr	r3, [pc, #140]	; (8002860 <HAL_UART_MspInit+0x9c>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	4a22      	ldr	r2, [pc, #136]	; (8002860 <HAL_UART_MspInit+0x9c>)
 80027d6:	f043 0308 	orr.w	r3, r3, #8
 80027da:	6313      	str	r3, [r2, #48]	; 0x30
 80027dc:	4b20      	ldr	r3, [pc, #128]	; (8002860 <HAL_UART_MspInit+0x9c>)
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 80027e8:	2300      	movs	r3, #0
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <HAL_UART_MspInit+0x9c>)
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	4a1b      	ldr	r2, [pc, #108]	; (8002860 <HAL_UART_MspInit+0x9c>)
 80027f2:	f043 0308 	orr.w	r3, r3, #8
 80027f6:	6313      	str	r3, [r2, #48]	; 0x30
 80027f8:	4b19      	ldr	r3, [pc, #100]	; (8002860 <HAL_UART_MspInit+0x9c>)
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8002804:	2300      	movs	r3, #0
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	4b15      	ldr	r3, [pc, #84]	; (8002860 <HAL_UART_MspInit+0x9c>)
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	4a14      	ldr	r2, [pc, #80]	; (8002860 <HAL_UART_MspInit+0x9c>)
 800280e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002812:	6413      	str	r3, [r2, #64]	; 0x40
 8002814:	4b12      	ldr	r3, [pc, #72]	; (8002860 <HAL_UART_MspInit+0x9c>)
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8002820:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002826:	2302      	movs	r3, #2
 8002828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800282a:	2301      	movs	r3, #1
 800282c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800282e:	2303      	movs	r3, #3
 8002830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8002832:	2307      	movs	r3, #7
 8002834:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8002836:	f107 0314 	add.w	r3, r7, #20
 800283a:	4619      	mov	r1, r3
 800283c:	4809      	ldr	r0, [pc, #36]	; (8002864 <HAL_UART_MspInit+0xa0>)
 800283e:	f7ff fdc9 	bl	80023d4 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8002842:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8002848:	2307      	movs	r3, #7
 800284a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	4619      	mov	r1, r3
 8002852:	4804      	ldr	r0, [pc, #16]	; (8002864 <HAL_UART_MspInit+0xa0>)
 8002854:	f7ff fdbe 	bl	80023d4 <HAL_GPIO_Init>
}
 8002858:	bf00      	nop
 800285a:	3728      	adds	r7, #40	; 0x28
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40023800 	.word	0x40023800
 8002864:	40020c00 	.word	0x40020c00

08002868 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0

}
 800286c:	bf00      	nop
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_PWR_EnableBkUpAccess+0x20>)
 8002880:	2201      	movs	r2, #1
 8002882:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002884:	4b05      	ldr	r3, [pc, #20]	; (800289c <HAL_PWR_EnableBkUpAccess+0x24>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800288a:	687b      	ldr	r3, [r7, #4]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	420e0020 	.word	0x420e0020
 800289c:	40007000 	.word	0x40007000

080028a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	603b      	str	r3, [r7, #0]
 80028ae:	4b20      	ldr	r3, [pc, #128]	; (8002930 <HAL_PWREx_EnableOverDrive+0x90>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	4a1f      	ldr	r2, [pc, #124]	; (8002930 <HAL_PWREx_EnableOverDrive+0x90>)
 80028b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ba:	4b1d      	ldr	r3, [pc, #116]	; (8002930 <HAL_PWREx_EnableOverDrive+0x90>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80028c6:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <HAL_PWREx_EnableOverDrive+0x94>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028cc:	f7ff fc6c 	bl	80021a8 <HAL_GetTick>
 80028d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028d2:	e009      	b.n	80028e8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028d4:	f7ff fc68 	bl	80021a8 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028e2:	d901      	bls.n	80028e8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e01f      	b.n	8002928 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028e8:	4b13      	ldr	r3, [pc, #76]	; (8002938 <HAL_PWREx_EnableOverDrive+0x98>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f4:	d1ee      	bne.n	80028d4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <HAL_PWREx_EnableOverDrive+0x9c>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028fc:	f7ff fc54 	bl	80021a8 <HAL_GetTick>
 8002900:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002902:	e009      	b.n	8002918 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002904:	f7ff fc50 	bl	80021a8 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002912:	d901      	bls.n	8002918 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e007      	b.n	8002928 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002918:	4b07      	ldr	r3, [pc, #28]	; (8002938 <HAL_PWREx_EnableOverDrive+0x98>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002920:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002924:	d1ee      	bne.n	8002904 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40023800 	.word	0x40023800
 8002934:	420e0040 	.word	0x420e0040
 8002938:	40007000 	.word	0x40007000
 800293c:	420e0044 	.word	0x420e0044

08002940 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e264      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d075      	beq.n	8002a4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800295e:	4ba3      	ldr	r3, [pc, #652]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b04      	cmp	r3, #4
 8002968:	d00c      	beq.n	8002984 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800296a:	4ba0      	ldr	r3, [pc, #640]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002972:	2b08      	cmp	r3, #8
 8002974:	d112      	bne.n	800299c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002976:	4b9d      	ldr	r3, [pc, #628]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002982:	d10b      	bne.n	800299c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	4b99      	ldr	r3, [pc, #612]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d05b      	beq.n	8002a48 <HAL_RCC_OscConfig+0x108>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d157      	bne.n	8002a48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e23f      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a4:	d106      	bne.n	80029b4 <HAL_RCC_OscConfig+0x74>
 80029a6:	4b91      	ldr	r3, [pc, #580]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a90      	ldr	r2, [pc, #576]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e01d      	b.n	80029f0 <HAL_RCC_OscConfig+0xb0>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCC_OscConfig+0x98>
 80029be:	4b8b      	ldr	r3, [pc, #556]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a8a      	ldr	r2, [pc, #552]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	4b88      	ldr	r3, [pc, #544]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a87      	ldr	r2, [pc, #540]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	e00b      	b.n	80029f0 <HAL_RCC_OscConfig+0xb0>
 80029d8:	4b84      	ldr	r3, [pc, #528]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a83      	ldr	r2, [pc, #524]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	4b81      	ldr	r3, [pc, #516]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a80      	ldr	r2, [pc, #512]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 80029ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d013      	beq.n	8002a20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7ff fbd6 	bl	80021a8 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a00:	f7ff fbd2 	bl	80021a8 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b64      	cmp	r3, #100	; 0x64
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e204      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	4b76      	ldr	r3, [pc, #472]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0xc0>
 8002a1e:	e014      	b.n	8002a4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7ff fbc2 	bl	80021a8 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a28:	f7ff fbbe 	bl	80021a8 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	; 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e1f0      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3a:	4b6c      	ldr	r3, [pc, #432]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0xe8>
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d063      	beq.n	8002b1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a56:	4b65      	ldr	r3, [pc, #404]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00b      	beq.n	8002a7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a62:	4b62      	ldr	r3, [pc, #392]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d11c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a6e:	4b5f      	ldr	r3, [pc, #380]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d116      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7a:	4b5c      	ldr	r3, [pc, #368]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d005      	beq.n	8002a92 <HAL_RCC_OscConfig+0x152>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e1c4      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a92:	4b56      	ldr	r3, [pc, #344]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4952      	ldr	r1, [pc, #328]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa6:	e03a      	b.n	8002b1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d020      	beq.n	8002af2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab0:	4b4f      	ldr	r3, [pc, #316]	; (8002bf0 <HAL_RCC_OscConfig+0x2b0>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab6:	f7ff fb77 	bl	80021a8 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002abe:	f7ff fb73 	bl	80021a8 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e1a5      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad0:	4b46      	ldr	r3, [pc, #280]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002adc:	4b43      	ldr	r3, [pc, #268]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4940      	ldr	r1, [pc, #256]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]
 8002af0:	e015      	b.n	8002b1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af2:	4b3f      	ldr	r3, [pc, #252]	; (8002bf0 <HAL_RCC_OscConfig+0x2b0>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7ff fb56 	bl	80021a8 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b00:	f7ff fb52 	bl	80021a8 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e184      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b12:	4b36      	ldr	r3, [pc, #216]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d030      	beq.n	8002b8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d016      	beq.n	8002b60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b32:	4b30      	ldr	r3, [pc, #192]	; (8002bf4 <HAL_RCC_OscConfig+0x2b4>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b38:	f7ff fb36 	bl	80021a8 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b40:	f7ff fb32 	bl	80021a8 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e164      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b52:	4b26      	ldr	r3, [pc, #152]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x200>
 8002b5e:	e015      	b.n	8002b8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b60:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <HAL_RCC_OscConfig+0x2b4>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b66:	f7ff fb1f 	bl	80021a8 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b6e:	f7ff fb1b 	bl	80021a8 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e14d      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b80:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1f0      	bne.n	8002b6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 80a0 	beq.w	8002cda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b9e:	4b13      	ldr	r3, [pc, #76]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10f      	bne.n	8002bca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	4a0e      	ldr	r2, [pc, #56]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bba:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bca:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_RCC_OscConfig+0x2b8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d121      	bne.n	8002c1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <HAL_RCC_OscConfig+0x2b8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a07      	ldr	r2, [pc, #28]	; (8002bf8 <HAL_RCC_OscConfig+0x2b8>)
 8002bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be2:	f7ff fae1 	bl	80021a8 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be8:	e011      	b.n	8002c0e <HAL_RCC_OscConfig+0x2ce>
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	42470000 	.word	0x42470000
 8002bf4:	42470e80 	.word	0x42470e80
 8002bf8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfc:	f7ff fad4 	bl	80021a8 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e106      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0e:	4b85      	ldr	r3, [pc, #532]	; (8002e24 <HAL_RCC_OscConfig+0x4e4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d106      	bne.n	8002c30 <HAL_RCC_OscConfig+0x2f0>
 8002c22:	4b81      	ldr	r3, [pc, #516]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	4a80      	ldr	r2, [pc, #512]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2e:	e01c      	b.n	8002c6a <HAL_RCC_OscConfig+0x32a>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b05      	cmp	r3, #5
 8002c36:	d10c      	bne.n	8002c52 <HAL_RCC_OscConfig+0x312>
 8002c38:	4b7b      	ldr	r3, [pc, #492]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	4a7a      	ldr	r2, [pc, #488]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c3e:	f043 0304 	orr.w	r3, r3, #4
 8002c42:	6713      	str	r3, [r2, #112]	; 0x70
 8002c44:	4b78      	ldr	r3, [pc, #480]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	4a77      	ldr	r2, [pc, #476]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c50:	e00b      	b.n	8002c6a <HAL_RCC_OscConfig+0x32a>
 8002c52:	4b75      	ldr	r3, [pc, #468]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	4a74      	ldr	r2, [pc, #464]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c58:	f023 0301 	bic.w	r3, r3, #1
 8002c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5e:	4b72      	ldr	r3, [pc, #456]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	4a71      	ldr	r2, [pc, #452]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c64:	f023 0304 	bic.w	r3, r3, #4
 8002c68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d015      	beq.n	8002c9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c72:	f7ff fa99 	bl	80021a8 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c78:	e00a      	b.n	8002c90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c7a:	f7ff fa95 	bl	80021a8 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e0c5      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c90:	4b65      	ldr	r3, [pc, #404]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0ee      	beq.n	8002c7a <HAL_RCC_OscConfig+0x33a>
 8002c9c:	e014      	b.n	8002cc8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9e:	f7ff fa83 	bl	80021a8 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca4:	e00a      	b.n	8002cbc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca6:	f7ff fa7f 	bl	80021a8 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0af      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cbc:	4b5a      	ldr	r3, [pc, #360]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1ee      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d105      	bne.n	8002cda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cce:	4b56      	ldr	r3, [pc, #344]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	4a55      	ldr	r2, [pc, #340]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 809b 	beq.w	8002e1a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ce4:	4b50      	ldr	r3, [pc, #320]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 030c 	and.w	r3, r3, #12
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d05c      	beq.n	8002daa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d141      	bne.n	8002d7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf8:	4b4c      	ldr	r3, [pc, #304]	; (8002e2c <HAL_RCC_OscConfig+0x4ec>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfe:	f7ff fa53 	bl	80021a8 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d06:	f7ff fa4f 	bl	80021a8 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e081      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d18:	4b43      	ldr	r3, [pc, #268]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f0      	bne.n	8002d06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69da      	ldr	r2, [r3, #28]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	019b      	lsls	r3, r3, #6
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	085b      	lsrs	r3, r3, #1
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	041b      	lsls	r3, r3, #16
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	061b      	lsls	r3, r3, #24
 8002d48:	4937      	ldr	r1, [pc, #220]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d4e:	4b37      	ldr	r3, [pc, #220]	; (8002e2c <HAL_RCC_OscConfig+0x4ec>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7ff fa28 	bl	80021a8 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d5c:	f7ff fa24 	bl	80021a8 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e056      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6e:	4b2e      	ldr	r3, [pc, #184]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x41c>
 8002d7a:	e04e      	b.n	8002e1a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7c:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <HAL_RCC_OscConfig+0x4ec>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d82:	f7ff fa11 	bl	80021a8 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d8a:	f7ff fa0d 	bl	80021a8 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e03f      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9c:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1f0      	bne.n	8002d8a <HAL_RCC_OscConfig+0x44a>
 8002da8:	e037      	b.n	8002e1a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e032      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002db6:	4b1c      	ldr	r3, [pc, #112]	; (8002e28 <HAL_RCC_OscConfig+0x4e8>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d028      	beq.n	8002e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d121      	bne.n	8002e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d11a      	bne.n	8002e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002de6:	4013      	ands	r3, r2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d111      	bne.n	8002e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	085b      	lsrs	r3, r3, #1
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d107      	bne.n	8002e16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d001      	beq.n	8002e1a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40007000 	.word	0x40007000
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	42470060 	.word	0x42470060

08002e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0cc      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e44:	4b68      	ldr	r3, [pc, #416]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 030f 	and.w	r3, r3, #15
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d90c      	bls.n	8002e6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b65      	ldr	r3, [pc, #404]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5a:	4b63      	ldr	r3, [pc, #396]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0b8      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d020      	beq.n	8002eba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e84:	4b59      	ldr	r3, [pc, #356]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4a58      	ldr	r2, [pc, #352]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e9c:	4b53      	ldr	r3, [pc, #332]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4a52      	ldr	r2, [pc, #328]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ea6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea8:	4b50      	ldr	r3, [pc, #320]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	494d      	ldr	r1, [pc, #308]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d044      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d107      	bne.n	8002ede <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ece:	4b47      	ldr	r3, [pc, #284]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d119      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e07f      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d003      	beq.n	8002eee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eee:	4b3f      	ldr	r3, [pc, #252]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e06f      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efe:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e067      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f0e:	4b37      	ldr	r3, [pc, #220]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f023 0203 	bic.w	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4934      	ldr	r1, [pc, #208]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f20:	f7ff f942 	bl	80021a8 <HAL_GetTick>
 8002f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f28:	f7ff f93e 	bl	80021a8 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e04f      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	4b2b      	ldr	r3, [pc, #172]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 020c 	and.w	r2, r3, #12
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d1eb      	bne.n	8002f28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f50:	4b25      	ldr	r3, [pc, #148]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d20c      	bcs.n	8002f78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e032      	b.n	8002fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f84:	4b19      	ldr	r3, [pc, #100]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4916      	ldr	r1, [pc, #88]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d009      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fa2:	4b12      	ldr	r3, [pc, #72]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	490e      	ldr	r1, [pc, #56]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fb6:	f000 f821 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	490a      	ldr	r1, [pc, #40]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc8:	5ccb      	ldrb	r3, [r1, r3]
 8002fca:	fa22 f303 	lsr.w	r3, r2, r3
 8002fce:	4a09      	ldr	r2, [pc, #36]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fd2:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff f8a2 	bl	8002120 <HAL_InitTick>

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40023c00 	.word	0x40023c00
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	08007e2c 	.word	0x08007e2c
 8002ff4:	2000000c 	.word	0x2000000c
 8002ff8:	20000010 	.word	0x20000010

08002ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ffc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	607b      	str	r3, [r7, #4]
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	2300      	movs	r3, #0
 800300e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003014:	4b67      	ldr	r3, [pc, #412]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 030c 	and.w	r3, r3, #12
 800301c:	2b08      	cmp	r3, #8
 800301e:	d00d      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0x40>
 8003020:	2b08      	cmp	r3, #8
 8003022:	f200 80bd 	bhi.w	80031a0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <HAL_RCC_GetSysClockFreq+0x34>
 800302a:	2b04      	cmp	r3, #4
 800302c:	d003      	beq.n	8003036 <HAL_RCC_GetSysClockFreq+0x3a>
 800302e:	e0b7      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003030:	4b61      	ldr	r3, [pc, #388]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003032:	60bb      	str	r3, [r7, #8]
       break;
 8003034:	e0b7      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003036:	4b61      	ldr	r3, [pc, #388]	; (80031bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003038:	60bb      	str	r3, [r7, #8]
      break;
 800303a:	e0b4      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800303c:	4b5d      	ldr	r3, [pc, #372]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003044:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003046:	4b5b      	ldr	r3, [pc, #364]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d04d      	beq.n	80030ee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003052:	4b58      	ldr	r3, [pc, #352]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	099b      	lsrs	r3, r3, #6
 8003058:	461a      	mov	r2, r3
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003062:	f04f 0100 	mov.w	r1, #0
 8003066:	ea02 0800 	and.w	r8, r2, r0
 800306a:	ea03 0901 	and.w	r9, r3, r1
 800306e:	4640      	mov	r0, r8
 8003070:	4649      	mov	r1, r9
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	014b      	lsls	r3, r1, #5
 800307c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003080:	0142      	lsls	r2, r0, #5
 8003082:	4610      	mov	r0, r2
 8003084:	4619      	mov	r1, r3
 8003086:	ebb0 0008 	subs.w	r0, r0, r8
 800308a:	eb61 0109 	sbc.w	r1, r1, r9
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	018b      	lsls	r3, r1, #6
 8003098:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800309c:	0182      	lsls	r2, r0, #6
 800309e:	1a12      	subs	r2, r2, r0
 80030a0:	eb63 0301 	sbc.w	r3, r3, r1
 80030a4:	f04f 0000 	mov.w	r0, #0
 80030a8:	f04f 0100 	mov.w	r1, #0
 80030ac:	00d9      	lsls	r1, r3, #3
 80030ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030b2:	00d0      	lsls	r0, r2, #3
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	eb12 0208 	adds.w	r2, r2, r8
 80030bc:	eb43 0309 	adc.w	r3, r3, r9
 80030c0:	f04f 0000 	mov.w	r0, #0
 80030c4:	f04f 0100 	mov.w	r1, #0
 80030c8:	0259      	lsls	r1, r3, #9
 80030ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80030ce:	0250      	lsls	r0, r2, #9
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4610      	mov	r0, r2
 80030d6:	4619      	mov	r1, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	461a      	mov	r2, r3
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	f7fd fde2 	bl	8000ca8 <__aeabi_uldivmod>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4613      	mov	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	e04a      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ee:	4b31      	ldr	r3, [pc, #196]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	099b      	lsrs	r3, r3, #6
 80030f4:	461a      	mov	r2, r3
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030fe:	f04f 0100 	mov.w	r1, #0
 8003102:	ea02 0400 	and.w	r4, r2, r0
 8003106:	ea03 0501 	and.w	r5, r3, r1
 800310a:	4620      	mov	r0, r4
 800310c:	4629      	mov	r1, r5
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	014b      	lsls	r3, r1, #5
 8003118:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800311c:	0142      	lsls	r2, r0, #5
 800311e:	4610      	mov	r0, r2
 8003120:	4619      	mov	r1, r3
 8003122:	1b00      	subs	r0, r0, r4
 8003124:	eb61 0105 	sbc.w	r1, r1, r5
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	018b      	lsls	r3, r1, #6
 8003132:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003136:	0182      	lsls	r2, r0, #6
 8003138:	1a12      	subs	r2, r2, r0
 800313a:	eb63 0301 	sbc.w	r3, r3, r1
 800313e:	f04f 0000 	mov.w	r0, #0
 8003142:	f04f 0100 	mov.w	r1, #0
 8003146:	00d9      	lsls	r1, r3, #3
 8003148:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800314c:	00d0      	lsls	r0, r2, #3
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	1912      	adds	r2, r2, r4
 8003154:	eb45 0303 	adc.w	r3, r5, r3
 8003158:	f04f 0000 	mov.w	r0, #0
 800315c:	f04f 0100 	mov.w	r1, #0
 8003160:	0299      	lsls	r1, r3, #10
 8003162:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003166:	0290      	lsls	r0, r2, #10
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4610      	mov	r0, r2
 800316e:	4619      	mov	r1, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	461a      	mov	r2, r3
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	f7fd fd96 	bl	8000ca8 <__aeabi_uldivmod>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4613      	mov	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003184:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	0c1b      	lsrs	r3, r3, #16
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	3301      	adds	r3, #1
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	60bb      	str	r3, [r7, #8]
      break;
 800319e:	e002      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031a2:	60bb      	str	r3, [r7, #8]
      break;
 80031a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031a6:	68bb      	ldr	r3, [r7, #8]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800
 80031b8:	00f42400 	.word	0x00f42400
 80031bc:	007a1200 	.word	0x007a1200

080031c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c4:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031c6:	681b      	ldr	r3, [r3, #0]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	2000000c 	.word	0x2000000c

080031d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031dc:	f7ff fff0 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 80031e0:	4602      	mov	r2, r0
 80031e2:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	0a9b      	lsrs	r3, r3, #10
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	4903      	ldr	r1, [pc, #12]	; (80031fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ee:	5ccb      	ldrb	r3, [r1, r3]
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40023800 	.word	0x40023800
 80031fc:	08007e3c 	.word	0x08007e3c

08003200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003204:	f7ff ffdc 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 8003208:	4602      	mov	r2, r0
 800320a:	4b05      	ldr	r3, [pc, #20]	; (8003220 <HAL_RCC_GetPCLK2Freq+0x20>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	0b5b      	lsrs	r3, r3, #13
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	4903      	ldr	r1, [pc, #12]	; (8003224 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003216:	5ccb      	ldrb	r3, [r1, r3]
 8003218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800321c:	4618      	mov	r0, r3
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40023800 	.word	0x40023800
 8003224:	08007e3c 	.word	0x08007e3c

08003228 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e083      	b.n	8003342 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	7f5b      	ldrb	r3, [r3, #29]
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d105      	bne.n	8003250 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f87d 	bl	800334a <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	22ca      	movs	r2, #202	; 0xca
 800325c:	625a      	str	r2, [r3, #36]	; 0x24
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2253      	movs	r2, #83	; 0x53
 8003264:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 fab2 	bl	80037d0 <RTC_EnterInitMode>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d008      	beq.n	8003284 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	22ff      	movs	r2, #255	; 0xff
 8003278:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2204      	movs	r2, #4
 800327e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e05e      	b.n	8003342 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6812      	ldr	r2, [r2, #0]
 800328e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003296:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6899      	ldr	r1, [r3, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	68d2      	ldr	r2, [r2, #12]
 80032be:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6919      	ldr	r1, [r3, #16]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	041a      	lsls	r2, r3, #16
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032e2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10e      	bne.n	8003310 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 fa44 	bl	8003780 <HAL_RTC_WaitForSynchro>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d008      	beq.n	8003310 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	22ff      	movs	r2, #255	; 0xff
 8003304:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2204      	movs	r2, #4
 800330a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e018      	b.n	8003342 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800331e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	22ff      	movs	r2, #255	; 0xff
 8003338:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003340:	2300      	movs	r3, #0
  }
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_RTC_MspInit>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800335e:	b590      	push	{r4, r7, lr}
 8003360:	b087      	sub	sp, #28
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	7f1b      	ldrb	r3, [r3, #28]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_RTC_SetTime+0x1c>
 8003376:	2302      	movs	r3, #2
 8003378:	e0aa      	b.n	80034d0 <HAL_RTC_SetTime+0x172>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2202      	movs	r2, #2
 8003384:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d126      	bne.n	80033da <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003396:	2b00      	cmp	r3, #0
 8003398:	d102      	bne.n	80033a0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2200      	movs	r2, #0
 800339e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fa3f 	bl	8003828 <RTC_ByteToBcd2>
 80033aa:	4603      	mov	r3, r0
 80033ac:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	785b      	ldrb	r3, [r3, #1]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fa38 	bl	8003828 <RTC_ByteToBcd2>
 80033b8:	4603      	mov	r3, r0
 80033ba:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80033bc:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	789b      	ldrb	r3, [r3, #2]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fa30 	bl	8003828 <RTC_ByteToBcd2>
 80033c8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80033ca:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	78db      	ldrb	r3, [r3, #3]
 80033d2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	e018      	b.n	800340c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d102      	bne.n	80033ee <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2200      	movs	r2, #0
 80033ec:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	785b      	ldrb	r3, [r3, #1]
 80033f8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80033fa:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003400:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	78db      	ldrb	r3, [r3, #3]
 8003406:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	22ca      	movs	r2, #202	; 0xca
 8003412:	625a      	str	r2, [r3, #36]	; 0x24
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2253      	movs	r2, #83	; 0x53
 800341a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f9d7 	bl	80037d0 <RTC_EnterInitMode>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00b      	beq.n	8003440 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	22ff      	movs	r2, #255	; 0xff
 800342e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2204      	movs	r2, #4
 8003434:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e047      	b.n	80034d0 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800344a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800344e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800345e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6899      	ldr	r1, [r3, #8]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	431a      	orrs	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003486:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	2b00      	cmp	r3, #0
 8003494:	d111      	bne.n	80034ba <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f972 	bl	8003780 <HAL_RTC_WaitForSynchro>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00b      	beq.n	80034ba <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	22ff      	movs	r2, #255	; 0xff
 80034a8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2204      	movs	r2, #4
 80034ae:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e00a      	b.n	80034d0 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	22ff      	movs	r2, #255	; 0xff
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80034ce:	2300      	movs	r3, #0
  }
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd90      	pop	{r4, r7, pc}

080034d8 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800350a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800350e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	0c1b      	lsrs	r3, r3, #16
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800351a:	b2da      	uxtb	r2, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	0a1b      	lsrs	r3, r3, #8
 8003524:	b2db      	uxtb	r3, r3
 8003526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800352a:	b2da      	uxtb	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003538:	b2da      	uxtb	r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	0c1b      	lsrs	r3, r3, #16
 8003542:	b2db      	uxtb	r3, r3
 8003544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003548:	b2da      	uxtb	r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d11a      	bne.n	800358a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f000 f983 	bl	8003864 <RTC_Bcd2ToByte>
 800355e:	4603      	mov	r3, r0
 8003560:	461a      	mov	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	785b      	ldrb	r3, [r3, #1]
 800356a:	4618      	mov	r0, r3
 800356c:	f000 f97a 	bl	8003864 <RTC_Bcd2ToByte>
 8003570:	4603      	mov	r3, r0
 8003572:	461a      	mov	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	789b      	ldrb	r3, [r3, #2]
 800357c:	4618      	mov	r0, r3
 800357e:	f000 f971 	bl	8003864 <RTC_Bcd2ToByte>
 8003582:	4603      	mov	r3, r0
 8003584:	461a      	mov	r2, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003594:	b590      	push	{r4, r7, lr}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	7f1b      	ldrb	r3, [r3, #28]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_RTC_SetDate+0x1c>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e094      	b.n	80036da <HAL_RTC_SetDate+0x146>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2201      	movs	r2, #1
 80035b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2202      	movs	r2, #2
 80035ba:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10e      	bne.n	80035e0 <HAL_RTC_SetDate+0x4c>
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	785b      	ldrb	r3, [r3, #1]
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d008      	beq.n	80035e0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	785b      	ldrb	r3, [r3, #1]
 80035d2:	f023 0310 	bic.w	r3, r3, #16
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	330a      	adds	r3, #10
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d11c      	bne.n	8003620 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	78db      	ldrb	r3, [r3, #3]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 f91c 	bl	8003828 <RTC_ByteToBcd2>
 80035f0:	4603      	mov	r3, r0
 80035f2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	785b      	ldrb	r3, [r3, #1]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 f915 	bl	8003828 <RTC_ByteToBcd2>
 80035fe:	4603      	mov	r3, r0
 8003600:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003602:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	789b      	ldrb	r3, [r3, #2]
 8003608:	4618      	mov	r0, r3
 800360a:	f000 f90d 	bl	8003828 <RTC_ByteToBcd2>
 800360e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003610:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800361a:	4313      	orrs	r3, r2
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	e00e      	b.n	800363e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	78db      	ldrb	r3, [r3, #3]
 8003624:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	785b      	ldrb	r3, [r3, #1]
 800362a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800362c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003632:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800363a:	4313      	orrs	r3, r2
 800363c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	22ca      	movs	r2, #202	; 0xca
 8003644:	625a      	str	r2, [r3, #36]	; 0x24
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2253      	movs	r2, #83	; 0x53
 800364c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f8be 	bl	80037d0 <RTC_EnterInitMode>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00b      	beq.n	8003672 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	22ff      	movs	r2, #255	; 0xff
 8003660:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2204      	movs	r2, #4
 8003666:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e033      	b.n	80036da <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800367c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003680:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003690:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d111      	bne.n	80036c4 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f86d 	bl	8003780 <HAL_RTC_WaitForSynchro>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00b      	beq.n	80036c4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	22ff      	movs	r2, #255	; 0xff
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2204      	movs	r2, #4
 80036b8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e00a      	b.n	80036da <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	22ff      	movs	r2, #255	; 0xff
 80036ca:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2201      	movs	r2, #1
 80036d0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80036d8:	2300      	movs	r3, #0
  }
}
 80036da:	4618      	mov	r0, r3
 80036dc:	371c      	adds	r7, #28
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd90      	pop	{r4, r7, pc}

080036e2 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b086      	sub	sp, #24
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80036fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003700:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	b2da      	uxtb	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	0a1b      	lsrs	r3, r3, #8
 8003710:	b2db      	uxtb	r3, r3
 8003712:	f003 031f 	and.w	r3, r3, #31
 8003716:	b2da      	uxtb	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	b2db      	uxtb	r3, r3
 8003720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003724:	b2da      	uxtb	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	0b5b      	lsrs	r3, r3, #13
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	b2da      	uxtb	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d11a      	bne.n	8003776 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	78db      	ldrb	r3, [r3, #3]
 8003744:	4618      	mov	r0, r3
 8003746:	f000 f88d 	bl	8003864 <RTC_Bcd2ToByte>
 800374a:	4603      	mov	r3, r0
 800374c:	461a      	mov	r2, r3
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	785b      	ldrb	r3, [r3, #1]
 8003756:	4618      	mov	r0, r3
 8003758:	f000 f884 	bl	8003864 <RTC_Bcd2ToByte>
 800375c:	4603      	mov	r3, r0
 800375e:	461a      	mov	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	789b      	ldrb	r3, [r3, #2]
 8003768:	4618      	mov	r0, r3
 800376a:	f000 f87b 	bl	8003864 <RTC_Bcd2ToByte>
 800376e:	4603      	mov	r3, r0
 8003770:	461a      	mov	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800379a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800379c:	f7fe fd04 	bl	80021a8 <HAL_GetTick>
 80037a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80037a2:	e009      	b.n	80037b8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80037a4:	f7fe fd00 	bl	80021a8 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037b2:	d901      	bls.n	80037b8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e007      	b.n	80037c8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0ee      	beq.n	80037a4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d119      	bne.n	800381e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f04f 32ff 	mov.w	r2, #4294967295
 80037f2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037f4:	f7fe fcd8 	bl	80021a8 <HAL_GetTick>
 80037f8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80037fa:	e009      	b.n	8003810 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80037fc:	f7fe fcd4 	bl	80021a8 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800380a:	d901      	bls.n	8003810 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e007      	b.n	8003820 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0ee      	beq.n	80037fc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003836:	e005      	b.n	8003844 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	3301      	adds	r3, #1
 800383c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800383e:	79fb      	ldrb	r3, [r7, #7]
 8003840:	3b0a      	subs	r3, #10
 8003842:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	2b09      	cmp	r3, #9
 8003848:	d8f6      	bhi.n	8003838 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	b2da      	uxtb	r2, r3
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	4313      	orrs	r3, r2
 8003856:	b2db      	uxtb	r3, r3
}
 8003858:	4618      	mov	r0, r3
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	b2db      	uxtb	r3, r3
 8003878:	461a      	mov	r2, r3
 800387a:	4613      	mov	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	b2da      	uxtb	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	b2db      	uxtb	r3, r3
 8003890:	4413      	add	r3, r2
 8003892:	b2db      	uxtb	r3, r3
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_RTCEx_SetRefClock>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef* hrtc)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	7f1b      	ldrb	r3, [r3, #28]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_RTCEx_SetRefClock+0x14>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e03a      	b.n	800392a <HAL_RTCEx_SetRefClock+0x8a>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2202      	movs	r2, #2
 80038be:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	22ca      	movs	r2, #202	; 0xca
 80038c6:	625a      	str	r2, [r3, #36]	; 0x24
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2253      	movs	r2, #83	; 0x53
 80038ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff ff7d 	bl	80037d0 <RTC_EnterInitMode>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00b      	beq.n	80038f4 <HAL_RTCEx_SetRefClock+0x54>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	22ff      	movs	r2, #255	; 0xff
 80038e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2204      	movs	r2, #4
 80038e8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e01a      	b.n	800392a <HAL_RTCEx_SetRefClock+0x8a>
  }
  else
  {
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0210 	orr.w	r2, r2, #16
 8003902:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003912:	60da      	str	r2, [r3, #12]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	22ff      	movs	r2, #255	; 0xff
 800391a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e03f      	b.n	80039c4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d106      	bne.n	800395e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7fe ff33 	bl	80027c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2224      	movs	r2, #36	; 0x24
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003974:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f928 	bl	8003bcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800398a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695a      	ldr	r2, [r3, #20]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800399a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039aa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08a      	sub	sp, #40	; 0x28
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	603b      	str	r3, [r7, #0]
 80039d8:	4613      	mov	r3, r2
 80039da:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d17c      	bne.n	8003ae6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <HAL_UART_Transmit+0x2c>
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e075      	b.n	8003ae8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_UART_Transmit+0x3e>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e06e      	b.n	8003ae8 <HAL_UART_Transmit+0x11c>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2221      	movs	r2, #33	; 0x21
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a20:	f7fe fbc2 	bl	80021a8 <HAL_GetTick>
 8003a24:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	88fa      	ldrh	r2, [r7, #6]
 8003a2a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	88fa      	ldrh	r2, [r7, #6]
 8003a30:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3a:	d108      	bne.n	8003a4e <HAL_UART_Transmit+0x82>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d104      	bne.n	8003a4e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	61bb      	str	r3, [r7, #24]
 8003a4c:	e003      	b.n	8003a56 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a5e:	e02a      	b.n	8003ab6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2200      	movs	r2, #0
 8003a68:	2180      	movs	r1, #128	; 0x80
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 f840 	bl	8003af0 <UART_WaitOnFlagUntilTimeout>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e036      	b.n	8003ae8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10b      	bne.n	8003a98 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	461a      	mov	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a8e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	3302      	adds	r3, #2
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	e007      	b.n	8003aa8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	781a      	ldrb	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1cf      	bne.n	8003a60 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	2140      	movs	r1, #64	; 0x40
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f810 	bl	8003af0 <UART_WaitOnFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e006      	b.n	8003ae8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	e000      	b.n	8003ae8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ae6:	2302      	movs	r3, #2
  }
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3720      	adds	r7, #32
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b090      	sub	sp, #64	; 0x40
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	4613      	mov	r3, r2
 8003afe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b00:	e050      	b.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b08:	d04c      	beq.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d007      	beq.n	8003b20 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b10:	f7fe fb4a 	bl	80021a8 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d241      	bcs.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	330c      	adds	r3, #12
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	e853 3f00 	ldrex	r3, [r3]
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	330c      	adds	r3, #12
 8003b3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b40:	637a      	str	r2, [r7, #52]	; 0x34
 8003b42:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b48:	e841 2300 	strex	r3, r2, [r1]
 8003b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1e5      	bne.n	8003b20 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3314      	adds	r3, #20
 8003b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	e853 3f00 	ldrex	r3, [r3]
 8003b62:	613b      	str	r3, [r7, #16]
   return(result);
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f023 0301 	bic.w	r3, r3, #1
 8003b6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3314      	adds	r3, #20
 8003b72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b74:	623a      	str	r2, [r7, #32]
 8003b76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b78:	69f9      	ldr	r1, [r7, #28]
 8003b7a:	6a3a      	ldr	r2, [r7, #32]
 8003b7c:	e841 2300 	strex	r3, r2, [r1]
 8003b80:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1e5      	bne.n	8003b54 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e00f      	b.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	4013      	ands	r3, r2
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	bf0c      	ite	eq
 8003bb4:	2301      	moveq	r3, #1
 8003bb6:	2300      	movne	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	461a      	mov	r2, r3
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d09f      	beq.n	8003b02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3740      	adds	r7, #64	; 0x40
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd0:	b09f      	sub	sp, #124	; 0x7c
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be2:	68d9      	ldr	r1, [r3, #12]
 8003be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	ea40 0301 	orr.w	r3, r0, r1
 8003bec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c10:	f021 010c 	bic.w	r1, r1, #12
 8003c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c2a:	6999      	ldr	r1, [r3, #24]
 8003c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	ea40 0301 	orr.w	r3, r0, r1
 8003c34:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	4bc5      	ldr	r3, [pc, #788]	; (8003f50 <UART_SetConfig+0x384>)
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d004      	beq.n	8003c4a <UART_SetConfig+0x7e>
 8003c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4bc3      	ldr	r3, [pc, #780]	; (8003f54 <UART_SetConfig+0x388>)
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d103      	bne.n	8003c52 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c4a:	f7ff fad9 	bl	8003200 <HAL_RCC_GetPCLK2Freq>
 8003c4e:	6778      	str	r0, [r7, #116]	; 0x74
 8003c50:	e002      	b.n	8003c58 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c52:	f7ff fac1 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
 8003c56:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c60:	f040 80b6 	bne.w	8003dd0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c66:	461c      	mov	r4, r3
 8003c68:	f04f 0500 	mov.w	r5, #0
 8003c6c:	4622      	mov	r2, r4
 8003c6e:	462b      	mov	r3, r5
 8003c70:	1891      	adds	r1, r2, r2
 8003c72:	6439      	str	r1, [r7, #64]	; 0x40
 8003c74:	415b      	adcs	r3, r3
 8003c76:	647b      	str	r3, [r7, #68]	; 0x44
 8003c78:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c7c:	1912      	adds	r2, r2, r4
 8003c7e:	eb45 0303 	adc.w	r3, r5, r3
 8003c82:	f04f 0000 	mov.w	r0, #0
 8003c86:	f04f 0100 	mov.w	r1, #0
 8003c8a:	00d9      	lsls	r1, r3, #3
 8003c8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c90:	00d0      	lsls	r0, r2, #3
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	1911      	adds	r1, r2, r4
 8003c98:	6639      	str	r1, [r7, #96]	; 0x60
 8003c9a:	416b      	adcs	r3, r5
 8003c9c:	667b      	str	r3, [r7, #100]	; 0x64
 8003c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	1891      	adds	r1, r2, r2
 8003caa:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cac:	415b      	adcs	r3, r3
 8003cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003cb4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003cb8:	f7fc fff6 	bl	8000ca8 <__aeabi_uldivmod>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4ba5      	ldr	r3, [pc, #660]	; (8003f58 <UART_SetConfig+0x38c>)
 8003cc2:	fba3 2302 	umull	r2, r3, r3, r2
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	011e      	lsls	r6, r3, #4
 8003cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ccc:	461c      	mov	r4, r3
 8003cce:	f04f 0500 	mov.w	r5, #0
 8003cd2:	4622      	mov	r2, r4
 8003cd4:	462b      	mov	r3, r5
 8003cd6:	1891      	adds	r1, r2, r2
 8003cd8:	6339      	str	r1, [r7, #48]	; 0x30
 8003cda:	415b      	adcs	r3, r3
 8003cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8003cde:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003ce2:	1912      	adds	r2, r2, r4
 8003ce4:	eb45 0303 	adc.w	r3, r5, r3
 8003ce8:	f04f 0000 	mov.w	r0, #0
 8003cec:	f04f 0100 	mov.w	r1, #0
 8003cf0:	00d9      	lsls	r1, r3, #3
 8003cf2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cf6:	00d0      	lsls	r0, r2, #3
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	1911      	adds	r1, r2, r4
 8003cfe:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d00:	416b      	adcs	r3, r5
 8003d02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	1891      	adds	r1, r2, r2
 8003d10:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d12:	415b      	adcs	r3, r3
 8003d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d1a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003d1e:	f7fc ffc3 	bl	8000ca8 <__aeabi_uldivmod>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4b8c      	ldr	r3, [pc, #560]	; (8003f58 <UART_SetConfig+0x38c>)
 8003d28:	fba3 1302 	umull	r1, r3, r3, r2
 8003d2c:	095b      	lsrs	r3, r3, #5
 8003d2e:	2164      	movs	r1, #100	; 0x64
 8003d30:	fb01 f303 	mul.w	r3, r1, r3
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	3332      	adds	r3, #50	; 0x32
 8003d3a:	4a87      	ldr	r2, [pc, #540]	; (8003f58 <UART_SetConfig+0x38c>)
 8003d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d40:	095b      	lsrs	r3, r3, #5
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d48:	441e      	add	r6, r3
 8003d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f04f 0100 	mov.w	r1, #0
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	1894      	adds	r4, r2, r2
 8003d58:	623c      	str	r4, [r7, #32]
 8003d5a:	415b      	adcs	r3, r3
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d62:	1812      	adds	r2, r2, r0
 8003d64:	eb41 0303 	adc.w	r3, r1, r3
 8003d68:	f04f 0400 	mov.w	r4, #0
 8003d6c:	f04f 0500 	mov.w	r5, #0
 8003d70:	00dd      	lsls	r5, r3, #3
 8003d72:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d76:	00d4      	lsls	r4, r2, #3
 8003d78:	4622      	mov	r2, r4
 8003d7a:	462b      	mov	r3, r5
 8003d7c:	1814      	adds	r4, r2, r0
 8003d7e:	653c      	str	r4, [r7, #80]	; 0x50
 8003d80:	414b      	adcs	r3, r1
 8003d82:	657b      	str	r3, [r7, #84]	; 0x54
 8003d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	1891      	adds	r1, r2, r2
 8003d90:	61b9      	str	r1, [r7, #24]
 8003d92:	415b      	adcs	r3, r3
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d9a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003d9e:	f7fc ff83 	bl	8000ca8 <__aeabi_uldivmod>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4b6c      	ldr	r3, [pc, #432]	; (8003f58 <UART_SetConfig+0x38c>)
 8003da8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	2164      	movs	r1, #100	; 0x64
 8003db0:	fb01 f303 	mul.w	r3, r1, r3
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	3332      	adds	r3, #50	; 0x32
 8003dba:	4a67      	ldr	r2, [pc, #412]	; (8003f58 <UART_SetConfig+0x38c>)
 8003dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc0:	095b      	lsrs	r3, r3, #5
 8003dc2:	f003 0207 	and.w	r2, r3, #7
 8003dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4432      	add	r2, r6
 8003dcc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dce:	e0b9      	b.n	8003f44 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dd2:	461c      	mov	r4, r3
 8003dd4:	f04f 0500 	mov.w	r5, #0
 8003dd8:	4622      	mov	r2, r4
 8003dda:	462b      	mov	r3, r5
 8003ddc:	1891      	adds	r1, r2, r2
 8003dde:	6139      	str	r1, [r7, #16]
 8003de0:	415b      	adcs	r3, r3
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003de8:	1912      	adds	r2, r2, r4
 8003dea:	eb45 0303 	adc.w	r3, r5, r3
 8003dee:	f04f 0000 	mov.w	r0, #0
 8003df2:	f04f 0100 	mov.w	r1, #0
 8003df6:	00d9      	lsls	r1, r3, #3
 8003df8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dfc:	00d0      	lsls	r0, r2, #3
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	eb12 0804 	adds.w	r8, r2, r4
 8003e06:	eb43 0905 	adc.w	r9, r3, r5
 8003e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f04f 0100 	mov.w	r1, #0
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	008b      	lsls	r3, r1, #2
 8003e1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e22:	0082      	lsls	r2, r0, #2
 8003e24:	4640      	mov	r0, r8
 8003e26:	4649      	mov	r1, r9
 8003e28:	f7fc ff3e 	bl	8000ca8 <__aeabi_uldivmod>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4b49      	ldr	r3, [pc, #292]	; (8003f58 <UART_SetConfig+0x38c>)
 8003e32:	fba3 2302 	umull	r2, r3, r3, r2
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	011e      	lsls	r6, r3, #4
 8003e3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f04f 0100 	mov.w	r1, #0
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	1894      	adds	r4, r2, r2
 8003e48:	60bc      	str	r4, [r7, #8]
 8003e4a:	415b      	adcs	r3, r3
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e52:	1812      	adds	r2, r2, r0
 8003e54:	eb41 0303 	adc.w	r3, r1, r3
 8003e58:	f04f 0400 	mov.w	r4, #0
 8003e5c:	f04f 0500 	mov.w	r5, #0
 8003e60:	00dd      	lsls	r5, r3, #3
 8003e62:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e66:	00d4      	lsls	r4, r2, #3
 8003e68:	4622      	mov	r2, r4
 8003e6a:	462b      	mov	r3, r5
 8003e6c:	1814      	adds	r4, r2, r0
 8003e6e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003e70:	414b      	adcs	r3, r1
 8003e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f04f 0100 	mov.w	r1, #0
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	008b      	lsls	r3, r1, #2
 8003e88:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e8c:	0082      	lsls	r2, r0, #2
 8003e8e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003e92:	f7fc ff09 	bl	8000ca8 <__aeabi_uldivmod>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4b2f      	ldr	r3, [pc, #188]	; (8003f58 <UART_SetConfig+0x38c>)
 8003e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003ea0:	095b      	lsrs	r3, r3, #5
 8003ea2:	2164      	movs	r1, #100	; 0x64
 8003ea4:	fb01 f303 	mul.w	r3, r1, r3
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	3332      	adds	r3, #50	; 0x32
 8003eae:	4a2a      	ldr	r2, [pc, #168]	; (8003f58 <UART_SetConfig+0x38c>)
 8003eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eba:	441e      	add	r6, r3
 8003ebc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f04f 0100 	mov.w	r1, #0
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	1894      	adds	r4, r2, r2
 8003eca:	603c      	str	r4, [r7, #0]
 8003ecc:	415b      	adcs	r3, r3
 8003ece:	607b      	str	r3, [r7, #4]
 8003ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ed4:	1812      	adds	r2, r2, r0
 8003ed6:	eb41 0303 	adc.w	r3, r1, r3
 8003eda:	f04f 0400 	mov.w	r4, #0
 8003ede:	f04f 0500 	mov.w	r5, #0
 8003ee2:	00dd      	lsls	r5, r3, #3
 8003ee4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ee8:	00d4      	lsls	r4, r2, #3
 8003eea:	4622      	mov	r2, r4
 8003eec:	462b      	mov	r3, r5
 8003eee:	eb12 0a00 	adds.w	sl, r2, r0
 8003ef2:	eb43 0b01 	adc.w	fp, r3, r1
 8003ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f04f 0100 	mov.w	r1, #0
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	008b      	lsls	r3, r1, #2
 8003f0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f0e:	0082      	lsls	r2, r0, #2
 8003f10:	4650      	mov	r0, sl
 8003f12:	4659      	mov	r1, fp
 8003f14:	f7fc fec8 	bl	8000ca8 <__aeabi_uldivmod>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4b0e      	ldr	r3, [pc, #56]	; (8003f58 <UART_SetConfig+0x38c>)
 8003f1e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	2164      	movs	r1, #100	; 0x64
 8003f26:	fb01 f303 	mul.w	r3, r1, r3
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	3332      	adds	r3, #50	; 0x32
 8003f30:	4a09      	ldr	r2, [pc, #36]	; (8003f58 <UART_SetConfig+0x38c>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	f003 020f 	and.w	r2, r3, #15
 8003f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4432      	add	r2, r6
 8003f42:	609a      	str	r2, [r3, #8]
}
 8003f44:	bf00      	nop
 8003f46:	377c      	adds	r7, #124	; 0x7c
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f4e:	bf00      	nop
 8003f50:	40011000 	.word	0x40011000
 8003f54:	40011400 	.word	0x40011400
 8003f58:	51eb851f 	.word	0x51eb851f

08003f5c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
	HAL_Init();
 8003f60:	f7fe f8c2 	bl	80020e8 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8003f64:	f000 f80a 	bl	8003f7c <SystemClock_Config>
	uartInit(9600) ;
 8003f68:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8003f6c:	f7fd fe8a 	bl	8001c84 <uartInit>
	initFSM()  ;
 8003f70:	f7fd facc 	bl	800150c <initFSM>
	/* Infinite loop */

	while (1)
    {
		FSM_loop()  ;
 8003f74:	f7fd fad6 	bl	8001524 <FSM_loop>
 8003f78:	e7fc      	b.n	8003f74 <main+0x18>
	...

08003f7c <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b094      	sub	sp, #80	; 0x50
 8003f80:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f82:	f107 0320 	add.w	r3, r7, #32
 8003f86:	2230      	movs	r2, #48	; 0x30
 8003f88:	2100      	movs	r1, #0
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 f8ce 	bl	800412c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f90:	f107 030c 	add.w	r3, r7, #12
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	605a      	str	r2, [r3, #4]
 8003f9a:	609a      	str	r2, [r3, #8]
 8003f9c:	60da      	str	r2, [r3, #12]
 8003f9e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60bb      	str	r3, [r7, #8]
 8003fa4:	4b2d      	ldr	r3, [pc, #180]	; (800405c <SystemClock_Config+0xe0>)
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	4a2c      	ldr	r2, [pc, #176]	; (800405c <SystemClock_Config+0xe0>)
 8003faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fae:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb0:	4b2a      	ldr	r3, [pc, #168]	; (800405c <SystemClock_Config+0xe0>)
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	607b      	str	r3, [r7, #4]
 8003fc0:	4b27      	ldr	r3, [pc, #156]	; (8004060 <SystemClock_Config+0xe4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a26      	ldr	r2, [pc, #152]	; (8004060 <SystemClock_Config+0xe4>)
 8003fc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fca:	6013      	str	r3, [r2, #0]
 8003fcc:	4b24      	ldr	r3, [pc, #144]	; (8004060 <SystemClock_Config+0xe4>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003fd4:	607b      	str	r3, [r7, #4]
 8003fd6:	687b      	ldr	r3, [r7, #4]
	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003fd8:	2305      	movs	r3, #5
 8003fda:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003fdc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
	  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003fea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003fee:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 8;
 8003ff0:	2308      	movs	r3, #8
 8003ff2:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLN = 360;
 8003ff4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003ff8:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003ffe:	2307      	movs	r3, #7
 8004000:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004002:	f107 0320 	add.w	r3, r7, #32
 8004006:	4618      	mov	r0, r3
 8004008:	f7fe fc9a 	bl	8002940 <HAL_RCC_OscConfig>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <SystemClock_Config+0x9a>
	  {
	    Error_Handler();
 8004012:	f000 f827 	bl	8004064 <Error_Handler>
	  }
	  /** Activate the Over-Drive mode
	  */
	  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004016:	f7fe fc43 	bl	80028a0 <HAL_PWREx_EnableOverDrive>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <SystemClock_Config+0xa8>
	  {
	    Error_Handler();
 8004020:	f000 f820 	bl	8004064 <Error_Handler>
	  }
	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004024:	230f      	movs	r3, #15
 8004026:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004028:	2302      	movs	r3, #2
 800402a:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800402c:	2300      	movs	r3, #0
 800402e:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004030:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004034:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800403a:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800403c:	f107 030c 	add.w	r3, r7, #12
 8004040:	2105      	movs	r1, #5
 8004042:	4618      	mov	r0, r3
 8004044:	f7fe fef4 	bl	8002e30 <HAL_RCC_ClockConfig>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <SystemClock_Config+0xd6>
	  {
	    Error_Handler();
 800404e:	f000 f809 	bl	8004064 <Error_Handler>
	  }
}
 8004052:	bf00      	nop
 8004054:	3750      	adds	r7, #80	; 0x50
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40023800 	.word	0x40023800
 8004060:	40007000 	.word	0x40007000

08004064 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_Init(LED2) ;
 8004068:	2001      	movs	r0, #1
 800406a:	f7fd fe8f 	bl	8001d8c <BSP_LED_Init>
  BSP_LED_On(LED2);
 800406e:	2001      	movs	r0, #1
 8004070:	f7fd fedc 	bl	8001e2c <BSP_LED_On>
  while (1)
  {
	  BSP_LED_Toggle(LED2);
 8004074:	2001      	movs	r0, #1
 8004076:	f7fd fef3 	bl	8001e60 <BSP_LED_Toggle>
	  HAL_Delay(100) ;
 800407a:	2064      	movs	r0, #100	; 0x64
 800407c:	f7fe f8a0 	bl	80021c0 <HAL_Delay>
	  BSP_LED_Toggle(LED2);
 8004080:	e7f8      	b.n	8004074 <Error_Handler+0x10>
	...

08004084 <Reset_Handler>:

   .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004084:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040bc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004088:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800408a:	e003      	b.n	8004094 <LoopCopyDataInit>

0800408c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800408c:	4b0c      	ldr	r3, [pc, #48]	; (80040c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800408e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004090:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004092:	3104      	adds	r1, #4

08004094 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004094:	480b      	ldr	r0, [pc, #44]	; (80040c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004096:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004098:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800409a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800409c:	d3f6      	bcc.n	800408c <CopyDataInit>
  ldr  r2, =_sbss
 800409e:	4a0b      	ldr	r2, [pc, #44]	; (80040cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80040a0:	e002      	b.n	80040a8 <LoopFillZerobss>

080040a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80040a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80040a4:	f842 3b04 	str.w	r3, [r2], #4

080040a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80040a8:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80040aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80040ac:	d3f9      	bcc.n	80040a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80040ae:	f7fd fef1 	bl	8001e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040b2:	f000 f817 	bl	80040e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040b6:	f7ff ff51 	bl	8003f5c <main>
  bx  lr    
 80040ba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80040bc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80040c0:	08008278 	.word	0x08008278
  ldr  r0, =_sdata
 80040c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80040c8:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 80040cc:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 80040d0:	2000029c 	.word	0x2000029c

080040d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040d4:	e7fe      	b.n	80040d4 <ADC_IRQHandler>
	...

080040d8 <__errno>:
 80040d8:	4b01      	ldr	r3, [pc, #4]	; (80040e0 <__errno+0x8>)
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20000018 	.word	0x20000018

080040e4 <__libc_init_array>:
 80040e4:	b570      	push	{r4, r5, r6, lr}
 80040e6:	4d0d      	ldr	r5, [pc, #52]	; (800411c <__libc_init_array+0x38>)
 80040e8:	4c0d      	ldr	r4, [pc, #52]	; (8004120 <__libc_init_array+0x3c>)
 80040ea:	1b64      	subs	r4, r4, r5
 80040ec:	10a4      	asrs	r4, r4, #2
 80040ee:	2600      	movs	r6, #0
 80040f0:	42a6      	cmp	r6, r4
 80040f2:	d109      	bne.n	8004108 <__libc_init_array+0x24>
 80040f4:	4d0b      	ldr	r5, [pc, #44]	; (8004124 <__libc_init_array+0x40>)
 80040f6:	4c0c      	ldr	r4, [pc, #48]	; (8004128 <__libc_init_array+0x44>)
 80040f8:	f003 fe68 	bl	8007dcc <_init>
 80040fc:	1b64      	subs	r4, r4, r5
 80040fe:	10a4      	asrs	r4, r4, #2
 8004100:	2600      	movs	r6, #0
 8004102:	42a6      	cmp	r6, r4
 8004104:	d105      	bne.n	8004112 <__libc_init_array+0x2e>
 8004106:	bd70      	pop	{r4, r5, r6, pc}
 8004108:	f855 3b04 	ldr.w	r3, [r5], #4
 800410c:	4798      	blx	r3
 800410e:	3601      	adds	r6, #1
 8004110:	e7ee      	b.n	80040f0 <__libc_init_array+0xc>
 8004112:	f855 3b04 	ldr.w	r3, [r5], #4
 8004116:	4798      	blx	r3
 8004118:	3601      	adds	r6, #1
 800411a:	e7f2      	b.n	8004102 <__libc_init_array+0x1e>
 800411c:	08008270 	.word	0x08008270
 8004120:	08008270 	.word	0x08008270
 8004124:	08008270 	.word	0x08008270
 8004128:	08008274 	.word	0x08008274

0800412c <memset>:
 800412c:	4402      	add	r2, r0
 800412e:	4603      	mov	r3, r0
 8004130:	4293      	cmp	r3, r2
 8004132:	d100      	bne.n	8004136 <memset+0xa>
 8004134:	4770      	bx	lr
 8004136:	f803 1b01 	strb.w	r1, [r3], #1
 800413a:	e7f9      	b.n	8004130 <memset+0x4>

0800413c <__cvt>:
 800413c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004140:	ec55 4b10 	vmov	r4, r5, d0
 8004144:	2d00      	cmp	r5, #0
 8004146:	460e      	mov	r6, r1
 8004148:	4619      	mov	r1, r3
 800414a:	462b      	mov	r3, r5
 800414c:	bfbb      	ittet	lt
 800414e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004152:	461d      	movlt	r5, r3
 8004154:	2300      	movge	r3, #0
 8004156:	232d      	movlt	r3, #45	; 0x2d
 8004158:	700b      	strb	r3, [r1, #0]
 800415a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800415c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004160:	4691      	mov	r9, r2
 8004162:	f023 0820 	bic.w	r8, r3, #32
 8004166:	bfbc      	itt	lt
 8004168:	4622      	movlt	r2, r4
 800416a:	4614      	movlt	r4, r2
 800416c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004170:	d005      	beq.n	800417e <__cvt+0x42>
 8004172:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004176:	d100      	bne.n	800417a <__cvt+0x3e>
 8004178:	3601      	adds	r6, #1
 800417a:	2102      	movs	r1, #2
 800417c:	e000      	b.n	8004180 <__cvt+0x44>
 800417e:	2103      	movs	r1, #3
 8004180:	ab03      	add	r3, sp, #12
 8004182:	9301      	str	r3, [sp, #4]
 8004184:	ab02      	add	r3, sp, #8
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	ec45 4b10 	vmov	d0, r4, r5
 800418c:	4653      	mov	r3, sl
 800418e:	4632      	mov	r2, r6
 8004190:	f000 fcea 	bl	8004b68 <_dtoa_r>
 8004194:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004198:	4607      	mov	r7, r0
 800419a:	d102      	bne.n	80041a2 <__cvt+0x66>
 800419c:	f019 0f01 	tst.w	r9, #1
 80041a0:	d022      	beq.n	80041e8 <__cvt+0xac>
 80041a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80041a6:	eb07 0906 	add.w	r9, r7, r6
 80041aa:	d110      	bne.n	80041ce <__cvt+0x92>
 80041ac:	783b      	ldrb	r3, [r7, #0]
 80041ae:	2b30      	cmp	r3, #48	; 0x30
 80041b0:	d10a      	bne.n	80041c8 <__cvt+0x8c>
 80041b2:	2200      	movs	r2, #0
 80041b4:	2300      	movs	r3, #0
 80041b6:	4620      	mov	r0, r4
 80041b8:	4629      	mov	r1, r5
 80041ba:	f7fc fc95 	bl	8000ae8 <__aeabi_dcmpeq>
 80041be:	b918      	cbnz	r0, 80041c8 <__cvt+0x8c>
 80041c0:	f1c6 0601 	rsb	r6, r6, #1
 80041c4:	f8ca 6000 	str.w	r6, [sl]
 80041c8:	f8da 3000 	ldr.w	r3, [sl]
 80041cc:	4499      	add	r9, r3
 80041ce:	2200      	movs	r2, #0
 80041d0:	2300      	movs	r3, #0
 80041d2:	4620      	mov	r0, r4
 80041d4:	4629      	mov	r1, r5
 80041d6:	f7fc fc87 	bl	8000ae8 <__aeabi_dcmpeq>
 80041da:	b108      	cbz	r0, 80041e0 <__cvt+0xa4>
 80041dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80041e0:	2230      	movs	r2, #48	; 0x30
 80041e2:	9b03      	ldr	r3, [sp, #12]
 80041e4:	454b      	cmp	r3, r9
 80041e6:	d307      	bcc.n	80041f8 <__cvt+0xbc>
 80041e8:	9b03      	ldr	r3, [sp, #12]
 80041ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041ec:	1bdb      	subs	r3, r3, r7
 80041ee:	4638      	mov	r0, r7
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	b004      	add	sp, #16
 80041f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041f8:	1c59      	adds	r1, r3, #1
 80041fa:	9103      	str	r1, [sp, #12]
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	e7f0      	b.n	80041e2 <__cvt+0xa6>

08004200 <__exponent>:
 8004200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004202:	4603      	mov	r3, r0
 8004204:	2900      	cmp	r1, #0
 8004206:	bfb8      	it	lt
 8004208:	4249      	neglt	r1, r1
 800420a:	f803 2b02 	strb.w	r2, [r3], #2
 800420e:	bfb4      	ite	lt
 8004210:	222d      	movlt	r2, #45	; 0x2d
 8004212:	222b      	movge	r2, #43	; 0x2b
 8004214:	2909      	cmp	r1, #9
 8004216:	7042      	strb	r2, [r0, #1]
 8004218:	dd2a      	ble.n	8004270 <__exponent+0x70>
 800421a:	f10d 0407 	add.w	r4, sp, #7
 800421e:	46a4      	mov	ip, r4
 8004220:	270a      	movs	r7, #10
 8004222:	46a6      	mov	lr, r4
 8004224:	460a      	mov	r2, r1
 8004226:	fb91 f6f7 	sdiv	r6, r1, r7
 800422a:	fb07 1516 	mls	r5, r7, r6, r1
 800422e:	3530      	adds	r5, #48	; 0x30
 8004230:	2a63      	cmp	r2, #99	; 0x63
 8004232:	f104 34ff 	add.w	r4, r4, #4294967295
 8004236:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800423a:	4631      	mov	r1, r6
 800423c:	dcf1      	bgt.n	8004222 <__exponent+0x22>
 800423e:	3130      	adds	r1, #48	; 0x30
 8004240:	f1ae 0502 	sub.w	r5, lr, #2
 8004244:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004248:	1c44      	adds	r4, r0, #1
 800424a:	4629      	mov	r1, r5
 800424c:	4561      	cmp	r1, ip
 800424e:	d30a      	bcc.n	8004266 <__exponent+0x66>
 8004250:	f10d 0209 	add.w	r2, sp, #9
 8004254:	eba2 020e 	sub.w	r2, r2, lr
 8004258:	4565      	cmp	r5, ip
 800425a:	bf88      	it	hi
 800425c:	2200      	movhi	r2, #0
 800425e:	4413      	add	r3, r2
 8004260:	1a18      	subs	r0, r3, r0
 8004262:	b003      	add	sp, #12
 8004264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004266:	f811 2b01 	ldrb.w	r2, [r1], #1
 800426a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800426e:	e7ed      	b.n	800424c <__exponent+0x4c>
 8004270:	2330      	movs	r3, #48	; 0x30
 8004272:	3130      	adds	r1, #48	; 0x30
 8004274:	7083      	strb	r3, [r0, #2]
 8004276:	70c1      	strb	r1, [r0, #3]
 8004278:	1d03      	adds	r3, r0, #4
 800427a:	e7f1      	b.n	8004260 <__exponent+0x60>

0800427c <_printf_float>:
 800427c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004280:	ed2d 8b02 	vpush	{d8}
 8004284:	b08d      	sub	sp, #52	; 0x34
 8004286:	460c      	mov	r4, r1
 8004288:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800428c:	4616      	mov	r6, r2
 800428e:	461f      	mov	r7, r3
 8004290:	4605      	mov	r5, r0
 8004292:	f001 fa55 	bl	8005740 <_localeconv_r>
 8004296:	f8d0 a000 	ldr.w	sl, [r0]
 800429a:	4650      	mov	r0, sl
 800429c:	f7fb ffa8 	bl	80001f0 <strlen>
 80042a0:	2300      	movs	r3, #0
 80042a2:	930a      	str	r3, [sp, #40]	; 0x28
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	9305      	str	r3, [sp, #20]
 80042a8:	f8d8 3000 	ldr.w	r3, [r8]
 80042ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80042b0:	3307      	adds	r3, #7
 80042b2:	f023 0307 	bic.w	r3, r3, #7
 80042b6:	f103 0208 	add.w	r2, r3, #8
 80042ba:	f8c8 2000 	str.w	r2, [r8]
 80042be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80042c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80042ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80042ce:	9307      	str	r3, [sp, #28]
 80042d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80042d4:	ee08 0a10 	vmov	s16, r0
 80042d8:	4b9f      	ldr	r3, [pc, #636]	; (8004558 <_printf_float+0x2dc>)
 80042da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042de:	f04f 32ff 	mov.w	r2, #4294967295
 80042e2:	f7fc fc33 	bl	8000b4c <__aeabi_dcmpun>
 80042e6:	bb88      	cbnz	r0, 800434c <_printf_float+0xd0>
 80042e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042ec:	4b9a      	ldr	r3, [pc, #616]	; (8004558 <_printf_float+0x2dc>)
 80042ee:	f04f 32ff 	mov.w	r2, #4294967295
 80042f2:	f7fc fc0d 	bl	8000b10 <__aeabi_dcmple>
 80042f6:	bb48      	cbnz	r0, 800434c <_printf_float+0xd0>
 80042f8:	2200      	movs	r2, #0
 80042fa:	2300      	movs	r3, #0
 80042fc:	4640      	mov	r0, r8
 80042fe:	4649      	mov	r1, r9
 8004300:	f7fc fbfc 	bl	8000afc <__aeabi_dcmplt>
 8004304:	b110      	cbz	r0, 800430c <_printf_float+0x90>
 8004306:	232d      	movs	r3, #45	; 0x2d
 8004308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800430c:	4b93      	ldr	r3, [pc, #588]	; (800455c <_printf_float+0x2e0>)
 800430e:	4894      	ldr	r0, [pc, #592]	; (8004560 <_printf_float+0x2e4>)
 8004310:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004314:	bf94      	ite	ls
 8004316:	4698      	movls	r8, r3
 8004318:	4680      	movhi	r8, r0
 800431a:	2303      	movs	r3, #3
 800431c:	6123      	str	r3, [r4, #16]
 800431e:	9b05      	ldr	r3, [sp, #20]
 8004320:	f023 0204 	bic.w	r2, r3, #4
 8004324:	6022      	str	r2, [r4, #0]
 8004326:	f04f 0900 	mov.w	r9, #0
 800432a:	9700      	str	r7, [sp, #0]
 800432c:	4633      	mov	r3, r6
 800432e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004330:	4621      	mov	r1, r4
 8004332:	4628      	mov	r0, r5
 8004334:	f000 f9d8 	bl	80046e8 <_printf_common>
 8004338:	3001      	adds	r0, #1
 800433a:	f040 8090 	bne.w	800445e <_printf_float+0x1e2>
 800433e:	f04f 30ff 	mov.w	r0, #4294967295
 8004342:	b00d      	add	sp, #52	; 0x34
 8004344:	ecbd 8b02 	vpop	{d8}
 8004348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800434c:	4642      	mov	r2, r8
 800434e:	464b      	mov	r3, r9
 8004350:	4640      	mov	r0, r8
 8004352:	4649      	mov	r1, r9
 8004354:	f7fc fbfa 	bl	8000b4c <__aeabi_dcmpun>
 8004358:	b140      	cbz	r0, 800436c <_printf_float+0xf0>
 800435a:	464b      	mov	r3, r9
 800435c:	2b00      	cmp	r3, #0
 800435e:	bfbc      	itt	lt
 8004360:	232d      	movlt	r3, #45	; 0x2d
 8004362:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004366:	487f      	ldr	r0, [pc, #508]	; (8004564 <_printf_float+0x2e8>)
 8004368:	4b7f      	ldr	r3, [pc, #508]	; (8004568 <_printf_float+0x2ec>)
 800436a:	e7d1      	b.n	8004310 <_printf_float+0x94>
 800436c:	6863      	ldr	r3, [r4, #4]
 800436e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004372:	9206      	str	r2, [sp, #24]
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	d13f      	bne.n	80043f8 <_printf_float+0x17c>
 8004378:	2306      	movs	r3, #6
 800437a:	6063      	str	r3, [r4, #4]
 800437c:	9b05      	ldr	r3, [sp, #20]
 800437e:	6861      	ldr	r1, [r4, #4]
 8004380:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004384:	2300      	movs	r3, #0
 8004386:	9303      	str	r3, [sp, #12]
 8004388:	ab0a      	add	r3, sp, #40	; 0x28
 800438a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800438e:	ab09      	add	r3, sp, #36	; 0x24
 8004390:	ec49 8b10 	vmov	d0, r8, r9
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	6022      	str	r2, [r4, #0]
 8004398:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800439c:	4628      	mov	r0, r5
 800439e:	f7ff fecd 	bl	800413c <__cvt>
 80043a2:	9b06      	ldr	r3, [sp, #24]
 80043a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80043a6:	2b47      	cmp	r3, #71	; 0x47
 80043a8:	4680      	mov	r8, r0
 80043aa:	d108      	bne.n	80043be <_printf_float+0x142>
 80043ac:	1cc8      	adds	r0, r1, #3
 80043ae:	db02      	blt.n	80043b6 <_printf_float+0x13a>
 80043b0:	6863      	ldr	r3, [r4, #4]
 80043b2:	4299      	cmp	r1, r3
 80043b4:	dd41      	ble.n	800443a <_printf_float+0x1be>
 80043b6:	f1ab 0b02 	sub.w	fp, fp, #2
 80043ba:	fa5f fb8b 	uxtb.w	fp, fp
 80043be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80043c2:	d820      	bhi.n	8004406 <_printf_float+0x18a>
 80043c4:	3901      	subs	r1, #1
 80043c6:	465a      	mov	r2, fp
 80043c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80043cc:	9109      	str	r1, [sp, #36]	; 0x24
 80043ce:	f7ff ff17 	bl	8004200 <__exponent>
 80043d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043d4:	1813      	adds	r3, r2, r0
 80043d6:	2a01      	cmp	r2, #1
 80043d8:	4681      	mov	r9, r0
 80043da:	6123      	str	r3, [r4, #16]
 80043dc:	dc02      	bgt.n	80043e4 <_printf_float+0x168>
 80043de:	6822      	ldr	r2, [r4, #0]
 80043e0:	07d2      	lsls	r2, r2, #31
 80043e2:	d501      	bpl.n	80043e8 <_printf_float+0x16c>
 80043e4:	3301      	adds	r3, #1
 80043e6:	6123      	str	r3, [r4, #16]
 80043e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d09c      	beq.n	800432a <_printf_float+0xae>
 80043f0:	232d      	movs	r3, #45	; 0x2d
 80043f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043f6:	e798      	b.n	800432a <_printf_float+0xae>
 80043f8:	9a06      	ldr	r2, [sp, #24]
 80043fa:	2a47      	cmp	r2, #71	; 0x47
 80043fc:	d1be      	bne.n	800437c <_printf_float+0x100>
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1bc      	bne.n	800437c <_printf_float+0x100>
 8004402:	2301      	movs	r3, #1
 8004404:	e7b9      	b.n	800437a <_printf_float+0xfe>
 8004406:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800440a:	d118      	bne.n	800443e <_printf_float+0x1c2>
 800440c:	2900      	cmp	r1, #0
 800440e:	6863      	ldr	r3, [r4, #4]
 8004410:	dd0b      	ble.n	800442a <_printf_float+0x1ae>
 8004412:	6121      	str	r1, [r4, #16]
 8004414:	b913      	cbnz	r3, 800441c <_printf_float+0x1a0>
 8004416:	6822      	ldr	r2, [r4, #0]
 8004418:	07d0      	lsls	r0, r2, #31
 800441a:	d502      	bpl.n	8004422 <_printf_float+0x1a6>
 800441c:	3301      	adds	r3, #1
 800441e:	440b      	add	r3, r1
 8004420:	6123      	str	r3, [r4, #16]
 8004422:	65a1      	str	r1, [r4, #88]	; 0x58
 8004424:	f04f 0900 	mov.w	r9, #0
 8004428:	e7de      	b.n	80043e8 <_printf_float+0x16c>
 800442a:	b913      	cbnz	r3, 8004432 <_printf_float+0x1b6>
 800442c:	6822      	ldr	r2, [r4, #0]
 800442e:	07d2      	lsls	r2, r2, #31
 8004430:	d501      	bpl.n	8004436 <_printf_float+0x1ba>
 8004432:	3302      	adds	r3, #2
 8004434:	e7f4      	b.n	8004420 <_printf_float+0x1a4>
 8004436:	2301      	movs	r3, #1
 8004438:	e7f2      	b.n	8004420 <_printf_float+0x1a4>
 800443a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800443e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004440:	4299      	cmp	r1, r3
 8004442:	db05      	blt.n	8004450 <_printf_float+0x1d4>
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	6121      	str	r1, [r4, #16]
 8004448:	07d8      	lsls	r0, r3, #31
 800444a:	d5ea      	bpl.n	8004422 <_printf_float+0x1a6>
 800444c:	1c4b      	adds	r3, r1, #1
 800444e:	e7e7      	b.n	8004420 <_printf_float+0x1a4>
 8004450:	2900      	cmp	r1, #0
 8004452:	bfd4      	ite	le
 8004454:	f1c1 0202 	rsble	r2, r1, #2
 8004458:	2201      	movgt	r2, #1
 800445a:	4413      	add	r3, r2
 800445c:	e7e0      	b.n	8004420 <_printf_float+0x1a4>
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	055a      	lsls	r2, r3, #21
 8004462:	d407      	bmi.n	8004474 <_printf_float+0x1f8>
 8004464:	6923      	ldr	r3, [r4, #16]
 8004466:	4642      	mov	r2, r8
 8004468:	4631      	mov	r1, r6
 800446a:	4628      	mov	r0, r5
 800446c:	47b8      	blx	r7
 800446e:	3001      	adds	r0, #1
 8004470:	d12c      	bne.n	80044cc <_printf_float+0x250>
 8004472:	e764      	b.n	800433e <_printf_float+0xc2>
 8004474:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004478:	f240 80e0 	bls.w	800463c <_printf_float+0x3c0>
 800447c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004480:	2200      	movs	r2, #0
 8004482:	2300      	movs	r3, #0
 8004484:	f7fc fb30 	bl	8000ae8 <__aeabi_dcmpeq>
 8004488:	2800      	cmp	r0, #0
 800448a:	d034      	beq.n	80044f6 <_printf_float+0x27a>
 800448c:	4a37      	ldr	r2, [pc, #220]	; (800456c <_printf_float+0x2f0>)
 800448e:	2301      	movs	r3, #1
 8004490:	4631      	mov	r1, r6
 8004492:	4628      	mov	r0, r5
 8004494:	47b8      	blx	r7
 8004496:	3001      	adds	r0, #1
 8004498:	f43f af51 	beq.w	800433e <_printf_float+0xc2>
 800449c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044a0:	429a      	cmp	r2, r3
 80044a2:	db02      	blt.n	80044aa <_printf_float+0x22e>
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	07d8      	lsls	r0, r3, #31
 80044a8:	d510      	bpl.n	80044cc <_printf_float+0x250>
 80044aa:	ee18 3a10 	vmov	r3, s16
 80044ae:	4652      	mov	r2, sl
 80044b0:	4631      	mov	r1, r6
 80044b2:	4628      	mov	r0, r5
 80044b4:	47b8      	blx	r7
 80044b6:	3001      	adds	r0, #1
 80044b8:	f43f af41 	beq.w	800433e <_printf_float+0xc2>
 80044bc:	f04f 0800 	mov.w	r8, #0
 80044c0:	f104 091a 	add.w	r9, r4, #26
 80044c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044c6:	3b01      	subs	r3, #1
 80044c8:	4543      	cmp	r3, r8
 80044ca:	dc09      	bgt.n	80044e0 <_printf_float+0x264>
 80044cc:	6823      	ldr	r3, [r4, #0]
 80044ce:	079b      	lsls	r3, r3, #30
 80044d0:	f100 8105 	bmi.w	80046de <_printf_float+0x462>
 80044d4:	68e0      	ldr	r0, [r4, #12]
 80044d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044d8:	4298      	cmp	r0, r3
 80044da:	bfb8      	it	lt
 80044dc:	4618      	movlt	r0, r3
 80044de:	e730      	b.n	8004342 <_printf_float+0xc6>
 80044e0:	2301      	movs	r3, #1
 80044e2:	464a      	mov	r2, r9
 80044e4:	4631      	mov	r1, r6
 80044e6:	4628      	mov	r0, r5
 80044e8:	47b8      	blx	r7
 80044ea:	3001      	adds	r0, #1
 80044ec:	f43f af27 	beq.w	800433e <_printf_float+0xc2>
 80044f0:	f108 0801 	add.w	r8, r8, #1
 80044f4:	e7e6      	b.n	80044c4 <_printf_float+0x248>
 80044f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	dc39      	bgt.n	8004570 <_printf_float+0x2f4>
 80044fc:	4a1b      	ldr	r2, [pc, #108]	; (800456c <_printf_float+0x2f0>)
 80044fe:	2301      	movs	r3, #1
 8004500:	4631      	mov	r1, r6
 8004502:	4628      	mov	r0, r5
 8004504:	47b8      	blx	r7
 8004506:	3001      	adds	r0, #1
 8004508:	f43f af19 	beq.w	800433e <_printf_float+0xc2>
 800450c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004510:	4313      	orrs	r3, r2
 8004512:	d102      	bne.n	800451a <_printf_float+0x29e>
 8004514:	6823      	ldr	r3, [r4, #0]
 8004516:	07d9      	lsls	r1, r3, #31
 8004518:	d5d8      	bpl.n	80044cc <_printf_float+0x250>
 800451a:	ee18 3a10 	vmov	r3, s16
 800451e:	4652      	mov	r2, sl
 8004520:	4631      	mov	r1, r6
 8004522:	4628      	mov	r0, r5
 8004524:	47b8      	blx	r7
 8004526:	3001      	adds	r0, #1
 8004528:	f43f af09 	beq.w	800433e <_printf_float+0xc2>
 800452c:	f04f 0900 	mov.w	r9, #0
 8004530:	f104 0a1a 	add.w	sl, r4, #26
 8004534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004536:	425b      	negs	r3, r3
 8004538:	454b      	cmp	r3, r9
 800453a:	dc01      	bgt.n	8004540 <_printf_float+0x2c4>
 800453c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800453e:	e792      	b.n	8004466 <_printf_float+0x1ea>
 8004540:	2301      	movs	r3, #1
 8004542:	4652      	mov	r2, sl
 8004544:	4631      	mov	r1, r6
 8004546:	4628      	mov	r0, r5
 8004548:	47b8      	blx	r7
 800454a:	3001      	adds	r0, #1
 800454c:	f43f aef7 	beq.w	800433e <_printf_float+0xc2>
 8004550:	f109 0901 	add.w	r9, r9, #1
 8004554:	e7ee      	b.n	8004534 <_printf_float+0x2b8>
 8004556:	bf00      	nop
 8004558:	7fefffff 	.word	0x7fefffff
 800455c:	08007e48 	.word	0x08007e48
 8004560:	08007e4c 	.word	0x08007e4c
 8004564:	08007e54 	.word	0x08007e54
 8004568:	08007e50 	.word	0x08007e50
 800456c:	08007e58 	.word	0x08007e58
 8004570:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004572:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004574:	429a      	cmp	r2, r3
 8004576:	bfa8      	it	ge
 8004578:	461a      	movge	r2, r3
 800457a:	2a00      	cmp	r2, #0
 800457c:	4691      	mov	r9, r2
 800457e:	dc37      	bgt.n	80045f0 <_printf_float+0x374>
 8004580:	f04f 0b00 	mov.w	fp, #0
 8004584:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004588:	f104 021a 	add.w	r2, r4, #26
 800458c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800458e:	9305      	str	r3, [sp, #20]
 8004590:	eba3 0309 	sub.w	r3, r3, r9
 8004594:	455b      	cmp	r3, fp
 8004596:	dc33      	bgt.n	8004600 <_printf_float+0x384>
 8004598:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800459c:	429a      	cmp	r2, r3
 800459e:	db3b      	blt.n	8004618 <_printf_float+0x39c>
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	07da      	lsls	r2, r3, #31
 80045a4:	d438      	bmi.n	8004618 <_printf_float+0x39c>
 80045a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045a8:	9b05      	ldr	r3, [sp, #20]
 80045aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	eba2 0901 	sub.w	r9, r2, r1
 80045b2:	4599      	cmp	r9, r3
 80045b4:	bfa8      	it	ge
 80045b6:	4699      	movge	r9, r3
 80045b8:	f1b9 0f00 	cmp.w	r9, #0
 80045bc:	dc35      	bgt.n	800462a <_printf_float+0x3ae>
 80045be:	f04f 0800 	mov.w	r8, #0
 80045c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045c6:	f104 0a1a 	add.w	sl, r4, #26
 80045ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045ce:	1a9b      	subs	r3, r3, r2
 80045d0:	eba3 0309 	sub.w	r3, r3, r9
 80045d4:	4543      	cmp	r3, r8
 80045d6:	f77f af79 	ble.w	80044cc <_printf_float+0x250>
 80045da:	2301      	movs	r3, #1
 80045dc:	4652      	mov	r2, sl
 80045de:	4631      	mov	r1, r6
 80045e0:	4628      	mov	r0, r5
 80045e2:	47b8      	blx	r7
 80045e4:	3001      	adds	r0, #1
 80045e6:	f43f aeaa 	beq.w	800433e <_printf_float+0xc2>
 80045ea:	f108 0801 	add.w	r8, r8, #1
 80045ee:	e7ec      	b.n	80045ca <_printf_float+0x34e>
 80045f0:	4613      	mov	r3, r2
 80045f2:	4631      	mov	r1, r6
 80045f4:	4642      	mov	r2, r8
 80045f6:	4628      	mov	r0, r5
 80045f8:	47b8      	blx	r7
 80045fa:	3001      	adds	r0, #1
 80045fc:	d1c0      	bne.n	8004580 <_printf_float+0x304>
 80045fe:	e69e      	b.n	800433e <_printf_float+0xc2>
 8004600:	2301      	movs	r3, #1
 8004602:	4631      	mov	r1, r6
 8004604:	4628      	mov	r0, r5
 8004606:	9205      	str	r2, [sp, #20]
 8004608:	47b8      	blx	r7
 800460a:	3001      	adds	r0, #1
 800460c:	f43f ae97 	beq.w	800433e <_printf_float+0xc2>
 8004610:	9a05      	ldr	r2, [sp, #20]
 8004612:	f10b 0b01 	add.w	fp, fp, #1
 8004616:	e7b9      	b.n	800458c <_printf_float+0x310>
 8004618:	ee18 3a10 	vmov	r3, s16
 800461c:	4652      	mov	r2, sl
 800461e:	4631      	mov	r1, r6
 8004620:	4628      	mov	r0, r5
 8004622:	47b8      	blx	r7
 8004624:	3001      	adds	r0, #1
 8004626:	d1be      	bne.n	80045a6 <_printf_float+0x32a>
 8004628:	e689      	b.n	800433e <_printf_float+0xc2>
 800462a:	9a05      	ldr	r2, [sp, #20]
 800462c:	464b      	mov	r3, r9
 800462e:	4442      	add	r2, r8
 8004630:	4631      	mov	r1, r6
 8004632:	4628      	mov	r0, r5
 8004634:	47b8      	blx	r7
 8004636:	3001      	adds	r0, #1
 8004638:	d1c1      	bne.n	80045be <_printf_float+0x342>
 800463a:	e680      	b.n	800433e <_printf_float+0xc2>
 800463c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800463e:	2a01      	cmp	r2, #1
 8004640:	dc01      	bgt.n	8004646 <_printf_float+0x3ca>
 8004642:	07db      	lsls	r3, r3, #31
 8004644:	d538      	bpl.n	80046b8 <_printf_float+0x43c>
 8004646:	2301      	movs	r3, #1
 8004648:	4642      	mov	r2, r8
 800464a:	4631      	mov	r1, r6
 800464c:	4628      	mov	r0, r5
 800464e:	47b8      	blx	r7
 8004650:	3001      	adds	r0, #1
 8004652:	f43f ae74 	beq.w	800433e <_printf_float+0xc2>
 8004656:	ee18 3a10 	vmov	r3, s16
 800465a:	4652      	mov	r2, sl
 800465c:	4631      	mov	r1, r6
 800465e:	4628      	mov	r0, r5
 8004660:	47b8      	blx	r7
 8004662:	3001      	adds	r0, #1
 8004664:	f43f ae6b 	beq.w	800433e <_printf_float+0xc2>
 8004668:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800466c:	2200      	movs	r2, #0
 800466e:	2300      	movs	r3, #0
 8004670:	f7fc fa3a 	bl	8000ae8 <__aeabi_dcmpeq>
 8004674:	b9d8      	cbnz	r0, 80046ae <_printf_float+0x432>
 8004676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004678:	f108 0201 	add.w	r2, r8, #1
 800467c:	3b01      	subs	r3, #1
 800467e:	4631      	mov	r1, r6
 8004680:	4628      	mov	r0, r5
 8004682:	47b8      	blx	r7
 8004684:	3001      	adds	r0, #1
 8004686:	d10e      	bne.n	80046a6 <_printf_float+0x42a>
 8004688:	e659      	b.n	800433e <_printf_float+0xc2>
 800468a:	2301      	movs	r3, #1
 800468c:	4652      	mov	r2, sl
 800468e:	4631      	mov	r1, r6
 8004690:	4628      	mov	r0, r5
 8004692:	47b8      	blx	r7
 8004694:	3001      	adds	r0, #1
 8004696:	f43f ae52 	beq.w	800433e <_printf_float+0xc2>
 800469a:	f108 0801 	add.w	r8, r8, #1
 800469e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046a0:	3b01      	subs	r3, #1
 80046a2:	4543      	cmp	r3, r8
 80046a4:	dcf1      	bgt.n	800468a <_printf_float+0x40e>
 80046a6:	464b      	mov	r3, r9
 80046a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80046ac:	e6dc      	b.n	8004468 <_printf_float+0x1ec>
 80046ae:	f04f 0800 	mov.w	r8, #0
 80046b2:	f104 0a1a 	add.w	sl, r4, #26
 80046b6:	e7f2      	b.n	800469e <_printf_float+0x422>
 80046b8:	2301      	movs	r3, #1
 80046ba:	4642      	mov	r2, r8
 80046bc:	e7df      	b.n	800467e <_printf_float+0x402>
 80046be:	2301      	movs	r3, #1
 80046c0:	464a      	mov	r2, r9
 80046c2:	4631      	mov	r1, r6
 80046c4:	4628      	mov	r0, r5
 80046c6:	47b8      	blx	r7
 80046c8:	3001      	adds	r0, #1
 80046ca:	f43f ae38 	beq.w	800433e <_printf_float+0xc2>
 80046ce:	f108 0801 	add.w	r8, r8, #1
 80046d2:	68e3      	ldr	r3, [r4, #12]
 80046d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046d6:	1a5b      	subs	r3, r3, r1
 80046d8:	4543      	cmp	r3, r8
 80046da:	dcf0      	bgt.n	80046be <_printf_float+0x442>
 80046dc:	e6fa      	b.n	80044d4 <_printf_float+0x258>
 80046de:	f04f 0800 	mov.w	r8, #0
 80046e2:	f104 0919 	add.w	r9, r4, #25
 80046e6:	e7f4      	b.n	80046d2 <_printf_float+0x456>

080046e8 <_printf_common>:
 80046e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046ec:	4616      	mov	r6, r2
 80046ee:	4699      	mov	r9, r3
 80046f0:	688a      	ldr	r2, [r1, #8]
 80046f2:	690b      	ldr	r3, [r1, #16]
 80046f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046f8:	4293      	cmp	r3, r2
 80046fa:	bfb8      	it	lt
 80046fc:	4613      	movlt	r3, r2
 80046fe:	6033      	str	r3, [r6, #0]
 8004700:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004704:	4607      	mov	r7, r0
 8004706:	460c      	mov	r4, r1
 8004708:	b10a      	cbz	r2, 800470e <_printf_common+0x26>
 800470a:	3301      	adds	r3, #1
 800470c:	6033      	str	r3, [r6, #0]
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	0699      	lsls	r1, r3, #26
 8004712:	bf42      	ittt	mi
 8004714:	6833      	ldrmi	r3, [r6, #0]
 8004716:	3302      	addmi	r3, #2
 8004718:	6033      	strmi	r3, [r6, #0]
 800471a:	6825      	ldr	r5, [r4, #0]
 800471c:	f015 0506 	ands.w	r5, r5, #6
 8004720:	d106      	bne.n	8004730 <_printf_common+0x48>
 8004722:	f104 0a19 	add.w	sl, r4, #25
 8004726:	68e3      	ldr	r3, [r4, #12]
 8004728:	6832      	ldr	r2, [r6, #0]
 800472a:	1a9b      	subs	r3, r3, r2
 800472c:	42ab      	cmp	r3, r5
 800472e:	dc26      	bgt.n	800477e <_printf_common+0x96>
 8004730:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004734:	1e13      	subs	r3, r2, #0
 8004736:	6822      	ldr	r2, [r4, #0]
 8004738:	bf18      	it	ne
 800473a:	2301      	movne	r3, #1
 800473c:	0692      	lsls	r2, r2, #26
 800473e:	d42b      	bmi.n	8004798 <_printf_common+0xb0>
 8004740:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004744:	4649      	mov	r1, r9
 8004746:	4638      	mov	r0, r7
 8004748:	47c0      	blx	r8
 800474a:	3001      	adds	r0, #1
 800474c:	d01e      	beq.n	800478c <_printf_common+0xa4>
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	68e5      	ldr	r5, [r4, #12]
 8004752:	6832      	ldr	r2, [r6, #0]
 8004754:	f003 0306 	and.w	r3, r3, #6
 8004758:	2b04      	cmp	r3, #4
 800475a:	bf08      	it	eq
 800475c:	1aad      	subeq	r5, r5, r2
 800475e:	68a3      	ldr	r3, [r4, #8]
 8004760:	6922      	ldr	r2, [r4, #16]
 8004762:	bf0c      	ite	eq
 8004764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004768:	2500      	movne	r5, #0
 800476a:	4293      	cmp	r3, r2
 800476c:	bfc4      	itt	gt
 800476e:	1a9b      	subgt	r3, r3, r2
 8004770:	18ed      	addgt	r5, r5, r3
 8004772:	2600      	movs	r6, #0
 8004774:	341a      	adds	r4, #26
 8004776:	42b5      	cmp	r5, r6
 8004778:	d11a      	bne.n	80047b0 <_printf_common+0xc8>
 800477a:	2000      	movs	r0, #0
 800477c:	e008      	b.n	8004790 <_printf_common+0xa8>
 800477e:	2301      	movs	r3, #1
 8004780:	4652      	mov	r2, sl
 8004782:	4649      	mov	r1, r9
 8004784:	4638      	mov	r0, r7
 8004786:	47c0      	blx	r8
 8004788:	3001      	adds	r0, #1
 800478a:	d103      	bne.n	8004794 <_printf_common+0xac>
 800478c:	f04f 30ff 	mov.w	r0, #4294967295
 8004790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004794:	3501      	adds	r5, #1
 8004796:	e7c6      	b.n	8004726 <_printf_common+0x3e>
 8004798:	18e1      	adds	r1, r4, r3
 800479a:	1c5a      	adds	r2, r3, #1
 800479c:	2030      	movs	r0, #48	; 0x30
 800479e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047a2:	4422      	add	r2, r4
 80047a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047ac:	3302      	adds	r3, #2
 80047ae:	e7c7      	b.n	8004740 <_printf_common+0x58>
 80047b0:	2301      	movs	r3, #1
 80047b2:	4622      	mov	r2, r4
 80047b4:	4649      	mov	r1, r9
 80047b6:	4638      	mov	r0, r7
 80047b8:	47c0      	blx	r8
 80047ba:	3001      	adds	r0, #1
 80047bc:	d0e6      	beq.n	800478c <_printf_common+0xa4>
 80047be:	3601      	adds	r6, #1
 80047c0:	e7d9      	b.n	8004776 <_printf_common+0x8e>
	...

080047c4 <_printf_i>:
 80047c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047c8:	460c      	mov	r4, r1
 80047ca:	4691      	mov	r9, r2
 80047cc:	7e27      	ldrb	r7, [r4, #24]
 80047ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80047d0:	2f78      	cmp	r7, #120	; 0x78
 80047d2:	4680      	mov	r8, r0
 80047d4:	469a      	mov	sl, r3
 80047d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047da:	d807      	bhi.n	80047ec <_printf_i+0x28>
 80047dc:	2f62      	cmp	r7, #98	; 0x62
 80047de:	d80a      	bhi.n	80047f6 <_printf_i+0x32>
 80047e0:	2f00      	cmp	r7, #0
 80047e2:	f000 80d8 	beq.w	8004996 <_printf_i+0x1d2>
 80047e6:	2f58      	cmp	r7, #88	; 0x58
 80047e8:	f000 80a3 	beq.w	8004932 <_printf_i+0x16e>
 80047ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047f4:	e03a      	b.n	800486c <_printf_i+0xa8>
 80047f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047fa:	2b15      	cmp	r3, #21
 80047fc:	d8f6      	bhi.n	80047ec <_printf_i+0x28>
 80047fe:	a001      	add	r0, pc, #4	; (adr r0, 8004804 <_printf_i+0x40>)
 8004800:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004804:	0800485d 	.word	0x0800485d
 8004808:	08004871 	.word	0x08004871
 800480c:	080047ed 	.word	0x080047ed
 8004810:	080047ed 	.word	0x080047ed
 8004814:	080047ed 	.word	0x080047ed
 8004818:	080047ed 	.word	0x080047ed
 800481c:	08004871 	.word	0x08004871
 8004820:	080047ed 	.word	0x080047ed
 8004824:	080047ed 	.word	0x080047ed
 8004828:	080047ed 	.word	0x080047ed
 800482c:	080047ed 	.word	0x080047ed
 8004830:	0800497d 	.word	0x0800497d
 8004834:	080048a1 	.word	0x080048a1
 8004838:	0800495f 	.word	0x0800495f
 800483c:	080047ed 	.word	0x080047ed
 8004840:	080047ed 	.word	0x080047ed
 8004844:	0800499f 	.word	0x0800499f
 8004848:	080047ed 	.word	0x080047ed
 800484c:	080048a1 	.word	0x080048a1
 8004850:	080047ed 	.word	0x080047ed
 8004854:	080047ed 	.word	0x080047ed
 8004858:	08004967 	.word	0x08004967
 800485c:	680b      	ldr	r3, [r1, #0]
 800485e:	1d1a      	adds	r2, r3, #4
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	600a      	str	r2, [r1, #0]
 8004864:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800486c:	2301      	movs	r3, #1
 800486e:	e0a3      	b.n	80049b8 <_printf_i+0x1f4>
 8004870:	6825      	ldr	r5, [r4, #0]
 8004872:	6808      	ldr	r0, [r1, #0]
 8004874:	062e      	lsls	r6, r5, #24
 8004876:	f100 0304 	add.w	r3, r0, #4
 800487a:	d50a      	bpl.n	8004892 <_printf_i+0xce>
 800487c:	6805      	ldr	r5, [r0, #0]
 800487e:	600b      	str	r3, [r1, #0]
 8004880:	2d00      	cmp	r5, #0
 8004882:	da03      	bge.n	800488c <_printf_i+0xc8>
 8004884:	232d      	movs	r3, #45	; 0x2d
 8004886:	426d      	negs	r5, r5
 8004888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800488c:	485e      	ldr	r0, [pc, #376]	; (8004a08 <_printf_i+0x244>)
 800488e:	230a      	movs	r3, #10
 8004890:	e019      	b.n	80048c6 <_printf_i+0x102>
 8004892:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004896:	6805      	ldr	r5, [r0, #0]
 8004898:	600b      	str	r3, [r1, #0]
 800489a:	bf18      	it	ne
 800489c:	b22d      	sxthne	r5, r5
 800489e:	e7ef      	b.n	8004880 <_printf_i+0xbc>
 80048a0:	680b      	ldr	r3, [r1, #0]
 80048a2:	6825      	ldr	r5, [r4, #0]
 80048a4:	1d18      	adds	r0, r3, #4
 80048a6:	6008      	str	r0, [r1, #0]
 80048a8:	0628      	lsls	r0, r5, #24
 80048aa:	d501      	bpl.n	80048b0 <_printf_i+0xec>
 80048ac:	681d      	ldr	r5, [r3, #0]
 80048ae:	e002      	b.n	80048b6 <_printf_i+0xf2>
 80048b0:	0669      	lsls	r1, r5, #25
 80048b2:	d5fb      	bpl.n	80048ac <_printf_i+0xe8>
 80048b4:	881d      	ldrh	r5, [r3, #0]
 80048b6:	4854      	ldr	r0, [pc, #336]	; (8004a08 <_printf_i+0x244>)
 80048b8:	2f6f      	cmp	r7, #111	; 0x6f
 80048ba:	bf0c      	ite	eq
 80048bc:	2308      	moveq	r3, #8
 80048be:	230a      	movne	r3, #10
 80048c0:	2100      	movs	r1, #0
 80048c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048c6:	6866      	ldr	r6, [r4, #4]
 80048c8:	60a6      	str	r6, [r4, #8]
 80048ca:	2e00      	cmp	r6, #0
 80048cc:	bfa2      	ittt	ge
 80048ce:	6821      	ldrge	r1, [r4, #0]
 80048d0:	f021 0104 	bicge.w	r1, r1, #4
 80048d4:	6021      	strge	r1, [r4, #0]
 80048d6:	b90d      	cbnz	r5, 80048dc <_printf_i+0x118>
 80048d8:	2e00      	cmp	r6, #0
 80048da:	d04d      	beq.n	8004978 <_printf_i+0x1b4>
 80048dc:	4616      	mov	r6, r2
 80048de:	fbb5 f1f3 	udiv	r1, r5, r3
 80048e2:	fb03 5711 	mls	r7, r3, r1, r5
 80048e6:	5dc7      	ldrb	r7, [r0, r7]
 80048e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048ec:	462f      	mov	r7, r5
 80048ee:	42bb      	cmp	r3, r7
 80048f0:	460d      	mov	r5, r1
 80048f2:	d9f4      	bls.n	80048de <_printf_i+0x11a>
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d10b      	bne.n	8004910 <_printf_i+0x14c>
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	07df      	lsls	r7, r3, #31
 80048fc:	d508      	bpl.n	8004910 <_printf_i+0x14c>
 80048fe:	6923      	ldr	r3, [r4, #16]
 8004900:	6861      	ldr	r1, [r4, #4]
 8004902:	4299      	cmp	r1, r3
 8004904:	bfde      	ittt	le
 8004906:	2330      	movle	r3, #48	; 0x30
 8004908:	f806 3c01 	strble.w	r3, [r6, #-1]
 800490c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004910:	1b92      	subs	r2, r2, r6
 8004912:	6122      	str	r2, [r4, #16]
 8004914:	f8cd a000 	str.w	sl, [sp]
 8004918:	464b      	mov	r3, r9
 800491a:	aa03      	add	r2, sp, #12
 800491c:	4621      	mov	r1, r4
 800491e:	4640      	mov	r0, r8
 8004920:	f7ff fee2 	bl	80046e8 <_printf_common>
 8004924:	3001      	adds	r0, #1
 8004926:	d14c      	bne.n	80049c2 <_printf_i+0x1fe>
 8004928:	f04f 30ff 	mov.w	r0, #4294967295
 800492c:	b004      	add	sp, #16
 800492e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004932:	4835      	ldr	r0, [pc, #212]	; (8004a08 <_printf_i+0x244>)
 8004934:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	680e      	ldr	r6, [r1, #0]
 800493c:	061f      	lsls	r7, r3, #24
 800493e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004942:	600e      	str	r6, [r1, #0]
 8004944:	d514      	bpl.n	8004970 <_printf_i+0x1ac>
 8004946:	07d9      	lsls	r1, r3, #31
 8004948:	bf44      	itt	mi
 800494a:	f043 0320 	orrmi.w	r3, r3, #32
 800494e:	6023      	strmi	r3, [r4, #0]
 8004950:	b91d      	cbnz	r5, 800495a <_printf_i+0x196>
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	f023 0320 	bic.w	r3, r3, #32
 8004958:	6023      	str	r3, [r4, #0]
 800495a:	2310      	movs	r3, #16
 800495c:	e7b0      	b.n	80048c0 <_printf_i+0xfc>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	f043 0320 	orr.w	r3, r3, #32
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	2378      	movs	r3, #120	; 0x78
 8004968:	4828      	ldr	r0, [pc, #160]	; (8004a0c <_printf_i+0x248>)
 800496a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800496e:	e7e3      	b.n	8004938 <_printf_i+0x174>
 8004970:	065e      	lsls	r6, r3, #25
 8004972:	bf48      	it	mi
 8004974:	b2ad      	uxthmi	r5, r5
 8004976:	e7e6      	b.n	8004946 <_printf_i+0x182>
 8004978:	4616      	mov	r6, r2
 800497a:	e7bb      	b.n	80048f4 <_printf_i+0x130>
 800497c:	680b      	ldr	r3, [r1, #0]
 800497e:	6826      	ldr	r6, [r4, #0]
 8004980:	6960      	ldr	r0, [r4, #20]
 8004982:	1d1d      	adds	r5, r3, #4
 8004984:	600d      	str	r5, [r1, #0]
 8004986:	0635      	lsls	r5, r6, #24
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	d501      	bpl.n	8004990 <_printf_i+0x1cc>
 800498c:	6018      	str	r0, [r3, #0]
 800498e:	e002      	b.n	8004996 <_printf_i+0x1d2>
 8004990:	0671      	lsls	r1, r6, #25
 8004992:	d5fb      	bpl.n	800498c <_printf_i+0x1c8>
 8004994:	8018      	strh	r0, [r3, #0]
 8004996:	2300      	movs	r3, #0
 8004998:	6123      	str	r3, [r4, #16]
 800499a:	4616      	mov	r6, r2
 800499c:	e7ba      	b.n	8004914 <_printf_i+0x150>
 800499e:	680b      	ldr	r3, [r1, #0]
 80049a0:	1d1a      	adds	r2, r3, #4
 80049a2:	600a      	str	r2, [r1, #0]
 80049a4:	681e      	ldr	r6, [r3, #0]
 80049a6:	6862      	ldr	r2, [r4, #4]
 80049a8:	2100      	movs	r1, #0
 80049aa:	4630      	mov	r0, r6
 80049ac:	f7fb fc28 	bl	8000200 <memchr>
 80049b0:	b108      	cbz	r0, 80049b6 <_printf_i+0x1f2>
 80049b2:	1b80      	subs	r0, r0, r6
 80049b4:	6060      	str	r0, [r4, #4]
 80049b6:	6863      	ldr	r3, [r4, #4]
 80049b8:	6123      	str	r3, [r4, #16]
 80049ba:	2300      	movs	r3, #0
 80049bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049c0:	e7a8      	b.n	8004914 <_printf_i+0x150>
 80049c2:	6923      	ldr	r3, [r4, #16]
 80049c4:	4632      	mov	r2, r6
 80049c6:	4649      	mov	r1, r9
 80049c8:	4640      	mov	r0, r8
 80049ca:	47d0      	blx	sl
 80049cc:	3001      	adds	r0, #1
 80049ce:	d0ab      	beq.n	8004928 <_printf_i+0x164>
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	079b      	lsls	r3, r3, #30
 80049d4:	d413      	bmi.n	80049fe <_printf_i+0x23a>
 80049d6:	68e0      	ldr	r0, [r4, #12]
 80049d8:	9b03      	ldr	r3, [sp, #12]
 80049da:	4298      	cmp	r0, r3
 80049dc:	bfb8      	it	lt
 80049de:	4618      	movlt	r0, r3
 80049e0:	e7a4      	b.n	800492c <_printf_i+0x168>
 80049e2:	2301      	movs	r3, #1
 80049e4:	4632      	mov	r2, r6
 80049e6:	4649      	mov	r1, r9
 80049e8:	4640      	mov	r0, r8
 80049ea:	47d0      	blx	sl
 80049ec:	3001      	adds	r0, #1
 80049ee:	d09b      	beq.n	8004928 <_printf_i+0x164>
 80049f0:	3501      	adds	r5, #1
 80049f2:	68e3      	ldr	r3, [r4, #12]
 80049f4:	9903      	ldr	r1, [sp, #12]
 80049f6:	1a5b      	subs	r3, r3, r1
 80049f8:	42ab      	cmp	r3, r5
 80049fa:	dcf2      	bgt.n	80049e2 <_printf_i+0x21e>
 80049fc:	e7eb      	b.n	80049d6 <_printf_i+0x212>
 80049fe:	2500      	movs	r5, #0
 8004a00:	f104 0619 	add.w	r6, r4, #25
 8004a04:	e7f5      	b.n	80049f2 <_printf_i+0x22e>
 8004a06:	bf00      	nop
 8004a08:	08007e5a 	.word	0x08007e5a
 8004a0c:	08007e6b 	.word	0x08007e6b

08004a10 <siprintf>:
 8004a10:	b40e      	push	{r1, r2, r3}
 8004a12:	b500      	push	{lr}
 8004a14:	b09c      	sub	sp, #112	; 0x70
 8004a16:	ab1d      	add	r3, sp, #116	; 0x74
 8004a18:	9002      	str	r0, [sp, #8]
 8004a1a:	9006      	str	r0, [sp, #24]
 8004a1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a20:	4809      	ldr	r0, [pc, #36]	; (8004a48 <siprintf+0x38>)
 8004a22:	9107      	str	r1, [sp, #28]
 8004a24:	9104      	str	r1, [sp, #16]
 8004a26:	4909      	ldr	r1, [pc, #36]	; (8004a4c <siprintf+0x3c>)
 8004a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a2c:	9105      	str	r1, [sp, #20]
 8004a2e:	6800      	ldr	r0, [r0, #0]
 8004a30:	9301      	str	r3, [sp, #4]
 8004a32:	a902      	add	r1, sp, #8
 8004a34:	f001 fb32 	bl	800609c <_svfiprintf_r>
 8004a38:	9b02      	ldr	r3, [sp, #8]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	701a      	strb	r2, [r3, #0]
 8004a3e:	b01c      	add	sp, #112	; 0x70
 8004a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a44:	b003      	add	sp, #12
 8004a46:	4770      	bx	lr
 8004a48:	20000018 	.word	0x20000018
 8004a4c:	ffff0208 	.word	0xffff0208

08004a50 <quorem>:
 8004a50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a54:	6903      	ldr	r3, [r0, #16]
 8004a56:	690c      	ldr	r4, [r1, #16]
 8004a58:	42a3      	cmp	r3, r4
 8004a5a:	4607      	mov	r7, r0
 8004a5c:	f2c0 8081 	blt.w	8004b62 <quorem+0x112>
 8004a60:	3c01      	subs	r4, #1
 8004a62:	f101 0814 	add.w	r8, r1, #20
 8004a66:	f100 0514 	add.w	r5, r0, #20
 8004a6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004a74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004a80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004a84:	fbb2 f6f3 	udiv	r6, r2, r3
 8004a88:	d331      	bcc.n	8004aee <quorem+0x9e>
 8004a8a:	f04f 0e00 	mov.w	lr, #0
 8004a8e:	4640      	mov	r0, r8
 8004a90:	46ac      	mov	ip, r5
 8004a92:	46f2      	mov	sl, lr
 8004a94:	f850 2b04 	ldr.w	r2, [r0], #4
 8004a98:	b293      	uxth	r3, r2
 8004a9a:	fb06 e303 	mla	r3, r6, r3, lr
 8004a9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	ebaa 0303 	sub.w	r3, sl, r3
 8004aa8:	0c12      	lsrs	r2, r2, #16
 8004aaa:	f8dc a000 	ldr.w	sl, [ip]
 8004aae:	fb06 e202 	mla	r2, r6, r2, lr
 8004ab2:	fa13 f38a 	uxtah	r3, r3, sl
 8004ab6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004aba:	fa1f fa82 	uxth.w	sl, r2
 8004abe:	f8dc 2000 	ldr.w	r2, [ip]
 8004ac2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004ac6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ad0:	4581      	cmp	r9, r0
 8004ad2:	f84c 3b04 	str.w	r3, [ip], #4
 8004ad6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004ada:	d2db      	bcs.n	8004a94 <quorem+0x44>
 8004adc:	f855 300b 	ldr.w	r3, [r5, fp]
 8004ae0:	b92b      	cbnz	r3, 8004aee <quorem+0x9e>
 8004ae2:	9b01      	ldr	r3, [sp, #4]
 8004ae4:	3b04      	subs	r3, #4
 8004ae6:	429d      	cmp	r5, r3
 8004ae8:	461a      	mov	r2, r3
 8004aea:	d32e      	bcc.n	8004b4a <quorem+0xfa>
 8004aec:	613c      	str	r4, [r7, #16]
 8004aee:	4638      	mov	r0, r7
 8004af0:	f001 f8be 	bl	8005c70 <__mcmp>
 8004af4:	2800      	cmp	r0, #0
 8004af6:	db24      	blt.n	8004b42 <quorem+0xf2>
 8004af8:	3601      	adds	r6, #1
 8004afa:	4628      	mov	r0, r5
 8004afc:	f04f 0c00 	mov.w	ip, #0
 8004b00:	f858 2b04 	ldr.w	r2, [r8], #4
 8004b04:	f8d0 e000 	ldr.w	lr, [r0]
 8004b08:	b293      	uxth	r3, r2
 8004b0a:	ebac 0303 	sub.w	r3, ip, r3
 8004b0e:	0c12      	lsrs	r2, r2, #16
 8004b10:	fa13 f38e 	uxtah	r3, r3, lr
 8004b14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004b18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b22:	45c1      	cmp	r9, r8
 8004b24:	f840 3b04 	str.w	r3, [r0], #4
 8004b28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004b2c:	d2e8      	bcs.n	8004b00 <quorem+0xb0>
 8004b2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b36:	b922      	cbnz	r2, 8004b42 <quorem+0xf2>
 8004b38:	3b04      	subs	r3, #4
 8004b3a:	429d      	cmp	r5, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	d30a      	bcc.n	8004b56 <quorem+0x106>
 8004b40:	613c      	str	r4, [r7, #16]
 8004b42:	4630      	mov	r0, r6
 8004b44:	b003      	add	sp, #12
 8004b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b4a:	6812      	ldr	r2, [r2, #0]
 8004b4c:	3b04      	subs	r3, #4
 8004b4e:	2a00      	cmp	r2, #0
 8004b50:	d1cc      	bne.n	8004aec <quorem+0x9c>
 8004b52:	3c01      	subs	r4, #1
 8004b54:	e7c7      	b.n	8004ae6 <quorem+0x96>
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	3b04      	subs	r3, #4
 8004b5a:	2a00      	cmp	r2, #0
 8004b5c:	d1f0      	bne.n	8004b40 <quorem+0xf0>
 8004b5e:	3c01      	subs	r4, #1
 8004b60:	e7eb      	b.n	8004b3a <quorem+0xea>
 8004b62:	2000      	movs	r0, #0
 8004b64:	e7ee      	b.n	8004b44 <quorem+0xf4>
	...

08004b68 <_dtoa_r>:
 8004b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b6c:	ed2d 8b02 	vpush	{d8}
 8004b70:	ec57 6b10 	vmov	r6, r7, d0
 8004b74:	b095      	sub	sp, #84	; 0x54
 8004b76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004b78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004b7c:	9105      	str	r1, [sp, #20]
 8004b7e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004b82:	4604      	mov	r4, r0
 8004b84:	9209      	str	r2, [sp, #36]	; 0x24
 8004b86:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b88:	b975      	cbnz	r5, 8004ba8 <_dtoa_r+0x40>
 8004b8a:	2010      	movs	r0, #16
 8004b8c:	f000 fddc 	bl	8005748 <malloc>
 8004b90:	4602      	mov	r2, r0
 8004b92:	6260      	str	r0, [r4, #36]	; 0x24
 8004b94:	b920      	cbnz	r0, 8004ba0 <_dtoa_r+0x38>
 8004b96:	4bb2      	ldr	r3, [pc, #712]	; (8004e60 <_dtoa_r+0x2f8>)
 8004b98:	21ea      	movs	r1, #234	; 0xea
 8004b9a:	48b2      	ldr	r0, [pc, #712]	; (8004e64 <_dtoa_r+0x2fc>)
 8004b9c:	f001 fb8e 	bl	80062bc <__assert_func>
 8004ba0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004ba4:	6005      	str	r5, [r0, #0]
 8004ba6:	60c5      	str	r5, [r0, #12]
 8004ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004baa:	6819      	ldr	r1, [r3, #0]
 8004bac:	b151      	cbz	r1, 8004bc4 <_dtoa_r+0x5c>
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	604a      	str	r2, [r1, #4]
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	4093      	lsls	r3, r2
 8004bb6:	608b      	str	r3, [r1, #8]
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f000 fe1b 	bl	80057f4 <_Bfree>
 8004bbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	1e3b      	subs	r3, r7, #0
 8004bc6:	bfb9      	ittee	lt
 8004bc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004bcc:	9303      	strlt	r3, [sp, #12]
 8004bce:	2300      	movge	r3, #0
 8004bd0:	f8c8 3000 	strge.w	r3, [r8]
 8004bd4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004bd8:	4ba3      	ldr	r3, [pc, #652]	; (8004e68 <_dtoa_r+0x300>)
 8004bda:	bfbc      	itt	lt
 8004bdc:	2201      	movlt	r2, #1
 8004bde:	f8c8 2000 	strlt.w	r2, [r8]
 8004be2:	ea33 0309 	bics.w	r3, r3, r9
 8004be6:	d11b      	bne.n	8004c20 <_dtoa_r+0xb8>
 8004be8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004bea:	f242 730f 	movw	r3, #9999	; 0x270f
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004bf4:	4333      	orrs	r3, r6
 8004bf6:	f000 857a 	beq.w	80056ee <_dtoa_r+0xb86>
 8004bfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bfc:	b963      	cbnz	r3, 8004c18 <_dtoa_r+0xb0>
 8004bfe:	4b9b      	ldr	r3, [pc, #620]	; (8004e6c <_dtoa_r+0x304>)
 8004c00:	e024      	b.n	8004c4c <_dtoa_r+0xe4>
 8004c02:	4b9b      	ldr	r3, [pc, #620]	; (8004e70 <_dtoa_r+0x308>)
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	3308      	adds	r3, #8
 8004c08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	9800      	ldr	r0, [sp, #0]
 8004c0e:	b015      	add	sp, #84	; 0x54
 8004c10:	ecbd 8b02 	vpop	{d8}
 8004c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c18:	4b94      	ldr	r3, [pc, #592]	; (8004e6c <_dtoa_r+0x304>)
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	3303      	adds	r3, #3
 8004c1e:	e7f3      	b.n	8004c08 <_dtoa_r+0xa0>
 8004c20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004c24:	2200      	movs	r2, #0
 8004c26:	ec51 0b17 	vmov	r0, r1, d7
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004c30:	f7fb ff5a 	bl	8000ae8 <__aeabi_dcmpeq>
 8004c34:	4680      	mov	r8, r0
 8004c36:	b158      	cbz	r0, 8004c50 <_dtoa_r+0xe8>
 8004c38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 8551 	beq.w	80056e8 <_dtoa_r+0xb80>
 8004c46:	488b      	ldr	r0, [pc, #556]	; (8004e74 <_dtoa_r+0x30c>)
 8004c48:	6018      	str	r0, [r3, #0]
 8004c4a:	1e43      	subs	r3, r0, #1
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	e7dd      	b.n	8004c0c <_dtoa_r+0xa4>
 8004c50:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004c54:	aa12      	add	r2, sp, #72	; 0x48
 8004c56:	a913      	add	r1, sp, #76	; 0x4c
 8004c58:	4620      	mov	r0, r4
 8004c5a:	f001 f8ad 	bl	8005db8 <__d2b>
 8004c5e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004c62:	4683      	mov	fp, r0
 8004c64:	2d00      	cmp	r5, #0
 8004c66:	d07c      	beq.n	8004d62 <_dtoa_r+0x1fa>
 8004c68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c6a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004c6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c72:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004c76:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004c7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004c7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004c82:	4b7d      	ldr	r3, [pc, #500]	; (8004e78 <_dtoa_r+0x310>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	4630      	mov	r0, r6
 8004c88:	4639      	mov	r1, r7
 8004c8a:	f7fb fb0d 	bl	80002a8 <__aeabi_dsub>
 8004c8e:	a36e      	add	r3, pc, #440	; (adr r3, 8004e48 <_dtoa_r+0x2e0>)
 8004c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c94:	f7fb fcc0 	bl	8000618 <__aeabi_dmul>
 8004c98:	a36d      	add	r3, pc, #436	; (adr r3, 8004e50 <_dtoa_r+0x2e8>)
 8004c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9e:	f7fb fb05 	bl	80002ac <__adddf3>
 8004ca2:	4606      	mov	r6, r0
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	460f      	mov	r7, r1
 8004ca8:	f7fb fc4c 	bl	8000544 <__aeabi_i2d>
 8004cac:	a36a      	add	r3, pc, #424	; (adr r3, 8004e58 <_dtoa_r+0x2f0>)
 8004cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb2:	f7fb fcb1 	bl	8000618 <__aeabi_dmul>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	460b      	mov	r3, r1
 8004cba:	4630      	mov	r0, r6
 8004cbc:	4639      	mov	r1, r7
 8004cbe:	f7fb faf5 	bl	80002ac <__adddf3>
 8004cc2:	4606      	mov	r6, r0
 8004cc4:	460f      	mov	r7, r1
 8004cc6:	f7fb ff57 	bl	8000b78 <__aeabi_d2iz>
 8004cca:	2200      	movs	r2, #0
 8004ccc:	4682      	mov	sl, r0
 8004cce:	2300      	movs	r3, #0
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	4639      	mov	r1, r7
 8004cd4:	f7fb ff12 	bl	8000afc <__aeabi_dcmplt>
 8004cd8:	b148      	cbz	r0, 8004cee <_dtoa_r+0x186>
 8004cda:	4650      	mov	r0, sl
 8004cdc:	f7fb fc32 	bl	8000544 <__aeabi_i2d>
 8004ce0:	4632      	mov	r2, r6
 8004ce2:	463b      	mov	r3, r7
 8004ce4:	f7fb ff00 	bl	8000ae8 <__aeabi_dcmpeq>
 8004ce8:	b908      	cbnz	r0, 8004cee <_dtoa_r+0x186>
 8004cea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cee:	f1ba 0f16 	cmp.w	sl, #22
 8004cf2:	d854      	bhi.n	8004d9e <_dtoa_r+0x236>
 8004cf4:	4b61      	ldr	r3, [pc, #388]	; (8004e7c <_dtoa_r+0x314>)
 8004cf6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004d02:	f7fb fefb 	bl	8000afc <__aeabi_dcmplt>
 8004d06:	2800      	cmp	r0, #0
 8004d08:	d04b      	beq.n	8004da2 <_dtoa_r+0x23a>
 8004d0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d0e:	2300      	movs	r3, #0
 8004d10:	930e      	str	r3, [sp, #56]	; 0x38
 8004d12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d14:	1b5d      	subs	r5, r3, r5
 8004d16:	1e6b      	subs	r3, r5, #1
 8004d18:	9304      	str	r3, [sp, #16]
 8004d1a:	bf43      	ittte	mi
 8004d1c:	2300      	movmi	r3, #0
 8004d1e:	f1c5 0801 	rsbmi	r8, r5, #1
 8004d22:	9304      	strmi	r3, [sp, #16]
 8004d24:	f04f 0800 	movpl.w	r8, #0
 8004d28:	f1ba 0f00 	cmp.w	sl, #0
 8004d2c:	db3b      	blt.n	8004da6 <_dtoa_r+0x23e>
 8004d2e:	9b04      	ldr	r3, [sp, #16]
 8004d30:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004d34:	4453      	add	r3, sl
 8004d36:	9304      	str	r3, [sp, #16]
 8004d38:	2300      	movs	r3, #0
 8004d3a:	9306      	str	r3, [sp, #24]
 8004d3c:	9b05      	ldr	r3, [sp, #20]
 8004d3e:	2b09      	cmp	r3, #9
 8004d40:	d869      	bhi.n	8004e16 <_dtoa_r+0x2ae>
 8004d42:	2b05      	cmp	r3, #5
 8004d44:	bfc4      	itt	gt
 8004d46:	3b04      	subgt	r3, #4
 8004d48:	9305      	strgt	r3, [sp, #20]
 8004d4a:	9b05      	ldr	r3, [sp, #20]
 8004d4c:	f1a3 0302 	sub.w	r3, r3, #2
 8004d50:	bfcc      	ite	gt
 8004d52:	2500      	movgt	r5, #0
 8004d54:	2501      	movle	r5, #1
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d869      	bhi.n	8004e2e <_dtoa_r+0x2c6>
 8004d5a:	e8df f003 	tbb	[pc, r3]
 8004d5e:	4e2c      	.short	0x4e2c
 8004d60:	5a4c      	.short	0x5a4c
 8004d62:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004d66:	441d      	add	r5, r3
 8004d68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004d6c:	2b20      	cmp	r3, #32
 8004d6e:	bfc1      	itttt	gt
 8004d70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004d74:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004d78:	fa09 f303 	lslgt.w	r3, r9, r3
 8004d7c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004d80:	bfda      	itte	le
 8004d82:	f1c3 0320 	rsble	r3, r3, #32
 8004d86:	fa06 f003 	lslle.w	r0, r6, r3
 8004d8a:	4318      	orrgt	r0, r3
 8004d8c:	f7fb fbca 	bl	8000524 <__aeabi_ui2d>
 8004d90:	2301      	movs	r3, #1
 8004d92:	4606      	mov	r6, r0
 8004d94:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004d98:	3d01      	subs	r5, #1
 8004d9a:	9310      	str	r3, [sp, #64]	; 0x40
 8004d9c:	e771      	b.n	8004c82 <_dtoa_r+0x11a>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e7b6      	b.n	8004d10 <_dtoa_r+0x1a8>
 8004da2:	900e      	str	r0, [sp, #56]	; 0x38
 8004da4:	e7b5      	b.n	8004d12 <_dtoa_r+0x1aa>
 8004da6:	f1ca 0300 	rsb	r3, sl, #0
 8004daa:	9306      	str	r3, [sp, #24]
 8004dac:	2300      	movs	r3, #0
 8004dae:	eba8 080a 	sub.w	r8, r8, sl
 8004db2:	930d      	str	r3, [sp, #52]	; 0x34
 8004db4:	e7c2      	b.n	8004d3c <_dtoa_r+0x1d4>
 8004db6:	2300      	movs	r3, #0
 8004db8:	9308      	str	r3, [sp, #32]
 8004dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	dc39      	bgt.n	8004e34 <_dtoa_r+0x2cc>
 8004dc0:	f04f 0901 	mov.w	r9, #1
 8004dc4:	f8cd 9004 	str.w	r9, [sp, #4]
 8004dc8:	464b      	mov	r3, r9
 8004dca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004dce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	6042      	str	r2, [r0, #4]
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	f102 0614 	add.w	r6, r2, #20
 8004dda:	429e      	cmp	r6, r3
 8004ddc:	6841      	ldr	r1, [r0, #4]
 8004dde:	d92f      	bls.n	8004e40 <_dtoa_r+0x2d8>
 8004de0:	4620      	mov	r0, r4
 8004de2:	f000 fcc7 	bl	8005774 <_Balloc>
 8004de6:	9000      	str	r0, [sp, #0]
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d14b      	bne.n	8004e84 <_dtoa_r+0x31c>
 8004dec:	4b24      	ldr	r3, [pc, #144]	; (8004e80 <_dtoa_r+0x318>)
 8004dee:	4602      	mov	r2, r0
 8004df0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004df4:	e6d1      	b.n	8004b9a <_dtoa_r+0x32>
 8004df6:	2301      	movs	r3, #1
 8004df8:	e7de      	b.n	8004db8 <_dtoa_r+0x250>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	9308      	str	r3, [sp, #32]
 8004dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e00:	eb0a 0903 	add.w	r9, sl, r3
 8004e04:	f109 0301 	add.w	r3, r9, #1
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	9301      	str	r3, [sp, #4]
 8004e0c:	bfb8      	it	lt
 8004e0e:	2301      	movlt	r3, #1
 8004e10:	e7dd      	b.n	8004dce <_dtoa_r+0x266>
 8004e12:	2301      	movs	r3, #1
 8004e14:	e7f2      	b.n	8004dfc <_dtoa_r+0x294>
 8004e16:	2501      	movs	r5, #1
 8004e18:	2300      	movs	r3, #0
 8004e1a:	9305      	str	r3, [sp, #20]
 8004e1c:	9508      	str	r5, [sp, #32]
 8004e1e:	f04f 39ff 	mov.w	r9, #4294967295
 8004e22:	2200      	movs	r2, #0
 8004e24:	f8cd 9004 	str.w	r9, [sp, #4]
 8004e28:	2312      	movs	r3, #18
 8004e2a:	9209      	str	r2, [sp, #36]	; 0x24
 8004e2c:	e7cf      	b.n	8004dce <_dtoa_r+0x266>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	9308      	str	r3, [sp, #32]
 8004e32:	e7f4      	b.n	8004e1e <_dtoa_r+0x2b6>
 8004e34:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004e38:	f8cd 9004 	str.w	r9, [sp, #4]
 8004e3c:	464b      	mov	r3, r9
 8004e3e:	e7c6      	b.n	8004dce <_dtoa_r+0x266>
 8004e40:	3101      	adds	r1, #1
 8004e42:	6041      	str	r1, [r0, #4]
 8004e44:	0052      	lsls	r2, r2, #1
 8004e46:	e7c6      	b.n	8004dd6 <_dtoa_r+0x26e>
 8004e48:	636f4361 	.word	0x636f4361
 8004e4c:	3fd287a7 	.word	0x3fd287a7
 8004e50:	8b60c8b3 	.word	0x8b60c8b3
 8004e54:	3fc68a28 	.word	0x3fc68a28
 8004e58:	509f79fb 	.word	0x509f79fb
 8004e5c:	3fd34413 	.word	0x3fd34413
 8004e60:	08007e89 	.word	0x08007e89
 8004e64:	08007ea0 	.word	0x08007ea0
 8004e68:	7ff00000 	.word	0x7ff00000
 8004e6c:	08007e85 	.word	0x08007e85
 8004e70:	08007e7c 	.word	0x08007e7c
 8004e74:	08007e59 	.word	0x08007e59
 8004e78:	3ff80000 	.word	0x3ff80000
 8004e7c:	08007f98 	.word	0x08007f98
 8004e80:	08007eff 	.word	0x08007eff
 8004e84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e86:	9a00      	ldr	r2, [sp, #0]
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	9b01      	ldr	r3, [sp, #4]
 8004e8c:	2b0e      	cmp	r3, #14
 8004e8e:	f200 80ad 	bhi.w	8004fec <_dtoa_r+0x484>
 8004e92:	2d00      	cmp	r5, #0
 8004e94:	f000 80aa 	beq.w	8004fec <_dtoa_r+0x484>
 8004e98:	f1ba 0f00 	cmp.w	sl, #0
 8004e9c:	dd36      	ble.n	8004f0c <_dtoa_r+0x3a4>
 8004e9e:	4ac3      	ldr	r2, [pc, #780]	; (80051ac <_dtoa_r+0x644>)
 8004ea0:	f00a 030f 	and.w	r3, sl, #15
 8004ea4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004ea8:	ed93 7b00 	vldr	d7, [r3]
 8004eac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004eb0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004eb4:	eeb0 8a47 	vmov.f32	s16, s14
 8004eb8:	eef0 8a67 	vmov.f32	s17, s15
 8004ebc:	d016      	beq.n	8004eec <_dtoa_r+0x384>
 8004ebe:	4bbc      	ldr	r3, [pc, #752]	; (80051b0 <_dtoa_r+0x648>)
 8004ec0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ec4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ec8:	f7fb fcd0 	bl	800086c <__aeabi_ddiv>
 8004ecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ed0:	f007 070f 	and.w	r7, r7, #15
 8004ed4:	2503      	movs	r5, #3
 8004ed6:	4eb6      	ldr	r6, [pc, #728]	; (80051b0 <_dtoa_r+0x648>)
 8004ed8:	b957      	cbnz	r7, 8004ef0 <_dtoa_r+0x388>
 8004eda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ede:	ec53 2b18 	vmov	r2, r3, d8
 8004ee2:	f7fb fcc3 	bl	800086c <__aeabi_ddiv>
 8004ee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004eea:	e029      	b.n	8004f40 <_dtoa_r+0x3d8>
 8004eec:	2502      	movs	r5, #2
 8004eee:	e7f2      	b.n	8004ed6 <_dtoa_r+0x36e>
 8004ef0:	07f9      	lsls	r1, r7, #31
 8004ef2:	d508      	bpl.n	8004f06 <_dtoa_r+0x39e>
 8004ef4:	ec51 0b18 	vmov	r0, r1, d8
 8004ef8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004efc:	f7fb fb8c 	bl	8000618 <__aeabi_dmul>
 8004f00:	ec41 0b18 	vmov	d8, r0, r1
 8004f04:	3501      	adds	r5, #1
 8004f06:	107f      	asrs	r7, r7, #1
 8004f08:	3608      	adds	r6, #8
 8004f0a:	e7e5      	b.n	8004ed8 <_dtoa_r+0x370>
 8004f0c:	f000 80a6 	beq.w	800505c <_dtoa_r+0x4f4>
 8004f10:	f1ca 0600 	rsb	r6, sl, #0
 8004f14:	4ba5      	ldr	r3, [pc, #660]	; (80051ac <_dtoa_r+0x644>)
 8004f16:	4fa6      	ldr	r7, [pc, #664]	; (80051b0 <_dtoa_r+0x648>)
 8004f18:	f006 020f 	and.w	r2, r6, #15
 8004f1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f28:	f7fb fb76 	bl	8000618 <__aeabi_dmul>
 8004f2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f30:	1136      	asrs	r6, r6, #4
 8004f32:	2300      	movs	r3, #0
 8004f34:	2502      	movs	r5, #2
 8004f36:	2e00      	cmp	r6, #0
 8004f38:	f040 8085 	bne.w	8005046 <_dtoa_r+0x4de>
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1d2      	bne.n	8004ee6 <_dtoa_r+0x37e>
 8004f40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 808c 	beq.w	8005060 <_dtoa_r+0x4f8>
 8004f48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004f4c:	4b99      	ldr	r3, [pc, #612]	; (80051b4 <_dtoa_r+0x64c>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	4630      	mov	r0, r6
 8004f52:	4639      	mov	r1, r7
 8004f54:	f7fb fdd2 	bl	8000afc <__aeabi_dcmplt>
 8004f58:	2800      	cmp	r0, #0
 8004f5a:	f000 8081 	beq.w	8005060 <_dtoa_r+0x4f8>
 8004f5e:	9b01      	ldr	r3, [sp, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d07d      	beq.n	8005060 <_dtoa_r+0x4f8>
 8004f64:	f1b9 0f00 	cmp.w	r9, #0
 8004f68:	dd3c      	ble.n	8004fe4 <_dtoa_r+0x47c>
 8004f6a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004f6e:	9307      	str	r3, [sp, #28]
 8004f70:	2200      	movs	r2, #0
 8004f72:	4b91      	ldr	r3, [pc, #580]	; (80051b8 <_dtoa_r+0x650>)
 8004f74:	4630      	mov	r0, r6
 8004f76:	4639      	mov	r1, r7
 8004f78:	f7fb fb4e 	bl	8000618 <__aeabi_dmul>
 8004f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f80:	3501      	adds	r5, #1
 8004f82:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004f86:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	f7fb fada 	bl	8000544 <__aeabi_i2d>
 8004f90:	4632      	mov	r2, r6
 8004f92:	463b      	mov	r3, r7
 8004f94:	f7fb fb40 	bl	8000618 <__aeabi_dmul>
 8004f98:	4b88      	ldr	r3, [pc, #544]	; (80051bc <_dtoa_r+0x654>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f7fb f986 	bl	80002ac <__adddf3>
 8004fa0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004fa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fa8:	9303      	str	r3, [sp, #12]
 8004faa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d15c      	bne.n	800506a <_dtoa_r+0x502>
 8004fb0:	4b83      	ldr	r3, [pc, #524]	; (80051c0 <_dtoa_r+0x658>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	4639      	mov	r1, r7
 8004fb8:	f7fb f976 	bl	80002a8 <__aeabi_dsub>
 8004fbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fc0:	4606      	mov	r6, r0
 8004fc2:	460f      	mov	r7, r1
 8004fc4:	f7fb fdb8 	bl	8000b38 <__aeabi_dcmpgt>
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	f040 8296 	bne.w	80054fa <_dtoa_r+0x992>
 8004fce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004fd2:	4630      	mov	r0, r6
 8004fd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004fd8:	4639      	mov	r1, r7
 8004fda:	f7fb fd8f 	bl	8000afc <__aeabi_dcmplt>
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	f040 8288 	bne.w	80054f4 <_dtoa_r+0x98c>
 8004fe4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004fe8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004fec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f2c0 8158 	blt.w	80052a4 <_dtoa_r+0x73c>
 8004ff4:	f1ba 0f0e 	cmp.w	sl, #14
 8004ff8:	f300 8154 	bgt.w	80052a4 <_dtoa_r+0x73c>
 8004ffc:	4b6b      	ldr	r3, [pc, #428]	; (80051ac <_dtoa_r+0x644>)
 8004ffe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005002:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005008:	2b00      	cmp	r3, #0
 800500a:	f280 80e3 	bge.w	80051d4 <_dtoa_r+0x66c>
 800500e:	9b01      	ldr	r3, [sp, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	f300 80df 	bgt.w	80051d4 <_dtoa_r+0x66c>
 8005016:	f040 826d 	bne.w	80054f4 <_dtoa_r+0x98c>
 800501a:	4b69      	ldr	r3, [pc, #420]	; (80051c0 <_dtoa_r+0x658>)
 800501c:	2200      	movs	r2, #0
 800501e:	4640      	mov	r0, r8
 8005020:	4649      	mov	r1, r9
 8005022:	f7fb faf9 	bl	8000618 <__aeabi_dmul>
 8005026:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800502a:	f7fb fd7b 	bl	8000b24 <__aeabi_dcmpge>
 800502e:	9e01      	ldr	r6, [sp, #4]
 8005030:	4637      	mov	r7, r6
 8005032:	2800      	cmp	r0, #0
 8005034:	f040 8243 	bne.w	80054be <_dtoa_r+0x956>
 8005038:	9d00      	ldr	r5, [sp, #0]
 800503a:	2331      	movs	r3, #49	; 0x31
 800503c:	f805 3b01 	strb.w	r3, [r5], #1
 8005040:	f10a 0a01 	add.w	sl, sl, #1
 8005044:	e23f      	b.n	80054c6 <_dtoa_r+0x95e>
 8005046:	07f2      	lsls	r2, r6, #31
 8005048:	d505      	bpl.n	8005056 <_dtoa_r+0x4ee>
 800504a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800504e:	f7fb fae3 	bl	8000618 <__aeabi_dmul>
 8005052:	3501      	adds	r5, #1
 8005054:	2301      	movs	r3, #1
 8005056:	1076      	asrs	r6, r6, #1
 8005058:	3708      	adds	r7, #8
 800505a:	e76c      	b.n	8004f36 <_dtoa_r+0x3ce>
 800505c:	2502      	movs	r5, #2
 800505e:	e76f      	b.n	8004f40 <_dtoa_r+0x3d8>
 8005060:	9b01      	ldr	r3, [sp, #4]
 8005062:	f8cd a01c 	str.w	sl, [sp, #28]
 8005066:	930c      	str	r3, [sp, #48]	; 0x30
 8005068:	e78d      	b.n	8004f86 <_dtoa_r+0x41e>
 800506a:	9900      	ldr	r1, [sp, #0]
 800506c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800506e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005070:	4b4e      	ldr	r3, [pc, #312]	; (80051ac <_dtoa_r+0x644>)
 8005072:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005076:	4401      	add	r1, r0
 8005078:	9102      	str	r1, [sp, #8]
 800507a:	9908      	ldr	r1, [sp, #32]
 800507c:	eeb0 8a47 	vmov.f32	s16, s14
 8005080:	eef0 8a67 	vmov.f32	s17, s15
 8005084:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005088:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800508c:	2900      	cmp	r1, #0
 800508e:	d045      	beq.n	800511c <_dtoa_r+0x5b4>
 8005090:	494c      	ldr	r1, [pc, #304]	; (80051c4 <_dtoa_r+0x65c>)
 8005092:	2000      	movs	r0, #0
 8005094:	f7fb fbea 	bl	800086c <__aeabi_ddiv>
 8005098:	ec53 2b18 	vmov	r2, r3, d8
 800509c:	f7fb f904 	bl	80002a8 <__aeabi_dsub>
 80050a0:	9d00      	ldr	r5, [sp, #0]
 80050a2:	ec41 0b18 	vmov	d8, r0, r1
 80050a6:	4639      	mov	r1, r7
 80050a8:	4630      	mov	r0, r6
 80050aa:	f7fb fd65 	bl	8000b78 <__aeabi_d2iz>
 80050ae:	900c      	str	r0, [sp, #48]	; 0x30
 80050b0:	f7fb fa48 	bl	8000544 <__aeabi_i2d>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	4630      	mov	r0, r6
 80050ba:	4639      	mov	r1, r7
 80050bc:	f7fb f8f4 	bl	80002a8 <__aeabi_dsub>
 80050c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050c2:	3330      	adds	r3, #48	; 0x30
 80050c4:	f805 3b01 	strb.w	r3, [r5], #1
 80050c8:	ec53 2b18 	vmov	r2, r3, d8
 80050cc:	4606      	mov	r6, r0
 80050ce:	460f      	mov	r7, r1
 80050d0:	f7fb fd14 	bl	8000afc <__aeabi_dcmplt>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d165      	bne.n	80051a4 <_dtoa_r+0x63c>
 80050d8:	4632      	mov	r2, r6
 80050da:	463b      	mov	r3, r7
 80050dc:	4935      	ldr	r1, [pc, #212]	; (80051b4 <_dtoa_r+0x64c>)
 80050de:	2000      	movs	r0, #0
 80050e0:	f7fb f8e2 	bl	80002a8 <__aeabi_dsub>
 80050e4:	ec53 2b18 	vmov	r2, r3, d8
 80050e8:	f7fb fd08 	bl	8000afc <__aeabi_dcmplt>
 80050ec:	2800      	cmp	r0, #0
 80050ee:	f040 80b9 	bne.w	8005264 <_dtoa_r+0x6fc>
 80050f2:	9b02      	ldr	r3, [sp, #8]
 80050f4:	429d      	cmp	r5, r3
 80050f6:	f43f af75 	beq.w	8004fe4 <_dtoa_r+0x47c>
 80050fa:	4b2f      	ldr	r3, [pc, #188]	; (80051b8 <_dtoa_r+0x650>)
 80050fc:	ec51 0b18 	vmov	r0, r1, d8
 8005100:	2200      	movs	r2, #0
 8005102:	f7fb fa89 	bl	8000618 <__aeabi_dmul>
 8005106:	4b2c      	ldr	r3, [pc, #176]	; (80051b8 <_dtoa_r+0x650>)
 8005108:	ec41 0b18 	vmov	d8, r0, r1
 800510c:	2200      	movs	r2, #0
 800510e:	4630      	mov	r0, r6
 8005110:	4639      	mov	r1, r7
 8005112:	f7fb fa81 	bl	8000618 <__aeabi_dmul>
 8005116:	4606      	mov	r6, r0
 8005118:	460f      	mov	r7, r1
 800511a:	e7c4      	b.n	80050a6 <_dtoa_r+0x53e>
 800511c:	ec51 0b17 	vmov	r0, r1, d7
 8005120:	f7fb fa7a 	bl	8000618 <__aeabi_dmul>
 8005124:	9b02      	ldr	r3, [sp, #8]
 8005126:	9d00      	ldr	r5, [sp, #0]
 8005128:	930c      	str	r3, [sp, #48]	; 0x30
 800512a:	ec41 0b18 	vmov	d8, r0, r1
 800512e:	4639      	mov	r1, r7
 8005130:	4630      	mov	r0, r6
 8005132:	f7fb fd21 	bl	8000b78 <__aeabi_d2iz>
 8005136:	9011      	str	r0, [sp, #68]	; 0x44
 8005138:	f7fb fa04 	bl	8000544 <__aeabi_i2d>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4630      	mov	r0, r6
 8005142:	4639      	mov	r1, r7
 8005144:	f7fb f8b0 	bl	80002a8 <__aeabi_dsub>
 8005148:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800514a:	3330      	adds	r3, #48	; 0x30
 800514c:	f805 3b01 	strb.w	r3, [r5], #1
 8005150:	9b02      	ldr	r3, [sp, #8]
 8005152:	429d      	cmp	r5, r3
 8005154:	4606      	mov	r6, r0
 8005156:	460f      	mov	r7, r1
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	d134      	bne.n	80051c8 <_dtoa_r+0x660>
 800515e:	4b19      	ldr	r3, [pc, #100]	; (80051c4 <_dtoa_r+0x65c>)
 8005160:	ec51 0b18 	vmov	r0, r1, d8
 8005164:	f7fb f8a2 	bl	80002ac <__adddf3>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4630      	mov	r0, r6
 800516e:	4639      	mov	r1, r7
 8005170:	f7fb fce2 	bl	8000b38 <__aeabi_dcmpgt>
 8005174:	2800      	cmp	r0, #0
 8005176:	d175      	bne.n	8005264 <_dtoa_r+0x6fc>
 8005178:	ec53 2b18 	vmov	r2, r3, d8
 800517c:	4911      	ldr	r1, [pc, #68]	; (80051c4 <_dtoa_r+0x65c>)
 800517e:	2000      	movs	r0, #0
 8005180:	f7fb f892 	bl	80002a8 <__aeabi_dsub>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4630      	mov	r0, r6
 800518a:	4639      	mov	r1, r7
 800518c:	f7fb fcb6 	bl	8000afc <__aeabi_dcmplt>
 8005190:	2800      	cmp	r0, #0
 8005192:	f43f af27 	beq.w	8004fe4 <_dtoa_r+0x47c>
 8005196:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005198:	1e6b      	subs	r3, r5, #1
 800519a:	930c      	str	r3, [sp, #48]	; 0x30
 800519c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80051a0:	2b30      	cmp	r3, #48	; 0x30
 80051a2:	d0f8      	beq.n	8005196 <_dtoa_r+0x62e>
 80051a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80051a8:	e04a      	b.n	8005240 <_dtoa_r+0x6d8>
 80051aa:	bf00      	nop
 80051ac:	08007f98 	.word	0x08007f98
 80051b0:	08007f70 	.word	0x08007f70
 80051b4:	3ff00000 	.word	0x3ff00000
 80051b8:	40240000 	.word	0x40240000
 80051bc:	401c0000 	.word	0x401c0000
 80051c0:	40140000 	.word	0x40140000
 80051c4:	3fe00000 	.word	0x3fe00000
 80051c8:	4baf      	ldr	r3, [pc, #700]	; (8005488 <_dtoa_r+0x920>)
 80051ca:	f7fb fa25 	bl	8000618 <__aeabi_dmul>
 80051ce:	4606      	mov	r6, r0
 80051d0:	460f      	mov	r7, r1
 80051d2:	e7ac      	b.n	800512e <_dtoa_r+0x5c6>
 80051d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80051d8:	9d00      	ldr	r5, [sp, #0]
 80051da:	4642      	mov	r2, r8
 80051dc:	464b      	mov	r3, r9
 80051de:	4630      	mov	r0, r6
 80051e0:	4639      	mov	r1, r7
 80051e2:	f7fb fb43 	bl	800086c <__aeabi_ddiv>
 80051e6:	f7fb fcc7 	bl	8000b78 <__aeabi_d2iz>
 80051ea:	9002      	str	r0, [sp, #8]
 80051ec:	f7fb f9aa 	bl	8000544 <__aeabi_i2d>
 80051f0:	4642      	mov	r2, r8
 80051f2:	464b      	mov	r3, r9
 80051f4:	f7fb fa10 	bl	8000618 <__aeabi_dmul>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4630      	mov	r0, r6
 80051fe:	4639      	mov	r1, r7
 8005200:	f7fb f852 	bl	80002a8 <__aeabi_dsub>
 8005204:	9e02      	ldr	r6, [sp, #8]
 8005206:	9f01      	ldr	r7, [sp, #4]
 8005208:	3630      	adds	r6, #48	; 0x30
 800520a:	f805 6b01 	strb.w	r6, [r5], #1
 800520e:	9e00      	ldr	r6, [sp, #0]
 8005210:	1bae      	subs	r6, r5, r6
 8005212:	42b7      	cmp	r7, r6
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	d137      	bne.n	800528a <_dtoa_r+0x722>
 800521a:	f7fb f847 	bl	80002ac <__adddf3>
 800521e:	4642      	mov	r2, r8
 8005220:	464b      	mov	r3, r9
 8005222:	4606      	mov	r6, r0
 8005224:	460f      	mov	r7, r1
 8005226:	f7fb fc87 	bl	8000b38 <__aeabi_dcmpgt>
 800522a:	b9c8      	cbnz	r0, 8005260 <_dtoa_r+0x6f8>
 800522c:	4642      	mov	r2, r8
 800522e:	464b      	mov	r3, r9
 8005230:	4630      	mov	r0, r6
 8005232:	4639      	mov	r1, r7
 8005234:	f7fb fc58 	bl	8000ae8 <__aeabi_dcmpeq>
 8005238:	b110      	cbz	r0, 8005240 <_dtoa_r+0x6d8>
 800523a:	9b02      	ldr	r3, [sp, #8]
 800523c:	07d9      	lsls	r1, r3, #31
 800523e:	d40f      	bmi.n	8005260 <_dtoa_r+0x6f8>
 8005240:	4620      	mov	r0, r4
 8005242:	4659      	mov	r1, fp
 8005244:	f000 fad6 	bl	80057f4 <_Bfree>
 8005248:	2300      	movs	r3, #0
 800524a:	702b      	strb	r3, [r5, #0]
 800524c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800524e:	f10a 0001 	add.w	r0, sl, #1
 8005252:	6018      	str	r0, [r3, #0]
 8005254:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005256:	2b00      	cmp	r3, #0
 8005258:	f43f acd8 	beq.w	8004c0c <_dtoa_r+0xa4>
 800525c:	601d      	str	r5, [r3, #0]
 800525e:	e4d5      	b.n	8004c0c <_dtoa_r+0xa4>
 8005260:	f8cd a01c 	str.w	sl, [sp, #28]
 8005264:	462b      	mov	r3, r5
 8005266:	461d      	mov	r5, r3
 8005268:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800526c:	2a39      	cmp	r2, #57	; 0x39
 800526e:	d108      	bne.n	8005282 <_dtoa_r+0x71a>
 8005270:	9a00      	ldr	r2, [sp, #0]
 8005272:	429a      	cmp	r2, r3
 8005274:	d1f7      	bne.n	8005266 <_dtoa_r+0x6fe>
 8005276:	9a07      	ldr	r2, [sp, #28]
 8005278:	9900      	ldr	r1, [sp, #0]
 800527a:	3201      	adds	r2, #1
 800527c:	9207      	str	r2, [sp, #28]
 800527e:	2230      	movs	r2, #48	; 0x30
 8005280:	700a      	strb	r2, [r1, #0]
 8005282:	781a      	ldrb	r2, [r3, #0]
 8005284:	3201      	adds	r2, #1
 8005286:	701a      	strb	r2, [r3, #0]
 8005288:	e78c      	b.n	80051a4 <_dtoa_r+0x63c>
 800528a:	4b7f      	ldr	r3, [pc, #508]	; (8005488 <_dtoa_r+0x920>)
 800528c:	2200      	movs	r2, #0
 800528e:	f7fb f9c3 	bl	8000618 <__aeabi_dmul>
 8005292:	2200      	movs	r2, #0
 8005294:	2300      	movs	r3, #0
 8005296:	4606      	mov	r6, r0
 8005298:	460f      	mov	r7, r1
 800529a:	f7fb fc25 	bl	8000ae8 <__aeabi_dcmpeq>
 800529e:	2800      	cmp	r0, #0
 80052a0:	d09b      	beq.n	80051da <_dtoa_r+0x672>
 80052a2:	e7cd      	b.n	8005240 <_dtoa_r+0x6d8>
 80052a4:	9a08      	ldr	r2, [sp, #32]
 80052a6:	2a00      	cmp	r2, #0
 80052a8:	f000 80c4 	beq.w	8005434 <_dtoa_r+0x8cc>
 80052ac:	9a05      	ldr	r2, [sp, #20]
 80052ae:	2a01      	cmp	r2, #1
 80052b0:	f300 80a8 	bgt.w	8005404 <_dtoa_r+0x89c>
 80052b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052b6:	2a00      	cmp	r2, #0
 80052b8:	f000 80a0 	beq.w	80053fc <_dtoa_r+0x894>
 80052bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80052c0:	9e06      	ldr	r6, [sp, #24]
 80052c2:	4645      	mov	r5, r8
 80052c4:	9a04      	ldr	r2, [sp, #16]
 80052c6:	2101      	movs	r1, #1
 80052c8:	441a      	add	r2, r3
 80052ca:	4620      	mov	r0, r4
 80052cc:	4498      	add	r8, r3
 80052ce:	9204      	str	r2, [sp, #16]
 80052d0:	f000 fb4c 	bl	800596c <__i2b>
 80052d4:	4607      	mov	r7, r0
 80052d6:	2d00      	cmp	r5, #0
 80052d8:	dd0b      	ble.n	80052f2 <_dtoa_r+0x78a>
 80052da:	9b04      	ldr	r3, [sp, #16]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	dd08      	ble.n	80052f2 <_dtoa_r+0x78a>
 80052e0:	42ab      	cmp	r3, r5
 80052e2:	9a04      	ldr	r2, [sp, #16]
 80052e4:	bfa8      	it	ge
 80052e6:	462b      	movge	r3, r5
 80052e8:	eba8 0803 	sub.w	r8, r8, r3
 80052ec:	1aed      	subs	r5, r5, r3
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	9304      	str	r3, [sp, #16]
 80052f2:	9b06      	ldr	r3, [sp, #24]
 80052f4:	b1fb      	cbz	r3, 8005336 <_dtoa_r+0x7ce>
 80052f6:	9b08      	ldr	r3, [sp, #32]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 809f 	beq.w	800543c <_dtoa_r+0x8d4>
 80052fe:	2e00      	cmp	r6, #0
 8005300:	dd11      	ble.n	8005326 <_dtoa_r+0x7be>
 8005302:	4639      	mov	r1, r7
 8005304:	4632      	mov	r2, r6
 8005306:	4620      	mov	r0, r4
 8005308:	f000 fbec 	bl	8005ae4 <__pow5mult>
 800530c:	465a      	mov	r2, fp
 800530e:	4601      	mov	r1, r0
 8005310:	4607      	mov	r7, r0
 8005312:	4620      	mov	r0, r4
 8005314:	f000 fb40 	bl	8005998 <__multiply>
 8005318:	4659      	mov	r1, fp
 800531a:	9007      	str	r0, [sp, #28]
 800531c:	4620      	mov	r0, r4
 800531e:	f000 fa69 	bl	80057f4 <_Bfree>
 8005322:	9b07      	ldr	r3, [sp, #28]
 8005324:	469b      	mov	fp, r3
 8005326:	9b06      	ldr	r3, [sp, #24]
 8005328:	1b9a      	subs	r2, r3, r6
 800532a:	d004      	beq.n	8005336 <_dtoa_r+0x7ce>
 800532c:	4659      	mov	r1, fp
 800532e:	4620      	mov	r0, r4
 8005330:	f000 fbd8 	bl	8005ae4 <__pow5mult>
 8005334:	4683      	mov	fp, r0
 8005336:	2101      	movs	r1, #1
 8005338:	4620      	mov	r0, r4
 800533a:	f000 fb17 	bl	800596c <__i2b>
 800533e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005340:	2b00      	cmp	r3, #0
 8005342:	4606      	mov	r6, r0
 8005344:	dd7c      	ble.n	8005440 <_dtoa_r+0x8d8>
 8005346:	461a      	mov	r2, r3
 8005348:	4601      	mov	r1, r0
 800534a:	4620      	mov	r0, r4
 800534c:	f000 fbca 	bl	8005ae4 <__pow5mult>
 8005350:	9b05      	ldr	r3, [sp, #20]
 8005352:	2b01      	cmp	r3, #1
 8005354:	4606      	mov	r6, r0
 8005356:	dd76      	ble.n	8005446 <_dtoa_r+0x8de>
 8005358:	2300      	movs	r3, #0
 800535a:	9306      	str	r3, [sp, #24]
 800535c:	6933      	ldr	r3, [r6, #16]
 800535e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005362:	6918      	ldr	r0, [r3, #16]
 8005364:	f000 fab2 	bl	80058cc <__hi0bits>
 8005368:	f1c0 0020 	rsb	r0, r0, #32
 800536c:	9b04      	ldr	r3, [sp, #16]
 800536e:	4418      	add	r0, r3
 8005370:	f010 001f 	ands.w	r0, r0, #31
 8005374:	f000 8086 	beq.w	8005484 <_dtoa_r+0x91c>
 8005378:	f1c0 0320 	rsb	r3, r0, #32
 800537c:	2b04      	cmp	r3, #4
 800537e:	dd7f      	ble.n	8005480 <_dtoa_r+0x918>
 8005380:	f1c0 001c 	rsb	r0, r0, #28
 8005384:	9b04      	ldr	r3, [sp, #16]
 8005386:	4403      	add	r3, r0
 8005388:	4480      	add	r8, r0
 800538a:	4405      	add	r5, r0
 800538c:	9304      	str	r3, [sp, #16]
 800538e:	f1b8 0f00 	cmp.w	r8, #0
 8005392:	dd05      	ble.n	80053a0 <_dtoa_r+0x838>
 8005394:	4659      	mov	r1, fp
 8005396:	4642      	mov	r2, r8
 8005398:	4620      	mov	r0, r4
 800539a:	f000 fbfd 	bl	8005b98 <__lshift>
 800539e:	4683      	mov	fp, r0
 80053a0:	9b04      	ldr	r3, [sp, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	dd05      	ble.n	80053b2 <_dtoa_r+0x84a>
 80053a6:	4631      	mov	r1, r6
 80053a8:	461a      	mov	r2, r3
 80053aa:	4620      	mov	r0, r4
 80053ac:	f000 fbf4 	bl	8005b98 <__lshift>
 80053b0:	4606      	mov	r6, r0
 80053b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d069      	beq.n	800548c <_dtoa_r+0x924>
 80053b8:	4631      	mov	r1, r6
 80053ba:	4658      	mov	r0, fp
 80053bc:	f000 fc58 	bl	8005c70 <__mcmp>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	da63      	bge.n	800548c <_dtoa_r+0x924>
 80053c4:	2300      	movs	r3, #0
 80053c6:	4659      	mov	r1, fp
 80053c8:	220a      	movs	r2, #10
 80053ca:	4620      	mov	r0, r4
 80053cc:	f000 fa34 	bl	8005838 <__multadd>
 80053d0:	9b08      	ldr	r3, [sp, #32]
 80053d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053d6:	4683      	mov	fp, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 818f 	beq.w	80056fc <_dtoa_r+0xb94>
 80053de:	4639      	mov	r1, r7
 80053e0:	2300      	movs	r3, #0
 80053e2:	220a      	movs	r2, #10
 80053e4:	4620      	mov	r0, r4
 80053e6:	f000 fa27 	bl	8005838 <__multadd>
 80053ea:	f1b9 0f00 	cmp.w	r9, #0
 80053ee:	4607      	mov	r7, r0
 80053f0:	f300 808e 	bgt.w	8005510 <_dtoa_r+0x9a8>
 80053f4:	9b05      	ldr	r3, [sp, #20]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	dc50      	bgt.n	800549c <_dtoa_r+0x934>
 80053fa:	e089      	b.n	8005510 <_dtoa_r+0x9a8>
 80053fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005402:	e75d      	b.n	80052c0 <_dtoa_r+0x758>
 8005404:	9b01      	ldr	r3, [sp, #4]
 8005406:	1e5e      	subs	r6, r3, #1
 8005408:	9b06      	ldr	r3, [sp, #24]
 800540a:	42b3      	cmp	r3, r6
 800540c:	bfbf      	itttt	lt
 800540e:	9b06      	ldrlt	r3, [sp, #24]
 8005410:	9606      	strlt	r6, [sp, #24]
 8005412:	1af2      	sublt	r2, r6, r3
 8005414:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005416:	bfb6      	itet	lt
 8005418:	189b      	addlt	r3, r3, r2
 800541a:	1b9e      	subge	r6, r3, r6
 800541c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800541e:	9b01      	ldr	r3, [sp, #4]
 8005420:	bfb8      	it	lt
 8005422:	2600      	movlt	r6, #0
 8005424:	2b00      	cmp	r3, #0
 8005426:	bfb5      	itete	lt
 8005428:	eba8 0503 	sublt.w	r5, r8, r3
 800542c:	9b01      	ldrge	r3, [sp, #4]
 800542e:	2300      	movlt	r3, #0
 8005430:	4645      	movge	r5, r8
 8005432:	e747      	b.n	80052c4 <_dtoa_r+0x75c>
 8005434:	9e06      	ldr	r6, [sp, #24]
 8005436:	9f08      	ldr	r7, [sp, #32]
 8005438:	4645      	mov	r5, r8
 800543a:	e74c      	b.n	80052d6 <_dtoa_r+0x76e>
 800543c:	9a06      	ldr	r2, [sp, #24]
 800543e:	e775      	b.n	800532c <_dtoa_r+0x7c4>
 8005440:	9b05      	ldr	r3, [sp, #20]
 8005442:	2b01      	cmp	r3, #1
 8005444:	dc18      	bgt.n	8005478 <_dtoa_r+0x910>
 8005446:	9b02      	ldr	r3, [sp, #8]
 8005448:	b9b3      	cbnz	r3, 8005478 <_dtoa_r+0x910>
 800544a:	9b03      	ldr	r3, [sp, #12]
 800544c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005450:	b9a3      	cbnz	r3, 800547c <_dtoa_r+0x914>
 8005452:	9b03      	ldr	r3, [sp, #12]
 8005454:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005458:	0d1b      	lsrs	r3, r3, #20
 800545a:	051b      	lsls	r3, r3, #20
 800545c:	b12b      	cbz	r3, 800546a <_dtoa_r+0x902>
 800545e:	9b04      	ldr	r3, [sp, #16]
 8005460:	3301      	adds	r3, #1
 8005462:	9304      	str	r3, [sp, #16]
 8005464:	f108 0801 	add.w	r8, r8, #1
 8005468:	2301      	movs	r3, #1
 800546a:	9306      	str	r3, [sp, #24]
 800546c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800546e:	2b00      	cmp	r3, #0
 8005470:	f47f af74 	bne.w	800535c <_dtoa_r+0x7f4>
 8005474:	2001      	movs	r0, #1
 8005476:	e779      	b.n	800536c <_dtoa_r+0x804>
 8005478:	2300      	movs	r3, #0
 800547a:	e7f6      	b.n	800546a <_dtoa_r+0x902>
 800547c:	9b02      	ldr	r3, [sp, #8]
 800547e:	e7f4      	b.n	800546a <_dtoa_r+0x902>
 8005480:	d085      	beq.n	800538e <_dtoa_r+0x826>
 8005482:	4618      	mov	r0, r3
 8005484:	301c      	adds	r0, #28
 8005486:	e77d      	b.n	8005384 <_dtoa_r+0x81c>
 8005488:	40240000 	.word	0x40240000
 800548c:	9b01      	ldr	r3, [sp, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	dc38      	bgt.n	8005504 <_dtoa_r+0x99c>
 8005492:	9b05      	ldr	r3, [sp, #20]
 8005494:	2b02      	cmp	r3, #2
 8005496:	dd35      	ble.n	8005504 <_dtoa_r+0x99c>
 8005498:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800549c:	f1b9 0f00 	cmp.w	r9, #0
 80054a0:	d10d      	bne.n	80054be <_dtoa_r+0x956>
 80054a2:	4631      	mov	r1, r6
 80054a4:	464b      	mov	r3, r9
 80054a6:	2205      	movs	r2, #5
 80054a8:	4620      	mov	r0, r4
 80054aa:	f000 f9c5 	bl	8005838 <__multadd>
 80054ae:	4601      	mov	r1, r0
 80054b0:	4606      	mov	r6, r0
 80054b2:	4658      	mov	r0, fp
 80054b4:	f000 fbdc 	bl	8005c70 <__mcmp>
 80054b8:	2800      	cmp	r0, #0
 80054ba:	f73f adbd 	bgt.w	8005038 <_dtoa_r+0x4d0>
 80054be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054c0:	9d00      	ldr	r5, [sp, #0]
 80054c2:	ea6f 0a03 	mvn.w	sl, r3
 80054c6:	f04f 0800 	mov.w	r8, #0
 80054ca:	4631      	mov	r1, r6
 80054cc:	4620      	mov	r0, r4
 80054ce:	f000 f991 	bl	80057f4 <_Bfree>
 80054d2:	2f00      	cmp	r7, #0
 80054d4:	f43f aeb4 	beq.w	8005240 <_dtoa_r+0x6d8>
 80054d8:	f1b8 0f00 	cmp.w	r8, #0
 80054dc:	d005      	beq.n	80054ea <_dtoa_r+0x982>
 80054de:	45b8      	cmp	r8, r7
 80054e0:	d003      	beq.n	80054ea <_dtoa_r+0x982>
 80054e2:	4641      	mov	r1, r8
 80054e4:	4620      	mov	r0, r4
 80054e6:	f000 f985 	bl	80057f4 <_Bfree>
 80054ea:	4639      	mov	r1, r7
 80054ec:	4620      	mov	r0, r4
 80054ee:	f000 f981 	bl	80057f4 <_Bfree>
 80054f2:	e6a5      	b.n	8005240 <_dtoa_r+0x6d8>
 80054f4:	2600      	movs	r6, #0
 80054f6:	4637      	mov	r7, r6
 80054f8:	e7e1      	b.n	80054be <_dtoa_r+0x956>
 80054fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80054fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005500:	4637      	mov	r7, r6
 8005502:	e599      	b.n	8005038 <_dtoa_r+0x4d0>
 8005504:	9b08      	ldr	r3, [sp, #32]
 8005506:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 80fd 	beq.w	800570a <_dtoa_r+0xba2>
 8005510:	2d00      	cmp	r5, #0
 8005512:	dd05      	ble.n	8005520 <_dtoa_r+0x9b8>
 8005514:	4639      	mov	r1, r7
 8005516:	462a      	mov	r2, r5
 8005518:	4620      	mov	r0, r4
 800551a:	f000 fb3d 	bl	8005b98 <__lshift>
 800551e:	4607      	mov	r7, r0
 8005520:	9b06      	ldr	r3, [sp, #24]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d05c      	beq.n	80055e0 <_dtoa_r+0xa78>
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	4620      	mov	r0, r4
 800552a:	f000 f923 	bl	8005774 <_Balloc>
 800552e:	4605      	mov	r5, r0
 8005530:	b928      	cbnz	r0, 800553e <_dtoa_r+0x9d6>
 8005532:	4b80      	ldr	r3, [pc, #512]	; (8005734 <_dtoa_r+0xbcc>)
 8005534:	4602      	mov	r2, r0
 8005536:	f240 21ea 	movw	r1, #746	; 0x2ea
 800553a:	f7ff bb2e 	b.w	8004b9a <_dtoa_r+0x32>
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	3202      	adds	r2, #2
 8005542:	0092      	lsls	r2, r2, #2
 8005544:	f107 010c 	add.w	r1, r7, #12
 8005548:	300c      	adds	r0, #12
 800554a:	f000 f905 	bl	8005758 <memcpy>
 800554e:	2201      	movs	r2, #1
 8005550:	4629      	mov	r1, r5
 8005552:	4620      	mov	r0, r4
 8005554:	f000 fb20 	bl	8005b98 <__lshift>
 8005558:	9b00      	ldr	r3, [sp, #0]
 800555a:	3301      	adds	r3, #1
 800555c:	9301      	str	r3, [sp, #4]
 800555e:	9b00      	ldr	r3, [sp, #0]
 8005560:	444b      	add	r3, r9
 8005562:	9307      	str	r3, [sp, #28]
 8005564:	9b02      	ldr	r3, [sp, #8]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	46b8      	mov	r8, r7
 800556c:	9306      	str	r3, [sp, #24]
 800556e:	4607      	mov	r7, r0
 8005570:	9b01      	ldr	r3, [sp, #4]
 8005572:	4631      	mov	r1, r6
 8005574:	3b01      	subs	r3, #1
 8005576:	4658      	mov	r0, fp
 8005578:	9302      	str	r3, [sp, #8]
 800557a:	f7ff fa69 	bl	8004a50 <quorem>
 800557e:	4603      	mov	r3, r0
 8005580:	3330      	adds	r3, #48	; 0x30
 8005582:	9004      	str	r0, [sp, #16]
 8005584:	4641      	mov	r1, r8
 8005586:	4658      	mov	r0, fp
 8005588:	9308      	str	r3, [sp, #32]
 800558a:	f000 fb71 	bl	8005c70 <__mcmp>
 800558e:	463a      	mov	r2, r7
 8005590:	4681      	mov	r9, r0
 8005592:	4631      	mov	r1, r6
 8005594:	4620      	mov	r0, r4
 8005596:	f000 fb87 	bl	8005ca8 <__mdiff>
 800559a:	68c2      	ldr	r2, [r0, #12]
 800559c:	9b08      	ldr	r3, [sp, #32]
 800559e:	4605      	mov	r5, r0
 80055a0:	bb02      	cbnz	r2, 80055e4 <_dtoa_r+0xa7c>
 80055a2:	4601      	mov	r1, r0
 80055a4:	4658      	mov	r0, fp
 80055a6:	f000 fb63 	bl	8005c70 <__mcmp>
 80055aa:	9b08      	ldr	r3, [sp, #32]
 80055ac:	4602      	mov	r2, r0
 80055ae:	4629      	mov	r1, r5
 80055b0:	4620      	mov	r0, r4
 80055b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80055b6:	f000 f91d 	bl	80057f4 <_Bfree>
 80055ba:	9b05      	ldr	r3, [sp, #20]
 80055bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055be:	9d01      	ldr	r5, [sp, #4]
 80055c0:	ea43 0102 	orr.w	r1, r3, r2
 80055c4:	9b06      	ldr	r3, [sp, #24]
 80055c6:	430b      	orrs	r3, r1
 80055c8:	9b08      	ldr	r3, [sp, #32]
 80055ca:	d10d      	bne.n	80055e8 <_dtoa_r+0xa80>
 80055cc:	2b39      	cmp	r3, #57	; 0x39
 80055ce:	d029      	beq.n	8005624 <_dtoa_r+0xabc>
 80055d0:	f1b9 0f00 	cmp.w	r9, #0
 80055d4:	dd01      	ble.n	80055da <_dtoa_r+0xa72>
 80055d6:	9b04      	ldr	r3, [sp, #16]
 80055d8:	3331      	adds	r3, #49	; 0x31
 80055da:	9a02      	ldr	r2, [sp, #8]
 80055dc:	7013      	strb	r3, [r2, #0]
 80055de:	e774      	b.n	80054ca <_dtoa_r+0x962>
 80055e0:	4638      	mov	r0, r7
 80055e2:	e7b9      	b.n	8005558 <_dtoa_r+0x9f0>
 80055e4:	2201      	movs	r2, #1
 80055e6:	e7e2      	b.n	80055ae <_dtoa_r+0xa46>
 80055e8:	f1b9 0f00 	cmp.w	r9, #0
 80055ec:	db06      	blt.n	80055fc <_dtoa_r+0xa94>
 80055ee:	9905      	ldr	r1, [sp, #20]
 80055f0:	ea41 0909 	orr.w	r9, r1, r9
 80055f4:	9906      	ldr	r1, [sp, #24]
 80055f6:	ea59 0101 	orrs.w	r1, r9, r1
 80055fa:	d120      	bne.n	800563e <_dtoa_r+0xad6>
 80055fc:	2a00      	cmp	r2, #0
 80055fe:	ddec      	ble.n	80055da <_dtoa_r+0xa72>
 8005600:	4659      	mov	r1, fp
 8005602:	2201      	movs	r2, #1
 8005604:	4620      	mov	r0, r4
 8005606:	9301      	str	r3, [sp, #4]
 8005608:	f000 fac6 	bl	8005b98 <__lshift>
 800560c:	4631      	mov	r1, r6
 800560e:	4683      	mov	fp, r0
 8005610:	f000 fb2e 	bl	8005c70 <__mcmp>
 8005614:	2800      	cmp	r0, #0
 8005616:	9b01      	ldr	r3, [sp, #4]
 8005618:	dc02      	bgt.n	8005620 <_dtoa_r+0xab8>
 800561a:	d1de      	bne.n	80055da <_dtoa_r+0xa72>
 800561c:	07da      	lsls	r2, r3, #31
 800561e:	d5dc      	bpl.n	80055da <_dtoa_r+0xa72>
 8005620:	2b39      	cmp	r3, #57	; 0x39
 8005622:	d1d8      	bne.n	80055d6 <_dtoa_r+0xa6e>
 8005624:	9a02      	ldr	r2, [sp, #8]
 8005626:	2339      	movs	r3, #57	; 0x39
 8005628:	7013      	strb	r3, [r2, #0]
 800562a:	462b      	mov	r3, r5
 800562c:	461d      	mov	r5, r3
 800562e:	3b01      	subs	r3, #1
 8005630:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005634:	2a39      	cmp	r2, #57	; 0x39
 8005636:	d050      	beq.n	80056da <_dtoa_r+0xb72>
 8005638:	3201      	adds	r2, #1
 800563a:	701a      	strb	r2, [r3, #0]
 800563c:	e745      	b.n	80054ca <_dtoa_r+0x962>
 800563e:	2a00      	cmp	r2, #0
 8005640:	dd03      	ble.n	800564a <_dtoa_r+0xae2>
 8005642:	2b39      	cmp	r3, #57	; 0x39
 8005644:	d0ee      	beq.n	8005624 <_dtoa_r+0xabc>
 8005646:	3301      	adds	r3, #1
 8005648:	e7c7      	b.n	80055da <_dtoa_r+0xa72>
 800564a:	9a01      	ldr	r2, [sp, #4]
 800564c:	9907      	ldr	r1, [sp, #28]
 800564e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005652:	428a      	cmp	r2, r1
 8005654:	d02a      	beq.n	80056ac <_dtoa_r+0xb44>
 8005656:	4659      	mov	r1, fp
 8005658:	2300      	movs	r3, #0
 800565a:	220a      	movs	r2, #10
 800565c:	4620      	mov	r0, r4
 800565e:	f000 f8eb 	bl	8005838 <__multadd>
 8005662:	45b8      	cmp	r8, r7
 8005664:	4683      	mov	fp, r0
 8005666:	f04f 0300 	mov.w	r3, #0
 800566a:	f04f 020a 	mov.w	r2, #10
 800566e:	4641      	mov	r1, r8
 8005670:	4620      	mov	r0, r4
 8005672:	d107      	bne.n	8005684 <_dtoa_r+0xb1c>
 8005674:	f000 f8e0 	bl	8005838 <__multadd>
 8005678:	4680      	mov	r8, r0
 800567a:	4607      	mov	r7, r0
 800567c:	9b01      	ldr	r3, [sp, #4]
 800567e:	3301      	adds	r3, #1
 8005680:	9301      	str	r3, [sp, #4]
 8005682:	e775      	b.n	8005570 <_dtoa_r+0xa08>
 8005684:	f000 f8d8 	bl	8005838 <__multadd>
 8005688:	4639      	mov	r1, r7
 800568a:	4680      	mov	r8, r0
 800568c:	2300      	movs	r3, #0
 800568e:	220a      	movs	r2, #10
 8005690:	4620      	mov	r0, r4
 8005692:	f000 f8d1 	bl	8005838 <__multadd>
 8005696:	4607      	mov	r7, r0
 8005698:	e7f0      	b.n	800567c <_dtoa_r+0xb14>
 800569a:	f1b9 0f00 	cmp.w	r9, #0
 800569e:	9a00      	ldr	r2, [sp, #0]
 80056a0:	bfcc      	ite	gt
 80056a2:	464d      	movgt	r5, r9
 80056a4:	2501      	movle	r5, #1
 80056a6:	4415      	add	r5, r2
 80056a8:	f04f 0800 	mov.w	r8, #0
 80056ac:	4659      	mov	r1, fp
 80056ae:	2201      	movs	r2, #1
 80056b0:	4620      	mov	r0, r4
 80056b2:	9301      	str	r3, [sp, #4]
 80056b4:	f000 fa70 	bl	8005b98 <__lshift>
 80056b8:	4631      	mov	r1, r6
 80056ba:	4683      	mov	fp, r0
 80056bc:	f000 fad8 	bl	8005c70 <__mcmp>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	dcb2      	bgt.n	800562a <_dtoa_r+0xac2>
 80056c4:	d102      	bne.n	80056cc <_dtoa_r+0xb64>
 80056c6:	9b01      	ldr	r3, [sp, #4]
 80056c8:	07db      	lsls	r3, r3, #31
 80056ca:	d4ae      	bmi.n	800562a <_dtoa_r+0xac2>
 80056cc:	462b      	mov	r3, r5
 80056ce:	461d      	mov	r5, r3
 80056d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056d4:	2a30      	cmp	r2, #48	; 0x30
 80056d6:	d0fa      	beq.n	80056ce <_dtoa_r+0xb66>
 80056d8:	e6f7      	b.n	80054ca <_dtoa_r+0x962>
 80056da:	9a00      	ldr	r2, [sp, #0]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d1a5      	bne.n	800562c <_dtoa_r+0xac4>
 80056e0:	f10a 0a01 	add.w	sl, sl, #1
 80056e4:	2331      	movs	r3, #49	; 0x31
 80056e6:	e779      	b.n	80055dc <_dtoa_r+0xa74>
 80056e8:	4b13      	ldr	r3, [pc, #76]	; (8005738 <_dtoa_r+0xbd0>)
 80056ea:	f7ff baaf 	b.w	8004c4c <_dtoa_r+0xe4>
 80056ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f47f aa86 	bne.w	8004c02 <_dtoa_r+0x9a>
 80056f6:	4b11      	ldr	r3, [pc, #68]	; (800573c <_dtoa_r+0xbd4>)
 80056f8:	f7ff baa8 	b.w	8004c4c <_dtoa_r+0xe4>
 80056fc:	f1b9 0f00 	cmp.w	r9, #0
 8005700:	dc03      	bgt.n	800570a <_dtoa_r+0xba2>
 8005702:	9b05      	ldr	r3, [sp, #20]
 8005704:	2b02      	cmp	r3, #2
 8005706:	f73f aec9 	bgt.w	800549c <_dtoa_r+0x934>
 800570a:	9d00      	ldr	r5, [sp, #0]
 800570c:	4631      	mov	r1, r6
 800570e:	4658      	mov	r0, fp
 8005710:	f7ff f99e 	bl	8004a50 <quorem>
 8005714:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005718:	f805 3b01 	strb.w	r3, [r5], #1
 800571c:	9a00      	ldr	r2, [sp, #0]
 800571e:	1aaa      	subs	r2, r5, r2
 8005720:	4591      	cmp	r9, r2
 8005722:	ddba      	ble.n	800569a <_dtoa_r+0xb32>
 8005724:	4659      	mov	r1, fp
 8005726:	2300      	movs	r3, #0
 8005728:	220a      	movs	r2, #10
 800572a:	4620      	mov	r0, r4
 800572c:	f000 f884 	bl	8005838 <__multadd>
 8005730:	4683      	mov	fp, r0
 8005732:	e7eb      	b.n	800570c <_dtoa_r+0xba4>
 8005734:	08007eff 	.word	0x08007eff
 8005738:	08007e58 	.word	0x08007e58
 800573c:	08007e7c 	.word	0x08007e7c

08005740 <_localeconv_r>:
 8005740:	4800      	ldr	r0, [pc, #0]	; (8005744 <_localeconv_r+0x4>)
 8005742:	4770      	bx	lr
 8005744:	2000016c 	.word	0x2000016c

08005748 <malloc>:
 8005748:	4b02      	ldr	r3, [pc, #8]	; (8005754 <malloc+0xc>)
 800574a:	4601      	mov	r1, r0
 800574c:	6818      	ldr	r0, [r3, #0]
 800574e:	f000 bbef 	b.w	8005f30 <_malloc_r>
 8005752:	bf00      	nop
 8005754:	20000018 	.word	0x20000018

08005758 <memcpy>:
 8005758:	440a      	add	r2, r1
 800575a:	4291      	cmp	r1, r2
 800575c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005760:	d100      	bne.n	8005764 <memcpy+0xc>
 8005762:	4770      	bx	lr
 8005764:	b510      	push	{r4, lr}
 8005766:	f811 4b01 	ldrb.w	r4, [r1], #1
 800576a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800576e:	4291      	cmp	r1, r2
 8005770:	d1f9      	bne.n	8005766 <memcpy+0xe>
 8005772:	bd10      	pop	{r4, pc}

08005774 <_Balloc>:
 8005774:	b570      	push	{r4, r5, r6, lr}
 8005776:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005778:	4604      	mov	r4, r0
 800577a:	460d      	mov	r5, r1
 800577c:	b976      	cbnz	r6, 800579c <_Balloc+0x28>
 800577e:	2010      	movs	r0, #16
 8005780:	f7ff ffe2 	bl	8005748 <malloc>
 8005784:	4602      	mov	r2, r0
 8005786:	6260      	str	r0, [r4, #36]	; 0x24
 8005788:	b920      	cbnz	r0, 8005794 <_Balloc+0x20>
 800578a:	4b18      	ldr	r3, [pc, #96]	; (80057ec <_Balloc+0x78>)
 800578c:	4818      	ldr	r0, [pc, #96]	; (80057f0 <_Balloc+0x7c>)
 800578e:	2166      	movs	r1, #102	; 0x66
 8005790:	f000 fd94 	bl	80062bc <__assert_func>
 8005794:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005798:	6006      	str	r6, [r0, #0]
 800579a:	60c6      	str	r6, [r0, #12]
 800579c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800579e:	68f3      	ldr	r3, [r6, #12]
 80057a0:	b183      	cbz	r3, 80057c4 <_Balloc+0x50>
 80057a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80057aa:	b9b8      	cbnz	r0, 80057dc <_Balloc+0x68>
 80057ac:	2101      	movs	r1, #1
 80057ae:	fa01 f605 	lsl.w	r6, r1, r5
 80057b2:	1d72      	adds	r2, r6, #5
 80057b4:	0092      	lsls	r2, r2, #2
 80057b6:	4620      	mov	r0, r4
 80057b8:	f000 fb5a 	bl	8005e70 <_calloc_r>
 80057bc:	b160      	cbz	r0, 80057d8 <_Balloc+0x64>
 80057be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80057c2:	e00e      	b.n	80057e2 <_Balloc+0x6e>
 80057c4:	2221      	movs	r2, #33	; 0x21
 80057c6:	2104      	movs	r1, #4
 80057c8:	4620      	mov	r0, r4
 80057ca:	f000 fb51 	bl	8005e70 <_calloc_r>
 80057ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057d0:	60f0      	str	r0, [r6, #12]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e4      	bne.n	80057a2 <_Balloc+0x2e>
 80057d8:	2000      	movs	r0, #0
 80057da:	bd70      	pop	{r4, r5, r6, pc}
 80057dc:	6802      	ldr	r2, [r0, #0]
 80057de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80057e2:	2300      	movs	r3, #0
 80057e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80057e8:	e7f7      	b.n	80057da <_Balloc+0x66>
 80057ea:	bf00      	nop
 80057ec:	08007e89 	.word	0x08007e89
 80057f0:	08007f10 	.word	0x08007f10

080057f4 <_Bfree>:
 80057f4:	b570      	push	{r4, r5, r6, lr}
 80057f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80057f8:	4605      	mov	r5, r0
 80057fa:	460c      	mov	r4, r1
 80057fc:	b976      	cbnz	r6, 800581c <_Bfree+0x28>
 80057fe:	2010      	movs	r0, #16
 8005800:	f7ff ffa2 	bl	8005748 <malloc>
 8005804:	4602      	mov	r2, r0
 8005806:	6268      	str	r0, [r5, #36]	; 0x24
 8005808:	b920      	cbnz	r0, 8005814 <_Bfree+0x20>
 800580a:	4b09      	ldr	r3, [pc, #36]	; (8005830 <_Bfree+0x3c>)
 800580c:	4809      	ldr	r0, [pc, #36]	; (8005834 <_Bfree+0x40>)
 800580e:	218a      	movs	r1, #138	; 0x8a
 8005810:	f000 fd54 	bl	80062bc <__assert_func>
 8005814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005818:	6006      	str	r6, [r0, #0]
 800581a:	60c6      	str	r6, [r0, #12]
 800581c:	b13c      	cbz	r4, 800582e <_Bfree+0x3a>
 800581e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005820:	6862      	ldr	r2, [r4, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005828:	6021      	str	r1, [r4, #0]
 800582a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800582e:	bd70      	pop	{r4, r5, r6, pc}
 8005830:	08007e89 	.word	0x08007e89
 8005834:	08007f10 	.word	0x08007f10

08005838 <__multadd>:
 8005838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800583c:	690e      	ldr	r6, [r1, #16]
 800583e:	4607      	mov	r7, r0
 8005840:	4698      	mov	r8, r3
 8005842:	460c      	mov	r4, r1
 8005844:	f101 0014 	add.w	r0, r1, #20
 8005848:	2300      	movs	r3, #0
 800584a:	6805      	ldr	r5, [r0, #0]
 800584c:	b2a9      	uxth	r1, r5
 800584e:	fb02 8101 	mla	r1, r2, r1, r8
 8005852:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005856:	0c2d      	lsrs	r5, r5, #16
 8005858:	fb02 c505 	mla	r5, r2, r5, ip
 800585c:	b289      	uxth	r1, r1
 800585e:	3301      	adds	r3, #1
 8005860:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005864:	429e      	cmp	r6, r3
 8005866:	f840 1b04 	str.w	r1, [r0], #4
 800586a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800586e:	dcec      	bgt.n	800584a <__multadd+0x12>
 8005870:	f1b8 0f00 	cmp.w	r8, #0
 8005874:	d022      	beq.n	80058bc <__multadd+0x84>
 8005876:	68a3      	ldr	r3, [r4, #8]
 8005878:	42b3      	cmp	r3, r6
 800587a:	dc19      	bgt.n	80058b0 <__multadd+0x78>
 800587c:	6861      	ldr	r1, [r4, #4]
 800587e:	4638      	mov	r0, r7
 8005880:	3101      	adds	r1, #1
 8005882:	f7ff ff77 	bl	8005774 <_Balloc>
 8005886:	4605      	mov	r5, r0
 8005888:	b928      	cbnz	r0, 8005896 <__multadd+0x5e>
 800588a:	4602      	mov	r2, r0
 800588c:	4b0d      	ldr	r3, [pc, #52]	; (80058c4 <__multadd+0x8c>)
 800588e:	480e      	ldr	r0, [pc, #56]	; (80058c8 <__multadd+0x90>)
 8005890:	21b5      	movs	r1, #181	; 0xb5
 8005892:	f000 fd13 	bl	80062bc <__assert_func>
 8005896:	6922      	ldr	r2, [r4, #16]
 8005898:	3202      	adds	r2, #2
 800589a:	f104 010c 	add.w	r1, r4, #12
 800589e:	0092      	lsls	r2, r2, #2
 80058a0:	300c      	adds	r0, #12
 80058a2:	f7ff ff59 	bl	8005758 <memcpy>
 80058a6:	4621      	mov	r1, r4
 80058a8:	4638      	mov	r0, r7
 80058aa:	f7ff ffa3 	bl	80057f4 <_Bfree>
 80058ae:	462c      	mov	r4, r5
 80058b0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80058b4:	3601      	adds	r6, #1
 80058b6:	f8c3 8014 	str.w	r8, [r3, #20]
 80058ba:	6126      	str	r6, [r4, #16]
 80058bc:	4620      	mov	r0, r4
 80058be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058c2:	bf00      	nop
 80058c4:	08007eff 	.word	0x08007eff
 80058c8:	08007f10 	.word	0x08007f10

080058cc <__hi0bits>:
 80058cc:	0c03      	lsrs	r3, r0, #16
 80058ce:	041b      	lsls	r3, r3, #16
 80058d0:	b9d3      	cbnz	r3, 8005908 <__hi0bits+0x3c>
 80058d2:	0400      	lsls	r0, r0, #16
 80058d4:	2310      	movs	r3, #16
 80058d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80058da:	bf04      	itt	eq
 80058dc:	0200      	lsleq	r0, r0, #8
 80058de:	3308      	addeq	r3, #8
 80058e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80058e4:	bf04      	itt	eq
 80058e6:	0100      	lsleq	r0, r0, #4
 80058e8:	3304      	addeq	r3, #4
 80058ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80058ee:	bf04      	itt	eq
 80058f0:	0080      	lsleq	r0, r0, #2
 80058f2:	3302      	addeq	r3, #2
 80058f4:	2800      	cmp	r0, #0
 80058f6:	db05      	blt.n	8005904 <__hi0bits+0x38>
 80058f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80058fc:	f103 0301 	add.w	r3, r3, #1
 8005900:	bf08      	it	eq
 8005902:	2320      	moveq	r3, #32
 8005904:	4618      	mov	r0, r3
 8005906:	4770      	bx	lr
 8005908:	2300      	movs	r3, #0
 800590a:	e7e4      	b.n	80058d6 <__hi0bits+0xa>

0800590c <__lo0bits>:
 800590c:	6803      	ldr	r3, [r0, #0]
 800590e:	f013 0207 	ands.w	r2, r3, #7
 8005912:	4601      	mov	r1, r0
 8005914:	d00b      	beq.n	800592e <__lo0bits+0x22>
 8005916:	07da      	lsls	r2, r3, #31
 8005918:	d424      	bmi.n	8005964 <__lo0bits+0x58>
 800591a:	0798      	lsls	r0, r3, #30
 800591c:	bf49      	itett	mi
 800591e:	085b      	lsrmi	r3, r3, #1
 8005920:	089b      	lsrpl	r3, r3, #2
 8005922:	2001      	movmi	r0, #1
 8005924:	600b      	strmi	r3, [r1, #0]
 8005926:	bf5c      	itt	pl
 8005928:	600b      	strpl	r3, [r1, #0]
 800592a:	2002      	movpl	r0, #2
 800592c:	4770      	bx	lr
 800592e:	b298      	uxth	r0, r3
 8005930:	b9b0      	cbnz	r0, 8005960 <__lo0bits+0x54>
 8005932:	0c1b      	lsrs	r3, r3, #16
 8005934:	2010      	movs	r0, #16
 8005936:	f013 0fff 	tst.w	r3, #255	; 0xff
 800593a:	bf04      	itt	eq
 800593c:	0a1b      	lsreq	r3, r3, #8
 800593e:	3008      	addeq	r0, #8
 8005940:	071a      	lsls	r2, r3, #28
 8005942:	bf04      	itt	eq
 8005944:	091b      	lsreq	r3, r3, #4
 8005946:	3004      	addeq	r0, #4
 8005948:	079a      	lsls	r2, r3, #30
 800594a:	bf04      	itt	eq
 800594c:	089b      	lsreq	r3, r3, #2
 800594e:	3002      	addeq	r0, #2
 8005950:	07da      	lsls	r2, r3, #31
 8005952:	d403      	bmi.n	800595c <__lo0bits+0x50>
 8005954:	085b      	lsrs	r3, r3, #1
 8005956:	f100 0001 	add.w	r0, r0, #1
 800595a:	d005      	beq.n	8005968 <__lo0bits+0x5c>
 800595c:	600b      	str	r3, [r1, #0]
 800595e:	4770      	bx	lr
 8005960:	4610      	mov	r0, r2
 8005962:	e7e8      	b.n	8005936 <__lo0bits+0x2a>
 8005964:	2000      	movs	r0, #0
 8005966:	4770      	bx	lr
 8005968:	2020      	movs	r0, #32
 800596a:	4770      	bx	lr

0800596c <__i2b>:
 800596c:	b510      	push	{r4, lr}
 800596e:	460c      	mov	r4, r1
 8005970:	2101      	movs	r1, #1
 8005972:	f7ff feff 	bl	8005774 <_Balloc>
 8005976:	4602      	mov	r2, r0
 8005978:	b928      	cbnz	r0, 8005986 <__i2b+0x1a>
 800597a:	4b05      	ldr	r3, [pc, #20]	; (8005990 <__i2b+0x24>)
 800597c:	4805      	ldr	r0, [pc, #20]	; (8005994 <__i2b+0x28>)
 800597e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005982:	f000 fc9b 	bl	80062bc <__assert_func>
 8005986:	2301      	movs	r3, #1
 8005988:	6144      	str	r4, [r0, #20]
 800598a:	6103      	str	r3, [r0, #16]
 800598c:	bd10      	pop	{r4, pc}
 800598e:	bf00      	nop
 8005990:	08007eff 	.word	0x08007eff
 8005994:	08007f10 	.word	0x08007f10

08005998 <__multiply>:
 8005998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599c:	4614      	mov	r4, r2
 800599e:	690a      	ldr	r2, [r1, #16]
 80059a0:	6923      	ldr	r3, [r4, #16]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	bfb8      	it	lt
 80059a6:	460b      	movlt	r3, r1
 80059a8:	460d      	mov	r5, r1
 80059aa:	bfbc      	itt	lt
 80059ac:	4625      	movlt	r5, r4
 80059ae:	461c      	movlt	r4, r3
 80059b0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80059b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80059b8:	68ab      	ldr	r3, [r5, #8]
 80059ba:	6869      	ldr	r1, [r5, #4]
 80059bc:	eb0a 0709 	add.w	r7, sl, r9
 80059c0:	42bb      	cmp	r3, r7
 80059c2:	b085      	sub	sp, #20
 80059c4:	bfb8      	it	lt
 80059c6:	3101      	addlt	r1, #1
 80059c8:	f7ff fed4 	bl	8005774 <_Balloc>
 80059cc:	b930      	cbnz	r0, 80059dc <__multiply+0x44>
 80059ce:	4602      	mov	r2, r0
 80059d0:	4b42      	ldr	r3, [pc, #264]	; (8005adc <__multiply+0x144>)
 80059d2:	4843      	ldr	r0, [pc, #268]	; (8005ae0 <__multiply+0x148>)
 80059d4:	f240 115d 	movw	r1, #349	; 0x15d
 80059d8:	f000 fc70 	bl	80062bc <__assert_func>
 80059dc:	f100 0614 	add.w	r6, r0, #20
 80059e0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80059e4:	4633      	mov	r3, r6
 80059e6:	2200      	movs	r2, #0
 80059e8:	4543      	cmp	r3, r8
 80059ea:	d31e      	bcc.n	8005a2a <__multiply+0x92>
 80059ec:	f105 0c14 	add.w	ip, r5, #20
 80059f0:	f104 0314 	add.w	r3, r4, #20
 80059f4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80059f8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80059fc:	9202      	str	r2, [sp, #8]
 80059fe:	ebac 0205 	sub.w	r2, ip, r5
 8005a02:	3a15      	subs	r2, #21
 8005a04:	f022 0203 	bic.w	r2, r2, #3
 8005a08:	3204      	adds	r2, #4
 8005a0a:	f105 0115 	add.w	r1, r5, #21
 8005a0e:	458c      	cmp	ip, r1
 8005a10:	bf38      	it	cc
 8005a12:	2204      	movcc	r2, #4
 8005a14:	9201      	str	r2, [sp, #4]
 8005a16:	9a02      	ldr	r2, [sp, #8]
 8005a18:	9303      	str	r3, [sp, #12]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d808      	bhi.n	8005a30 <__multiply+0x98>
 8005a1e:	2f00      	cmp	r7, #0
 8005a20:	dc55      	bgt.n	8005ace <__multiply+0x136>
 8005a22:	6107      	str	r7, [r0, #16]
 8005a24:	b005      	add	sp, #20
 8005a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a2a:	f843 2b04 	str.w	r2, [r3], #4
 8005a2e:	e7db      	b.n	80059e8 <__multiply+0x50>
 8005a30:	f8b3 a000 	ldrh.w	sl, [r3]
 8005a34:	f1ba 0f00 	cmp.w	sl, #0
 8005a38:	d020      	beq.n	8005a7c <__multiply+0xe4>
 8005a3a:	f105 0e14 	add.w	lr, r5, #20
 8005a3e:	46b1      	mov	r9, r6
 8005a40:	2200      	movs	r2, #0
 8005a42:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005a46:	f8d9 b000 	ldr.w	fp, [r9]
 8005a4a:	b2a1      	uxth	r1, r4
 8005a4c:	fa1f fb8b 	uxth.w	fp, fp
 8005a50:	fb0a b101 	mla	r1, sl, r1, fp
 8005a54:	4411      	add	r1, r2
 8005a56:	f8d9 2000 	ldr.w	r2, [r9]
 8005a5a:	0c24      	lsrs	r4, r4, #16
 8005a5c:	0c12      	lsrs	r2, r2, #16
 8005a5e:	fb0a 2404 	mla	r4, sl, r4, r2
 8005a62:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005a66:	b289      	uxth	r1, r1
 8005a68:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005a6c:	45f4      	cmp	ip, lr
 8005a6e:	f849 1b04 	str.w	r1, [r9], #4
 8005a72:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005a76:	d8e4      	bhi.n	8005a42 <__multiply+0xaa>
 8005a78:	9901      	ldr	r1, [sp, #4]
 8005a7a:	5072      	str	r2, [r6, r1]
 8005a7c:	9a03      	ldr	r2, [sp, #12]
 8005a7e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005a82:	3304      	adds	r3, #4
 8005a84:	f1b9 0f00 	cmp.w	r9, #0
 8005a88:	d01f      	beq.n	8005aca <__multiply+0x132>
 8005a8a:	6834      	ldr	r4, [r6, #0]
 8005a8c:	f105 0114 	add.w	r1, r5, #20
 8005a90:	46b6      	mov	lr, r6
 8005a92:	f04f 0a00 	mov.w	sl, #0
 8005a96:	880a      	ldrh	r2, [r1, #0]
 8005a98:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005a9c:	fb09 b202 	mla	r2, r9, r2, fp
 8005aa0:	4492      	add	sl, r2
 8005aa2:	b2a4      	uxth	r4, r4
 8005aa4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005aa8:	f84e 4b04 	str.w	r4, [lr], #4
 8005aac:	f851 4b04 	ldr.w	r4, [r1], #4
 8005ab0:	f8be 2000 	ldrh.w	r2, [lr]
 8005ab4:	0c24      	lsrs	r4, r4, #16
 8005ab6:	fb09 2404 	mla	r4, r9, r4, r2
 8005aba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005abe:	458c      	cmp	ip, r1
 8005ac0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005ac4:	d8e7      	bhi.n	8005a96 <__multiply+0xfe>
 8005ac6:	9a01      	ldr	r2, [sp, #4]
 8005ac8:	50b4      	str	r4, [r6, r2]
 8005aca:	3604      	adds	r6, #4
 8005acc:	e7a3      	b.n	8005a16 <__multiply+0x7e>
 8005ace:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1a5      	bne.n	8005a22 <__multiply+0x8a>
 8005ad6:	3f01      	subs	r7, #1
 8005ad8:	e7a1      	b.n	8005a1e <__multiply+0x86>
 8005ada:	bf00      	nop
 8005adc:	08007eff 	.word	0x08007eff
 8005ae0:	08007f10 	.word	0x08007f10

08005ae4 <__pow5mult>:
 8005ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ae8:	4615      	mov	r5, r2
 8005aea:	f012 0203 	ands.w	r2, r2, #3
 8005aee:	4606      	mov	r6, r0
 8005af0:	460f      	mov	r7, r1
 8005af2:	d007      	beq.n	8005b04 <__pow5mult+0x20>
 8005af4:	4c25      	ldr	r4, [pc, #148]	; (8005b8c <__pow5mult+0xa8>)
 8005af6:	3a01      	subs	r2, #1
 8005af8:	2300      	movs	r3, #0
 8005afa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005afe:	f7ff fe9b 	bl	8005838 <__multadd>
 8005b02:	4607      	mov	r7, r0
 8005b04:	10ad      	asrs	r5, r5, #2
 8005b06:	d03d      	beq.n	8005b84 <__pow5mult+0xa0>
 8005b08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005b0a:	b97c      	cbnz	r4, 8005b2c <__pow5mult+0x48>
 8005b0c:	2010      	movs	r0, #16
 8005b0e:	f7ff fe1b 	bl	8005748 <malloc>
 8005b12:	4602      	mov	r2, r0
 8005b14:	6270      	str	r0, [r6, #36]	; 0x24
 8005b16:	b928      	cbnz	r0, 8005b24 <__pow5mult+0x40>
 8005b18:	4b1d      	ldr	r3, [pc, #116]	; (8005b90 <__pow5mult+0xac>)
 8005b1a:	481e      	ldr	r0, [pc, #120]	; (8005b94 <__pow5mult+0xb0>)
 8005b1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005b20:	f000 fbcc 	bl	80062bc <__assert_func>
 8005b24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b28:	6004      	str	r4, [r0, #0]
 8005b2a:	60c4      	str	r4, [r0, #12]
 8005b2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005b30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005b34:	b94c      	cbnz	r4, 8005b4a <__pow5mult+0x66>
 8005b36:	f240 2171 	movw	r1, #625	; 0x271
 8005b3a:	4630      	mov	r0, r6
 8005b3c:	f7ff ff16 	bl	800596c <__i2b>
 8005b40:	2300      	movs	r3, #0
 8005b42:	f8c8 0008 	str.w	r0, [r8, #8]
 8005b46:	4604      	mov	r4, r0
 8005b48:	6003      	str	r3, [r0, #0]
 8005b4a:	f04f 0900 	mov.w	r9, #0
 8005b4e:	07eb      	lsls	r3, r5, #31
 8005b50:	d50a      	bpl.n	8005b68 <__pow5mult+0x84>
 8005b52:	4639      	mov	r1, r7
 8005b54:	4622      	mov	r2, r4
 8005b56:	4630      	mov	r0, r6
 8005b58:	f7ff ff1e 	bl	8005998 <__multiply>
 8005b5c:	4639      	mov	r1, r7
 8005b5e:	4680      	mov	r8, r0
 8005b60:	4630      	mov	r0, r6
 8005b62:	f7ff fe47 	bl	80057f4 <_Bfree>
 8005b66:	4647      	mov	r7, r8
 8005b68:	106d      	asrs	r5, r5, #1
 8005b6a:	d00b      	beq.n	8005b84 <__pow5mult+0xa0>
 8005b6c:	6820      	ldr	r0, [r4, #0]
 8005b6e:	b938      	cbnz	r0, 8005b80 <__pow5mult+0x9c>
 8005b70:	4622      	mov	r2, r4
 8005b72:	4621      	mov	r1, r4
 8005b74:	4630      	mov	r0, r6
 8005b76:	f7ff ff0f 	bl	8005998 <__multiply>
 8005b7a:	6020      	str	r0, [r4, #0]
 8005b7c:	f8c0 9000 	str.w	r9, [r0]
 8005b80:	4604      	mov	r4, r0
 8005b82:	e7e4      	b.n	8005b4e <__pow5mult+0x6a>
 8005b84:	4638      	mov	r0, r7
 8005b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b8a:	bf00      	nop
 8005b8c:	08008060 	.word	0x08008060
 8005b90:	08007e89 	.word	0x08007e89
 8005b94:	08007f10 	.word	0x08007f10

08005b98 <__lshift>:
 8005b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b9c:	460c      	mov	r4, r1
 8005b9e:	6849      	ldr	r1, [r1, #4]
 8005ba0:	6923      	ldr	r3, [r4, #16]
 8005ba2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ba6:	68a3      	ldr	r3, [r4, #8]
 8005ba8:	4607      	mov	r7, r0
 8005baa:	4691      	mov	r9, r2
 8005bac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005bb0:	f108 0601 	add.w	r6, r8, #1
 8005bb4:	42b3      	cmp	r3, r6
 8005bb6:	db0b      	blt.n	8005bd0 <__lshift+0x38>
 8005bb8:	4638      	mov	r0, r7
 8005bba:	f7ff fddb 	bl	8005774 <_Balloc>
 8005bbe:	4605      	mov	r5, r0
 8005bc0:	b948      	cbnz	r0, 8005bd6 <__lshift+0x3e>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	4b28      	ldr	r3, [pc, #160]	; (8005c68 <__lshift+0xd0>)
 8005bc6:	4829      	ldr	r0, [pc, #164]	; (8005c6c <__lshift+0xd4>)
 8005bc8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005bcc:	f000 fb76 	bl	80062bc <__assert_func>
 8005bd0:	3101      	adds	r1, #1
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	e7ee      	b.n	8005bb4 <__lshift+0x1c>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	f100 0114 	add.w	r1, r0, #20
 8005bdc:	f100 0210 	add.w	r2, r0, #16
 8005be0:	4618      	mov	r0, r3
 8005be2:	4553      	cmp	r3, sl
 8005be4:	db33      	blt.n	8005c4e <__lshift+0xb6>
 8005be6:	6920      	ldr	r0, [r4, #16]
 8005be8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005bec:	f104 0314 	add.w	r3, r4, #20
 8005bf0:	f019 091f 	ands.w	r9, r9, #31
 8005bf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005bf8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005bfc:	d02b      	beq.n	8005c56 <__lshift+0xbe>
 8005bfe:	f1c9 0e20 	rsb	lr, r9, #32
 8005c02:	468a      	mov	sl, r1
 8005c04:	2200      	movs	r2, #0
 8005c06:	6818      	ldr	r0, [r3, #0]
 8005c08:	fa00 f009 	lsl.w	r0, r0, r9
 8005c0c:	4302      	orrs	r2, r0
 8005c0e:	f84a 2b04 	str.w	r2, [sl], #4
 8005c12:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c16:	459c      	cmp	ip, r3
 8005c18:	fa22 f20e 	lsr.w	r2, r2, lr
 8005c1c:	d8f3      	bhi.n	8005c06 <__lshift+0x6e>
 8005c1e:	ebac 0304 	sub.w	r3, ip, r4
 8005c22:	3b15      	subs	r3, #21
 8005c24:	f023 0303 	bic.w	r3, r3, #3
 8005c28:	3304      	adds	r3, #4
 8005c2a:	f104 0015 	add.w	r0, r4, #21
 8005c2e:	4584      	cmp	ip, r0
 8005c30:	bf38      	it	cc
 8005c32:	2304      	movcc	r3, #4
 8005c34:	50ca      	str	r2, [r1, r3]
 8005c36:	b10a      	cbz	r2, 8005c3c <__lshift+0xa4>
 8005c38:	f108 0602 	add.w	r6, r8, #2
 8005c3c:	3e01      	subs	r6, #1
 8005c3e:	4638      	mov	r0, r7
 8005c40:	612e      	str	r6, [r5, #16]
 8005c42:	4621      	mov	r1, r4
 8005c44:	f7ff fdd6 	bl	80057f4 <_Bfree>
 8005c48:	4628      	mov	r0, r5
 8005c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005c52:	3301      	adds	r3, #1
 8005c54:	e7c5      	b.n	8005be2 <__lshift+0x4a>
 8005c56:	3904      	subs	r1, #4
 8005c58:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005c60:	459c      	cmp	ip, r3
 8005c62:	d8f9      	bhi.n	8005c58 <__lshift+0xc0>
 8005c64:	e7ea      	b.n	8005c3c <__lshift+0xa4>
 8005c66:	bf00      	nop
 8005c68:	08007eff 	.word	0x08007eff
 8005c6c:	08007f10 	.word	0x08007f10

08005c70 <__mcmp>:
 8005c70:	b530      	push	{r4, r5, lr}
 8005c72:	6902      	ldr	r2, [r0, #16]
 8005c74:	690c      	ldr	r4, [r1, #16]
 8005c76:	1b12      	subs	r2, r2, r4
 8005c78:	d10e      	bne.n	8005c98 <__mcmp+0x28>
 8005c7a:	f100 0314 	add.w	r3, r0, #20
 8005c7e:	3114      	adds	r1, #20
 8005c80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005c84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005c88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005c8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005c90:	42a5      	cmp	r5, r4
 8005c92:	d003      	beq.n	8005c9c <__mcmp+0x2c>
 8005c94:	d305      	bcc.n	8005ca2 <__mcmp+0x32>
 8005c96:	2201      	movs	r2, #1
 8005c98:	4610      	mov	r0, r2
 8005c9a:	bd30      	pop	{r4, r5, pc}
 8005c9c:	4283      	cmp	r3, r0
 8005c9e:	d3f3      	bcc.n	8005c88 <__mcmp+0x18>
 8005ca0:	e7fa      	b.n	8005c98 <__mcmp+0x28>
 8005ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca6:	e7f7      	b.n	8005c98 <__mcmp+0x28>

08005ca8 <__mdiff>:
 8005ca8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cac:	460c      	mov	r4, r1
 8005cae:	4606      	mov	r6, r0
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	4617      	mov	r7, r2
 8005cb6:	f7ff ffdb 	bl	8005c70 <__mcmp>
 8005cba:	1e05      	subs	r5, r0, #0
 8005cbc:	d110      	bne.n	8005ce0 <__mdiff+0x38>
 8005cbe:	4629      	mov	r1, r5
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	f7ff fd57 	bl	8005774 <_Balloc>
 8005cc6:	b930      	cbnz	r0, 8005cd6 <__mdiff+0x2e>
 8005cc8:	4b39      	ldr	r3, [pc, #228]	; (8005db0 <__mdiff+0x108>)
 8005cca:	4602      	mov	r2, r0
 8005ccc:	f240 2132 	movw	r1, #562	; 0x232
 8005cd0:	4838      	ldr	r0, [pc, #224]	; (8005db4 <__mdiff+0x10c>)
 8005cd2:	f000 faf3 	bl	80062bc <__assert_func>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005cdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce0:	bfa4      	itt	ge
 8005ce2:	463b      	movge	r3, r7
 8005ce4:	4627      	movge	r7, r4
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	6879      	ldr	r1, [r7, #4]
 8005cea:	bfa6      	itte	ge
 8005cec:	461c      	movge	r4, r3
 8005cee:	2500      	movge	r5, #0
 8005cf0:	2501      	movlt	r5, #1
 8005cf2:	f7ff fd3f 	bl	8005774 <_Balloc>
 8005cf6:	b920      	cbnz	r0, 8005d02 <__mdiff+0x5a>
 8005cf8:	4b2d      	ldr	r3, [pc, #180]	; (8005db0 <__mdiff+0x108>)
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005d00:	e7e6      	b.n	8005cd0 <__mdiff+0x28>
 8005d02:	693e      	ldr	r6, [r7, #16]
 8005d04:	60c5      	str	r5, [r0, #12]
 8005d06:	6925      	ldr	r5, [r4, #16]
 8005d08:	f107 0114 	add.w	r1, r7, #20
 8005d0c:	f104 0914 	add.w	r9, r4, #20
 8005d10:	f100 0e14 	add.w	lr, r0, #20
 8005d14:	f107 0210 	add.w	r2, r7, #16
 8005d18:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005d1c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005d20:	46f2      	mov	sl, lr
 8005d22:	2700      	movs	r7, #0
 8005d24:	f859 3b04 	ldr.w	r3, [r9], #4
 8005d28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005d2c:	fa1f f883 	uxth.w	r8, r3
 8005d30:	fa17 f78b 	uxtah	r7, r7, fp
 8005d34:	0c1b      	lsrs	r3, r3, #16
 8005d36:	eba7 0808 	sub.w	r8, r7, r8
 8005d3a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005d3e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005d42:	fa1f f888 	uxth.w	r8, r8
 8005d46:	141f      	asrs	r7, r3, #16
 8005d48:	454d      	cmp	r5, r9
 8005d4a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005d4e:	f84a 3b04 	str.w	r3, [sl], #4
 8005d52:	d8e7      	bhi.n	8005d24 <__mdiff+0x7c>
 8005d54:	1b2b      	subs	r3, r5, r4
 8005d56:	3b15      	subs	r3, #21
 8005d58:	f023 0303 	bic.w	r3, r3, #3
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	3415      	adds	r4, #21
 8005d60:	42a5      	cmp	r5, r4
 8005d62:	bf38      	it	cc
 8005d64:	2304      	movcc	r3, #4
 8005d66:	4419      	add	r1, r3
 8005d68:	4473      	add	r3, lr
 8005d6a:	469e      	mov	lr, r3
 8005d6c:	460d      	mov	r5, r1
 8005d6e:	4565      	cmp	r5, ip
 8005d70:	d30e      	bcc.n	8005d90 <__mdiff+0xe8>
 8005d72:	f10c 0203 	add.w	r2, ip, #3
 8005d76:	1a52      	subs	r2, r2, r1
 8005d78:	f022 0203 	bic.w	r2, r2, #3
 8005d7c:	3903      	subs	r1, #3
 8005d7e:	458c      	cmp	ip, r1
 8005d80:	bf38      	it	cc
 8005d82:	2200      	movcc	r2, #0
 8005d84:	441a      	add	r2, r3
 8005d86:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005d8a:	b17b      	cbz	r3, 8005dac <__mdiff+0x104>
 8005d8c:	6106      	str	r6, [r0, #16]
 8005d8e:	e7a5      	b.n	8005cdc <__mdiff+0x34>
 8005d90:	f855 8b04 	ldr.w	r8, [r5], #4
 8005d94:	fa17 f488 	uxtah	r4, r7, r8
 8005d98:	1422      	asrs	r2, r4, #16
 8005d9a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005d9e:	b2a4      	uxth	r4, r4
 8005da0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005da4:	f84e 4b04 	str.w	r4, [lr], #4
 8005da8:	1417      	asrs	r7, r2, #16
 8005daa:	e7e0      	b.n	8005d6e <__mdiff+0xc6>
 8005dac:	3e01      	subs	r6, #1
 8005dae:	e7ea      	b.n	8005d86 <__mdiff+0xde>
 8005db0:	08007eff 	.word	0x08007eff
 8005db4:	08007f10 	.word	0x08007f10

08005db8 <__d2b>:
 8005db8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005dbc:	4689      	mov	r9, r1
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	ec57 6b10 	vmov	r6, r7, d0
 8005dc4:	4690      	mov	r8, r2
 8005dc6:	f7ff fcd5 	bl	8005774 <_Balloc>
 8005dca:	4604      	mov	r4, r0
 8005dcc:	b930      	cbnz	r0, 8005ddc <__d2b+0x24>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	4b25      	ldr	r3, [pc, #148]	; (8005e68 <__d2b+0xb0>)
 8005dd2:	4826      	ldr	r0, [pc, #152]	; (8005e6c <__d2b+0xb4>)
 8005dd4:	f240 310a 	movw	r1, #778	; 0x30a
 8005dd8:	f000 fa70 	bl	80062bc <__assert_func>
 8005ddc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005de0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005de4:	bb35      	cbnz	r5, 8005e34 <__d2b+0x7c>
 8005de6:	2e00      	cmp	r6, #0
 8005de8:	9301      	str	r3, [sp, #4]
 8005dea:	d028      	beq.n	8005e3e <__d2b+0x86>
 8005dec:	4668      	mov	r0, sp
 8005dee:	9600      	str	r6, [sp, #0]
 8005df0:	f7ff fd8c 	bl	800590c <__lo0bits>
 8005df4:	9900      	ldr	r1, [sp, #0]
 8005df6:	b300      	cbz	r0, 8005e3a <__d2b+0x82>
 8005df8:	9a01      	ldr	r2, [sp, #4]
 8005dfa:	f1c0 0320 	rsb	r3, r0, #32
 8005dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005e02:	430b      	orrs	r3, r1
 8005e04:	40c2      	lsrs	r2, r0
 8005e06:	6163      	str	r3, [r4, #20]
 8005e08:	9201      	str	r2, [sp, #4]
 8005e0a:	9b01      	ldr	r3, [sp, #4]
 8005e0c:	61a3      	str	r3, [r4, #24]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	bf14      	ite	ne
 8005e12:	2202      	movne	r2, #2
 8005e14:	2201      	moveq	r2, #1
 8005e16:	6122      	str	r2, [r4, #16]
 8005e18:	b1d5      	cbz	r5, 8005e50 <__d2b+0x98>
 8005e1a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005e1e:	4405      	add	r5, r0
 8005e20:	f8c9 5000 	str.w	r5, [r9]
 8005e24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005e28:	f8c8 0000 	str.w	r0, [r8]
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	b003      	add	sp, #12
 8005e30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e38:	e7d5      	b.n	8005de6 <__d2b+0x2e>
 8005e3a:	6161      	str	r1, [r4, #20]
 8005e3c:	e7e5      	b.n	8005e0a <__d2b+0x52>
 8005e3e:	a801      	add	r0, sp, #4
 8005e40:	f7ff fd64 	bl	800590c <__lo0bits>
 8005e44:	9b01      	ldr	r3, [sp, #4]
 8005e46:	6163      	str	r3, [r4, #20]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	6122      	str	r2, [r4, #16]
 8005e4c:	3020      	adds	r0, #32
 8005e4e:	e7e3      	b.n	8005e18 <__d2b+0x60>
 8005e50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005e54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005e58:	f8c9 0000 	str.w	r0, [r9]
 8005e5c:	6918      	ldr	r0, [r3, #16]
 8005e5e:	f7ff fd35 	bl	80058cc <__hi0bits>
 8005e62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005e66:	e7df      	b.n	8005e28 <__d2b+0x70>
 8005e68:	08007eff 	.word	0x08007eff
 8005e6c:	08007f10 	.word	0x08007f10

08005e70 <_calloc_r>:
 8005e70:	b513      	push	{r0, r1, r4, lr}
 8005e72:	434a      	muls	r2, r1
 8005e74:	4611      	mov	r1, r2
 8005e76:	9201      	str	r2, [sp, #4]
 8005e78:	f000 f85a 	bl	8005f30 <_malloc_r>
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	b118      	cbz	r0, 8005e88 <_calloc_r+0x18>
 8005e80:	9a01      	ldr	r2, [sp, #4]
 8005e82:	2100      	movs	r1, #0
 8005e84:	f7fe f952 	bl	800412c <memset>
 8005e88:	4620      	mov	r0, r4
 8005e8a:	b002      	add	sp, #8
 8005e8c:	bd10      	pop	{r4, pc}
	...

08005e90 <_free_r>:
 8005e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e92:	2900      	cmp	r1, #0
 8005e94:	d048      	beq.n	8005f28 <_free_r+0x98>
 8005e96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e9a:	9001      	str	r0, [sp, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f1a1 0404 	sub.w	r4, r1, #4
 8005ea2:	bfb8      	it	lt
 8005ea4:	18e4      	addlt	r4, r4, r3
 8005ea6:	f000 fa65 	bl	8006374 <__malloc_lock>
 8005eaa:	4a20      	ldr	r2, [pc, #128]	; (8005f2c <_free_r+0x9c>)
 8005eac:	9801      	ldr	r0, [sp, #4]
 8005eae:	6813      	ldr	r3, [r2, #0]
 8005eb0:	4615      	mov	r5, r2
 8005eb2:	b933      	cbnz	r3, 8005ec2 <_free_r+0x32>
 8005eb4:	6063      	str	r3, [r4, #4]
 8005eb6:	6014      	str	r4, [r2, #0]
 8005eb8:	b003      	add	sp, #12
 8005eba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ebe:	f000 ba5f 	b.w	8006380 <__malloc_unlock>
 8005ec2:	42a3      	cmp	r3, r4
 8005ec4:	d90b      	bls.n	8005ede <_free_r+0x4e>
 8005ec6:	6821      	ldr	r1, [r4, #0]
 8005ec8:	1862      	adds	r2, r4, r1
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	bf04      	itt	eq
 8005ece:	681a      	ldreq	r2, [r3, #0]
 8005ed0:	685b      	ldreq	r3, [r3, #4]
 8005ed2:	6063      	str	r3, [r4, #4]
 8005ed4:	bf04      	itt	eq
 8005ed6:	1852      	addeq	r2, r2, r1
 8005ed8:	6022      	streq	r2, [r4, #0]
 8005eda:	602c      	str	r4, [r5, #0]
 8005edc:	e7ec      	b.n	8005eb8 <_free_r+0x28>
 8005ede:	461a      	mov	r2, r3
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	b10b      	cbz	r3, 8005ee8 <_free_r+0x58>
 8005ee4:	42a3      	cmp	r3, r4
 8005ee6:	d9fa      	bls.n	8005ede <_free_r+0x4e>
 8005ee8:	6811      	ldr	r1, [r2, #0]
 8005eea:	1855      	adds	r5, r2, r1
 8005eec:	42a5      	cmp	r5, r4
 8005eee:	d10b      	bne.n	8005f08 <_free_r+0x78>
 8005ef0:	6824      	ldr	r4, [r4, #0]
 8005ef2:	4421      	add	r1, r4
 8005ef4:	1854      	adds	r4, r2, r1
 8005ef6:	42a3      	cmp	r3, r4
 8005ef8:	6011      	str	r1, [r2, #0]
 8005efa:	d1dd      	bne.n	8005eb8 <_free_r+0x28>
 8005efc:	681c      	ldr	r4, [r3, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	6053      	str	r3, [r2, #4]
 8005f02:	4421      	add	r1, r4
 8005f04:	6011      	str	r1, [r2, #0]
 8005f06:	e7d7      	b.n	8005eb8 <_free_r+0x28>
 8005f08:	d902      	bls.n	8005f10 <_free_r+0x80>
 8005f0a:	230c      	movs	r3, #12
 8005f0c:	6003      	str	r3, [r0, #0]
 8005f0e:	e7d3      	b.n	8005eb8 <_free_r+0x28>
 8005f10:	6825      	ldr	r5, [r4, #0]
 8005f12:	1961      	adds	r1, r4, r5
 8005f14:	428b      	cmp	r3, r1
 8005f16:	bf04      	itt	eq
 8005f18:	6819      	ldreq	r1, [r3, #0]
 8005f1a:	685b      	ldreq	r3, [r3, #4]
 8005f1c:	6063      	str	r3, [r4, #4]
 8005f1e:	bf04      	itt	eq
 8005f20:	1949      	addeq	r1, r1, r5
 8005f22:	6021      	streq	r1, [r4, #0]
 8005f24:	6054      	str	r4, [r2, #4]
 8005f26:	e7c7      	b.n	8005eb8 <_free_r+0x28>
 8005f28:	b003      	add	sp, #12
 8005f2a:	bd30      	pop	{r4, r5, pc}
 8005f2c:	2000023c 	.word	0x2000023c

08005f30 <_malloc_r>:
 8005f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f32:	1ccd      	adds	r5, r1, #3
 8005f34:	f025 0503 	bic.w	r5, r5, #3
 8005f38:	3508      	adds	r5, #8
 8005f3a:	2d0c      	cmp	r5, #12
 8005f3c:	bf38      	it	cc
 8005f3e:	250c      	movcc	r5, #12
 8005f40:	2d00      	cmp	r5, #0
 8005f42:	4606      	mov	r6, r0
 8005f44:	db01      	blt.n	8005f4a <_malloc_r+0x1a>
 8005f46:	42a9      	cmp	r1, r5
 8005f48:	d903      	bls.n	8005f52 <_malloc_r+0x22>
 8005f4a:	230c      	movs	r3, #12
 8005f4c:	6033      	str	r3, [r6, #0]
 8005f4e:	2000      	movs	r0, #0
 8005f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f52:	f000 fa0f 	bl	8006374 <__malloc_lock>
 8005f56:	4921      	ldr	r1, [pc, #132]	; (8005fdc <_malloc_r+0xac>)
 8005f58:	680a      	ldr	r2, [r1, #0]
 8005f5a:	4614      	mov	r4, r2
 8005f5c:	b99c      	cbnz	r4, 8005f86 <_malloc_r+0x56>
 8005f5e:	4f20      	ldr	r7, [pc, #128]	; (8005fe0 <_malloc_r+0xb0>)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	b923      	cbnz	r3, 8005f6e <_malloc_r+0x3e>
 8005f64:	4621      	mov	r1, r4
 8005f66:	4630      	mov	r0, r6
 8005f68:	f000 f998 	bl	800629c <_sbrk_r>
 8005f6c:	6038      	str	r0, [r7, #0]
 8005f6e:	4629      	mov	r1, r5
 8005f70:	4630      	mov	r0, r6
 8005f72:	f000 f993 	bl	800629c <_sbrk_r>
 8005f76:	1c43      	adds	r3, r0, #1
 8005f78:	d123      	bne.n	8005fc2 <_malloc_r+0x92>
 8005f7a:	230c      	movs	r3, #12
 8005f7c:	6033      	str	r3, [r6, #0]
 8005f7e:	4630      	mov	r0, r6
 8005f80:	f000 f9fe 	bl	8006380 <__malloc_unlock>
 8005f84:	e7e3      	b.n	8005f4e <_malloc_r+0x1e>
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	1b5b      	subs	r3, r3, r5
 8005f8a:	d417      	bmi.n	8005fbc <_malloc_r+0x8c>
 8005f8c:	2b0b      	cmp	r3, #11
 8005f8e:	d903      	bls.n	8005f98 <_malloc_r+0x68>
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	441c      	add	r4, r3
 8005f94:	6025      	str	r5, [r4, #0]
 8005f96:	e004      	b.n	8005fa2 <_malloc_r+0x72>
 8005f98:	6863      	ldr	r3, [r4, #4]
 8005f9a:	42a2      	cmp	r2, r4
 8005f9c:	bf0c      	ite	eq
 8005f9e:	600b      	streq	r3, [r1, #0]
 8005fa0:	6053      	strne	r3, [r2, #4]
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	f000 f9ec 	bl	8006380 <__malloc_unlock>
 8005fa8:	f104 000b 	add.w	r0, r4, #11
 8005fac:	1d23      	adds	r3, r4, #4
 8005fae:	f020 0007 	bic.w	r0, r0, #7
 8005fb2:	1ac2      	subs	r2, r0, r3
 8005fb4:	d0cc      	beq.n	8005f50 <_malloc_r+0x20>
 8005fb6:	1a1b      	subs	r3, r3, r0
 8005fb8:	50a3      	str	r3, [r4, r2]
 8005fba:	e7c9      	b.n	8005f50 <_malloc_r+0x20>
 8005fbc:	4622      	mov	r2, r4
 8005fbe:	6864      	ldr	r4, [r4, #4]
 8005fc0:	e7cc      	b.n	8005f5c <_malloc_r+0x2c>
 8005fc2:	1cc4      	adds	r4, r0, #3
 8005fc4:	f024 0403 	bic.w	r4, r4, #3
 8005fc8:	42a0      	cmp	r0, r4
 8005fca:	d0e3      	beq.n	8005f94 <_malloc_r+0x64>
 8005fcc:	1a21      	subs	r1, r4, r0
 8005fce:	4630      	mov	r0, r6
 8005fd0:	f000 f964 	bl	800629c <_sbrk_r>
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	d1dd      	bne.n	8005f94 <_malloc_r+0x64>
 8005fd8:	e7cf      	b.n	8005f7a <_malloc_r+0x4a>
 8005fda:	bf00      	nop
 8005fdc:	2000023c 	.word	0x2000023c
 8005fe0:	20000240 	.word	0x20000240

08005fe4 <__ssputs_r>:
 8005fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe8:	688e      	ldr	r6, [r1, #8]
 8005fea:	429e      	cmp	r6, r3
 8005fec:	4682      	mov	sl, r0
 8005fee:	460c      	mov	r4, r1
 8005ff0:	4690      	mov	r8, r2
 8005ff2:	461f      	mov	r7, r3
 8005ff4:	d838      	bhi.n	8006068 <__ssputs_r+0x84>
 8005ff6:	898a      	ldrh	r2, [r1, #12]
 8005ff8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ffc:	d032      	beq.n	8006064 <__ssputs_r+0x80>
 8005ffe:	6825      	ldr	r5, [r4, #0]
 8006000:	6909      	ldr	r1, [r1, #16]
 8006002:	eba5 0901 	sub.w	r9, r5, r1
 8006006:	6965      	ldr	r5, [r4, #20]
 8006008:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800600c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006010:	3301      	adds	r3, #1
 8006012:	444b      	add	r3, r9
 8006014:	106d      	asrs	r5, r5, #1
 8006016:	429d      	cmp	r5, r3
 8006018:	bf38      	it	cc
 800601a:	461d      	movcc	r5, r3
 800601c:	0553      	lsls	r3, r2, #21
 800601e:	d531      	bpl.n	8006084 <__ssputs_r+0xa0>
 8006020:	4629      	mov	r1, r5
 8006022:	f7ff ff85 	bl	8005f30 <_malloc_r>
 8006026:	4606      	mov	r6, r0
 8006028:	b950      	cbnz	r0, 8006040 <__ssputs_r+0x5c>
 800602a:	230c      	movs	r3, #12
 800602c:	f8ca 3000 	str.w	r3, [sl]
 8006030:	89a3      	ldrh	r3, [r4, #12]
 8006032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006036:	81a3      	strh	r3, [r4, #12]
 8006038:	f04f 30ff 	mov.w	r0, #4294967295
 800603c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006040:	6921      	ldr	r1, [r4, #16]
 8006042:	464a      	mov	r2, r9
 8006044:	f7ff fb88 	bl	8005758 <memcpy>
 8006048:	89a3      	ldrh	r3, [r4, #12]
 800604a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800604e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006052:	81a3      	strh	r3, [r4, #12]
 8006054:	6126      	str	r6, [r4, #16]
 8006056:	6165      	str	r5, [r4, #20]
 8006058:	444e      	add	r6, r9
 800605a:	eba5 0509 	sub.w	r5, r5, r9
 800605e:	6026      	str	r6, [r4, #0]
 8006060:	60a5      	str	r5, [r4, #8]
 8006062:	463e      	mov	r6, r7
 8006064:	42be      	cmp	r6, r7
 8006066:	d900      	bls.n	800606a <__ssputs_r+0x86>
 8006068:	463e      	mov	r6, r7
 800606a:	4632      	mov	r2, r6
 800606c:	6820      	ldr	r0, [r4, #0]
 800606e:	4641      	mov	r1, r8
 8006070:	f000 f966 	bl	8006340 <memmove>
 8006074:	68a3      	ldr	r3, [r4, #8]
 8006076:	6822      	ldr	r2, [r4, #0]
 8006078:	1b9b      	subs	r3, r3, r6
 800607a:	4432      	add	r2, r6
 800607c:	60a3      	str	r3, [r4, #8]
 800607e:	6022      	str	r2, [r4, #0]
 8006080:	2000      	movs	r0, #0
 8006082:	e7db      	b.n	800603c <__ssputs_r+0x58>
 8006084:	462a      	mov	r2, r5
 8006086:	f000 f981 	bl	800638c <_realloc_r>
 800608a:	4606      	mov	r6, r0
 800608c:	2800      	cmp	r0, #0
 800608e:	d1e1      	bne.n	8006054 <__ssputs_r+0x70>
 8006090:	6921      	ldr	r1, [r4, #16]
 8006092:	4650      	mov	r0, sl
 8006094:	f7ff fefc 	bl	8005e90 <_free_r>
 8006098:	e7c7      	b.n	800602a <__ssputs_r+0x46>
	...

0800609c <_svfiprintf_r>:
 800609c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a0:	4698      	mov	r8, r3
 80060a2:	898b      	ldrh	r3, [r1, #12]
 80060a4:	061b      	lsls	r3, r3, #24
 80060a6:	b09d      	sub	sp, #116	; 0x74
 80060a8:	4607      	mov	r7, r0
 80060aa:	460d      	mov	r5, r1
 80060ac:	4614      	mov	r4, r2
 80060ae:	d50e      	bpl.n	80060ce <_svfiprintf_r+0x32>
 80060b0:	690b      	ldr	r3, [r1, #16]
 80060b2:	b963      	cbnz	r3, 80060ce <_svfiprintf_r+0x32>
 80060b4:	2140      	movs	r1, #64	; 0x40
 80060b6:	f7ff ff3b 	bl	8005f30 <_malloc_r>
 80060ba:	6028      	str	r0, [r5, #0]
 80060bc:	6128      	str	r0, [r5, #16]
 80060be:	b920      	cbnz	r0, 80060ca <_svfiprintf_r+0x2e>
 80060c0:	230c      	movs	r3, #12
 80060c2:	603b      	str	r3, [r7, #0]
 80060c4:	f04f 30ff 	mov.w	r0, #4294967295
 80060c8:	e0d1      	b.n	800626e <_svfiprintf_r+0x1d2>
 80060ca:	2340      	movs	r3, #64	; 0x40
 80060cc:	616b      	str	r3, [r5, #20]
 80060ce:	2300      	movs	r3, #0
 80060d0:	9309      	str	r3, [sp, #36]	; 0x24
 80060d2:	2320      	movs	r3, #32
 80060d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80060dc:	2330      	movs	r3, #48	; 0x30
 80060de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006288 <_svfiprintf_r+0x1ec>
 80060e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060e6:	f04f 0901 	mov.w	r9, #1
 80060ea:	4623      	mov	r3, r4
 80060ec:	469a      	mov	sl, r3
 80060ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060f2:	b10a      	cbz	r2, 80060f8 <_svfiprintf_r+0x5c>
 80060f4:	2a25      	cmp	r2, #37	; 0x25
 80060f6:	d1f9      	bne.n	80060ec <_svfiprintf_r+0x50>
 80060f8:	ebba 0b04 	subs.w	fp, sl, r4
 80060fc:	d00b      	beq.n	8006116 <_svfiprintf_r+0x7a>
 80060fe:	465b      	mov	r3, fp
 8006100:	4622      	mov	r2, r4
 8006102:	4629      	mov	r1, r5
 8006104:	4638      	mov	r0, r7
 8006106:	f7ff ff6d 	bl	8005fe4 <__ssputs_r>
 800610a:	3001      	adds	r0, #1
 800610c:	f000 80aa 	beq.w	8006264 <_svfiprintf_r+0x1c8>
 8006110:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006112:	445a      	add	r2, fp
 8006114:	9209      	str	r2, [sp, #36]	; 0x24
 8006116:	f89a 3000 	ldrb.w	r3, [sl]
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 80a2 	beq.w	8006264 <_svfiprintf_r+0x1c8>
 8006120:	2300      	movs	r3, #0
 8006122:	f04f 32ff 	mov.w	r2, #4294967295
 8006126:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800612a:	f10a 0a01 	add.w	sl, sl, #1
 800612e:	9304      	str	r3, [sp, #16]
 8006130:	9307      	str	r3, [sp, #28]
 8006132:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006136:	931a      	str	r3, [sp, #104]	; 0x68
 8006138:	4654      	mov	r4, sl
 800613a:	2205      	movs	r2, #5
 800613c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006140:	4851      	ldr	r0, [pc, #324]	; (8006288 <_svfiprintf_r+0x1ec>)
 8006142:	f7fa f85d 	bl	8000200 <memchr>
 8006146:	9a04      	ldr	r2, [sp, #16]
 8006148:	b9d8      	cbnz	r0, 8006182 <_svfiprintf_r+0xe6>
 800614a:	06d0      	lsls	r0, r2, #27
 800614c:	bf44      	itt	mi
 800614e:	2320      	movmi	r3, #32
 8006150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006154:	0711      	lsls	r1, r2, #28
 8006156:	bf44      	itt	mi
 8006158:	232b      	movmi	r3, #43	; 0x2b
 800615a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800615e:	f89a 3000 	ldrb.w	r3, [sl]
 8006162:	2b2a      	cmp	r3, #42	; 0x2a
 8006164:	d015      	beq.n	8006192 <_svfiprintf_r+0xf6>
 8006166:	9a07      	ldr	r2, [sp, #28]
 8006168:	4654      	mov	r4, sl
 800616a:	2000      	movs	r0, #0
 800616c:	f04f 0c0a 	mov.w	ip, #10
 8006170:	4621      	mov	r1, r4
 8006172:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006176:	3b30      	subs	r3, #48	; 0x30
 8006178:	2b09      	cmp	r3, #9
 800617a:	d94e      	bls.n	800621a <_svfiprintf_r+0x17e>
 800617c:	b1b0      	cbz	r0, 80061ac <_svfiprintf_r+0x110>
 800617e:	9207      	str	r2, [sp, #28]
 8006180:	e014      	b.n	80061ac <_svfiprintf_r+0x110>
 8006182:	eba0 0308 	sub.w	r3, r0, r8
 8006186:	fa09 f303 	lsl.w	r3, r9, r3
 800618a:	4313      	orrs	r3, r2
 800618c:	9304      	str	r3, [sp, #16]
 800618e:	46a2      	mov	sl, r4
 8006190:	e7d2      	b.n	8006138 <_svfiprintf_r+0x9c>
 8006192:	9b03      	ldr	r3, [sp, #12]
 8006194:	1d19      	adds	r1, r3, #4
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	9103      	str	r1, [sp, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	bfbb      	ittet	lt
 800619e:	425b      	neglt	r3, r3
 80061a0:	f042 0202 	orrlt.w	r2, r2, #2
 80061a4:	9307      	strge	r3, [sp, #28]
 80061a6:	9307      	strlt	r3, [sp, #28]
 80061a8:	bfb8      	it	lt
 80061aa:	9204      	strlt	r2, [sp, #16]
 80061ac:	7823      	ldrb	r3, [r4, #0]
 80061ae:	2b2e      	cmp	r3, #46	; 0x2e
 80061b0:	d10c      	bne.n	80061cc <_svfiprintf_r+0x130>
 80061b2:	7863      	ldrb	r3, [r4, #1]
 80061b4:	2b2a      	cmp	r3, #42	; 0x2a
 80061b6:	d135      	bne.n	8006224 <_svfiprintf_r+0x188>
 80061b8:	9b03      	ldr	r3, [sp, #12]
 80061ba:	1d1a      	adds	r2, r3, #4
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	9203      	str	r2, [sp, #12]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	bfb8      	it	lt
 80061c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80061c8:	3402      	adds	r4, #2
 80061ca:	9305      	str	r3, [sp, #20]
 80061cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006298 <_svfiprintf_r+0x1fc>
 80061d0:	7821      	ldrb	r1, [r4, #0]
 80061d2:	2203      	movs	r2, #3
 80061d4:	4650      	mov	r0, sl
 80061d6:	f7fa f813 	bl	8000200 <memchr>
 80061da:	b140      	cbz	r0, 80061ee <_svfiprintf_r+0x152>
 80061dc:	2340      	movs	r3, #64	; 0x40
 80061de:	eba0 000a 	sub.w	r0, r0, sl
 80061e2:	fa03 f000 	lsl.w	r0, r3, r0
 80061e6:	9b04      	ldr	r3, [sp, #16]
 80061e8:	4303      	orrs	r3, r0
 80061ea:	3401      	adds	r4, #1
 80061ec:	9304      	str	r3, [sp, #16]
 80061ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061f2:	4826      	ldr	r0, [pc, #152]	; (800628c <_svfiprintf_r+0x1f0>)
 80061f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061f8:	2206      	movs	r2, #6
 80061fa:	f7fa f801 	bl	8000200 <memchr>
 80061fe:	2800      	cmp	r0, #0
 8006200:	d038      	beq.n	8006274 <_svfiprintf_r+0x1d8>
 8006202:	4b23      	ldr	r3, [pc, #140]	; (8006290 <_svfiprintf_r+0x1f4>)
 8006204:	bb1b      	cbnz	r3, 800624e <_svfiprintf_r+0x1b2>
 8006206:	9b03      	ldr	r3, [sp, #12]
 8006208:	3307      	adds	r3, #7
 800620a:	f023 0307 	bic.w	r3, r3, #7
 800620e:	3308      	adds	r3, #8
 8006210:	9303      	str	r3, [sp, #12]
 8006212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006214:	4433      	add	r3, r6
 8006216:	9309      	str	r3, [sp, #36]	; 0x24
 8006218:	e767      	b.n	80060ea <_svfiprintf_r+0x4e>
 800621a:	fb0c 3202 	mla	r2, ip, r2, r3
 800621e:	460c      	mov	r4, r1
 8006220:	2001      	movs	r0, #1
 8006222:	e7a5      	b.n	8006170 <_svfiprintf_r+0xd4>
 8006224:	2300      	movs	r3, #0
 8006226:	3401      	adds	r4, #1
 8006228:	9305      	str	r3, [sp, #20]
 800622a:	4619      	mov	r1, r3
 800622c:	f04f 0c0a 	mov.w	ip, #10
 8006230:	4620      	mov	r0, r4
 8006232:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006236:	3a30      	subs	r2, #48	; 0x30
 8006238:	2a09      	cmp	r2, #9
 800623a:	d903      	bls.n	8006244 <_svfiprintf_r+0x1a8>
 800623c:	2b00      	cmp	r3, #0
 800623e:	d0c5      	beq.n	80061cc <_svfiprintf_r+0x130>
 8006240:	9105      	str	r1, [sp, #20]
 8006242:	e7c3      	b.n	80061cc <_svfiprintf_r+0x130>
 8006244:	fb0c 2101 	mla	r1, ip, r1, r2
 8006248:	4604      	mov	r4, r0
 800624a:	2301      	movs	r3, #1
 800624c:	e7f0      	b.n	8006230 <_svfiprintf_r+0x194>
 800624e:	ab03      	add	r3, sp, #12
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	462a      	mov	r2, r5
 8006254:	4b0f      	ldr	r3, [pc, #60]	; (8006294 <_svfiprintf_r+0x1f8>)
 8006256:	a904      	add	r1, sp, #16
 8006258:	4638      	mov	r0, r7
 800625a:	f7fe f80f 	bl	800427c <_printf_float>
 800625e:	1c42      	adds	r2, r0, #1
 8006260:	4606      	mov	r6, r0
 8006262:	d1d6      	bne.n	8006212 <_svfiprintf_r+0x176>
 8006264:	89ab      	ldrh	r3, [r5, #12]
 8006266:	065b      	lsls	r3, r3, #25
 8006268:	f53f af2c 	bmi.w	80060c4 <_svfiprintf_r+0x28>
 800626c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800626e:	b01d      	add	sp, #116	; 0x74
 8006270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006274:	ab03      	add	r3, sp, #12
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	462a      	mov	r2, r5
 800627a:	4b06      	ldr	r3, [pc, #24]	; (8006294 <_svfiprintf_r+0x1f8>)
 800627c:	a904      	add	r1, sp, #16
 800627e:	4638      	mov	r0, r7
 8006280:	f7fe faa0 	bl	80047c4 <_printf_i>
 8006284:	e7eb      	b.n	800625e <_svfiprintf_r+0x1c2>
 8006286:	bf00      	nop
 8006288:	0800806c 	.word	0x0800806c
 800628c:	08008076 	.word	0x08008076
 8006290:	0800427d 	.word	0x0800427d
 8006294:	08005fe5 	.word	0x08005fe5
 8006298:	08008072 	.word	0x08008072

0800629c <_sbrk_r>:
 800629c:	b538      	push	{r3, r4, r5, lr}
 800629e:	4d06      	ldr	r5, [pc, #24]	; (80062b8 <_sbrk_r+0x1c>)
 80062a0:	2300      	movs	r3, #0
 80062a2:	4604      	mov	r4, r0
 80062a4:	4608      	mov	r0, r1
 80062a6:	602b      	str	r3, [r5, #0]
 80062a8:	f7fb fee8 	bl	800207c <_sbrk>
 80062ac:	1c43      	adds	r3, r0, #1
 80062ae:	d102      	bne.n	80062b6 <_sbrk_r+0x1a>
 80062b0:	682b      	ldr	r3, [r5, #0]
 80062b2:	b103      	cbz	r3, 80062b6 <_sbrk_r+0x1a>
 80062b4:	6023      	str	r3, [r4, #0]
 80062b6:	bd38      	pop	{r3, r4, r5, pc}
 80062b8:	2000028c 	.word	0x2000028c

080062bc <__assert_func>:
 80062bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062be:	4614      	mov	r4, r2
 80062c0:	461a      	mov	r2, r3
 80062c2:	4b09      	ldr	r3, [pc, #36]	; (80062e8 <__assert_func+0x2c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4605      	mov	r5, r0
 80062c8:	68d8      	ldr	r0, [r3, #12]
 80062ca:	b14c      	cbz	r4, 80062e0 <__assert_func+0x24>
 80062cc:	4b07      	ldr	r3, [pc, #28]	; (80062ec <__assert_func+0x30>)
 80062ce:	9100      	str	r1, [sp, #0]
 80062d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80062d4:	4906      	ldr	r1, [pc, #24]	; (80062f0 <__assert_func+0x34>)
 80062d6:	462b      	mov	r3, r5
 80062d8:	f000 f80e 	bl	80062f8 <fiprintf>
 80062dc:	f000 faa4 	bl	8006828 <abort>
 80062e0:	4b04      	ldr	r3, [pc, #16]	; (80062f4 <__assert_func+0x38>)
 80062e2:	461c      	mov	r4, r3
 80062e4:	e7f3      	b.n	80062ce <__assert_func+0x12>
 80062e6:	bf00      	nop
 80062e8:	20000018 	.word	0x20000018
 80062ec:	0800807d 	.word	0x0800807d
 80062f0:	0800808a 	.word	0x0800808a
 80062f4:	080080b8 	.word	0x080080b8

080062f8 <fiprintf>:
 80062f8:	b40e      	push	{r1, r2, r3}
 80062fa:	b503      	push	{r0, r1, lr}
 80062fc:	4601      	mov	r1, r0
 80062fe:	ab03      	add	r3, sp, #12
 8006300:	4805      	ldr	r0, [pc, #20]	; (8006318 <fiprintf+0x20>)
 8006302:	f853 2b04 	ldr.w	r2, [r3], #4
 8006306:	6800      	ldr	r0, [r0, #0]
 8006308:	9301      	str	r3, [sp, #4]
 800630a:	f000 f88f 	bl	800642c <_vfiprintf_r>
 800630e:	b002      	add	sp, #8
 8006310:	f85d eb04 	ldr.w	lr, [sp], #4
 8006314:	b003      	add	sp, #12
 8006316:	4770      	bx	lr
 8006318:	20000018 	.word	0x20000018

0800631c <__ascii_mbtowc>:
 800631c:	b082      	sub	sp, #8
 800631e:	b901      	cbnz	r1, 8006322 <__ascii_mbtowc+0x6>
 8006320:	a901      	add	r1, sp, #4
 8006322:	b142      	cbz	r2, 8006336 <__ascii_mbtowc+0x1a>
 8006324:	b14b      	cbz	r3, 800633a <__ascii_mbtowc+0x1e>
 8006326:	7813      	ldrb	r3, [r2, #0]
 8006328:	600b      	str	r3, [r1, #0]
 800632a:	7812      	ldrb	r2, [r2, #0]
 800632c:	1e10      	subs	r0, r2, #0
 800632e:	bf18      	it	ne
 8006330:	2001      	movne	r0, #1
 8006332:	b002      	add	sp, #8
 8006334:	4770      	bx	lr
 8006336:	4610      	mov	r0, r2
 8006338:	e7fb      	b.n	8006332 <__ascii_mbtowc+0x16>
 800633a:	f06f 0001 	mvn.w	r0, #1
 800633e:	e7f8      	b.n	8006332 <__ascii_mbtowc+0x16>

08006340 <memmove>:
 8006340:	4288      	cmp	r0, r1
 8006342:	b510      	push	{r4, lr}
 8006344:	eb01 0402 	add.w	r4, r1, r2
 8006348:	d902      	bls.n	8006350 <memmove+0x10>
 800634a:	4284      	cmp	r4, r0
 800634c:	4623      	mov	r3, r4
 800634e:	d807      	bhi.n	8006360 <memmove+0x20>
 8006350:	1e43      	subs	r3, r0, #1
 8006352:	42a1      	cmp	r1, r4
 8006354:	d008      	beq.n	8006368 <memmove+0x28>
 8006356:	f811 2b01 	ldrb.w	r2, [r1], #1
 800635a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800635e:	e7f8      	b.n	8006352 <memmove+0x12>
 8006360:	4402      	add	r2, r0
 8006362:	4601      	mov	r1, r0
 8006364:	428a      	cmp	r2, r1
 8006366:	d100      	bne.n	800636a <memmove+0x2a>
 8006368:	bd10      	pop	{r4, pc}
 800636a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800636e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006372:	e7f7      	b.n	8006364 <memmove+0x24>

08006374 <__malloc_lock>:
 8006374:	4801      	ldr	r0, [pc, #4]	; (800637c <__malloc_lock+0x8>)
 8006376:	f000 bc17 	b.w	8006ba8 <__retarget_lock_acquire_recursive>
 800637a:	bf00      	nop
 800637c:	20000294 	.word	0x20000294

08006380 <__malloc_unlock>:
 8006380:	4801      	ldr	r0, [pc, #4]	; (8006388 <__malloc_unlock+0x8>)
 8006382:	f000 bc12 	b.w	8006baa <__retarget_lock_release_recursive>
 8006386:	bf00      	nop
 8006388:	20000294 	.word	0x20000294

0800638c <_realloc_r>:
 800638c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638e:	4607      	mov	r7, r0
 8006390:	4614      	mov	r4, r2
 8006392:	460e      	mov	r6, r1
 8006394:	b921      	cbnz	r1, 80063a0 <_realloc_r+0x14>
 8006396:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800639a:	4611      	mov	r1, r2
 800639c:	f7ff bdc8 	b.w	8005f30 <_malloc_r>
 80063a0:	b922      	cbnz	r2, 80063ac <_realloc_r+0x20>
 80063a2:	f7ff fd75 	bl	8005e90 <_free_r>
 80063a6:	4625      	mov	r5, r4
 80063a8:	4628      	mov	r0, r5
 80063aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063ac:	f000 fc62 	bl	8006c74 <_malloc_usable_size_r>
 80063b0:	42a0      	cmp	r0, r4
 80063b2:	d20f      	bcs.n	80063d4 <_realloc_r+0x48>
 80063b4:	4621      	mov	r1, r4
 80063b6:	4638      	mov	r0, r7
 80063b8:	f7ff fdba 	bl	8005f30 <_malloc_r>
 80063bc:	4605      	mov	r5, r0
 80063be:	2800      	cmp	r0, #0
 80063c0:	d0f2      	beq.n	80063a8 <_realloc_r+0x1c>
 80063c2:	4631      	mov	r1, r6
 80063c4:	4622      	mov	r2, r4
 80063c6:	f7ff f9c7 	bl	8005758 <memcpy>
 80063ca:	4631      	mov	r1, r6
 80063cc:	4638      	mov	r0, r7
 80063ce:	f7ff fd5f 	bl	8005e90 <_free_r>
 80063d2:	e7e9      	b.n	80063a8 <_realloc_r+0x1c>
 80063d4:	4635      	mov	r5, r6
 80063d6:	e7e7      	b.n	80063a8 <_realloc_r+0x1c>

080063d8 <__sfputc_r>:
 80063d8:	6893      	ldr	r3, [r2, #8]
 80063da:	3b01      	subs	r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	b410      	push	{r4}
 80063e0:	6093      	str	r3, [r2, #8]
 80063e2:	da08      	bge.n	80063f6 <__sfputc_r+0x1e>
 80063e4:	6994      	ldr	r4, [r2, #24]
 80063e6:	42a3      	cmp	r3, r4
 80063e8:	db01      	blt.n	80063ee <__sfputc_r+0x16>
 80063ea:	290a      	cmp	r1, #10
 80063ec:	d103      	bne.n	80063f6 <__sfputc_r+0x1e>
 80063ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063f2:	f000 b94b 	b.w	800668c <__swbuf_r>
 80063f6:	6813      	ldr	r3, [r2, #0]
 80063f8:	1c58      	adds	r0, r3, #1
 80063fa:	6010      	str	r0, [r2, #0]
 80063fc:	7019      	strb	r1, [r3, #0]
 80063fe:	4608      	mov	r0, r1
 8006400:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006404:	4770      	bx	lr

08006406 <__sfputs_r>:
 8006406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006408:	4606      	mov	r6, r0
 800640a:	460f      	mov	r7, r1
 800640c:	4614      	mov	r4, r2
 800640e:	18d5      	adds	r5, r2, r3
 8006410:	42ac      	cmp	r4, r5
 8006412:	d101      	bne.n	8006418 <__sfputs_r+0x12>
 8006414:	2000      	movs	r0, #0
 8006416:	e007      	b.n	8006428 <__sfputs_r+0x22>
 8006418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800641c:	463a      	mov	r2, r7
 800641e:	4630      	mov	r0, r6
 8006420:	f7ff ffda 	bl	80063d8 <__sfputc_r>
 8006424:	1c43      	adds	r3, r0, #1
 8006426:	d1f3      	bne.n	8006410 <__sfputs_r+0xa>
 8006428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800642c <_vfiprintf_r>:
 800642c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006430:	460d      	mov	r5, r1
 8006432:	b09d      	sub	sp, #116	; 0x74
 8006434:	4614      	mov	r4, r2
 8006436:	4698      	mov	r8, r3
 8006438:	4606      	mov	r6, r0
 800643a:	b118      	cbz	r0, 8006444 <_vfiprintf_r+0x18>
 800643c:	6983      	ldr	r3, [r0, #24]
 800643e:	b90b      	cbnz	r3, 8006444 <_vfiprintf_r+0x18>
 8006440:	f000 fb14 	bl	8006a6c <__sinit>
 8006444:	4b89      	ldr	r3, [pc, #548]	; (800666c <_vfiprintf_r+0x240>)
 8006446:	429d      	cmp	r5, r3
 8006448:	d11b      	bne.n	8006482 <_vfiprintf_r+0x56>
 800644a:	6875      	ldr	r5, [r6, #4]
 800644c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800644e:	07d9      	lsls	r1, r3, #31
 8006450:	d405      	bmi.n	800645e <_vfiprintf_r+0x32>
 8006452:	89ab      	ldrh	r3, [r5, #12]
 8006454:	059a      	lsls	r2, r3, #22
 8006456:	d402      	bmi.n	800645e <_vfiprintf_r+0x32>
 8006458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800645a:	f000 fba5 	bl	8006ba8 <__retarget_lock_acquire_recursive>
 800645e:	89ab      	ldrh	r3, [r5, #12]
 8006460:	071b      	lsls	r3, r3, #28
 8006462:	d501      	bpl.n	8006468 <_vfiprintf_r+0x3c>
 8006464:	692b      	ldr	r3, [r5, #16]
 8006466:	b9eb      	cbnz	r3, 80064a4 <_vfiprintf_r+0x78>
 8006468:	4629      	mov	r1, r5
 800646a:	4630      	mov	r0, r6
 800646c:	f000 f96e 	bl	800674c <__swsetup_r>
 8006470:	b1c0      	cbz	r0, 80064a4 <_vfiprintf_r+0x78>
 8006472:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006474:	07dc      	lsls	r4, r3, #31
 8006476:	d50e      	bpl.n	8006496 <_vfiprintf_r+0x6a>
 8006478:	f04f 30ff 	mov.w	r0, #4294967295
 800647c:	b01d      	add	sp, #116	; 0x74
 800647e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006482:	4b7b      	ldr	r3, [pc, #492]	; (8006670 <_vfiprintf_r+0x244>)
 8006484:	429d      	cmp	r5, r3
 8006486:	d101      	bne.n	800648c <_vfiprintf_r+0x60>
 8006488:	68b5      	ldr	r5, [r6, #8]
 800648a:	e7df      	b.n	800644c <_vfiprintf_r+0x20>
 800648c:	4b79      	ldr	r3, [pc, #484]	; (8006674 <_vfiprintf_r+0x248>)
 800648e:	429d      	cmp	r5, r3
 8006490:	bf08      	it	eq
 8006492:	68f5      	ldreq	r5, [r6, #12]
 8006494:	e7da      	b.n	800644c <_vfiprintf_r+0x20>
 8006496:	89ab      	ldrh	r3, [r5, #12]
 8006498:	0598      	lsls	r0, r3, #22
 800649a:	d4ed      	bmi.n	8006478 <_vfiprintf_r+0x4c>
 800649c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800649e:	f000 fb84 	bl	8006baa <__retarget_lock_release_recursive>
 80064a2:	e7e9      	b.n	8006478 <_vfiprintf_r+0x4c>
 80064a4:	2300      	movs	r3, #0
 80064a6:	9309      	str	r3, [sp, #36]	; 0x24
 80064a8:	2320      	movs	r3, #32
 80064aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80064b2:	2330      	movs	r3, #48	; 0x30
 80064b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006678 <_vfiprintf_r+0x24c>
 80064b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064bc:	f04f 0901 	mov.w	r9, #1
 80064c0:	4623      	mov	r3, r4
 80064c2:	469a      	mov	sl, r3
 80064c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064c8:	b10a      	cbz	r2, 80064ce <_vfiprintf_r+0xa2>
 80064ca:	2a25      	cmp	r2, #37	; 0x25
 80064cc:	d1f9      	bne.n	80064c2 <_vfiprintf_r+0x96>
 80064ce:	ebba 0b04 	subs.w	fp, sl, r4
 80064d2:	d00b      	beq.n	80064ec <_vfiprintf_r+0xc0>
 80064d4:	465b      	mov	r3, fp
 80064d6:	4622      	mov	r2, r4
 80064d8:	4629      	mov	r1, r5
 80064da:	4630      	mov	r0, r6
 80064dc:	f7ff ff93 	bl	8006406 <__sfputs_r>
 80064e0:	3001      	adds	r0, #1
 80064e2:	f000 80aa 	beq.w	800663a <_vfiprintf_r+0x20e>
 80064e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064e8:	445a      	add	r2, fp
 80064ea:	9209      	str	r2, [sp, #36]	; 0x24
 80064ec:	f89a 3000 	ldrb.w	r3, [sl]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 80a2 	beq.w	800663a <_vfiprintf_r+0x20e>
 80064f6:	2300      	movs	r3, #0
 80064f8:	f04f 32ff 	mov.w	r2, #4294967295
 80064fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006500:	f10a 0a01 	add.w	sl, sl, #1
 8006504:	9304      	str	r3, [sp, #16]
 8006506:	9307      	str	r3, [sp, #28]
 8006508:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800650c:	931a      	str	r3, [sp, #104]	; 0x68
 800650e:	4654      	mov	r4, sl
 8006510:	2205      	movs	r2, #5
 8006512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006516:	4858      	ldr	r0, [pc, #352]	; (8006678 <_vfiprintf_r+0x24c>)
 8006518:	f7f9 fe72 	bl	8000200 <memchr>
 800651c:	9a04      	ldr	r2, [sp, #16]
 800651e:	b9d8      	cbnz	r0, 8006558 <_vfiprintf_r+0x12c>
 8006520:	06d1      	lsls	r1, r2, #27
 8006522:	bf44      	itt	mi
 8006524:	2320      	movmi	r3, #32
 8006526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800652a:	0713      	lsls	r3, r2, #28
 800652c:	bf44      	itt	mi
 800652e:	232b      	movmi	r3, #43	; 0x2b
 8006530:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006534:	f89a 3000 	ldrb.w	r3, [sl]
 8006538:	2b2a      	cmp	r3, #42	; 0x2a
 800653a:	d015      	beq.n	8006568 <_vfiprintf_r+0x13c>
 800653c:	9a07      	ldr	r2, [sp, #28]
 800653e:	4654      	mov	r4, sl
 8006540:	2000      	movs	r0, #0
 8006542:	f04f 0c0a 	mov.w	ip, #10
 8006546:	4621      	mov	r1, r4
 8006548:	f811 3b01 	ldrb.w	r3, [r1], #1
 800654c:	3b30      	subs	r3, #48	; 0x30
 800654e:	2b09      	cmp	r3, #9
 8006550:	d94e      	bls.n	80065f0 <_vfiprintf_r+0x1c4>
 8006552:	b1b0      	cbz	r0, 8006582 <_vfiprintf_r+0x156>
 8006554:	9207      	str	r2, [sp, #28]
 8006556:	e014      	b.n	8006582 <_vfiprintf_r+0x156>
 8006558:	eba0 0308 	sub.w	r3, r0, r8
 800655c:	fa09 f303 	lsl.w	r3, r9, r3
 8006560:	4313      	orrs	r3, r2
 8006562:	9304      	str	r3, [sp, #16]
 8006564:	46a2      	mov	sl, r4
 8006566:	e7d2      	b.n	800650e <_vfiprintf_r+0xe2>
 8006568:	9b03      	ldr	r3, [sp, #12]
 800656a:	1d19      	adds	r1, r3, #4
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	9103      	str	r1, [sp, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	bfbb      	ittet	lt
 8006574:	425b      	neglt	r3, r3
 8006576:	f042 0202 	orrlt.w	r2, r2, #2
 800657a:	9307      	strge	r3, [sp, #28]
 800657c:	9307      	strlt	r3, [sp, #28]
 800657e:	bfb8      	it	lt
 8006580:	9204      	strlt	r2, [sp, #16]
 8006582:	7823      	ldrb	r3, [r4, #0]
 8006584:	2b2e      	cmp	r3, #46	; 0x2e
 8006586:	d10c      	bne.n	80065a2 <_vfiprintf_r+0x176>
 8006588:	7863      	ldrb	r3, [r4, #1]
 800658a:	2b2a      	cmp	r3, #42	; 0x2a
 800658c:	d135      	bne.n	80065fa <_vfiprintf_r+0x1ce>
 800658e:	9b03      	ldr	r3, [sp, #12]
 8006590:	1d1a      	adds	r2, r3, #4
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	9203      	str	r2, [sp, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	bfb8      	it	lt
 800659a:	f04f 33ff 	movlt.w	r3, #4294967295
 800659e:	3402      	adds	r4, #2
 80065a0:	9305      	str	r3, [sp, #20]
 80065a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006688 <_vfiprintf_r+0x25c>
 80065a6:	7821      	ldrb	r1, [r4, #0]
 80065a8:	2203      	movs	r2, #3
 80065aa:	4650      	mov	r0, sl
 80065ac:	f7f9 fe28 	bl	8000200 <memchr>
 80065b0:	b140      	cbz	r0, 80065c4 <_vfiprintf_r+0x198>
 80065b2:	2340      	movs	r3, #64	; 0x40
 80065b4:	eba0 000a 	sub.w	r0, r0, sl
 80065b8:	fa03 f000 	lsl.w	r0, r3, r0
 80065bc:	9b04      	ldr	r3, [sp, #16]
 80065be:	4303      	orrs	r3, r0
 80065c0:	3401      	adds	r4, #1
 80065c2:	9304      	str	r3, [sp, #16]
 80065c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065c8:	482c      	ldr	r0, [pc, #176]	; (800667c <_vfiprintf_r+0x250>)
 80065ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065ce:	2206      	movs	r2, #6
 80065d0:	f7f9 fe16 	bl	8000200 <memchr>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	d03f      	beq.n	8006658 <_vfiprintf_r+0x22c>
 80065d8:	4b29      	ldr	r3, [pc, #164]	; (8006680 <_vfiprintf_r+0x254>)
 80065da:	bb1b      	cbnz	r3, 8006624 <_vfiprintf_r+0x1f8>
 80065dc:	9b03      	ldr	r3, [sp, #12]
 80065de:	3307      	adds	r3, #7
 80065e0:	f023 0307 	bic.w	r3, r3, #7
 80065e4:	3308      	adds	r3, #8
 80065e6:	9303      	str	r3, [sp, #12]
 80065e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ea:	443b      	add	r3, r7
 80065ec:	9309      	str	r3, [sp, #36]	; 0x24
 80065ee:	e767      	b.n	80064c0 <_vfiprintf_r+0x94>
 80065f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80065f4:	460c      	mov	r4, r1
 80065f6:	2001      	movs	r0, #1
 80065f8:	e7a5      	b.n	8006546 <_vfiprintf_r+0x11a>
 80065fa:	2300      	movs	r3, #0
 80065fc:	3401      	adds	r4, #1
 80065fe:	9305      	str	r3, [sp, #20]
 8006600:	4619      	mov	r1, r3
 8006602:	f04f 0c0a 	mov.w	ip, #10
 8006606:	4620      	mov	r0, r4
 8006608:	f810 2b01 	ldrb.w	r2, [r0], #1
 800660c:	3a30      	subs	r2, #48	; 0x30
 800660e:	2a09      	cmp	r2, #9
 8006610:	d903      	bls.n	800661a <_vfiprintf_r+0x1ee>
 8006612:	2b00      	cmp	r3, #0
 8006614:	d0c5      	beq.n	80065a2 <_vfiprintf_r+0x176>
 8006616:	9105      	str	r1, [sp, #20]
 8006618:	e7c3      	b.n	80065a2 <_vfiprintf_r+0x176>
 800661a:	fb0c 2101 	mla	r1, ip, r1, r2
 800661e:	4604      	mov	r4, r0
 8006620:	2301      	movs	r3, #1
 8006622:	e7f0      	b.n	8006606 <_vfiprintf_r+0x1da>
 8006624:	ab03      	add	r3, sp, #12
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	462a      	mov	r2, r5
 800662a:	4b16      	ldr	r3, [pc, #88]	; (8006684 <_vfiprintf_r+0x258>)
 800662c:	a904      	add	r1, sp, #16
 800662e:	4630      	mov	r0, r6
 8006630:	f7fd fe24 	bl	800427c <_printf_float>
 8006634:	4607      	mov	r7, r0
 8006636:	1c78      	adds	r0, r7, #1
 8006638:	d1d6      	bne.n	80065e8 <_vfiprintf_r+0x1bc>
 800663a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800663c:	07d9      	lsls	r1, r3, #31
 800663e:	d405      	bmi.n	800664c <_vfiprintf_r+0x220>
 8006640:	89ab      	ldrh	r3, [r5, #12]
 8006642:	059a      	lsls	r2, r3, #22
 8006644:	d402      	bmi.n	800664c <_vfiprintf_r+0x220>
 8006646:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006648:	f000 faaf 	bl	8006baa <__retarget_lock_release_recursive>
 800664c:	89ab      	ldrh	r3, [r5, #12]
 800664e:	065b      	lsls	r3, r3, #25
 8006650:	f53f af12 	bmi.w	8006478 <_vfiprintf_r+0x4c>
 8006654:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006656:	e711      	b.n	800647c <_vfiprintf_r+0x50>
 8006658:	ab03      	add	r3, sp, #12
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	462a      	mov	r2, r5
 800665e:	4b09      	ldr	r3, [pc, #36]	; (8006684 <_vfiprintf_r+0x258>)
 8006660:	a904      	add	r1, sp, #16
 8006662:	4630      	mov	r0, r6
 8006664:	f7fe f8ae 	bl	80047c4 <_printf_i>
 8006668:	e7e4      	b.n	8006634 <_vfiprintf_r+0x208>
 800666a:	bf00      	nop
 800666c:	080081e4 	.word	0x080081e4
 8006670:	08008204 	.word	0x08008204
 8006674:	080081c4 	.word	0x080081c4
 8006678:	0800806c 	.word	0x0800806c
 800667c:	08008076 	.word	0x08008076
 8006680:	0800427d 	.word	0x0800427d
 8006684:	08006407 	.word	0x08006407
 8006688:	08008072 	.word	0x08008072

0800668c <__swbuf_r>:
 800668c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668e:	460e      	mov	r6, r1
 8006690:	4614      	mov	r4, r2
 8006692:	4605      	mov	r5, r0
 8006694:	b118      	cbz	r0, 800669e <__swbuf_r+0x12>
 8006696:	6983      	ldr	r3, [r0, #24]
 8006698:	b90b      	cbnz	r3, 800669e <__swbuf_r+0x12>
 800669a:	f000 f9e7 	bl	8006a6c <__sinit>
 800669e:	4b21      	ldr	r3, [pc, #132]	; (8006724 <__swbuf_r+0x98>)
 80066a0:	429c      	cmp	r4, r3
 80066a2:	d12b      	bne.n	80066fc <__swbuf_r+0x70>
 80066a4:	686c      	ldr	r4, [r5, #4]
 80066a6:	69a3      	ldr	r3, [r4, #24]
 80066a8:	60a3      	str	r3, [r4, #8]
 80066aa:	89a3      	ldrh	r3, [r4, #12]
 80066ac:	071a      	lsls	r2, r3, #28
 80066ae:	d52f      	bpl.n	8006710 <__swbuf_r+0x84>
 80066b0:	6923      	ldr	r3, [r4, #16]
 80066b2:	b36b      	cbz	r3, 8006710 <__swbuf_r+0x84>
 80066b4:	6923      	ldr	r3, [r4, #16]
 80066b6:	6820      	ldr	r0, [r4, #0]
 80066b8:	1ac0      	subs	r0, r0, r3
 80066ba:	6963      	ldr	r3, [r4, #20]
 80066bc:	b2f6      	uxtb	r6, r6
 80066be:	4283      	cmp	r3, r0
 80066c0:	4637      	mov	r7, r6
 80066c2:	dc04      	bgt.n	80066ce <__swbuf_r+0x42>
 80066c4:	4621      	mov	r1, r4
 80066c6:	4628      	mov	r0, r5
 80066c8:	f000 f93c 	bl	8006944 <_fflush_r>
 80066cc:	bb30      	cbnz	r0, 800671c <__swbuf_r+0x90>
 80066ce:	68a3      	ldr	r3, [r4, #8]
 80066d0:	3b01      	subs	r3, #1
 80066d2:	60a3      	str	r3, [r4, #8]
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	1c5a      	adds	r2, r3, #1
 80066d8:	6022      	str	r2, [r4, #0]
 80066da:	701e      	strb	r6, [r3, #0]
 80066dc:	6963      	ldr	r3, [r4, #20]
 80066de:	3001      	adds	r0, #1
 80066e0:	4283      	cmp	r3, r0
 80066e2:	d004      	beq.n	80066ee <__swbuf_r+0x62>
 80066e4:	89a3      	ldrh	r3, [r4, #12]
 80066e6:	07db      	lsls	r3, r3, #31
 80066e8:	d506      	bpl.n	80066f8 <__swbuf_r+0x6c>
 80066ea:	2e0a      	cmp	r6, #10
 80066ec:	d104      	bne.n	80066f8 <__swbuf_r+0x6c>
 80066ee:	4621      	mov	r1, r4
 80066f0:	4628      	mov	r0, r5
 80066f2:	f000 f927 	bl	8006944 <_fflush_r>
 80066f6:	b988      	cbnz	r0, 800671c <__swbuf_r+0x90>
 80066f8:	4638      	mov	r0, r7
 80066fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066fc:	4b0a      	ldr	r3, [pc, #40]	; (8006728 <__swbuf_r+0x9c>)
 80066fe:	429c      	cmp	r4, r3
 8006700:	d101      	bne.n	8006706 <__swbuf_r+0x7a>
 8006702:	68ac      	ldr	r4, [r5, #8]
 8006704:	e7cf      	b.n	80066a6 <__swbuf_r+0x1a>
 8006706:	4b09      	ldr	r3, [pc, #36]	; (800672c <__swbuf_r+0xa0>)
 8006708:	429c      	cmp	r4, r3
 800670a:	bf08      	it	eq
 800670c:	68ec      	ldreq	r4, [r5, #12]
 800670e:	e7ca      	b.n	80066a6 <__swbuf_r+0x1a>
 8006710:	4621      	mov	r1, r4
 8006712:	4628      	mov	r0, r5
 8006714:	f000 f81a 	bl	800674c <__swsetup_r>
 8006718:	2800      	cmp	r0, #0
 800671a:	d0cb      	beq.n	80066b4 <__swbuf_r+0x28>
 800671c:	f04f 37ff 	mov.w	r7, #4294967295
 8006720:	e7ea      	b.n	80066f8 <__swbuf_r+0x6c>
 8006722:	bf00      	nop
 8006724:	080081e4 	.word	0x080081e4
 8006728:	08008204 	.word	0x08008204
 800672c:	080081c4 	.word	0x080081c4

08006730 <__ascii_wctomb>:
 8006730:	b149      	cbz	r1, 8006746 <__ascii_wctomb+0x16>
 8006732:	2aff      	cmp	r2, #255	; 0xff
 8006734:	bf85      	ittet	hi
 8006736:	238a      	movhi	r3, #138	; 0x8a
 8006738:	6003      	strhi	r3, [r0, #0]
 800673a:	700a      	strbls	r2, [r1, #0]
 800673c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006740:	bf98      	it	ls
 8006742:	2001      	movls	r0, #1
 8006744:	4770      	bx	lr
 8006746:	4608      	mov	r0, r1
 8006748:	4770      	bx	lr
	...

0800674c <__swsetup_r>:
 800674c:	4b32      	ldr	r3, [pc, #200]	; (8006818 <__swsetup_r+0xcc>)
 800674e:	b570      	push	{r4, r5, r6, lr}
 8006750:	681d      	ldr	r5, [r3, #0]
 8006752:	4606      	mov	r6, r0
 8006754:	460c      	mov	r4, r1
 8006756:	b125      	cbz	r5, 8006762 <__swsetup_r+0x16>
 8006758:	69ab      	ldr	r3, [r5, #24]
 800675a:	b913      	cbnz	r3, 8006762 <__swsetup_r+0x16>
 800675c:	4628      	mov	r0, r5
 800675e:	f000 f985 	bl	8006a6c <__sinit>
 8006762:	4b2e      	ldr	r3, [pc, #184]	; (800681c <__swsetup_r+0xd0>)
 8006764:	429c      	cmp	r4, r3
 8006766:	d10f      	bne.n	8006788 <__swsetup_r+0x3c>
 8006768:	686c      	ldr	r4, [r5, #4]
 800676a:	89a3      	ldrh	r3, [r4, #12]
 800676c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006770:	0719      	lsls	r1, r3, #28
 8006772:	d42c      	bmi.n	80067ce <__swsetup_r+0x82>
 8006774:	06dd      	lsls	r5, r3, #27
 8006776:	d411      	bmi.n	800679c <__swsetup_r+0x50>
 8006778:	2309      	movs	r3, #9
 800677a:	6033      	str	r3, [r6, #0]
 800677c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006780:	81a3      	strh	r3, [r4, #12]
 8006782:	f04f 30ff 	mov.w	r0, #4294967295
 8006786:	e03e      	b.n	8006806 <__swsetup_r+0xba>
 8006788:	4b25      	ldr	r3, [pc, #148]	; (8006820 <__swsetup_r+0xd4>)
 800678a:	429c      	cmp	r4, r3
 800678c:	d101      	bne.n	8006792 <__swsetup_r+0x46>
 800678e:	68ac      	ldr	r4, [r5, #8]
 8006790:	e7eb      	b.n	800676a <__swsetup_r+0x1e>
 8006792:	4b24      	ldr	r3, [pc, #144]	; (8006824 <__swsetup_r+0xd8>)
 8006794:	429c      	cmp	r4, r3
 8006796:	bf08      	it	eq
 8006798:	68ec      	ldreq	r4, [r5, #12]
 800679a:	e7e6      	b.n	800676a <__swsetup_r+0x1e>
 800679c:	0758      	lsls	r0, r3, #29
 800679e:	d512      	bpl.n	80067c6 <__swsetup_r+0x7a>
 80067a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067a2:	b141      	cbz	r1, 80067b6 <__swsetup_r+0x6a>
 80067a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067a8:	4299      	cmp	r1, r3
 80067aa:	d002      	beq.n	80067b2 <__swsetup_r+0x66>
 80067ac:	4630      	mov	r0, r6
 80067ae:	f7ff fb6f 	bl	8005e90 <_free_r>
 80067b2:	2300      	movs	r3, #0
 80067b4:	6363      	str	r3, [r4, #52]	; 0x34
 80067b6:	89a3      	ldrh	r3, [r4, #12]
 80067b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067bc:	81a3      	strh	r3, [r4, #12]
 80067be:	2300      	movs	r3, #0
 80067c0:	6063      	str	r3, [r4, #4]
 80067c2:	6923      	ldr	r3, [r4, #16]
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	89a3      	ldrh	r3, [r4, #12]
 80067c8:	f043 0308 	orr.w	r3, r3, #8
 80067cc:	81a3      	strh	r3, [r4, #12]
 80067ce:	6923      	ldr	r3, [r4, #16]
 80067d0:	b94b      	cbnz	r3, 80067e6 <__swsetup_r+0x9a>
 80067d2:	89a3      	ldrh	r3, [r4, #12]
 80067d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067dc:	d003      	beq.n	80067e6 <__swsetup_r+0x9a>
 80067de:	4621      	mov	r1, r4
 80067e0:	4630      	mov	r0, r6
 80067e2:	f000 fa07 	bl	8006bf4 <__smakebuf_r>
 80067e6:	89a0      	ldrh	r0, [r4, #12]
 80067e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067ec:	f010 0301 	ands.w	r3, r0, #1
 80067f0:	d00a      	beq.n	8006808 <__swsetup_r+0xbc>
 80067f2:	2300      	movs	r3, #0
 80067f4:	60a3      	str	r3, [r4, #8]
 80067f6:	6963      	ldr	r3, [r4, #20]
 80067f8:	425b      	negs	r3, r3
 80067fa:	61a3      	str	r3, [r4, #24]
 80067fc:	6923      	ldr	r3, [r4, #16]
 80067fe:	b943      	cbnz	r3, 8006812 <__swsetup_r+0xc6>
 8006800:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006804:	d1ba      	bne.n	800677c <__swsetup_r+0x30>
 8006806:	bd70      	pop	{r4, r5, r6, pc}
 8006808:	0781      	lsls	r1, r0, #30
 800680a:	bf58      	it	pl
 800680c:	6963      	ldrpl	r3, [r4, #20]
 800680e:	60a3      	str	r3, [r4, #8]
 8006810:	e7f4      	b.n	80067fc <__swsetup_r+0xb0>
 8006812:	2000      	movs	r0, #0
 8006814:	e7f7      	b.n	8006806 <__swsetup_r+0xba>
 8006816:	bf00      	nop
 8006818:	20000018 	.word	0x20000018
 800681c:	080081e4 	.word	0x080081e4
 8006820:	08008204 	.word	0x08008204
 8006824:	080081c4 	.word	0x080081c4

08006828 <abort>:
 8006828:	b508      	push	{r3, lr}
 800682a:	2006      	movs	r0, #6
 800682c:	f000 fa52 	bl	8006cd4 <raise>
 8006830:	2001      	movs	r0, #1
 8006832:	f7fb fbab 	bl	8001f8c <_exit>
	...

08006838 <__sflush_r>:
 8006838:	898a      	ldrh	r2, [r1, #12]
 800683a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800683e:	4605      	mov	r5, r0
 8006840:	0710      	lsls	r0, r2, #28
 8006842:	460c      	mov	r4, r1
 8006844:	d458      	bmi.n	80068f8 <__sflush_r+0xc0>
 8006846:	684b      	ldr	r3, [r1, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	dc05      	bgt.n	8006858 <__sflush_r+0x20>
 800684c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800684e:	2b00      	cmp	r3, #0
 8006850:	dc02      	bgt.n	8006858 <__sflush_r+0x20>
 8006852:	2000      	movs	r0, #0
 8006854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006858:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800685a:	2e00      	cmp	r6, #0
 800685c:	d0f9      	beq.n	8006852 <__sflush_r+0x1a>
 800685e:	2300      	movs	r3, #0
 8006860:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006864:	682f      	ldr	r7, [r5, #0]
 8006866:	602b      	str	r3, [r5, #0]
 8006868:	d032      	beq.n	80068d0 <__sflush_r+0x98>
 800686a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	075a      	lsls	r2, r3, #29
 8006870:	d505      	bpl.n	800687e <__sflush_r+0x46>
 8006872:	6863      	ldr	r3, [r4, #4]
 8006874:	1ac0      	subs	r0, r0, r3
 8006876:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006878:	b10b      	cbz	r3, 800687e <__sflush_r+0x46>
 800687a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800687c:	1ac0      	subs	r0, r0, r3
 800687e:	2300      	movs	r3, #0
 8006880:	4602      	mov	r2, r0
 8006882:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006884:	6a21      	ldr	r1, [r4, #32]
 8006886:	4628      	mov	r0, r5
 8006888:	47b0      	blx	r6
 800688a:	1c43      	adds	r3, r0, #1
 800688c:	89a3      	ldrh	r3, [r4, #12]
 800688e:	d106      	bne.n	800689e <__sflush_r+0x66>
 8006890:	6829      	ldr	r1, [r5, #0]
 8006892:	291d      	cmp	r1, #29
 8006894:	d82c      	bhi.n	80068f0 <__sflush_r+0xb8>
 8006896:	4a2a      	ldr	r2, [pc, #168]	; (8006940 <__sflush_r+0x108>)
 8006898:	40ca      	lsrs	r2, r1
 800689a:	07d6      	lsls	r6, r2, #31
 800689c:	d528      	bpl.n	80068f0 <__sflush_r+0xb8>
 800689e:	2200      	movs	r2, #0
 80068a0:	6062      	str	r2, [r4, #4]
 80068a2:	04d9      	lsls	r1, r3, #19
 80068a4:	6922      	ldr	r2, [r4, #16]
 80068a6:	6022      	str	r2, [r4, #0]
 80068a8:	d504      	bpl.n	80068b4 <__sflush_r+0x7c>
 80068aa:	1c42      	adds	r2, r0, #1
 80068ac:	d101      	bne.n	80068b2 <__sflush_r+0x7a>
 80068ae:	682b      	ldr	r3, [r5, #0]
 80068b0:	b903      	cbnz	r3, 80068b4 <__sflush_r+0x7c>
 80068b2:	6560      	str	r0, [r4, #84]	; 0x54
 80068b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068b6:	602f      	str	r7, [r5, #0]
 80068b8:	2900      	cmp	r1, #0
 80068ba:	d0ca      	beq.n	8006852 <__sflush_r+0x1a>
 80068bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068c0:	4299      	cmp	r1, r3
 80068c2:	d002      	beq.n	80068ca <__sflush_r+0x92>
 80068c4:	4628      	mov	r0, r5
 80068c6:	f7ff fae3 	bl	8005e90 <_free_r>
 80068ca:	2000      	movs	r0, #0
 80068cc:	6360      	str	r0, [r4, #52]	; 0x34
 80068ce:	e7c1      	b.n	8006854 <__sflush_r+0x1c>
 80068d0:	6a21      	ldr	r1, [r4, #32]
 80068d2:	2301      	movs	r3, #1
 80068d4:	4628      	mov	r0, r5
 80068d6:	47b0      	blx	r6
 80068d8:	1c41      	adds	r1, r0, #1
 80068da:	d1c7      	bne.n	800686c <__sflush_r+0x34>
 80068dc:	682b      	ldr	r3, [r5, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0c4      	beq.n	800686c <__sflush_r+0x34>
 80068e2:	2b1d      	cmp	r3, #29
 80068e4:	d001      	beq.n	80068ea <__sflush_r+0xb2>
 80068e6:	2b16      	cmp	r3, #22
 80068e8:	d101      	bne.n	80068ee <__sflush_r+0xb6>
 80068ea:	602f      	str	r7, [r5, #0]
 80068ec:	e7b1      	b.n	8006852 <__sflush_r+0x1a>
 80068ee:	89a3      	ldrh	r3, [r4, #12]
 80068f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068f4:	81a3      	strh	r3, [r4, #12]
 80068f6:	e7ad      	b.n	8006854 <__sflush_r+0x1c>
 80068f8:	690f      	ldr	r7, [r1, #16]
 80068fa:	2f00      	cmp	r7, #0
 80068fc:	d0a9      	beq.n	8006852 <__sflush_r+0x1a>
 80068fe:	0793      	lsls	r3, r2, #30
 8006900:	680e      	ldr	r6, [r1, #0]
 8006902:	bf08      	it	eq
 8006904:	694b      	ldreq	r3, [r1, #20]
 8006906:	600f      	str	r7, [r1, #0]
 8006908:	bf18      	it	ne
 800690a:	2300      	movne	r3, #0
 800690c:	eba6 0807 	sub.w	r8, r6, r7
 8006910:	608b      	str	r3, [r1, #8]
 8006912:	f1b8 0f00 	cmp.w	r8, #0
 8006916:	dd9c      	ble.n	8006852 <__sflush_r+0x1a>
 8006918:	6a21      	ldr	r1, [r4, #32]
 800691a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800691c:	4643      	mov	r3, r8
 800691e:	463a      	mov	r2, r7
 8006920:	4628      	mov	r0, r5
 8006922:	47b0      	blx	r6
 8006924:	2800      	cmp	r0, #0
 8006926:	dc06      	bgt.n	8006936 <__sflush_r+0xfe>
 8006928:	89a3      	ldrh	r3, [r4, #12]
 800692a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800692e:	81a3      	strh	r3, [r4, #12]
 8006930:	f04f 30ff 	mov.w	r0, #4294967295
 8006934:	e78e      	b.n	8006854 <__sflush_r+0x1c>
 8006936:	4407      	add	r7, r0
 8006938:	eba8 0800 	sub.w	r8, r8, r0
 800693c:	e7e9      	b.n	8006912 <__sflush_r+0xda>
 800693e:	bf00      	nop
 8006940:	20400001 	.word	0x20400001

08006944 <_fflush_r>:
 8006944:	b538      	push	{r3, r4, r5, lr}
 8006946:	690b      	ldr	r3, [r1, #16]
 8006948:	4605      	mov	r5, r0
 800694a:	460c      	mov	r4, r1
 800694c:	b913      	cbnz	r3, 8006954 <_fflush_r+0x10>
 800694e:	2500      	movs	r5, #0
 8006950:	4628      	mov	r0, r5
 8006952:	bd38      	pop	{r3, r4, r5, pc}
 8006954:	b118      	cbz	r0, 800695e <_fflush_r+0x1a>
 8006956:	6983      	ldr	r3, [r0, #24]
 8006958:	b90b      	cbnz	r3, 800695e <_fflush_r+0x1a>
 800695a:	f000 f887 	bl	8006a6c <__sinit>
 800695e:	4b14      	ldr	r3, [pc, #80]	; (80069b0 <_fflush_r+0x6c>)
 8006960:	429c      	cmp	r4, r3
 8006962:	d11b      	bne.n	800699c <_fflush_r+0x58>
 8006964:	686c      	ldr	r4, [r5, #4]
 8006966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0ef      	beq.n	800694e <_fflush_r+0xa>
 800696e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006970:	07d0      	lsls	r0, r2, #31
 8006972:	d404      	bmi.n	800697e <_fflush_r+0x3a>
 8006974:	0599      	lsls	r1, r3, #22
 8006976:	d402      	bmi.n	800697e <_fflush_r+0x3a>
 8006978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800697a:	f000 f915 	bl	8006ba8 <__retarget_lock_acquire_recursive>
 800697e:	4628      	mov	r0, r5
 8006980:	4621      	mov	r1, r4
 8006982:	f7ff ff59 	bl	8006838 <__sflush_r>
 8006986:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006988:	07da      	lsls	r2, r3, #31
 800698a:	4605      	mov	r5, r0
 800698c:	d4e0      	bmi.n	8006950 <_fflush_r+0xc>
 800698e:	89a3      	ldrh	r3, [r4, #12]
 8006990:	059b      	lsls	r3, r3, #22
 8006992:	d4dd      	bmi.n	8006950 <_fflush_r+0xc>
 8006994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006996:	f000 f908 	bl	8006baa <__retarget_lock_release_recursive>
 800699a:	e7d9      	b.n	8006950 <_fflush_r+0xc>
 800699c:	4b05      	ldr	r3, [pc, #20]	; (80069b4 <_fflush_r+0x70>)
 800699e:	429c      	cmp	r4, r3
 80069a0:	d101      	bne.n	80069a6 <_fflush_r+0x62>
 80069a2:	68ac      	ldr	r4, [r5, #8]
 80069a4:	e7df      	b.n	8006966 <_fflush_r+0x22>
 80069a6:	4b04      	ldr	r3, [pc, #16]	; (80069b8 <_fflush_r+0x74>)
 80069a8:	429c      	cmp	r4, r3
 80069aa:	bf08      	it	eq
 80069ac:	68ec      	ldreq	r4, [r5, #12]
 80069ae:	e7da      	b.n	8006966 <_fflush_r+0x22>
 80069b0:	080081e4 	.word	0x080081e4
 80069b4:	08008204 	.word	0x08008204
 80069b8:	080081c4 	.word	0x080081c4

080069bc <std>:
 80069bc:	2300      	movs	r3, #0
 80069be:	b510      	push	{r4, lr}
 80069c0:	4604      	mov	r4, r0
 80069c2:	e9c0 3300 	strd	r3, r3, [r0]
 80069c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069ca:	6083      	str	r3, [r0, #8]
 80069cc:	8181      	strh	r1, [r0, #12]
 80069ce:	6643      	str	r3, [r0, #100]	; 0x64
 80069d0:	81c2      	strh	r2, [r0, #14]
 80069d2:	6183      	str	r3, [r0, #24]
 80069d4:	4619      	mov	r1, r3
 80069d6:	2208      	movs	r2, #8
 80069d8:	305c      	adds	r0, #92	; 0x5c
 80069da:	f7fd fba7 	bl	800412c <memset>
 80069de:	4b05      	ldr	r3, [pc, #20]	; (80069f4 <std+0x38>)
 80069e0:	6263      	str	r3, [r4, #36]	; 0x24
 80069e2:	4b05      	ldr	r3, [pc, #20]	; (80069f8 <std+0x3c>)
 80069e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80069e6:	4b05      	ldr	r3, [pc, #20]	; (80069fc <std+0x40>)
 80069e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069ea:	4b05      	ldr	r3, [pc, #20]	; (8006a00 <std+0x44>)
 80069ec:	6224      	str	r4, [r4, #32]
 80069ee:	6323      	str	r3, [r4, #48]	; 0x30
 80069f0:	bd10      	pop	{r4, pc}
 80069f2:	bf00      	nop
 80069f4:	08006d0d 	.word	0x08006d0d
 80069f8:	08006d2f 	.word	0x08006d2f
 80069fc:	08006d67 	.word	0x08006d67
 8006a00:	08006d8b 	.word	0x08006d8b

08006a04 <_cleanup_r>:
 8006a04:	4901      	ldr	r1, [pc, #4]	; (8006a0c <_cleanup_r+0x8>)
 8006a06:	f000 b8af 	b.w	8006b68 <_fwalk_reent>
 8006a0a:	bf00      	nop
 8006a0c:	08006945 	.word	0x08006945

08006a10 <__sfmoreglue>:
 8006a10:	b570      	push	{r4, r5, r6, lr}
 8006a12:	1e4a      	subs	r2, r1, #1
 8006a14:	2568      	movs	r5, #104	; 0x68
 8006a16:	4355      	muls	r5, r2
 8006a18:	460e      	mov	r6, r1
 8006a1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a1e:	f7ff fa87 	bl	8005f30 <_malloc_r>
 8006a22:	4604      	mov	r4, r0
 8006a24:	b140      	cbz	r0, 8006a38 <__sfmoreglue+0x28>
 8006a26:	2100      	movs	r1, #0
 8006a28:	e9c0 1600 	strd	r1, r6, [r0]
 8006a2c:	300c      	adds	r0, #12
 8006a2e:	60a0      	str	r0, [r4, #8]
 8006a30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a34:	f7fd fb7a 	bl	800412c <memset>
 8006a38:	4620      	mov	r0, r4
 8006a3a:	bd70      	pop	{r4, r5, r6, pc}

08006a3c <__sfp_lock_acquire>:
 8006a3c:	4801      	ldr	r0, [pc, #4]	; (8006a44 <__sfp_lock_acquire+0x8>)
 8006a3e:	f000 b8b3 	b.w	8006ba8 <__retarget_lock_acquire_recursive>
 8006a42:	bf00      	nop
 8006a44:	20000298 	.word	0x20000298

08006a48 <__sfp_lock_release>:
 8006a48:	4801      	ldr	r0, [pc, #4]	; (8006a50 <__sfp_lock_release+0x8>)
 8006a4a:	f000 b8ae 	b.w	8006baa <__retarget_lock_release_recursive>
 8006a4e:	bf00      	nop
 8006a50:	20000298 	.word	0x20000298

08006a54 <__sinit_lock_acquire>:
 8006a54:	4801      	ldr	r0, [pc, #4]	; (8006a5c <__sinit_lock_acquire+0x8>)
 8006a56:	f000 b8a7 	b.w	8006ba8 <__retarget_lock_acquire_recursive>
 8006a5a:	bf00      	nop
 8006a5c:	20000293 	.word	0x20000293

08006a60 <__sinit_lock_release>:
 8006a60:	4801      	ldr	r0, [pc, #4]	; (8006a68 <__sinit_lock_release+0x8>)
 8006a62:	f000 b8a2 	b.w	8006baa <__retarget_lock_release_recursive>
 8006a66:	bf00      	nop
 8006a68:	20000293 	.word	0x20000293

08006a6c <__sinit>:
 8006a6c:	b510      	push	{r4, lr}
 8006a6e:	4604      	mov	r4, r0
 8006a70:	f7ff fff0 	bl	8006a54 <__sinit_lock_acquire>
 8006a74:	69a3      	ldr	r3, [r4, #24]
 8006a76:	b11b      	cbz	r3, 8006a80 <__sinit+0x14>
 8006a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a7c:	f7ff bff0 	b.w	8006a60 <__sinit_lock_release>
 8006a80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a84:	6523      	str	r3, [r4, #80]	; 0x50
 8006a86:	4b13      	ldr	r3, [pc, #76]	; (8006ad4 <__sinit+0x68>)
 8006a88:	4a13      	ldr	r2, [pc, #76]	; (8006ad8 <__sinit+0x6c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a8e:	42a3      	cmp	r3, r4
 8006a90:	bf04      	itt	eq
 8006a92:	2301      	moveq	r3, #1
 8006a94:	61a3      	streq	r3, [r4, #24]
 8006a96:	4620      	mov	r0, r4
 8006a98:	f000 f820 	bl	8006adc <__sfp>
 8006a9c:	6060      	str	r0, [r4, #4]
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f000 f81c 	bl	8006adc <__sfp>
 8006aa4:	60a0      	str	r0, [r4, #8]
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f000 f818 	bl	8006adc <__sfp>
 8006aac:	2200      	movs	r2, #0
 8006aae:	60e0      	str	r0, [r4, #12]
 8006ab0:	2104      	movs	r1, #4
 8006ab2:	6860      	ldr	r0, [r4, #4]
 8006ab4:	f7ff ff82 	bl	80069bc <std>
 8006ab8:	68a0      	ldr	r0, [r4, #8]
 8006aba:	2201      	movs	r2, #1
 8006abc:	2109      	movs	r1, #9
 8006abe:	f7ff ff7d 	bl	80069bc <std>
 8006ac2:	68e0      	ldr	r0, [r4, #12]
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	2112      	movs	r1, #18
 8006ac8:	f7ff ff78 	bl	80069bc <std>
 8006acc:	2301      	movs	r3, #1
 8006ace:	61a3      	str	r3, [r4, #24]
 8006ad0:	e7d2      	b.n	8006a78 <__sinit+0xc>
 8006ad2:	bf00      	nop
 8006ad4:	08007e44 	.word	0x08007e44
 8006ad8:	08006a05 	.word	0x08006a05

08006adc <__sfp>:
 8006adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ade:	4607      	mov	r7, r0
 8006ae0:	f7ff ffac 	bl	8006a3c <__sfp_lock_acquire>
 8006ae4:	4b1e      	ldr	r3, [pc, #120]	; (8006b60 <__sfp+0x84>)
 8006ae6:	681e      	ldr	r6, [r3, #0]
 8006ae8:	69b3      	ldr	r3, [r6, #24]
 8006aea:	b913      	cbnz	r3, 8006af2 <__sfp+0x16>
 8006aec:	4630      	mov	r0, r6
 8006aee:	f7ff ffbd 	bl	8006a6c <__sinit>
 8006af2:	3648      	adds	r6, #72	; 0x48
 8006af4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006af8:	3b01      	subs	r3, #1
 8006afa:	d503      	bpl.n	8006b04 <__sfp+0x28>
 8006afc:	6833      	ldr	r3, [r6, #0]
 8006afe:	b30b      	cbz	r3, 8006b44 <__sfp+0x68>
 8006b00:	6836      	ldr	r6, [r6, #0]
 8006b02:	e7f7      	b.n	8006af4 <__sfp+0x18>
 8006b04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b08:	b9d5      	cbnz	r5, 8006b40 <__sfp+0x64>
 8006b0a:	4b16      	ldr	r3, [pc, #88]	; (8006b64 <__sfp+0x88>)
 8006b0c:	60e3      	str	r3, [r4, #12]
 8006b0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b12:	6665      	str	r5, [r4, #100]	; 0x64
 8006b14:	f000 f847 	bl	8006ba6 <__retarget_lock_init_recursive>
 8006b18:	f7ff ff96 	bl	8006a48 <__sfp_lock_release>
 8006b1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006b20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b24:	6025      	str	r5, [r4, #0]
 8006b26:	61a5      	str	r5, [r4, #24]
 8006b28:	2208      	movs	r2, #8
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b30:	f7fd fafc 	bl	800412c <memset>
 8006b34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b40:	3468      	adds	r4, #104	; 0x68
 8006b42:	e7d9      	b.n	8006af8 <__sfp+0x1c>
 8006b44:	2104      	movs	r1, #4
 8006b46:	4638      	mov	r0, r7
 8006b48:	f7ff ff62 	bl	8006a10 <__sfmoreglue>
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	6030      	str	r0, [r6, #0]
 8006b50:	2800      	cmp	r0, #0
 8006b52:	d1d5      	bne.n	8006b00 <__sfp+0x24>
 8006b54:	f7ff ff78 	bl	8006a48 <__sfp_lock_release>
 8006b58:	230c      	movs	r3, #12
 8006b5a:	603b      	str	r3, [r7, #0]
 8006b5c:	e7ee      	b.n	8006b3c <__sfp+0x60>
 8006b5e:	bf00      	nop
 8006b60:	08007e44 	.word	0x08007e44
 8006b64:	ffff0001 	.word	0xffff0001

08006b68 <_fwalk_reent>:
 8006b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b6c:	4606      	mov	r6, r0
 8006b6e:	4688      	mov	r8, r1
 8006b70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b74:	2700      	movs	r7, #0
 8006b76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b7a:	f1b9 0901 	subs.w	r9, r9, #1
 8006b7e:	d505      	bpl.n	8006b8c <_fwalk_reent+0x24>
 8006b80:	6824      	ldr	r4, [r4, #0]
 8006b82:	2c00      	cmp	r4, #0
 8006b84:	d1f7      	bne.n	8006b76 <_fwalk_reent+0xe>
 8006b86:	4638      	mov	r0, r7
 8006b88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b8c:	89ab      	ldrh	r3, [r5, #12]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d907      	bls.n	8006ba2 <_fwalk_reent+0x3a>
 8006b92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b96:	3301      	adds	r3, #1
 8006b98:	d003      	beq.n	8006ba2 <_fwalk_reent+0x3a>
 8006b9a:	4629      	mov	r1, r5
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	47c0      	blx	r8
 8006ba0:	4307      	orrs	r7, r0
 8006ba2:	3568      	adds	r5, #104	; 0x68
 8006ba4:	e7e9      	b.n	8006b7a <_fwalk_reent+0x12>

08006ba6 <__retarget_lock_init_recursive>:
 8006ba6:	4770      	bx	lr

08006ba8 <__retarget_lock_acquire_recursive>:
 8006ba8:	4770      	bx	lr

08006baa <__retarget_lock_release_recursive>:
 8006baa:	4770      	bx	lr

08006bac <__swhatbuf_r>:
 8006bac:	b570      	push	{r4, r5, r6, lr}
 8006bae:	460e      	mov	r6, r1
 8006bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb4:	2900      	cmp	r1, #0
 8006bb6:	b096      	sub	sp, #88	; 0x58
 8006bb8:	4614      	mov	r4, r2
 8006bba:	461d      	mov	r5, r3
 8006bbc:	da07      	bge.n	8006bce <__swhatbuf_r+0x22>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	602b      	str	r3, [r5, #0]
 8006bc2:	89b3      	ldrh	r3, [r6, #12]
 8006bc4:	061a      	lsls	r2, r3, #24
 8006bc6:	d410      	bmi.n	8006bea <__swhatbuf_r+0x3e>
 8006bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bcc:	e00e      	b.n	8006bec <__swhatbuf_r+0x40>
 8006bce:	466a      	mov	r2, sp
 8006bd0:	f000 f902 	bl	8006dd8 <_fstat_r>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	dbf2      	blt.n	8006bbe <__swhatbuf_r+0x12>
 8006bd8:	9a01      	ldr	r2, [sp, #4]
 8006bda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006bde:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006be2:	425a      	negs	r2, r3
 8006be4:	415a      	adcs	r2, r3
 8006be6:	602a      	str	r2, [r5, #0]
 8006be8:	e7ee      	b.n	8006bc8 <__swhatbuf_r+0x1c>
 8006bea:	2340      	movs	r3, #64	; 0x40
 8006bec:	2000      	movs	r0, #0
 8006bee:	6023      	str	r3, [r4, #0]
 8006bf0:	b016      	add	sp, #88	; 0x58
 8006bf2:	bd70      	pop	{r4, r5, r6, pc}

08006bf4 <__smakebuf_r>:
 8006bf4:	898b      	ldrh	r3, [r1, #12]
 8006bf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bf8:	079d      	lsls	r5, r3, #30
 8006bfa:	4606      	mov	r6, r0
 8006bfc:	460c      	mov	r4, r1
 8006bfe:	d507      	bpl.n	8006c10 <__smakebuf_r+0x1c>
 8006c00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c04:	6023      	str	r3, [r4, #0]
 8006c06:	6123      	str	r3, [r4, #16]
 8006c08:	2301      	movs	r3, #1
 8006c0a:	6163      	str	r3, [r4, #20]
 8006c0c:	b002      	add	sp, #8
 8006c0e:	bd70      	pop	{r4, r5, r6, pc}
 8006c10:	ab01      	add	r3, sp, #4
 8006c12:	466a      	mov	r2, sp
 8006c14:	f7ff ffca 	bl	8006bac <__swhatbuf_r>
 8006c18:	9900      	ldr	r1, [sp, #0]
 8006c1a:	4605      	mov	r5, r0
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	f7ff f987 	bl	8005f30 <_malloc_r>
 8006c22:	b948      	cbnz	r0, 8006c38 <__smakebuf_r+0x44>
 8006c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c28:	059a      	lsls	r2, r3, #22
 8006c2a:	d4ef      	bmi.n	8006c0c <__smakebuf_r+0x18>
 8006c2c:	f023 0303 	bic.w	r3, r3, #3
 8006c30:	f043 0302 	orr.w	r3, r3, #2
 8006c34:	81a3      	strh	r3, [r4, #12]
 8006c36:	e7e3      	b.n	8006c00 <__smakebuf_r+0xc>
 8006c38:	4b0d      	ldr	r3, [pc, #52]	; (8006c70 <__smakebuf_r+0x7c>)
 8006c3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c3c:	89a3      	ldrh	r3, [r4, #12]
 8006c3e:	6020      	str	r0, [r4, #0]
 8006c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c44:	81a3      	strh	r3, [r4, #12]
 8006c46:	9b00      	ldr	r3, [sp, #0]
 8006c48:	6163      	str	r3, [r4, #20]
 8006c4a:	9b01      	ldr	r3, [sp, #4]
 8006c4c:	6120      	str	r0, [r4, #16]
 8006c4e:	b15b      	cbz	r3, 8006c68 <__smakebuf_r+0x74>
 8006c50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c54:	4630      	mov	r0, r6
 8006c56:	f000 f8d1 	bl	8006dfc <_isatty_r>
 8006c5a:	b128      	cbz	r0, 8006c68 <__smakebuf_r+0x74>
 8006c5c:	89a3      	ldrh	r3, [r4, #12]
 8006c5e:	f023 0303 	bic.w	r3, r3, #3
 8006c62:	f043 0301 	orr.w	r3, r3, #1
 8006c66:	81a3      	strh	r3, [r4, #12]
 8006c68:	89a0      	ldrh	r0, [r4, #12]
 8006c6a:	4305      	orrs	r5, r0
 8006c6c:	81a5      	strh	r5, [r4, #12]
 8006c6e:	e7cd      	b.n	8006c0c <__smakebuf_r+0x18>
 8006c70:	08006a05 	.word	0x08006a05

08006c74 <_malloc_usable_size_r>:
 8006c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c78:	1f18      	subs	r0, r3, #4
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	bfbc      	itt	lt
 8006c7e:	580b      	ldrlt	r3, [r1, r0]
 8006c80:	18c0      	addlt	r0, r0, r3
 8006c82:	4770      	bx	lr

08006c84 <_raise_r>:
 8006c84:	291f      	cmp	r1, #31
 8006c86:	b538      	push	{r3, r4, r5, lr}
 8006c88:	4604      	mov	r4, r0
 8006c8a:	460d      	mov	r5, r1
 8006c8c:	d904      	bls.n	8006c98 <_raise_r+0x14>
 8006c8e:	2316      	movs	r3, #22
 8006c90:	6003      	str	r3, [r0, #0]
 8006c92:	f04f 30ff 	mov.w	r0, #4294967295
 8006c96:	bd38      	pop	{r3, r4, r5, pc}
 8006c98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006c9a:	b112      	cbz	r2, 8006ca2 <_raise_r+0x1e>
 8006c9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ca0:	b94b      	cbnz	r3, 8006cb6 <_raise_r+0x32>
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f000 f830 	bl	8006d08 <_getpid_r>
 8006ca8:	462a      	mov	r2, r5
 8006caa:	4601      	mov	r1, r0
 8006cac:	4620      	mov	r0, r4
 8006cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cb2:	f000 b817 	b.w	8006ce4 <_kill_r>
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d00a      	beq.n	8006cd0 <_raise_r+0x4c>
 8006cba:	1c59      	adds	r1, r3, #1
 8006cbc:	d103      	bne.n	8006cc6 <_raise_r+0x42>
 8006cbe:	2316      	movs	r3, #22
 8006cc0:	6003      	str	r3, [r0, #0]
 8006cc2:	2001      	movs	r0, #1
 8006cc4:	e7e7      	b.n	8006c96 <_raise_r+0x12>
 8006cc6:	2400      	movs	r4, #0
 8006cc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ccc:	4628      	mov	r0, r5
 8006cce:	4798      	blx	r3
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	e7e0      	b.n	8006c96 <_raise_r+0x12>

08006cd4 <raise>:
 8006cd4:	4b02      	ldr	r3, [pc, #8]	; (8006ce0 <raise+0xc>)
 8006cd6:	4601      	mov	r1, r0
 8006cd8:	6818      	ldr	r0, [r3, #0]
 8006cda:	f7ff bfd3 	b.w	8006c84 <_raise_r>
 8006cde:	bf00      	nop
 8006ce0:	20000018 	.word	0x20000018

08006ce4 <_kill_r>:
 8006ce4:	b538      	push	{r3, r4, r5, lr}
 8006ce6:	4d07      	ldr	r5, [pc, #28]	; (8006d04 <_kill_r+0x20>)
 8006ce8:	2300      	movs	r3, #0
 8006cea:	4604      	mov	r4, r0
 8006cec:	4608      	mov	r0, r1
 8006cee:	4611      	mov	r1, r2
 8006cf0:	602b      	str	r3, [r5, #0]
 8006cf2:	f7fb f93b 	bl	8001f6c <_kill>
 8006cf6:	1c43      	adds	r3, r0, #1
 8006cf8:	d102      	bne.n	8006d00 <_kill_r+0x1c>
 8006cfa:	682b      	ldr	r3, [r5, #0]
 8006cfc:	b103      	cbz	r3, 8006d00 <_kill_r+0x1c>
 8006cfe:	6023      	str	r3, [r4, #0]
 8006d00:	bd38      	pop	{r3, r4, r5, pc}
 8006d02:	bf00      	nop
 8006d04:	2000028c 	.word	0x2000028c

08006d08 <_getpid_r>:
 8006d08:	f7fb b928 	b.w	8001f5c <_getpid>

08006d0c <__sread>:
 8006d0c:	b510      	push	{r4, lr}
 8006d0e:	460c      	mov	r4, r1
 8006d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d14:	f000 f894 	bl	8006e40 <_read_r>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	bfab      	itete	ge
 8006d1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d1e:	89a3      	ldrhlt	r3, [r4, #12]
 8006d20:	181b      	addge	r3, r3, r0
 8006d22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d26:	bfac      	ite	ge
 8006d28:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d2a:	81a3      	strhlt	r3, [r4, #12]
 8006d2c:	bd10      	pop	{r4, pc}

08006d2e <__swrite>:
 8006d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d32:	461f      	mov	r7, r3
 8006d34:	898b      	ldrh	r3, [r1, #12]
 8006d36:	05db      	lsls	r3, r3, #23
 8006d38:	4605      	mov	r5, r0
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	4616      	mov	r6, r2
 8006d3e:	d505      	bpl.n	8006d4c <__swrite+0x1e>
 8006d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d44:	2302      	movs	r3, #2
 8006d46:	2200      	movs	r2, #0
 8006d48:	f000 f868 	bl	8006e1c <_lseek_r>
 8006d4c:	89a3      	ldrh	r3, [r4, #12]
 8006d4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d56:	81a3      	strh	r3, [r4, #12]
 8006d58:	4632      	mov	r2, r6
 8006d5a:	463b      	mov	r3, r7
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d62:	f000 b817 	b.w	8006d94 <_write_r>

08006d66 <__sseek>:
 8006d66:	b510      	push	{r4, lr}
 8006d68:	460c      	mov	r4, r1
 8006d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d6e:	f000 f855 	bl	8006e1c <_lseek_r>
 8006d72:	1c43      	adds	r3, r0, #1
 8006d74:	89a3      	ldrh	r3, [r4, #12]
 8006d76:	bf15      	itete	ne
 8006d78:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d82:	81a3      	strheq	r3, [r4, #12]
 8006d84:	bf18      	it	ne
 8006d86:	81a3      	strhne	r3, [r4, #12]
 8006d88:	bd10      	pop	{r4, pc}

08006d8a <__sclose>:
 8006d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d8e:	f000 b813 	b.w	8006db8 <_close_r>
	...

08006d94 <_write_r>:
 8006d94:	b538      	push	{r3, r4, r5, lr}
 8006d96:	4d07      	ldr	r5, [pc, #28]	; (8006db4 <_write_r+0x20>)
 8006d98:	4604      	mov	r4, r0
 8006d9a:	4608      	mov	r0, r1
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	2200      	movs	r2, #0
 8006da0:	602a      	str	r2, [r5, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	f7fb f919 	bl	8001fda <_write>
 8006da8:	1c43      	adds	r3, r0, #1
 8006daa:	d102      	bne.n	8006db2 <_write_r+0x1e>
 8006dac:	682b      	ldr	r3, [r5, #0]
 8006dae:	b103      	cbz	r3, 8006db2 <_write_r+0x1e>
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	bd38      	pop	{r3, r4, r5, pc}
 8006db4:	2000028c 	.word	0x2000028c

08006db8 <_close_r>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	4d06      	ldr	r5, [pc, #24]	; (8006dd4 <_close_r+0x1c>)
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	4608      	mov	r0, r1
 8006dc2:	602b      	str	r3, [r5, #0]
 8006dc4:	f7fb f925 	bl	8002012 <_close>
 8006dc8:	1c43      	adds	r3, r0, #1
 8006dca:	d102      	bne.n	8006dd2 <_close_r+0x1a>
 8006dcc:	682b      	ldr	r3, [r5, #0]
 8006dce:	b103      	cbz	r3, 8006dd2 <_close_r+0x1a>
 8006dd0:	6023      	str	r3, [r4, #0]
 8006dd2:	bd38      	pop	{r3, r4, r5, pc}
 8006dd4:	2000028c 	.word	0x2000028c

08006dd8 <_fstat_r>:
 8006dd8:	b538      	push	{r3, r4, r5, lr}
 8006dda:	4d07      	ldr	r5, [pc, #28]	; (8006df8 <_fstat_r+0x20>)
 8006ddc:	2300      	movs	r3, #0
 8006dde:	4604      	mov	r4, r0
 8006de0:	4608      	mov	r0, r1
 8006de2:	4611      	mov	r1, r2
 8006de4:	602b      	str	r3, [r5, #0]
 8006de6:	f7fb f920 	bl	800202a <_fstat>
 8006dea:	1c43      	adds	r3, r0, #1
 8006dec:	d102      	bne.n	8006df4 <_fstat_r+0x1c>
 8006dee:	682b      	ldr	r3, [r5, #0]
 8006df0:	b103      	cbz	r3, 8006df4 <_fstat_r+0x1c>
 8006df2:	6023      	str	r3, [r4, #0]
 8006df4:	bd38      	pop	{r3, r4, r5, pc}
 8006df6:	bf00      	nop
 8006df8:	2000028c 	.word	0x2000028c

08006dfc <_isatty_r>:
 8006dfc:	b538      	push	{r3, r4, r5, lr}
 8006dfe:	4d06      	ldr	r5, [pc, #24]	; (8006e18 <_isatty_r+0x1c>)
 8006e00:	2300      	movs	r3, #0
 8006e02:	4604      	mov	r4, r0
 8006e04:	4608      	mov	r0, r1
 8006e06:	602b      	str	r3, [r5, #0]
 8006e08:	f7fb f91f 	bl	800204a <_isatty>
 8006e0c:	1c43      	adds	r3, r0, #1
 8006e0e:	d102      	bne.n	8006e16 <_isatty_r+0x1a>
 8006e10:	682b      	ldr	r3, [r5, #0]
 8006e12:	b103      	cbz	r3, 8006e16 <_isatty_r+0x1a>
 8006e14:	6023      	str	r3, [r4, #0]
 8006e16:	bd38      	pop	{r3, r4, r5, pc}
 8006e18:	2000028c 	.word	0x2000028c

08006e1c <_lseek_r>:
 8006e1c:	b538      	push	{r3, r4, r5, lr}
 8006e1e:	4d07      	ldr	r5, [pc, #28]	; (8006e3c <_lseek_r+0x20>)
 8006e20:	4604      	mov	r4, r0
 8006e22:	4608      	mov	r0, r1
 8006e24:	4611      	mov	r1, r2
 8006e26:	2200      	movs	r2, #0
 8006e28:	602a      	str	r2, [r5, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	f7fb f918 	bl	8002060 <_lseek>
 8006e30:	1c43      	adds	r3, r0, #1
 8006e32:	d102      	bne.n	8006e3a <_lseek_r+0x1e>
 8006e34:	682b      	ldr	r3, [r5, #0]
 8006e36:	b103      	cbz	r3, 8006e3a <_lseek_r+0x1e>
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	bd38      	pop	{r3, r4, r5, pc}
 8006e3c:	2000028c 	.word	0x2000028c

08006e40 <_read_r>:
 8006e40:	b538      	push	{r3, r4, r5, lr}
 8006e42:	4d07      	ldr	r5, [pc, #28]	; (8006e60 <_read_r+0x20>)
 8006e44:	4604      	mov	r4, r0
 8006e46:	4608      	mov	r0, r1
 8006e48:	4611      	mov	r1, r2
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	602a      	str	r2, [r5, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	f7fb f8a6 	bl	8001fa0 <_read>
 8006e54:	1c43      	adds	r3, r0, #1
 8006e56:	d102      	bne.n	8006e5e <_read_r+0x1e>
 8006e58:	682b      	ldr	r3, [r5, #0]
 8006e5a:	b103      	cbz	r3, 8006e5e <_read_r+0x1e>
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	bd38      	pop	{r3, r4, r5, pc}
 8006e60:	2000028c 	.word	0x2000028c

08006e64 <pow>:
 8006e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e68:	ec59 8b10 	vmov	r8, r9, d0
 8006e6c:	ec57 6b11 	vmov	r6, r7, d1
 8006e70:	f000 f8a6 	bl	8006fc0 <__ieee754_pow>
 8006e74:	4b4e      	ldr	r3, [pc, #312]	; (8006fb0 <pow+0x14c>)
 8006e76:	f993 3000 	ldrsb.w	r3, [r3]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	ec55 4b10 	vmov	r4, r5, d0
 8006e80:	d015      	beq.n	8006eae <pow+0x4a>
 8006e82:	4632      	mov	r2, r6
 8006e84:	463b      	mov	r3, r7
 8006e86:	4630      	mov	r0, r6
 8006e88:	4639      	mov	r1, r7
 8006e8a:	f7f9 fe5f 	bl	8000b4c <__aeabi_dcmpun>
 8006e8e:	b970      	cbnz	r0, 8006eae <pow+0x4a>
 8006e90:	4642      	mov	r2, r8
 8006e92:	464b      	mov	r3, r9
 8006e94:	4640      	mov	r0, r8
 8006e96:	4649      	mov	r1, r9
 8006e98:	f7f9 fe58 	bl	8000b4c <__aeabi_dcmpun>
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	b148      	cbz	r0, 8006eb6 <pow+0x52>
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	4639      	mov	r1, r7
 8006ea6:	f7f9 fe1f 	bl	8000ae8 <__aeabi_dcmpeq>
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	d17d      	bne.n	8006faa <pow+0x146>
 8006eae:	ec45 4b10 	vmov	d0, r4, r5
 8006eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eb6:	4640      	mov	r0, r8
 8006eb8:	4649      	mov	r1, r9
 8006eba:	f7f9 fe15 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ebe:	b1e0      	cbz	r0, 8006efa <pow+0x96>
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	4639      	mov	r1, r7
 8006ec8:	f7f9 fe0e 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	d16c      	bne.n	8006faa <pow+0x146>
 8006ed0:	ec47 6b10 	vmov	d0, r6, r7
 8006ed4:	f000 fe53 	bl	8007b7e <finite>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d0e8      	beq.n	8006eae <pow+0x4a>
 8006edc:	2200      	movs	r2, #0
 8006ede:	2300      	movs	r3, #0
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	4639      	mov	r1, r7
 8006ee4:	f7f9 fe0a 	bl	8000afc <__aeabi_dcmplt>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d0e0      	beq.n	8006eae <pow+0x4a>
 8006eec:	f7fd f8f4 	bl	80040d8 <__errno>
 8006ef0:	2321      	movs	r3, #33	; 0x21
 8006ef2:	6003      	str	r3, [r0, #0]
 8006ef4:	2400      	movs	r4, #0
 8006ef6:	4d2f      	ldr	r5, [pc, #188]	; (8006fb4 <pow+0x150>)
 8006ef8:	e7d9      	b.n	8006eae <pow+0x4a>
 8006efa:	ec45 4b10 	vmov	d0, r4, r5
 8006efe:	f000 fe3e 	bl	8007b7e <finite>
 8006f02:	bbb8      	cbnz	r0, 8006f74 <pow+0x110>
 8006f04:	ec49 8b10 	vmov	d0, r8, r9
 8006f08:	f000 fe39 	bl	8007b7e <finite>
 8006f0c:	b390      	cbz	r0, 8006f74 <pow+0x110>
 8006f0e:	ec47 6b10 	vmov	d0, r6, r7
 8006f12:	f000 fe34 	bl	8007b7e <finite>
 8006f16:	b368      	cbz	r0, 8006f74 <pow+0x110>
 8006f18:	4622      	mov	r2, r4
 8006f1a:	462b      	mov	r3, r5
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	4629      	mov	r1, r5
 8006f20:	f7f9 fe14 	bl	8000b4c <__aeabi_dcmpun>
 8006f24:	b160      	cbz	r0, 8006f40 <pow+0xdc>
 8006f26:	f7fd f8d7 	bl	80040d8 <__errno>
 8006f2a:	2321      	movs	r3, #33	; 0x21
 8006f2c:	6003      	str	r3, [r0, #0]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	2300      	movs	r3, #0
 8006f32:	4610      	mov	r0, r2
 8006f34:	4619      	mov	r1, r3
 8006f36:	f7f9 fc99 	bl	800086c <__aeabi_ddiv>
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	460d      	mov	r5, r1
 8006f3e:	e7b6      	b.n	8006eae <pow+0x4a>
 8006f40:	f7fd f8ca 	bl	80040d8 <__errno>
 8006f44:	2322      	movs	r3, #34	; 0x22
 8006f46:	6003      	str	r3, [r0, #0]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	4640      	mov	r0, r8
 8006f4e:	4649      	mov	r1, r9
 8006f50:	f7f9 fdd4 	bl	8000afc <__aeabi_dcmplt>
 8006f54:	2400      	movs	r4, #0
 8006f56:	b158      	cbz	r0, 8006f70 <pow+0x10c>
 8006f58:	ec47 6b10 	vmov	d0, r6, r7
 8006f5c:	f000 fe24 	bl	8007ba8 <rint>
 8006f60:	4632      	mov	r2, r6
 8006f62:	ec51 0b10 	vmov	r0, r1, d0
 8006f66:	463b      	mov	r3, r7
 8006f68:	f7f9 fdbe 	bl	8000ae8 <__aeabi_dcmpeq>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	d0c2      	beq.n	8006ef6 <pow+0x92>
 8006f70:	4d11      	ldr	r5, [pc, #68]	; (8006fb8 <pow+0x154>)
 8006f72:	e79c      	b.n	8006eae <pow+0x4a>
 8006f74:	2200      	movs	r2, #0
 8006f76:	2300      	movs	r3, #0
 8006f78:	4620      	mov	r0, r4
 8006f7a:	4629      	mov	r1, r5
 8006f7c:	f7f9 fdb4 	bl	8000ae8 <__aeabi_dcmpeq>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d094      	beq.n	8006eae <pow+0x4a>
 8006f84:	ec49 8b10 	vmov	d0, r8, r9
 8006f88:	f000 fdf9 	bl	8007b7e <finite>
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	d08e      	beq.n	8006eae <pow+0x4a>
 8006f90:	ec47 6b10 	vmov	d0, r6, r7
 8006f94:	f000 fdf3 	bl	8007b7e <finite>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d088      	beq.n	8006eae <pow+0x4a>
 8006f9c:	f7fd f89c 	bl	80040d8 <__errno>
 8006fa0:	2322      	movs	r3, #34	; 0x22
 8006fa2:	6003      	str	r3, [r0, #0]
 8006fa4:	2400      	movs	r4, #0
 8006fa6:	2500      	movs	r5, #0
 8006fa8:	e781      	b.n	8006eae <pow+0x4a>
 8006faa:	4d04      	ldr	r5, [pc, #16]	; (8006fbc <pow+0x158>)
 8006fac:	2400      	movs	r4, #0
 8006fae:	e77e      	b.n	8006eae <pow+0x4a>
 8006fb0:	200001e8 	.word	0x200001e8
 8006fb4:	fff00000 	.word	0xfff00000
 8006fb8:	7ff00000 	.word	0x7ff00000
 8006fbc:	3ff00000 	.word	0x3ff00000

08006fc0 <__ieee754_pow>:
 8006fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc4:	ed2d 8b06 	vpush	{d8-d10}
 8006fc8:	b08d      	sub	sp, #52	; 0x34
 8006fca:	ed8d 1b02 	vstr	d1, [sp, #8]
 8006fce:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8006fd2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006fd6:	ea56 0100 	orrs.w	r1, r6, r0
 8006fda:	ec53 2b10 	vmov	r2, r3, d0
 8006fde:	f000 84d1 	beq.w	8007984 <__ieee754_pow+0x9c4>
 8006fe2:	497f      	ldr	r1, [pc, #508]	; (80071e0 <__ieee754_pow+0x220>)
 8006fe4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8006fe8:	428c      	cmp	r4, r1
 8006fea:	ee10 8a10 	vmov	r8, s0
 8006fee:	4699      	mov	r9, r3
 8006ff0:	dc09      	bgt.n	8007006 <__ieee754_pow+0x46>
 8006ff2:	d103      	bne.n	8006ffc <__ieee754_pow+0x3c>
 8006ff4:	b97a      	cbnz	r2, 8007016 <__ieee754_pow+0x56>
 8006ff6:	42a6      	cmp	r6, r4
 8006ff8:	dd02      	ble.n	8007000 <__ieee754_pow+0x40>
 8006ffa:	e00c      	b.n	8007016 <__ieee754_pow+0x56>
 8006ffc:	428e      	cmp	r6, r1
 8006ffe:	dc02      	bgt.n	8007006 <__ieee754_pow+0x46>
 8007000:	428e      	cmp	r6, r1
 8007002:	d110      	bne.n	8007026 <__ieee754_pow+0x66>
 8007004:	b178      	cbz	r0, 8007026 <__ieee754_pow+0x66>
 8007006:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800700a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800700e:	ea54 0308 	orrs.w	r3, r4, r8
 8007012:	f000 84b7 	beq.w	8007984 <__ieee754_pow+0x9c4>
 8007016:	4873      	ldr	r0, [pc, #460]	; (80071e4 <__ieee754_pow+0x224>)
 8007018:	b00d      	add	sp, #52	; 0x34
 800701a:	ecbd 8b06 	vpop	{d8-d10}
 800701e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007022:	f000 bdb9 	b.w	8007b98 <nan>
 8007026:	f1b9 0f00 	cmp.w	r9, #0
 800702a:	da36      	bge.n	800709a <__ieee754_pow+0xda>
 800702c:	496e      	ldr	r1, [pc, #440]	; (80071e8 <__ieee754_pow+0x228>)
 800702e:	428e      	cmp	r6, r1
 8007030:	dc51      	bgt.n	80070d6 <__ieee754_pow+0x116>
 8007032:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8007036:	428e      	cmp	r6, r1
 8007038:	f340 84af 	ble.w	800799a <__ieee754_pow+0x9da>
 800703c:	1531      	asrs	r1, r6, #20
 800703e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007042:	2914      	cmp	r1, #20
 8007044:	dd0f      	ble.n	8007066 <__ieee754_pow+0xa6>
 8007046:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800704a:	fa20 fc01 	lsr.w	ip, r0, r1
 800704e:	fa0c f101 	lsl.w	r1, ip, r1
 8007052:	4281      	cmp	r1, r0
 8007054:	f040 84a1 	bne.w	800799a <__ieee754_pow+0x9da>
 8007058:	f00c 0c01 	and.w	ip, ip, #1
 800705c:	f1cc 0102 	rsb	r1, ip, #2
 8007060:	9100      	str	r1, [sp, #0]
 8007062:	b180      	cbz	r0, 8007086 <__ieee754_pow+0xc6>
 8007064:	e059      	b.n	800711a <__ieee754_pow+0x15a>
 8007066:	2800      	cmp	r0, #0
 8007068:	d155      	bne.n	8007116 <__ieee754_pow+0x156>
 800706a:	f1c1 0114 	rsb	r1, r1, #20
 800706e:	fa46 fc01 	asr.w	ip, r6, r1
 8007072:	fa0c f101 	lsl.w	r1, ip, r1
 8007076:	42b1      	cmp	r1, r6
 8007078:	f040 848c 	bne.w	8007994 <__ieee754_pow+0x9d4>
 800707c:	f00c 0c01 	and.w	ip, ip, #1
 8007080:	f1cc 0102 	rsb	r1, ip, #2
 8007084:	9100      	str	r1, [sp, #0]
 8007086:	4959      	ldr	r1, [pc, #356]	; (80071ec <__ieee754_pow+0x22c>)
 8007088:	428e      	cmp	r6, r1
 800708a:	d12d      	bne.n	80070e8 <__ieee754_pow+0x128>
 800708c:	2f00      	cmp	r7, #0
 800708e:	da79      	bge.n	8007184 <__ieee754_pow+0x1c4>
 8007090:	4956      	ldr	r1, [pc, #344]	; (80071ec <__ieee754_pow+0x22c>)
 8007092:	2000      	movs	r0, #0
 8007094:	f7f9 fbea 	bl	800086c <__aeabi_ddiv>
 8007098:	e016      	b.n	80070c8 <__ieee754_pow+0x108>
 800709a:	2100      	movs	r1, #0
 800709c:	9100      	str	r1, [sp, #0]
 800709e:	2800      	cmp	r0, #0
 80070a0:	d13b      	bne.n	800711a <__ieee754_pow+0x15a>
 80070a2:	494f      	ldr	r1, [pc, #316]	; (80071e0 <__ieee754_pow+0x220>)
 80070a4:	428e      	cmp	r6, r1
 80070a6:	d1ee      	bne.n	8007086 <__ieee754_pow+0xc6>
 80070a8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80070ac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80070b0:	ea53 0308 	orrs.w	r3, r3, r8
 80070b4:	f000 8466 	beq.w	8007984 <__ieee754_pow+0x9c4>
 80070b8:	4b4d      	ldr	r3, [pc, #308]	; (80071f0 <__ieee754_pow+0x230>)
 80070ba:	429c      	cmp	r4, r3
 80070bc:	dd0d      	ble.n	80070da <__ieee754_pow+0x11a>
 80070be:	2f00      	cmp	r7, #0
 80070c0:	f280 8464 	bge.w	800798c <__ieee754_pow+0x9cc>
 80070c4:	2000      	movs	r0, #0
 80070c6:	2100      	movs	r1, #0
 80070c8:	ec41 0b10 	vmov	d0, r0, r1
 80070cc:	b00d      	add	sp, #52	; 0x34
 80070ce:	ecbd 8b06 	vpop	{d8-d10}
 80070d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d6:	2102      	movs	r1, #2
 80070d8:	e7e0      	b.n	800709c <__ieee754_pow+0xdc>
 80070da:	2f00      	cmp	r7, #0
 80070dc:	daf2      	bge.n	80070c4 <__ieee754_pow+0x104>
 80070de:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80070e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80070e6:	e7ef      	b.n	80070c8 <__ieee754_pow+0x108>
 80070e8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80070ec:	d104      	bne.n	80070f8 <__ieee754_pow+0x138>
 80070ee:	4610      	mov	r0, r2
 80070f0:	4619      	mov	r1, r3
 80070f2:	f7f9 fa91 	bl	8000618 <__aeabi_dmul>
 80070f6:	e7e7      	b.n	80070c8 <__ieee754_pow+0x108>
 80070f8:	493e      	ldr	r1, [pc, #248]	; (80071f4 <__ieee754_pow+0x234>)
 80070fa:	428f      	cmp	r7, r1
 80070fc:	d10d      	bne.n	800711a <__ieee754_pow+0x15a>
 80070fe:	f1b9 0f00 	cmp.w	r9, #0
 8007102:	db0a      	blt.n	800711a <__ieee754_pow+0x15a>
 8007104:	ec43 2b10 	vmov	d0, r2, r3
 8007108:	b00d      	add	sp, #52	; 0x34
 800710a:	ecbd 8b06 	vpop	{d8-d10}
 800710e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007112:	f000 bc77 	b.w	8007a04 <__ieee754_sqrt>
 8007116:	2100      	movs	r1, #0
 8007118:	9100      	str	r1, [sp, #0]
 800711a:	ec43 2b10 	vmov	d0, r2, r3
 800711e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007122:	f000 fd23 	bl	8007b6c <fabs>
 8007126:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800712a:	ec51 0b10 	vmov	r0, r1, d0
 800712e:	f1b8 0f00 	cmp.w	r8, #0
 8007132:	d12a      	bne.n	800718a <__ieee754_pow+0x1ca>
 8007134:	b12c      	cbz	r4, 8007142 <__ieee754_pow+0x182>
 8007136:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80071ec <__ieee754_pow+0x22c>
 800713a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800713e:	45e6      	cmp	lr, ip
 8007140:	d123      	bne.n	800718a <__ieee754_pow+0x1ca>
 8007142:	2f00      	cmp	r7, #0
 8007144:	da05      	bge.n	8007152 <__ieee754_pow+0x192>
 8007146:	4602      	mov	r2, r0
 8007148:	460b      	mov	r3, r1
 800714a:	2000      	movs	r0, #0
 800714c:	4927      	ldr	r1, [pc, #156]	; (80071ec <__ieee754_pow+0x22c>)
 800714e:	f7f9 fb8d 	bl	800086c <__aeabi_ddiv>
 8007152:	f1b9 0f00 	cmp.w	r9, #0
 8007156:	dab7      	bge.n	80070c8 <__ieee754_pow+0x108>
 8007158:	9b00      	ldr	r3, [sp, #0]
 800715a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800715e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007162:	4323      	orrs	r3, r4
 8007164:	d108      	bne.n	8007178 <__ieee754_pow+0x1b8>
 8007166:	4602      	mov	r2, r0
 8007168:	460b      	mov	r3, r1
 800716a:	4610      	mov	r0, r2
 800716c:	4619      	mov	r1, r3
 800716e:	f7f9 f89b 	bl	80002a8 <__aeabi_dsub>
 8007172:	4602      	mov	r2, r0
 8007174:	460b      	mov	r3, r1
 8007176:	e78d      	b.n	8007094 <__ieee754_pow+0xd4>
 8007178:	9b00      	ldr	r3, [sp, #0]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d1a4      	bne.n	80070c8 <__ieee754_pow+0x108>
 800717e:	4602      	mov	r2, r0
 8007180:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007184:	4610      	mov	r0, r2
 8007186:	4619      	mov	r1, r3
 8007188:	e79e      	b.n	80070c8 <__ieee754_pow+0x108>
 800718a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800718e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8007192:	950a      	str	r5, [sp, #40]	; 0x28
 8007194:	9d00      	ldr	r5, [sp, #0]
 8007196:	46ac      	mov	ip, r5
 8007198:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800719a:	ea5c 0505 	orrs.w	r5, ip, r5
 800719e:	d0e4      	beq.n	800716a <__ieee754_pow+0x1aa>
 80071a0:	4b15      	ldr	r3, [pc, #84]	; (80071f8 <__ieee754_pow+0x238>)
 80071a2:	429e      	cmp	r6, r3
 80071a4:	f340 80fc 	ble.w	80073a0 <__ieee754_pow+0x3e0>
 80071a8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80071ac:	429e      	cmp	r6, r3
 80071ae:	4b10      	ldr	r3, [pc, #64]	; (80071f0 <__ieee754_pow+0x230>)
 80071b0:	dd07      	ble.n	80071c2 <__ieee754_pow+0x202>
 80071b2:	429c      	cmp	r4, r3
 80071b4:	dc0a      	bgt.n	80071cc <__ieee754_pow+0x20c>
 80071b6:	2f00      	cmp	r7, #0
 80071b8:	da84      	bge.n	80070c4 <__ieee754_pow+0x104>
 80071ba:	a307      	add	r3, pc, #28	; (adr r3, 80071d8 <__ieee754_pow+0x218>)
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	e795      	b.n	80070ee <__ieee754_pow+0x12e>
 80071c2:	429c      	cmp	r4, r3
 80071c4:	dbf7      	blt.n	80071b6 <__ieee754_pow+0x1f6>
 80071c6:	4b09      	ldr	r3, [pc, #36]	; (80071ec <__ieee754_pow+0x22c>)
 80071c8:	429c      	cmp	r4, r3
 80071ca:	dd17      	ble.n	80071fc <__ieee754_pow+0x23c>
 80071cc:	2f00      	cmp	r7, #0
 80071ce:	dcf4      	bgt.n	80071ba <__ieee754_pow+0x1fa>
 80071d0:	e778      	b.n	80070c4 <__ieee754_pow+0x104>
 80071d2:	bf00      	nop
 80071d4:	f3af 8000 	nop.w
 80071d8:	8800759c 	.word	0x8800759c
 80071dc:	7e37e43c 	.word	0x7e37e43c
 80071e0:	7ff00000 	.word	0x7ff00000
 80071e4:	080080b8 	.word	0x080080b8
 80071e8:	433fffff 	.word	0x433fffff
 80071ec:	3ff00000 	.word	0x3ff00000
 80071f0:	3fefffff 	.word	0x3fefffff
 80071f4:	3fe00000 	.word	0x3fe00000
 80071f8:	41e00000 	.word	0x41e00000
 80071fc:	4b64      	ldr	r3, [pc, #400]	; (8007390 <__ieee754_pow+0x3d0>)
 80071fe:	2200      	movs	r2, #0
 8007200:	f7f9 f852 	bl	80002a8 <__aeabi_dsub>
 8007204:	a356      	add	r3, pc, #344	; (adr r3, 8007360 <__ieee754_pow+0x3a0>)
 8007206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720a:	4604      	mov	r4, r0
 800720c:	460d      	mov	r5, r1
 800720e:	f7f9 fa03 	bl	8000618 <__aeabi_dmul>
 8007212:	a355      	add	r3, pc, #340	; (adr r3, 8007368 <__ieee754_pow+0x3a8>)
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	4606      	mov	r6, r0
 800721a:	460f      	mov	r7, r1
 800721c:	4620      	mov	r0, r4
 800721e:	4629      	mov	r1, r5
 8007220:	f7f9 f9fa 	bl	8000618 <__aeabi_dmul>
 8007224:	4b5b      	ldr	r3, [pc, #364]	; (8007394 <__ieee754_pow+0x3d4>)
 8007226:	4682      	mov	sl, r0
 8007228:	468b      	mov	fp, r1
 800722a:	2200      	movs	r2, #0
 800722c:	4620      	mov	r0, r4
 800722e:	4629      	mov	r1, r5
 8007230:	f7f9 f9f2 	bl	8000618 <__aeabi_dmul>
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	a14d      	add	r1, pc, #308	; (adr r1, 8007370 <__ieee754_pow+0x3b0>)
 800723a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800723e:	f7f9 f833 	bl	80002a8 <__aeabi_dsub>
 8007242:	4622      	mov	r2, r4
 8007244:	462b      	mov	r3, r5
 8007246:	f7f9 f9e7 	bl	8000618 <__aeabi_dmul>
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	2000      	movs	r0, #0
 8007250:	4951      	ldr	r1, [pc, #324]	; (8007398 <__ieee754_pow+0x3d8>)
 8007252:	f7f9 f829 	bl	80002a8 <__aeabi_dsub>
 8007256:	4622      	mov	r2, r4
 8007258:	4680      	mov	r8, r0
 800725a:	4689      	mov	r9, r1
 800725c:	462b      	mov	r3, r5
 800725e:	4620      	mov	r0, r4
 8007260:	4629      	mov	r1, r5
 8007262:	f7f9 f9d9 	bl	8000618 <__aeabi_dmul>
 8007266:	4602      	mov	r2, r0
 8007268:	460b      	mov	r3, r1
 800726a:	4640      	mov	r0, r8
 800726c:	4649      	mov	r1, r9
 800726e:	f7f9 f9d3 	bl	8000618 <__aeabi_dmul>
 8007272:	a341      	add	r3, pc, #260	; (adr r3, 8007378 <__ieee754_pow+0x3b8>)
 8007274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007278:	f7f9 f9ce 	bl	8000618 <__aeabi_dmul>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4650      	mov	r0, sl
 8007282:	4659      	mov	r1, fp
 8007284:	f7f9 f810 	bl	80002a8 <__aeabi_dsub>
 8007288:	4602      	mov	r2, r0
 800728a:	460b      	mov	r3, r1
 800728c:	4680      	mov	r8, r0
 800728e:	4689      	mov	r9, r1
 8007290:	4630      	mov	r0, r6
 8007292:	4639      	mov	r1, r7
 8007294:	f7f9 f80a 	bl	80002ac <__adddf3>
 8007298:	2400      	movs	r4, #0
 800729a:	4632      	mov	r2, r6
 800729c:	463b      	mov	r3, r7
 800729e:	4620      	mov	r0, r4
 80072a0:	460d      	mov	r5, r1
 80072a2:	f7f9 f801 	bl	80002a8 <__aeabi_dsub>
 80072a6:	4602      	mov	r2, r0
 80072a8:	460b      	mov	r3, r1
 80072aa:	4640      	mov	r0, r8
 80072ac:	4649      	mov	r1, r9
 80072ae:	f7f8 fffb 	bl	80002a8 <__aeabi_dsub>
 80072b2:	9b00      	ldr	r3, [sp, #0]
 80072b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072b6:	3b01      	subs	r3, #1
 80072b8:	4313      	orrs	r3, r2
 80072ba:	4682      	mov	sl, r0
 80072bc:	468b      	mov	fp, r1
 80072be:	f040 81f1 	bne.w	80076a4 <__ieee754_pow+0x6e4>
 80072c2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007380 <__ieee754_pow+0x3c0>
 80072c6:	eeb0 8a47 	vmov.f32	s16, s14
 80072ca:	eef0 8a67 	vmov.f32	s17, s15
 80072ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80072d2:	2600      	movs	r6, #0
 80072d4:	4632      	mov	r2, r6
 80072d6:	463b      	mov	r3, r7
 80072d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072dc:	f7f8 ffe4 	bl	80002a8 <__aeabi_dsub>
 80072e0:	4622      	mov	r2, r4
 80072e2:	462b      	mov	r3, r5
 80072e4:	f7f9 f998 	bl	8000618 <__aeabi_dmul>
 80072e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072ec:	4680      	mov	r8, r0
 80072ee:	4689      	mov	r9, r1
 80072f0:	4650      	mov	r0, sl
 80072f2:	4659      	mov	r1, fp
 80072f4:	f7f9 f990 	bl	8000618 <__aeabi_dmul>
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	4640      	mov	r0, r8
 80072fe:	4649      	mov	r1, r9
 8007300:	f7f8 ffd4 	bl	80002ac <__adddf3>
 8007304:	4632      	mov	r2, r6
 8007306:	463b      	mov	r3, r7
 8007308:	4680      	mov	r8, r0
 800730a:	4689      	mov	r9, r1
 800730c:	4620      	mov	r0, r4
 800730e:	4629      	mov	r1, r5
 8007310:	f7f9 f982 	bl	8000618 <__aeabi_dmul>
 8007314:	460b      	mov	r3, r1
 8007316:	4604      	mov	r4, r0
 8007318:	460d      	mov	r5, r1
 800731a:	4602      	mov	r2, r0
 800731c:	4649      	mov	r1, r9
 800731e:	4640      	mov	r0, r8
 8007320:	f7f8 ffc4 	bl	80002ac <__adddf3>
 8007324:	4b1d      	ldr	r3, [pc, #116]	; (800739c <__ieee754_pow+0x3dc>)
 8007326:	4299      	cmp	r1, r3
 8007328:	ec45 4b19 	vmov	d9, r4, r5
 800732c:	4606      	mov	r6, r0
 800732e:	460f      	mov	r7, r1
 8007330:	468b      	mov	fp, r1
 8007332:	f340 82fe 	ble.w	8007932 <__ieee754_pow+0x972>
 8007336:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800733a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800733e:	4303      	orrs	r3, r0
 8007340:	f000 81f0 	beq.w	8007724 <__ieee754_pow+0x764>
 8007344:	a310      	add	r3, pc, #64	; (adr r3, 8007388 <__ieee754_pow+0x3c8>)
 8007346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734a:	ec51 0b18 	vmov	r0, r1, d8
 800734e:	f7f9 f963 	bl	8000618 <__aeabi_dmul>
 8007352:	a30d      	add	r3, pc, #52	; (adr r3, 8007388 <__ieee754_pow+0x3c8>)
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	e6cb      	b.n	80070f2 <__ieee754_pow+0x132>
 800735a:	bf00      	nop
 800735c:	f3af 8000 	nop.w
 8007360:	60000000 	.word	0x60000000
 8007364:	3ff71547 	.word	0x3ff71547
 8007368:	f85ddf44 	.word	0xf85ddf44
 800736c:	3e54ae0b 	.word	0x3e54ae0b
 8007370:	55555555 	.word	0x55555555
 8007374:	3fd55555 	.word	0x3fd55555
 8007378:	652b82fe 	.word	0x652b82fe
 800737c:	3ff71547 	.word	0x3ff71547
 8007380:	00000000 	.word	0x00000000
 8007384:	bff00000 	.word	0xbff00000
 8007388:	8800759c 	.word	0x8800759c
 800738c:	7e37e43c 	.word	0x7e37e43c
 8007390:	3ff00000 	.word	0x3ff00000
 8007394:	3fd00000 	.word	0x3fd00000
 8007398:	3fe00000 	.word	0x3fe00000
 800739c:	408fffff 	.word	0x408fffff
 80073a0:	4bd7      	ldr	r3, [pc, #860]	; (8007700 <__ieee754_pow+0x740>)
 80073a2:	ea03 0309 	and.w	r3, r3, r9
 80073a6:	2200      	movs	r2, #0
 80073a8:	b92b      	cbnz	r3, 80073b6 <__ieee754_pow+0x3f6>
 80073aa:	4bd6      	ldr	r3, [pc, #856]	; (8007704 <__ieee754_pow+0x744>)
 80073ac:	f7f9 f934 	bl	8000618 <__aeabi_dmul>
 80073b0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80073b4:	460c      	mov	r4, r1
 80073b6:	1523      	asrs	r3, r4, #20
 80073b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80073bc:	4413      	add	r3, r2
 80073be:	9309      	str	r3, [sp, #36]	; 0x24
 80073c0:	4bd1      	ldr	r3, [pc, #836]	; (8007708 <__ieee754_pow+0x748>)
 80073c2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80073c6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80073ca:	429c      	cmp	r4, r3
 80073cc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80073d0:	dd08      	ble.n	80073e4 <__ieee754_pow+0x424>
 80073d2:	4bce      	ldr	r3, [pc, #824]	; (800770c <__ieee754_pow+0x74c>)
 80073d4:	429c      	cmp	r4, r3
 80073d6:	f340 8163 	ble.w	80076a0 <__ieee754_pow+0x6e0>
 80073da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073dc:	3301      	adds	r3, #1
 80073de:	9309      	str	r3, [sp, #36]	; 0x24
 80073e0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80073e4:	2400      	movs	r4, #0
 80073e6:	00e3      	lsls	r3, r4, #3
 80073e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80073ea:	4bc9      	ldr	r3, [pc, #804]	; (8007710 <__ieee754_pow+0x750>)
 80073ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80073f0:	ed93 7b00 	vldr	d7, [r3]
 80073f4:	4629      	mov	r1, r5
 80073f6:	ec53 2b17 	vmov	r2, r3, d7
 80073fa:	eeb0 8a47 	vmov.f32	s16, s14
 80073fe:	eef0 8a67 	vmov.f32	s17, s15
 8007402:	4682      	mov	sl, r0
 8007404:	f7f8 ff50 	bl	80002a8 <__aeabi_dsub>
 8007408:	4652      	mov	r2, sl
 800740a:	4606      	mov	r6, r0
 800740c:	460f      	mov	r7, r1
 800740e:	462b      	mov	r3, r5
 8007410:	ec51 0b18 	vmov	r0, r1, d8
 8007414:	f7f8 ff4a 	bl	80002ac <__adddf3>
 8007418:	4602      	mov	r2, r0
 800741a:	460b      	mov	r3, r1
 800741c:	2000      	movs	r0, #0
 800741e:	49bd      	ldr	r1, [pc, #756]	; (8007714 <__ieee754_pow+0x754>)
 8007420:	f7f9 fa24 	bl	800086c <__aeabi_ddiv>
 8007424:	ec41 0b19 	vmov	d9, r0, r1
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	4630      	mov	r0, r6
 800742e:	4639      	mov	r1, r7
 8007430:	f7f9 f8f2 	bl	8000618 <__aeabi_dmul>
 8007434:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007438:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800743c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007440:	2300      	movs	r3, #0
 8007442:	9304      	str	r3, [sp, #16]
 8007444:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007448:	46ab      	mov	fp, r5
 800744a:	106d      	asrs	r5, r5, #1
 800744c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007450:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007454:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007458:	2200      	movs	r2, #0
 800745a:	4640      	mov	r0, r8
 800745c:	4649      	mov	r1, r9
 800745e:	4614      	mov	r4, r2
 8007460:	461d      	mov	r5, r3
 8007462:	f7f9 f8d9 	bl	8000618 <__aeabi_dmul>
 8007466:	4602      	mov	r2, r0
 8007468:	460b      	mov	r3, r1
 800746a:	4630      	mov	r0, r6
 800746c:	4639      	mov	r1, r7
 800746e:	f7f8 ff1b 	bl	80002a8 <__aeabi_dsub>
 8007472:	ec53 2b18 	vmov	r2, r3, d8
 8007476:	4606      	mov	r6, r0
 8007478:	460f      	mov	r7, r1
 800747a:	4620      	mov	r0, r4
 800747c:	4629      	mov	r1, r5
 800747e:	f7f8 ff13 	bl	80002a8 <__aeabi_dsub>
 8007482:	4602      	mov	r2, r0
 8007484:	460b      	mov	r3, r1
 8007486:	4650      	mov	r0, sl
 8007488:	4659      	mov	r1, fp
 800748a:	f7f8 ff0d 	bl	80002a8 <__aeabi_dsub>
 800748e:	4642      	mov	r2, r8
 8007490:	464b      	mov	r3, r9
 8007492:	f7f9 f8c1 	bl	8000618 <__aeabi_dmul>
 8007496:	4602      	mov	r2, r0
 8007498:	460b      	mov	r3, r1
 800749a:	4630      	mov	r0, r6
 800749c:	4639      	mov	r1, r7
 800749e:	f7f8 ff03 	bl	80002a8 <__aeabi_dsub>
 80074a2:	ec53 2b19 	vmov	r2, r3, d9
 80074a6:	f7f9 f8b7 	bl	8000618 <__aeabi_dmul>
 80074aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074ae:	ec41 0b18 	vmov	d8, r0, r1
 80074b2:	4610      	mov	r0, r2
 80074b4:	4619      	mov	r1, r3
 80074b6:	f7f9 f8af 	bl	8000618 <__aeabi_dmul>
 80074ba:	a37d      	add	r3, pc, #500	; (adr r3, 80076b0 <__ieee754_pow+0x6f0>)
 80074bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c0:	4604      	mov	r4, r0
 80074c2:	460d      	mov	r5, r1
 80074c4:	f7f9 f8a8 	bl	8000618 <__aeabi_dmul>
 80074c8:	a37b      	add	r3, pc, #492	; (adr r3, 80076b8 <__ieee754_pow+0x6f8>)
 80074ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ce:	f7f8 feed 	bl	80002ac <__adddf3>
 80074d2:	4622      	mov	r2, r4
 80074d4:	462b      	mov	r3, r5
 80074d6:	f7f9 f89f 	bl	8000618 <__aeabi_dmul>
 80074da:	a379      	add	r3, pc, #484	; (adr r3, 80076c0 <__ieee754_pow+0x700>)
 80074dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e0:	f7f8 fee4 	bl	80002ac <__adddf3>
 80074e4:	4622      	mov	r2, r4
 80074e6:	462b      	mov	r3, r5
 80074e8:	f7f9 f896 	bl	8000618 <__aeabi_dmul>
 80074ec:	a376      	add	r3, pc, #472	; (adr r3, 80076c8 <__ieee754_pow+0x708>)
 80074ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f2:	f7f8 fedb 	bl	80002ac <__adddf3>
 80074f6:	4622      	mov	r2, r4
 80074f8:	462b      	mov	r3, r5
 80074fa:	f7f9 f88d 	bl	8000618 <__aeabi_dmul>
 80074fe:	a374      	add	r3, pc, #464	; (adr r3, 80076d0 <__ieee754_pow+0x710>)
 8007500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007504:	f7f8 fed2 	bl	80002ac <__adddf3>
 8007508:	4622      	mov	r2, r4
 800750a:	462b      	mov	r3, r5
 800750c:	f7f9 f884 	bl	8000618 <__aeabi_dmul>
 8007510:	a371      	add	r3, pc, #452	; (adr r3, 80076d8 <__ieee754_pow+0x718>)
 8007512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007516:	f7f8 fec9 	bl	80002ac <__adddf3>
 800751a:	4622      	mov	r2, r4
 800751c:	4606      	mov	r6, r0
 800751e:	460f      	mov	r7, r1
 8007520:	462b      	mov	r3, r5
 8007522:	4620      	mov	r0, r4
 8007524:	4629      	mov	r1, r5
 8007526:	f7f9 f877 	bl	8000618 <__aeabi_dmul>
 800752a:	4602      	mov	r2, r0
 800752c:	460b      	mov	r3, r1
 800752e:	4630      	mov	r0, r6
 8007530:	4639      	mov	r1, r7
 8007532:	f7f9 f871 	bl	8000618 <__aeabi_dmul>
 8007536:	4642      	mov	r2, r8
 8007538:	4604      	mov	r4, r0
 800753a:	460d      	mov	r5, r1
 800753c:	464b      	mov	r3, r9
 800753e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007542:	f7f8 feb3 	bl	80002ac <__adddf3>
 8007546:	ec53 2b18 	vmov	r2, r3, d8
 800754a:	f7f9 f865 	bl	8000618 <__aeabi_dmul>
 800754e:	4622      	mov	r2, r4
 8007550:	462b      	mov	r3, r5
 8007552:	f7f8 feab 	bl	80002ac <__adddf3>
 8007556:	4642      	mov	r2, r8
 8007558:	4682      	mov	sl, r0
 800755a:	468b      	mov	fp, r1
 800755c:	464b      	mov	r3, r9
 800755e:	4640      	mov	r0, r8
 8007560:	4649      	mov	r1, r9
 8007562:	f7f9 f859 	bl	8000618 <__aeabi_dmul>
 8007566:	4b6c      	ldr	r3, [pc, #432]	; (8007718 <__ieee754_pow+0x758>)
 8007568:	2200      	movs	r2, #0
 800756a:	4606      	mov	r6, r0
 800756c:	460f      	mov	r7, r1
 800756e:	f7f8 fe9d 	bl	80002ac <__adddf3>
 8007572:	4652      	mov	r2, sl
 8007574:	465b      	mov	r3, fp
 8007576:	f7f8 fe99 	bl	80002ac <__adddf3>
 800757a:	9c04      	ldr	r4, [sp, #16]
 800757c:	460d      	mov	r5, r1
 800757e:	4622      	mov	r2, r4
 8007580:	460b      	mov	r3, r1
 8007582:	4640      	mov	r0, r8
 8007584:	4649      	mov	r1, r9
 8007586:	f7f9 f847 	bl	8000618 <__aeabi_dmul>
 800758a:	4b63      	ldr	r3, [pc, #396]	; (8007718 <__ieee754_pow+0x758>)
 800758c:	4680      	mov	r8, r0
 800758e:	4689      	mov	r9, r1
 8007590:	2200      	movs	r2, #0
 8007592:	4620      	mov	r0, r4
 8007594:	4629      	mov	r1, r5
 8007596:	f7f8 fe87 	bl	80002a8 <__aeabi_dsub>
 800759a:	4632      	mov	r2, r6
 800759c:	463b      	mov	r3, r7
 800759e:	f7f8 fe83 	bl	80002a8 <__aeabi_dsub>
 80075a2:	4602      	mov	r2, r0
 80075a4:	460b      	mov	r3, r1
 80075a6:	4650      	mov	r0, sl
 80075a8:	4659      	mov	r1, fp
 80075aa:	f7f8 fe7d 	bl	80002a8 <__aeabi_dsub>
 80075ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80075b2:	f7f9 f831 	bl	8000618 <__aeabi_dmul>
 80075b6:	4622      	mov	r2, r4
 80075b8:	4606      	mov	r6, r0
 80075ba:	460f      	mov	r7, r1
 80075bc:	462b      	mov	r3, r5
 80075be:	ec51 0b18 	vmov	r0, r1, d8
 80075c2:	f7f9 f829 	bl	8000618 <__aeabi_dmul>
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	4630      	mov	r0, r6
 80075cc:	4639      	mov	r1, r7
 80075ce:	f7f8 fe6d 	bl	80002ac <__adddf3>
 80075d2:	4606      	mov	r6, r0
 80075d4:	460f      	mov	r7, r1
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	4640      	mov	r0, r8
 80075dc:	4649      	mov	r1, r9
 80075de:	f7f8 fe65 	bl	80002ac <__adddf3>
 80075e2:	9c04      	ldr	r4, [sp, #16]
 80075e4:	a33e      	add	r3, pc, #248	; (adr r3, 80076e0 <__ieee754_pow+0x720>)
 80075e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ea:	4620      	mov	r0, r4
 80075ec:	460d      	mov	r5, r1
 80075ee:	f7f9 f813 	bl	8000618 <__aeabi_dmul>
 80075f2:	4642      	mov	r2, r8
 80075f4:	ec41 0b18 	vmov	d8, r0, r1
 80075f8:	464b      	mov	r3, r9
 80075fa:	4620      	mov	r0, r4
 80075fc:	4629      	mov	r1, r5
 80075fe:	f7f8 fe53 	bl	80002a8 <__aeabi_dsub>
 8007602:	4602      	mov	r2, r0
 8007604:	460b      	mov	r3, r1
 8007606:	4630      	mov	r0, r6
 8007608:	4639      	mov	r1, r7
 800760a:	f7f8 fe4d 	bl	80002a8 <__aeabi_dsub>
 800760e:	a336      	add	r3, pc, #216	; (adr r3, 80076e8 <__ieee754_pow+0x728>)
 8007610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007614:	f7f9 f800 	bl	8000618 <__aeabi_dmul>
 8007618:	a335      	add	r3, pc, #212	; (adr r3, 80076f0 <__ieee754_pow+0x730>)
 800761a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761e:	4606      	mov	r6, r0
 8007620:	460f      	mov	r7, r1
 8007622:	4620      	mov	r0, r4
 8007624:	4629      	mov	r1, r5
 8007626:	f7f8 fff7 	bl	8000618 <__aeabi_dmul>
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	4630      	mov	r0, r6
 8007630:	4639      	mov	r1, r7
 8007632:	f7f8 fe3b 	bl	80002ac <__adddf3>
 8007636:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007638:	4b38      	ldr	r3, [pc, #224]	; (800771c <__ieee754_pow+0x75c>)
 800763a:	4413      	add	r3, r2
 800763c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007640:	f7f8 fe34 	bl	80002ac <__adddf3>
 8007644:	4682      	mov	sl, r0
 8007646:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007648:	468b      	mov	fp, r1
 800764a:	f7f8 ff7b 	bl	8000544 <__aeabi_i2d>
 800764e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007650:	4b33      	ldr	r3, [pc, #204]	; (8007720 <__ieee754_pow+0x760>)
 8007652:	4413      	add	r3, r2
 8007654:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007658:	4606      	mov	r6, r0
 800765a:	460f      	mov	r7, r1
 800765c:	4652      	mov	r2, sl
 800765e:	465b      	mov	r3, fp
 8007660:	ec51 0b18 	vmov	r0, r1, d8
 8007664:	f7f8 fe22 	bl	80002ac <__adddf3>
 8007668:	4642      	mov	r2, r8
 800766a:	464b      	mov	r3, r9
 800766c:	f7f8 fe1e 	bl	80002ac <__adddf3>
 8007670:	4632      	mov	r2, r6
 8007672:	463b      	mov	r3, r7
 8007674:	f7f8 fe1a 	bl	80002ac <__adddf3>
 8007678:	9c04      	ldr	r4, [sp, #16]
 800767a:	4632      	mov	r2, r6
 800767c:	463b      	mov	r3, r7
 800767e:	4620      	mov	r0, r4
 8007680:	460d      	mov	r5, r1
 8007682:	f7f8 fe11 	bl	80002a8 <__aeabi_dsub>
 8007686:	4642      	mov	r2, r8
 8007688:	464b      	mov	r3, r9
 800768a:	f7f8 fe0d 	bl	80002a8 <__aeabi_dsub>
 800768e:	ec53 2b18 	vmov	r2, r3, d8
 8007692:	f7f8 fe09 	bl	80002a8 <__aeabi_dsub>
 8007696:	4602      	mov	r2, r0
 8007698:	460b      	mov	r3, r1
 800769a:	4650      	mov	r0, sl
 800769c:	4659      	mov	r1, fp
 800769e:	e606      	b.n	80072ae <__ieee754_pow+0x2ee>
 80076a0:	2401      	movs	r4, #1
 80076a2:	e6a0      	b.n	80073e6 <__ieee754_pow+0x426>
 80076a4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80076f8 <__ieee754_pow+0x738>
 80076a8:	e60d      	b.n	80072c6 <__ieee754_pow+0x306>
 80076aa:	bf00      	nop
 80076ac:	f3af 8000 	nop.w
 80076b0:	4a454eef 	.word	0x4a454eef
 80076b4:	3fca7e28 	.word	0x3fca7e28
 80076b8:	93c9db65 	.word	0x93c9db65
 80076bc:	3fcd864a 	.word	0x3fcd864a
 80076c0:	a91d4101 	.word	0xa91d4101
 80076c4:	3fd17460 	.word	0x3fd17460
 80076c8:	518f264d 	.word	0x518f264d
 80076cc:	3fd55555 	.word	0x3fd55555
 80076d0:	db6fabff 	.word	0xdb6fabff
 80076d4:	3fdb6db6 	.word	0x3fdb6db6
 80076d8:	33333303 	.word	0x33333303
 80076dc:	3fe33333 	.word	0x3fe33333
 80076e0:	e0000000 	.word	0xe0000000
 80076e4:	3feec709 	.word	0x3feec709
 80076e8:	dc3a03fd 	.word	0xdc3a03fd
 80076ec:	3feec709 	.word	0x3feec709
 80076f0:	145b01f5 	.word	0x145b01f5
 80076f4:	be3e2fe0 	.word	0xbe3e2fe0
 80076f8:	00000000 	.word	0x00000000
 80076fc:	3ff00000 	.word	0x3ff00000
 8007700:	7ff00000 	.word	0x7ff00000
 8007704:	43400000 	.word	0x43400000
 8007708:	0003988e 	.word	0x0003988e
 800770c:	000bb679 	.word	0x000bb679
 8007710:	08008228 	.word	0x08008228
 8007714:	3ff00000 	.word	0x3ff00000
 8007718:	40080000 	.word	0x40080000
 800771c:	08008248 	.word	0x08008248
 8007720:	08008238 	.word	0x08008238
 8007724:	a3b5      	add	r3, pc, #724	; (adr r3, 80079fc <__ieee754_pow+0xa3c>)
 8007726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772a:	4640      	mov	r0, r8
 800772c:	4649      	mov	r1, r9
 800772e:	f7f8 fdbd 	bl	80002ac <__adddf3>
 8007732:	4622      	mov	r2, r4
 8007734:	ec41 0b1a 	vmov	d10, r0, r1
 8007738:	462b      	mov	r3, r5
 800773a:	4630      	mov	r0, r6
 800773c:	4639      	mov	r1, r7
 800773e:	f7f8 fdb3 	bl	80002a8 <__aeabi_dsub>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	ec51 0b1a 	vmov	r0, r1, d10
 800774a:	f7f9 f9f5 	bl	8000b38 <__aeabi_dcmpgt>
 800774e:	2800      	cmp	r0, #0
 8007750:	f47f adf8 	bne.w	8007344 <__ieee754_pow+0x384>
 8007754:	4aa4      	ldr	r2, [pc, #656]	; (80079e8 <__ieee754_pow+0xa28>)
 8007756:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800775a:	4293      	cmp	r3, r2
 800775c:	f340 810b 	ble.w	8007976 <__ieee754_pow+0x9b6>
 8007760:	151b      	asrs	r3, r3, #20
 8007762:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007766:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800776a:	fa4a f303 	asr.w	r3, sl, r3
 800776e:	445b      	add	r3, fp
 8007770:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007774:	4e9d      	ldr	r6, [pc, #628]	; (80079ec <__ieee754_pow+0xa2c>)
 8007776:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800777a:	4116      	asrs	r6, r2
 800777c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007780:	2000      	movs	r0, #0
 8007782:	ea23 0106 	bic.w	r1, r3, r6
 8007786:	f1c2 0214 	rsb	r2, r2, #20
 800778a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800778e:	fa4a fa02 	asr.w	sl, sl, r2
 8007792:	f1bb 0f00 	cmp.w	fp, #0
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	4620      	mov	r0, r4
 800779c:	4629      	mov	r1, r5
 800779e:	bfb8      	it	lt
 80077a0:	f1ca 0a00 	rsblt	sl, sl, #0
 80077a4:	f7f8 fd80 	bl	80002a8 <__aeabi_dsub>
 80077a8:	ec41 0b19 	vmov	d9, r0, r1
 80077ac:	4642      	mov	r2, r8
 80077ae:	464b      	mov	r3, r9
 80077b0:	ec51 0b19 	vmov	r0, r1, d9
 80077b4:	f7f8 fd7a 	bl	80002ac <__adddf3>
 80077b8:	2400      	movs	r4, #0
 80077ba:	a379      	add	r3, pc, #484	; (adr r3, 80079a0 <__ieee754_pow+0x9e0>)
 80077bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c0:	4620      	mov	r0, r4
 80077c2:	460d      	mov	r5, r1
 80077c4:	f7f8 ff28 	bl	8000618 <__aeabi_dmul>
 80077c8:	ec53 2b19 	vmov	r2, r3, d9
 80077cc:	4606      	mov	r6, r0
 80077ce:	460f      	mov	r7, r1
 80077d0:	4620      	mov	r0, r4
 80077d2:	4629      	mov	r1, r5
 80077d4:	f7f8 fd68 	bl	80002a8 <__aeabi_dsub>
 80077d8:	4602      	mov	r2, r0
 80077da:	460b      	mov	r3, r1
 80077dc:	4640      	mov	r0, r8
 80077de:	4649      	mov	r1, r9
 80077e0:	f7f8 fd62 	bl	80002a8 <__aeabi_dsub>
 80077e4:	a370      	add	r3, pc, #448	; (adr r3, 80079a8 <__ieee754_pow+0x9e8>)
 80077e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ea:	f7f8 ff15 	bl	8000618 <__aeabi_dmul>
 80077ee:	a370      	add	r3, pc, #448	; (adr r3, 80079b0 <__ieee754_pow+0x9f0>)
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	4680      	mov	r8, r0
 80077f6:	4689      	mov	r9, r1
 80077f8:	4620      	mov	r0, r4
 80077fa:	4629      	mov	r1, r5
 80077fc:	f7f8 ff0c 	bl	8000618 <__aeabi_dmul>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	4640      	mov	r0, r8
 8007806:	4649      	mov	r1, r9
 8007808:	f7f8 fd50 	bl	80002ac <__adddf3>
 800780c:	4604      	mov	r4, r0
 800780e:	460d      	mov	r5, r1
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	4630      	mov	r0, r6
 8007816:	4639      	mov	r1, r7
 8007818:	f7f8 fd48 	bl	80002ac <__adddf3>
 800781c:	4632      	mov	r2, r6
 800781e:	463b      	mov	r3, r7
 8007820:	4680      	mov	r8, r0
 8007822:	4689      	mov	r9, r1
 8007824:	f7f8 fd40 	bl	80002a8 <__aeabi_dsub>
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	4620      	mov	r0, r4
 800782e:	4629      	mov	r1, r5
 8007830:	f7f8 fd3a 	bl	80002a8 <__aeabi_dsub>
 8007834:	4642      	mov	r2, r8
 8007836:	4606      	mov	r6, r0
 8007838:	460f      	mov	r7, r1
 800783a:	464b      	mov	r3, r9
 800783c:	4640      	mov	r0, r8
 800783e:	4649      	mov	r1, r9
 8007840:	f7f8 feea 	bl	8000618 <__aeabi_dmul>
 8007844:	a35c      	add	r3, pc, #368	; (adr r3, 80079b8 <__ieee754_pow+0x9f8>)
 8007846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784a:	4604      	mov	r4, r0
 800784c:	460d      	mov	r5, r1
 800784e:	f7f8 fee3 	bl	8000618 <__aeabi_dmul>
 8007852:	a35b      	add	r3, pc, #364	; (adr r3, 80079c0 <__ieee754_pow+0xa00>)
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	f7f8 fd26 	bl	80002a8 <__aeabi_dsub>
 800785c:	4622      	mov	r2, r4
 800785e:	462b      	mov	r3, r5
 8007860:	f7f8 feda 	bl	8000618 <__aeabi_dmul>
 8007864:	a358      	add	r3, pc, #352	; (adr r3, 80079c8 <__ieee754_pow+0xa08>)
 8007866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786a:	f7f8 fd1f 	bl	80002ac <__adddf3>
 800786e:	4622      	mov	r2, r4
 8007870:	462b      	mov	r3, r5
 8007872:	f7f8 fed1 	bl	8000618 <__aeabi_dmul>
 8007876:	a356      	add	r3, pc, #344	; (adr r3, 80079d0 <__ieee754_pow+0xa10>)
 8007878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787c:	f7f8 fd14 	bl	80002a8 <__aeabi_dsub>
 8007880:	4622      	mov	r2, r4
 8007882:	462b      	mov	r3, r5
 8007884:	f7f8 fec8 	bl	8000618 <__aeabi_dmul>
 8007888:	a353      	add	r3, pc, #332	; (adr r3, 80079d8 <__ieee754_pow+0xa18>)
 800788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788e:	f7f8 fd0d 	bl	80002ac <__adddf3>
 8007892:	4622      	mov	r2, r4
 8007894:	462b      	mov	r3, r5
 8007896:	f7f8 febf 	bl	8000618 <__aeabi_dmul>
 800789a:	4602      	mov	r2, r0
 800789c:	460b      	mov	r3, r1
 800789e:	4640      	mov	r0, r8
 80078a0:	4649      	mov	r1, r9
 80078a2:	f7f8 fd01 	bl	80002a8 <__aeabi_dsub>
 80078a6:	4604      	mov	r4, r0
 80078a8:	460d      	mov	r5, r1
 80078aa:	4602      	mov	r2, r0
 80078ac:	460b      	mov	r3, r1
 80078ae:	4640      	mov	r0, r8
 80078b0:	4649      	mov	r1, r9
 80078b2:	f7f8 feb1 	bl	8000618 <__aeabi_dmul>
 80078b6:	2200      	movs	r2, #0
 80078b8:	ec41 0b19 	vmov	d9, r0, r1
 80078bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80078c0:	4620      	mov	r0, r4
 80078c2:	4629      	mov	r1, r5
 80078c4:	f7f8 fcf0 	bl	80002a8 <__aeabi_dsub>
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	ec51 0b19 	vmov	r0, r1, d9
 80078d0:	f7f8 ffcc 	bl	800086c <__aeabi_ddiv>
 80078d4:	4632      	mov	r2, r6
 80078d6:	4604      	mov	r4, r0
 80078d8:	460d      	mov	r5, r1
 80078da:	463b      	mov	r3, r7
 80078dc:	4640      	mov	r0, r8
 80078de:	4649      	mov	r1, r9
 80078e0:	f7f8 fe9a 	bl	8000618 <__aeabi_dmul>
 80078e4:	4632      	mov	r2, r6
 80078e6:	463b      	mov	r3, r7
 80078e8:	f7f8 fce0 	bl	80002ac <__adddf3>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	4620      	mov	r0, r4
 80078f2:	4629      	mov	r1, r5
 80078f4:	f7f8 fcd8 	bl	80002a8 <__aeabi_dsub>
 80078f8:	4642      	mov	r2, r8
 80078fa:	464b      	mov	r3, r9
 80078fc:	f7f8 fcd4 	bl	80002a8 <__aeabi_dsub>
 8007900:	460b      	mov	r3, r1
 8007902:	4602      	mov	r2, r0
 8007904:	493a      	ldr	r1, [pc, #232]	; (80079f0 <__ieee754_pow+0xa30>)
 8007906:	2000      	movs	r0, #0
 8007908:	f7f8 fcce 	bl	80002a8 <__aeabi_dsub>
 800790c:	e9cd 0100 	strd	r0, r1, [sp]
 8007910:	9b01      	ldr	r3, [sp, #4]
 8007912:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800791a:	da2f      	bge.n	800797c <__ieee754_pow+0x9bc>
 800791c:	4650      	mov	r0, sl
 800791e:	ed9d 0b00 	vldr	d0, [sp]
 8007922:	f000 f9cd 	bl	8007cc0 <scalbn>
 8007926:	ec51 0b10 	vmov	r0, r1, d0
 800792a:	ec53 2b18 	vmov	r2, r3, d8
 800792e:	f7ff bbe0 	b.w	80070f2 <__ieee754_pow+0x132>
 8007932:	4b30      	ldr	r3, [pc, #192]	; (80079f4 <__ieee754_pow+0xa34>)
 8007934:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007938:	429e      	cmp	r6, r3
 800793a:	f77f af0b 	ble.w	8007754 <__ieee754_pow+0x794>
 800793e:	4b2e      	ldr	r3, [pc, #184]	; (80079f8 <__ieee754_pow+0xa38>)
 8007940:	440b      	add	r3, r1
 8007942:	4303      	orrs	r3, r0
 8007944:	d00b      	beq.n	800795e <__ieee754_pow+0x99e>
 8007946:	a326      	add	r3, pc, #152	; (adr r3, 80079e0 <__ieee754_pow+0xa20>)
 8007948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794c:	ec51 0b18 	vmov	r0, r1, d8
 8007950:	f7f8 fe62 	bl	8000618 <__aeabi_dmul>
 8007954:	a322      	add	r3, pc, #136	; (adr r3, 80079e0 <__ieee754_pow+0xa20>)
 8007956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795a:	f7ff bbca 	b.w	80070f2 <__ieee754_pow+0x132>
 800795e:	4622      	mov	r2, r4
 8007960:	462b      	mov	r3, r5
 8007962:	f7f8 fca1 	bl	80002a8 <__aeabi_dsub>
 8007966:	4642      	mov	r2, r8
 8007968:	464b      	mov	r3, r9
 800796a:	f7f9 f8db 	bl	8000b24 <__aeabi_dcmpge>
 800796e:	2800      	cmp	r0, #0
 8007970:	f43f aef0 	beq.w	8007754 <__ieee754_pow+0x794>
 8007974:	e7e7      	b.n	8007946 <__ieee754_pow+0x986>
 8007976:	f04f 0a00 	mov.w	sl, #0
 800797a:	e717      	b.n	80077ac <__ieee754_pow+0x7ec>
 800797c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007980:	4619      	mov	r1, r3
 8007982:	e7d2      	b.n	800792a <__ieee754_pow+0x96a>
 8007984:	491a      	ldr	r1, [pc, #104]	; (80079f0 <__ieee754_pow+0xa30>)
 8007986:	2000      	movs	r0, #0
 8007988:	f7ff bb9e 	b.w	80070c8 <__ieee754_pow+0x108>
 800798c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007990:	f7ff bb9a 	b.w	80070c8 <__ieee754_pow+0x108>
 8007994:	9000      	str	r0, [sp, #0]
 8007996:	f7ff bb76 	b.w	8007086 <__ieee754_pow+0xc6>
 800799a:	2100      	movs	r1, #0
 800799c:	f7ff bb60 	b.w	8007060 <__ieee754_pow+0xa0>
 80079a0:	00000000 	.word	0x00000000
 80079a4:	3fe62e43 	.word	0x3fe62e43
 80079a8:	fefa39ef 	.word	0xfefa39ef
 80079ac:	3fe62e42 	.word	0x3fe62e42
 80079b0:	0ca86c39 	.word	0x0ca86c39
 80079b4:	be205c61 	.word	0xbe205c61
 80079b8:	72bea4d0 	.word	0x72bea4d0
 80079bc:	3e663769 	.word	0x3e663769
 80079c0:	c5d26bf1 	.word	0xc5d26bf1
 80079c4:	3ebbbd41 	.word	0x3ebbbd41
 80079c8:	af25de2c 	.word	0xaf25de2c
 80079cc:	3f11566a 	.word	0x3f11566a
 80079d0:	16bebd93 	.word	0x16bebd93
 80079d4:	3f66c16c 	.word	0x3f66c16c
 80079d8:	5555553e 	.word	0x5555553e
 80079dc:	3fc55555 	.word	0x3fc55555
 80079e0:	c2f8f359 	.word	0xc2f8f359
 80079e4:	01a56e1f 	.word	0x01a56e1f
 80079e8:	3fe00000 	.word	0x3fe00000
 80079ec:	000fffff 	.word	0x000fffff
 80079f0:	3ff00000 	.word	0x3ff00000
 80079f4:	4090cbff 	.word	0x4090cbff
 80079f8:	3f6f3400 	.word	0x3f6f3400
 80079fc:	652b82fe 	.word	0x652b82fe
 8007a00:	3c971547 	.word	0x3c971547

08007a04 <__ieee754_sqrt>:
 8007a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a08:	ec55 4b10 	vmov	r4, r5, d0
 8007a0c:	4e56      	ldr	r6, [pc, #344]	; (8007b68 <__ieee754_sqrt+0x164>)
 8007a0e:	43ae      	bics	r6, r5
 8007a10:	ee10 0a10 	vmov	r0, s0
 8007a14:	ee10 3a10 	vmov	r3, s0
 8007a18:	4629      	mov	r1, r5
 8007a1a:	462a      	mov	r2, r5
 8007a1c:	d110      	bne.n	8007a40 <__ieee754_sqrt+0x3c>
 8007a1e:	ee10 2a10 	vmov	r2, s0
 8007a22:	462b      	mov	r3, r5
 8007a24:	f7f8 fdf8 	bl	8000618 <__aeabi_dmul>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	4629      	mov	r1, r5
 8007a30:	f7f8 fc3c 	bl	80002ac <__adddf3>
 8007a34:	4604      	mov	r4, r0
 8007a36:	460d      	mov	r5, r1
 8007a38:	ec45 4b10 	vmov	d0, r4, r5
 8007a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a40:	2d00      	cmp	r5, #0
 8007a42:	dc10      	bgt.n	8007a66 <__ieee754_sqrt+0x62>
 8007a44:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007a48:	4330      	orrs	r0, r6
 8007a4a:	d0f5      	beq.n	8007a38 <__ieee754_sqrt+0x34>
 8007a4c:	b15d      	cbz	r5, 8007a66 <__ieee754_sqrt+0x62>
 8007a4e:	ee10 2a10 	vmov	r2, s0
 8007a52:	462b      	mov	r3, r5
 8007a54:	ee10 0a10 	vmov	r0, s0
 8007a58:	f7f8 fc26 	bl	80002a8 <__aeabi_dsub>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	f7f8 ff04 	bl	800086c <__aeabi_ddiv>
 8007a64:	e7e6      	b.n	8007a34 <__ieee754_sqrt+0x30>
 8007a66:	1509      	asrs	r1, r1, #20
 8007a68:	d076      	beq.n	8007b58 <__ieee754_sqrt+0x154>
 8007a6a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007a6e:	07ce      	lsls	r6, r1, #31
 8007a70:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007a74:	bf5e      	ittt	pl
 8007a76:	0fda      	lsrpl	r2, r3, #31
 8007a78:	005b      	lslpl	r3, r3, #1
 8007a7a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007a7e:	0fda      	lsrs	r2, r3, #31
 8007a80:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007a84:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007a88:	2000      	movs	r0, #0
 8007a8a:	106d      	asrs	r5, r5, #1
 8007a8c:	005b      	lsls	r3, r3, #1
 8007a8e:	f04f 0e16 	mov.w	lr, #22
 8007a92:	4684      	mov	ip, r0
 8007a94:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a98:	eb0c 0401 	add.w	r4, ip, r1
 8007a9c:	4294      	cmp	r4, r2
 8007a9e:	bfde      	ittt	le
 8007aa0:	1b12      	suble	r2, r2, r4
 8007aa2:	eb04 0c01 	addle.w	ip, r4, r1
 8007aa6:	1840      	addle	r0, r0, r1
 8007aa8:	0052      	lsls	r2, r2, #1
 8007aaa:	f1be 0e01 	subs.w	lr, lr, #1
 8007aae:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007ab2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007ab6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007aba:	d1ed      	bne.n	8007a98 <__ieee754_sqrt+0x94>
 8007abc:	4671      	mov	r1, lr
 8007abe:	2720      	movs	r7, #32
 8007ac0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007ac4:	4562      	cmp	r2, ip
 8007ac6:	eb04 060e 	add.w	r6, r4, lr
 8007aca:	dc02      	bgt.n	8007ad2 <__ieee754_sqrt+0xce>
 8007acc:	d113      	bne.n	8007af6 <__ieee754_sqrt+0xf2>
 8007ace:	429e      	cmp	r6, r3
 8007ad0:	d811      	bhi.n	8007af6 <__ieee754_sqrt+0xf2>
 8007ad2:	2e00      	cmp	r6, #0
 8007ad4:	eb06 0e04 	add.w	lr, r6, r4
 8007ad8:	da43      	bge.n	8007b62 <__ieee754_sqrt+0x15e>
 8007ada:	f1be 0f00 	cmp.w	lr, #0
 8007ade:	db40      	blt.n	8007b62 <__ieee754_sqrt+0x15e>
 8007ae0:	f10c 0801 	add.w	r8, ip, #1
 8007ae4:	eba2 020c 	sub.w	r2, r2, ip
 8007ae8:	429e      	cmp	r6, r3
 8007aea:	bf88      	it	hi
 8007aec:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007af0:	1b9b      	subs	r3, r3, r6
 8007af2:	4421      	add	r1, r4
 8007af4:	46c4      	mov	ip, r8
 8007af6:	0052      	lsls	r2, r2, #1
 8007af8:	3f01      	subs	r7, #1
 8007afa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007afe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007b02:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007b06:	d1dd      	bne.n	8007ac4 <__ieee754_sqrt+0xc0>
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	d006      	beq.n	8007b1a <__ieee754_sqrt+0x116>
 8007b0c:	1c4c      	adds	r4, r1, #1
 8007b0e:	bf13      	iteet	ne
 8007b10:	3101      	addne	r1, #1
 8007b12:	3001      	addeq	r0, #1
 8007b14:	4639      	moveq	r1, r7
 8007b16:	f021 0101 	bicne.w	r1, r1, #1
 8007b1a:	1043      	asrs	r3, r0, #1
 8007b1c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007b20:	0849      	lsrs	r1, r1, #1
 8007b22:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007b26:	07c2      	lsls	r2, r0, #31
 8007b28:	bf48      	it	mi
 8007b2a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007b2e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007b32:	460c      	mov	r4, r1
 8007b34:	463d      	mov	r5, r7
 8007b36:	e77f      	b.n	8007a38 <__ieee754_sqrt+0x34>
 8007b38:	0ada      	lsrs	r2, r3, #11
 8007b3a:	3815      	subs	r0, #21
 8007b3c:	055b      	lsls	r3, r3, #21
 8007b3e:	2a00      	cmp	r2, #0
 8007b40:	d0fa      	beq.n	8007b38 <__ieee754_sqrt+0x134>
 8007b42:	02d7      	lsls	r7, r2, #11
 8007b44:	d50a      	bpl.n	8007b5c <__ieee754_sqrt+0x158>
 8007b46:	f1c1 0420 	rsb	r4, r1, #32
 8007b4a:	fa23 f404 	lsr.w	r4, r3, r4
 8007b4e:	1e4d      	subs	r5, r1, #1
 8007b50:	408b      	lsls	r3, r1
 8007b52:	4322      	orrs	r2, r4
 8007b54:	1b41      	subs	r1, r0, r5
 8007b56:	e788      	b.n	8007a6a <__ieee754_sqrt+0x66>
 8007b58:	4608      	mov	r0, r1
 8007b5a:	e7f0      	b.n	8007b3e <__ieee754_sqrt+0x13a>
 8007b5c:	0052      	lsls	r2, r2, #1
 8007b5e:	3101      	adds	r1, #1
 8007b60:	e7ef      	b.n	8007b42 <__ieee754_sqrt+0x13e>
 8007b62:	46e0      	mov	r8, ip
 8007b64:	e7be      	b.n	8007ae4 <__ieee754_sqrt+0xe0>
 8007b66:	bf00      	nop
 8007b68:	7ff00000 	.word	0x7ff00000

08007b6c <fabs>:
 8007b6c:	ec51 0b10 	vmov	r0, r1, d0
 8007b70:	ee10 2a10 	vmov	r2, s0
 8007b74:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b78:	ec43 2b10 	vmov	d0, r2, r3
 8007b7c:	4770      	bx	lr

08007b7e <finite>:
 8007b7e:	b082      	sub	sp, #8
 8007b80:	ed8d 0b00 	vstr	d0, [sp]
 8007b84:	9801      	ldr	r0, [sp, #4]
 8007b86:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007b8a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007b8e:	0fc0      	lsrs	r0, r0, #31
 8007b90:	b002      	add	sp, #8
 8007b92:	4770      	bx	lr
 8007b94:	0000      	movs	r0, r0
	...

08007b98 <nan>:
 8007b98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007ba0 <nan+0x8>
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	00000000 	.word	0x00000000
 8007ba4:	7ff80000 	.word	0x7ff80000

08007ba8 <rint>:
 8007ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007baa:	ec51 0b10 	vmov	r0, r1, d0
 8007bae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007bb2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007bb6:	2e13      	cmp	r6, #19
 8007bb8:	ee10 4a10 	vmov	r4, s0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007bc2:	dc58      	bgt.n	8007c76 <rint+0xce>
 8007bc4:	2e00      	cmp	r6, #0
 8007bc6:	da2b      	bge.n	8007c20 <rint+0x78>
 8007bc8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007bcc:	4302      	orrs	r2, r0
 8007bce:	d023      	beq.n	8007c18 <rint+0x70>
 8007bd0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007bd4:	4302      	orrs	r2, r0
 8007bd6:	4254      	negs	r4, r2
 8007bd8:	4314      	orrs	r4, r2
 8007bda:	0c4b      	lsrs	r3, r1, #17
 8007bdc:	0b24      	lsrs	r4, r4, #12
 8007bde:	045b      	lsls	r3, r3, #17
 8007be0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007be4:	ea44 0103 	orr.w	r1, r4, r3
 8007be8:	4b32      	ldr	r3, [pc, #200]	; (8007cb4 <rint+0x10c>)
 8007bea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007bee:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	4639      	mov	r1, r7
 8007bfa:	f7f8 fb57 	bl	80002ac <__adddf3>
 8007bfe:	e9cd 0100 	strd	r0, r1, [sp]
 8007c02:	463b      	mov	r3, r7
 8007c04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c08:	4632      	mov	r2, r6
 8007c0a:	f7f8 fb4d 	bl	80002a8 <__aeabi_dsub>
 8007c0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007c12:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007c16:	4639      	mov	r1, r7
 8007c18:	ec41 0b10 	vmov	d0, r0, r1
 8007c1c:	b003      	add	sp, #12
 8007c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c20:	4a25      	ldr	r2, [pc, #148]	; (8007cb8 <rint+0x110>)
 8007c22:	4132      	asrs	r2, r6
 8007c24:	ea01 0702 	and.w	r7, r1, r2
 8007c28:	4307      	orrs	r7, r0
 8007c2a:	d0f5      	beq.n	8007c18 <rint+0x70>
 8007c2c:	0851      	lsrs	r1, r2, #1
 8007c2e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8007c32:	4314      	orrs	r4, r2
 8007c34:	d00c      	beq.n	8007c50 <rint+0xa8>
 8007c36:	ea23 0201 	bic.w	r2, r3, r1
 8007c3a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007c3e:	2e13      	cmp	r6, #19
 8007c40:	fa43 f606 	asr.w	r6, r3, r6
 8007c44:	bf0c      	ite	eq
 8007c46:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007c4a:	2400      	movne	r4, #0
 8007c4c:	ea42 0306 	orr.w	r3, r2, r6
 8007c50:	4918      	ldr	r1, [pc, #96]	; (8007cb4 <rint+0x10c>)
 8007c52:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007c56:	4622      	mov	r2, r4
 8007c58:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	4629      	mov	r1, r5
 8007c60:	f7f8 fb24 	bl	80002ac <__adddf3>
 8007c64:	e9cd 0100 	strd	r0, r1, [sp]
 8007c68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	462b      	mov	r3, r5
 8007c70:	f7f8 fb1a 	bl	80002a8 <__aeabi_dsub>
 8007c74:	e7d0      	b.n	8007c18 <rint+0x70>
 8007c76:	2e33      	cmp	r6, #51	; 0x33
 8007c78:	dd07      	ble.n	8007c8a <rint+0xe2>
 8007c7a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007c7e:	d1cb      	bne.n	8007c18 <rint+0x70>
 8007c80:	ee10 2a10 	vmov	r2, s0
 8007c84:	f7f8 fb12 	bl	80002ac <__adddf3>
 8007c88:	e7c6      	b.n	8007c18 <rint+0x70>
 8007c8a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007c8e:	f04f 36ff 	mov.w	r6, #4294967295
 8007c92:	40d6      	lsrs	r6, r2
 8007c94:	4230      	tst	r0, r6
 8007c96:	d0bf      	beq.n	8007c18 <rint+0x70>
 8007c98:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8007c9c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8007ca0:	bf1f      	itttt	ne
 8007ca2:	ea24 0101 	bicne.w	r1, r4, r1
 8007ca6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8007caa:	fa44 f202 	asrne.w	r2, r4, r2
 8007cae:	ea41 0402 	orrne.w	r4, r1, r2
 8007cb2:	e7cd      	b.n	8007c50 <rint+0xa8>
 8007cb4:	08008258 	.word	0x08008258
 8007cb8:	000fffff 	.word	0x000fffff
 8007cbc:	00000000 	.word	0x00000000

08007cc0 <scalbn>:
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	ec55 4b10 	vmov	r4, r5, d0
 8007cc6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007cca:	4606      	mov	r6, r0
 8007ccc:	462b      	mov	r3, r5
 8007cce:	b99a      	cbnz	r2, 8007cf8 <scalbn+0x38>
 8007cd0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007cd4:	4323      	orrs	r3, r4
 8007cd6:	d036      	beq.n	8007d46 <scalbn+0x86>
 8007cd8:	4b39      	ldr	r3, [pc, #228]	; (8007dc0 <scalbn+0x100>)
 8007cda:	4629      	mov	r1, r5
 8007cdc:	ee10 0a10 	vmov	r0, s0
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f7f8 fc99 	bl	8000618 <__aeabi_dmul>
 8007ce6:	4b37      	ldr	r3, [pc, #220]	; (8007dc4 <scalbn+0x104>)
 8007ce8:	429e      	cmp	r6, r3
 8007cea:	4604      	mov	r4, r0
 8007cec:	460d      	mov	r5, r1
 8007cee:	da10      	bge.n	8007d12 <scalbn+0x52>
 8007cf0:	a32b      	add	r3, pc, #172	; (adr r3, 8007da0 <scalbn+0xe0>)
 8007cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf6:	e03a      	b.n	8007d6e <scalbn+0xae>
 8007cf8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007cfc:	428a      	cmp	r2, r1
 8007cfe:	d10c      	bne.n	8007d1a <scalbn+0x5a>
 8007d00:	ee10 2a10 	vmov	r2, s0
 8007d04:	4620      	mov	r0, r4
 8007d06:	4629      	mov	r1, r5
 8007d08:	f7f8 fad0 	bl	80002ac <__adddf3>
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	460d      	mov	r5, r1
 8007d10:	e019      	b.n	8007d46 <scalbn+0x86>
 8007d12:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007d16:	460b      	mov	r3, r1
 8007d18:	3a36      	subs	r2, #54	; 0x36
 8007d1a:	4432      	add	r2, r6
 8007d1c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007d20:	428a      	cmp	r2, r1
 8007d22:	dd08      	ble.n	8007d36 <scalbn+0x76>
 8007d24:	2d00      	cmp	r5, #0
 8007d26:	a120      	add	r1, pc, #128	; (adr r1, 8007da8 <scalbn+0xe8>)
 8007d28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d2c:	da1c      	bge.n	8007d68 <scalbn+0xa8>
 8007d2e:	a120      	add	r1, pc, #128	; (adr r1, 8007db0 <scalbn+0xf0>)
 8007d30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d34:	e018      	b.n	8007d68 <scalbn+0xa8>
 8007d36:	2a00      	cmp	r2, #0
 8007d38:	dd08      	ble.n	8007d4c <scalbn+0x8c>
 8007d3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d42:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007d46:	ec45 4b10 	vmov	d0, r4, r5
 8007d4a:	bd70      	pop	{r4, r5, r6, pc}
 8007d4c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007d50:	da19      	bge.n	8007d86 <scalbn+0xc6>
 8007d52:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007d56:	429e      	cmp	r6, r3
 8007d58:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007d5c:	dd0a      	ble.n	8007d74 <scalbn+0xb4>
 8007d5e:	a112      	add	r1, pc, #72	; (adr r1, 8007da8 <scalbn+0xe8>)
 8007d60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1e2      	bne.n	8007d2e <scalbn+0x6e>
 8007d68:	a30f      	add	r3, pc, #60	; (adr r3, 8007da8 <scalbn+0xe8>)
 8007d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6e:	f7f8 fc53 	bl	8000618 <__aeabi_dmul>
 8007d72:	e7cb      	b.n	8007d0c <scalbn+0x4c>
 8007d74:	a10a      	add	r1, pc, #40	; (adr r1, 8007da0 <scalbn+0xe0>)
 8007d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d0b8      	beq.n	8007cf0 <scalbn+0x30>
 8007d7e:	a10e      	add	r1, pc, #56	; (adr r1, 8007db8 <scalbn+0xf8>)
 8007d80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d84:	e7b4      	b.n	8007cf0 <scalbn+0x30>
 8007d86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d8a:	3236      	adds	r2, #54	; 0x36
 8007d8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d90:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007d94:	4620      	mov	r0, r4
 8007d96:	4b0c      	ldr	r3, [pc, #48]	; (8007dc8 <scalbn+0x108>)
 8007d98:	2200      	movs	r2, #0
 8007d9a:	e7e8      	b.n	8007d6e <scalbn+0xae>
 8007d9c:	f3af 8000 	nop.w
 8007da0:	c2f8f359 	.word	0xc2f8f359
 8007da4:	01a56e1f 	.word	0x01a56e1f
 8007da8:	8800759c 	.word	0x8800759c
 8007dac:	7e37e43c 	.word	0x7e37e43c
 8007db0:	8800759c 	.word	0x8800759c
 8007db4:	fe37e43c 	.word	0xfe37e43c
 8007db8:	c2f8f359 	.word	0xc2f8f359
 8007dbc:	81a56e1f 	.word	0x81a56e1f
 8007dc0:	43500000 	.word	0x43500000
 8007dc4:	ffff3cb0 	.word	0xffff3cb0
 8007dc8:	3c900000 	.word	0x3c900000

08007dcc <_init>:
 8007dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dce:	bf00      	nop
 8007dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dd2:	bc08      	pop	{r3}
 8007dd4:	469e      	mov	lr, r3
 8007dd6:	4770      	bx	lr

08007dd8 <_fini>:
 8007dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dda:	bf00      	nop
 8007ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dde:	bc08      	pop	{r3}
 8007de0:	469e      	mov	lr, r3
 8007de2:	4770      	bx	lr
