
Ej0_blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015d4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001780  08001780  00011780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001798  08001798  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08001798  08001798  00011798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080017a0  080017a0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017a0  080017a0  000117a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017a4  080017a4  000117a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080017a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000020  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000038  20000038  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   000063e4  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013f1  00000000  00000000  0002642c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004e8  00000000  00000000  00027820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000440  00000000  00000000  00027d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e26  00000000  00000000  00028148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000761e  00000000  00000000  0004cf6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e152f  00000000  00000000  0005458c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00135abb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001180  00000000  00000000  00135b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001768 	.word	0x08001768

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08001768 	.word	0x08001768

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	; 0x28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d10e      	bne.n	8000512 <BSP_LED_Init+0x2e>
 80004f4:	2300      	movs	r3, #0
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <BSP_LED_Init+0x94>)
 80004fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fc:	4a1e      	ldr	r2, [pc, #120]	; (8000578 <BSP_LED_Init+0x94>)
 80004fe:	f043 0302 	orr.w	r3, r3, #2
 8000502:	6313      	str	r3, [r2, #48]	; 0x30
 8000504:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <BSP_LED_Init+0x94>)
 8000506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000508:	f003 0302 	and.w	r3, r3, #2
 800050c:	613b      	str	r3, [r7, #16]
 800050e:	693b      	ldr	r3, [r7, #16]
 8000510:	e00d      	b.n	800052e <BSP_LED_Init+0x4a>
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
 8000516:	4b18      	ldr	r3, [pc, #96]	; (8000578 <BSP_LED_Init+0x94>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a17      	ldr	r2, [pc, #92]	; (8000578 <BSP_LED_Init+0x94>)
 800051c:	f043 0302 	orr.w	r3, r3, #2
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
 8000522:	4b15      	ldr	r3, [pc, #84]	; (8000578 <BSP_LED_Init+0x94>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	4a12      	ldr	r2, [pc, #72]	; (800057c <BSP_LED_Init+0x98>)
 8000532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000538:	2301      	movs	r3, #1
 800053a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000540:	2302      	movs	r3, #2
 8000542:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <BSP_LED_Init+0x9c>)
 8000548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800054c:	f107 0214 	add.w	r2, r7, #20
 8000550:	4611      	mov	r1, r2
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f9e6 	bl	8000924 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	4a09      	ldr	r2, [pc, #36]	; (8000580 <BSP_LED_Init+0x9c>)
 800055c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	4a06      	ldr	r2, [pc, #24]	; (800057c <BSP_LED_Init+0x98>)
 8000564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000568:	2200      	movs	r2, #0
 800056a:	4619      	mov	r1, r3
 800056c:	f000 fb86 	bl	8000c7c <HAL_GPIO_WritePin>
}
 8000570:	bf00      	nop
 8000572:	3728      	adds	r7, #40	; 0x28
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40023800 	.word	0x40023800
 800057c:	08001780 	.word	0x08001780
 8000580:	20000000 	.word	0x20000000

08000584 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <BSP_LED_On+0x2c>)
 8000592:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <BSP_LED_On+0x30>)
 800059a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800059e:	2201      	movs	r2, #1
 80005a0:	4619      	mov	r1, r3
 80005a2:	f000 fb6b 	bl	8000c7c <HAL_GPIO_WritePin>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000000 	.word	0x20000000
 80005b4:	08001780 	.word	0x08001780

080005b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <SystemInit+0x60>)
 80005be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005c2:	4a15      	ldr	r2, [pc, #84]	; (8000618 <SystemInit+0x60>)
 80005c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <SystemInit+0x64>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a12      	ldr	r2, [pc, #72]	; (800061c <SystemInit+0x64>)
 80005d2:	f043 0301 	orr.w	r3, r3, #1
 80005d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005d8:	4b10      	ldr	r3, [pc, #64]	; (800061c <SystemInit+0x64>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <SystemInit+0x64>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a0e      	ldr	r2, [pc, #56]	; (800061c <SystemInit+0x64>)
 80005e4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <SystemInit+0x64>)
 80005f0:	4a0b      	ldr	r2, [pc, #44]	; (8000620 <SystemInit+0x68>)
 80005f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <SystemInit+0x64>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a08      	ldr	r2, [pc, #32]	; (800061c <SystemInit+0x64>)
 80005fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <SystemInit+0x64>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000606:	4b04      	ldr	r3, [pc, #16]	; (8000618 <SystemInit+0x60>)
 8000608:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800060c:	609a      	str	r2, [r3, #8]
#endif
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	e000ed00 	.word	0xe000ed00
 800061c:	40023800 	.word	0x40023800
 8000620:	24003010 	.word	0x24003010

08000624 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000636:	e7fe      	b.n	8000636 <HardFault_Handler+0x4>

08000638 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800063c:	e7fe      	b.n	800063c <MemManage_Handler+0x4>

0800063e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000642:	e7fe      	b.n	8000642 <BusFault_Handler+0x4>

08000644 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000648:	e7fe      	b.n	8000648 <UsageFault_Handler+0x4>

0800064a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000678:	f000 f84e 	bl	8000718 <HAL_IncTick>
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}

08000680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000684:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <HAL_Init+0x34>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <HAL_Init+0x34>)
 800068a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800068e:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <HAL_Init+0x34>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <HAL_Init+0x34>)
 8000696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800069a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800069c:	2003      	movs	r0, #3
 800069e:	f000 f90d 	bl	80008bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006a2:	200f      	movs	r0, #15
 80006a4:	f000 f808 	bl	80006b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006a8:	f000 fb01 	bl	8000cae <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ac:	2300      	movs	r3, #0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023c00 	.word	0x40023c00

080006b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <HAL_InitTick+0x54>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_InitTick+0x58>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4619      	mov	r1, r3
 80006ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80006d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f917 	bl	800090a <HAL_SYSTICK_Config>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
 80006e4:	e00e      	b.n	8000704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b0f      	cmp	r3, #15
 80006ea:	d80a      	bhi.n	8000702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ec:	2200      	movs	r2, #0
 80006ee:	6879      	ldr	r1, [r7, #4]
 80006f0:	f04f 30ff 	mov.w	r0, #4294967295
 80006f4:	f000 f8ed 	bl	80008d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006f8:	4a06      	ldr	r2, [pc, #24]	; (8000714 <HAL_InitTick+0x5c>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006fe:	2300      	movs	r3, #0
 8000700:	e000      	b.n	8000704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
}
 8000704:	4618      	mov	r0, r3
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000000c 	.word	0x2000000c
 8000710:	20000014 	.word	0x20000014
 8000714:	20000010 	.word	0x20000010

08000718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_IncTick+0x20>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_IncTick+0x24>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4413      	add	r3, r2
 8000728:	4a04      	ldr	r2, [pc, #16]	; (800073c <HAL_IncTick+0x24>)
 800072a:	6013      	str	r3, [r2, #0]
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	20000014 	.word	0x20000014
 800073c:	20000034 	.word	0x20000034

08000740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return uwTick;
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <HAL_GetTick+0x14>)
 8000746:	681b      	ldr	r3, [r3, #0]
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	20000034 	.word	0x20000034

08000758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f003 0307 	and.w	r3, r3, #7
 8000766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <__NVIC_SetPriorityGrouping+0x44>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076e:	68ba      	ldr	r2, [r7, #8]
 8000770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000774:	4013      	ands	r3, r2
 8000776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800078a:	4a04      	ldr	r2, [pc, #16]	; (800079c <__NVIC_SetPriorityGrouping+0x44>)
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	60d3      	str	r3, [r2, #12]
}
 8000790:	bf00      	nop
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <__NVIC_GetPriorityGrouping+0x18>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	0a1b      	lsrs	r3, r3, #8
 80007aa:	f003 0307 	and.w	r3, r3, #7
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	6039      	str	r1, [r7, #0]
 80007c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	db0a      	blt.n	80007e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	490c      	ldr	r1, [pc, #48]	; (8000808 <__NVIC_SetPriority+0x4c>)
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	0112      	lsls	r2, r2, #4
 80007dc:	b2d2      	uxtb	r2, r2
 80007de:	440b      	add	r3, r1
 80007e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e4:	e00a      	b.n	80007fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4908      	ldr	r1, [pc, #32]	; (800080c <__NVIC_SetPriority+0x50>)
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	f003 030f 	and.w	r3, r3, #15
 80007f2:	3b04      	subs	r3, #4
 80007f4:	0112      	lsls	r2, r2, #4
 80007f6:	b2d2      	uxtb	r2, r2
 80007f8:	440b      	add	r3, r1
 80007fa:	761a      	strb	r2, [r3, #24]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000e100 	.word	0xe000e100
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000810:	b480      	push	{r7}
 8000812:	b089      	sub	sp, #36	; 0x24
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	f1c3 0307 	rsb	r3, r3, #7
 800082a:	2b04      	cmp	r3, #4
 800082c:	bf28      	it	cs
 800082e:	2304      	movcs	r3, #4
 8000830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	3304      	adds	r3, #4
 8000836:	2b06      	cmp	r3, #6
 8000838:	d902      	bls.n	8000840 <NVIC_EncodePriority+0x30>
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	3b03      	subs	r3, #3
 800083e:	e000      	b.n	8000842 <NVIC_EncodePriority+0x32>
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000844:	f04f 32ff 	mov.w	r2, #4294967295
 8000848:	69bb      	ldr	r3, [r7, #24]
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	43da      	mvns	r2, r3
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	401a      	ands	r2, r3
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000858:	f04f 31ff 	mov.w	r1, #4294967295
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	fa01 f303 	lsl.w	r3, r1, r3
 8000862:	43d9      	mvns	r1, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000868:	4313      	orrs	r3, r2
         );
}
 800086a:	4618      	mov	r0, r3
 800086c:	3724      	adds	r7, #36	; 0x24
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
	...

08000878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3b01      	subs	r3, #1
 8000884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000888:	d301      	bcc.n	800088e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800088a:	2301      	movs	r3, #1
 800088c:	e00f      	b.n	80008ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <SysTick_Config+0x40>)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3b01      	subs	r3, #1
 8000894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000896:	210f      	movs	r1, #15
 8000898:	f04f 30ff 	mov.w	r0, #4294967295
 800089c:	f7ff ff8e 	bl	80007bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <SysTick_Config+0x40>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a6:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <SysTick_Config+0x40>)
 80008a8:	2207      	movs	r2, #7
 80008aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	e000e010 	.word	0xe000e010

080008bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff ff47 	bl	8000758 <__NVIC_SetPriorityGrouping>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b086      	sub	sp, #24
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	4603      	mov	r3, r0
 80008da:	60b9      	str	r1, [r7, #8]
 80008dc:	607a      	str	r2, [r7, #4]
 80008de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008e4:	f7ff ff5c 	bl	80007a0 <__NVIC_GetPriorityGrouping>
 80008e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	68b9      	ldr	r1, [r7, #8]
 80008ee:	6978      	ldr	r0, [r7, #20]
 80008f0:	f7ff ff8e 	bl	8000810 <NVIC_EncodePriority>
 80008f4:	4602      	mov	r2, r0
 80008f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008fa:	4611      	mov	r1, r2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ff5d 	bl	80007bc <__NVIC_SetPriority>
}
 8000902:	bf00      	nop
 8000904:	3718      	adds	r7, #24
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b082      	sub	sp, #8
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff ffb0 	bl	8000878 <SysTick_Config>
 8000918:	4603      	mov	r3, r0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000924:	b480      	push	{r7}
 8000926:	b089      	sub	sp, #36	; 0x24
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000936:	2300      	movs	r3, #0
 8000938:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
 800093e:	e177      	b.n	8000c30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000940:	2201      	movs	r2, #1
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	697a      	ldr	r2, [r7, #20]
 8000950:	4013      	ands	r3, r2
 8000952:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	429a      	cmp	r2, r3
 800095a:	f040 8166 	bne.w	8000c2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	f003 0303 	and.w	r3, r3, #3
 8000966:	2b01      	cmp	r3, #1
 8000968:	d005      	beq.n	8000976 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000972:	2b02      	cmp	r3, #2
 8000974:	d130      	bne.n	80009d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	2203      	movs	r2, #3
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43db      	mvns	r3, r3
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	4013      	ands	r3, r2
 800098c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	68da      	ldr	r2, [r3, #12]
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	69ba      	ldr	r2, [r7, #24]
 800099c:	4313      	orrs	r3, r2
 800099e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009ac:	2201      	movs	r2, #1
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	43db      	mvns	r3, r3
 80009b6:	69ba      	ldr	r2, [r7, #24]
 80009b8:	4013      	ands	r3, r2
 80009ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	091b      	lsrs	r3, r3, #4
 80009c2:	f003 0201 	and.w	r2, r3, #1
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	69ba      	ldr	r2, [r7, #24]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f003 0303 	and.w	r3, r3, #3
 80009e0:	2b03      	cmp	r3, #3
 80009e2:	d017      	beq.n	8000a14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	2203      	movs	r2, #3
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	43db      	mvns	r3, r3
 80009f6:	69ba      	ldr	r2, [r7, #24]
 80009f8:	4013      	ands	r3, r2
 80009fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	689a      	ldr	r2, [r3, #8]
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f003 0303 	and.w	r3, r3, #3
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d123      	bne.n	8000a68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	08da      	lsrs	r2, r3, #3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3208      	adds	r2, #8
 8000a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	f003 0307 	and.w	r3, r3, #7
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	220f      	movs	r2, #15
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	4013      	ands	r3, r2
 8000a42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	691a      	ldr	r2, [r3, #16]
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	08da      	lsrs	r2, r3, #3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	3208      	adds	r2, #8
 8000a62:	69b9      	ldr	r1, [r7, #24]
 8000a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	2203      	movs	r2, #3
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	69ba      	ldr	r2, [r7, #24]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f003 0203 	and.w	r2, r3, #3
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	f000 80c0 	beq.w	8000c2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	4b66      	ldr	r3, [pc, #408]	; (8000c48 <HAL_GPIO_Init+0x324>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a65      	ldr	r2, [pc, #404]	; (8000c48 <HAL_GPIO_Init+0x324>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b63      	ldr	r3, [pc, #396]	; (8000c48 <HAL_GPIO_Init+0x324>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ac6:	4a61      	ldr	r2, [pc, #388]	; (8000c4c <HAL_GPIO_Init+0x328>)
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	089b      	lsrs	r3, r3, #2
 8000acc:	3302      	adds	r3, #2
 8000ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	f003 0303 	and.w	r3, r3, #3
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	220f      	movs	r2, #15
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a58      	ldr	r2, [pc, #352]	; (8000c50 <HAL_GPIO_Init+0x32c>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d037      	beq.n	8000b62 <HAL_GPIO_Init+0x23e>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a57      	ldr	r2, [pc, #348]	; (8000c54 <HAL_GPIO_Init+0x330>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d031      	beq.n	8000b5e <HAL_GPIO_Init+0x23a>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a56      	ldr	r2, [pc, #344]	; (8000c58 <HAL_GPIO_Init+0x334>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d02b      	beq.n	8000b5a <HAL_GPIO_Init+0x236>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a55      	ldr	r2, [pc, #340]	; (8000c5c <HAL_GPIO_Init+0x338>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d025      	beq.n	8000b56 <HAL_GPIO_Init+0x232>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a54      	ldr	r2, [pc, #336]	; (8000c60 <HAL_GPIO_Init+0x33c>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d01f      	beq.n	8000b52 <HAL_GPIO_Init+0x22e>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a53      	ldr	r2, [pc, #332]	; (8000c64 <HAL_GPIO_Init+0x340>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d019      	beq.n	8000b4e <HAL_GPIO_Init+0x22a>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a52      	ldr	r2, [pc, #328]	; (8000c68 <HAL_GPIO_Init+0x344>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d013      	beq.n	8000b4a <HAL_GPIO_Init+0x226>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a51      	ldr	r2, [pc, #324]	; (8000c6c <HAL_GPIO_Init+0x348>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d00d      	beq.n	8000b46 <HAL_GPIO_Init+0x222>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a50      	ldr	r2, [pc, #320]	; (8000c70 <HAL_GPIO_Init+0x34c>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d007      	beq.n	8000b42 <HAL_GPIO_Init+0x21e>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a4f      	ldr	r2, [pc, #316]	; (8000c74 <HAL_GPIO_Init+0x350>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d101      	bne.n	8000b3e <HAL_GPIO_Init+0x21a>
 8000b3a:	2309      	movs	r3, #9
 8000b3c:	e012      	b.n	8000b64 <HAL_GPIO_Init+0x240>
 8000b3e:	230a      	movs	r3, #10
 8000b40:	e010      	b.n	8000b64 <HAL_GPIO_Init+0x240>
 8000b42:	2308      	movs	r3, #8
 8000b44:	e00e      	b.n	8000b64 <HAL_GPIO_Init+0x240>
 8000b46:	2307      	movs	r3, #7
 8000b48:	e00c      	b.n	8000b64 <HAL_GPIO_Init+0x240>
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	e00a      	b.n	8000b64 <HAL_GPIO_Init+0x240>
 8000b4e:	2305      	movs	r3, #5
 8000b50:	e008      	b.n	8000b64 <HAL_GPIO_Init+0x240>
 8000b52:	2304      	movs	r3, #4
 8000b54:	e006      	b.n	8000b64 <HAL_GPIO_Init+0x240>
 8000b56:	2303      	movs	r3, #3
 8000b58:	e004      	b.n	8000b64 <HAL_GPIO_Init+0x240>
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	e002      	b.n	8000b64 <HAL_GPIO_Init+0x240>
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e000      	b.n	8000b64 <HAL_GPIO_Init+0x240>
 8000b62:	2300      	movs	r3, #0
 8000b64:	69fa      	ldr	r2, [r7, #28]
 8000b66:	f002 0203 	and.w	r2, r2, #3
 8000b6a:	0092      	lsls	r2, r2, #2
 8000b6c:	4093      	lsls	r3, r2
 8000b6e:	69ba      	ldr	r2, [r7, #24]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b74:	4935      	ldr	r1, [pc, #212]	; (8000c4c <HAL_GPIO_Init+0x328>)
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	089b      	lsrs	r3, r3, #2
 8000b7a:	3302      	adds	r3, #2
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b82:	4b3d      	ldr	r3, [pc, #244]	; (8000c78 <HAL_GPIO_Init+0x354>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ba6:	4a34      	ldr	r2, [pc, #208]	; (8000c78 <HAL_GPIO_Init+0x354>)
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000bac:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <HAL_GPIO_Init+0x354>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d003      	beq.n	8000bd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000bd0:	4a29      	ldr	r2, [pc, #164]	; (8000c78 <HAL_GPIO_Init+0x354>)
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bd6:	4b28      	ldr	r3, [pc, #160]	; (8000c78 <HAL_GPIO_Init+0x354>)
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	43db      	mvns	r3, r3
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	4013      	ands	r3, r2
 8000be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bfa:	4a1f      	ldr	r2, [pc, #124]	; (8000c78 <HAL_GPIO_Init+0x354>)
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c00:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <HAL_GPIO_Init+0x354>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d003      	beq.n	8000c24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c24:	4a14      	ldr	r2, [pc, #80]	; (8000c78 <HAL_GPIO_Init+0x354>)
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	61fb      	str	r3, [r7, #28]
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	2b0f      	cmp	r3, #15
 8000c34:	f67f ae84 	bls.w	8000940 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	3724      	adds	r7, #36	; 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40013800 	.word	0x40013800
 8000c50:	40020000 	.word	0x40020000
 8000c54:	40020400 	.word	0x40020400
 8000c58:	40020800 	.word	0x40020800
 8000c5c:	40020c00 	.word	0x40020c00
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40021400 	.word	0x40021400
 8000c68:	40021800 	.word	0x40021800
 8000c6c:	40021c00 	.word	0x40021c00
 8000c70:	40022000 	.word	0x40022000
 8000c74:	40022400 	.word	0x40022400
 8000c78:	40013c00 	.word	0x40013c00

08000c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	460b      	mov	r3, r1
 8000c86:	807b      	strh	r3, [r7, #2]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c8c:	787b      	ldrb	r3, [r7, #1]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c92:	887a      	ldrh	r2, [r7, #2]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c98:	e003      	b.n	8000ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c9a:	887b      	ldrh	r3, [r7, #2]
 8000c9c:	041a      	lsls	r2, r3, #16
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	619a      	str	r2, [r3, #24]
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	603b      	str	r3, [r7, #0]
 8000cca:	4b20      	ldr	r3, [pc, #128]	; (8000d4c <HAL_PWREx_EnableOverDrive+0x90>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a1f      	ldr	r2, [pc, #124]	; (8000d4c <HAL_PWREx_EnableOverDrive+0x90>)
 8000cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <HAL_PWREx_EnableOverDrive+0x90>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <HAL_PWREx_EnableOverDrive+0x94>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ce8:	f7ff fd2a 	bl	8000740 <HAL_GetTick>
 8000cec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000cee:	e009      	b.n	8000d04 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000cf0:	f7ff fd26 	bl	8000740 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cfe:	d901      	bls.n	8000d04 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000d00:	2303      	movs	r3, #3
 8000d02:	e01f      	b.n	8000d44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <HAL_PWREx_EnableOverDrive+0x98>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d10:	d1ee      	bne.n	8000cf0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d18:	f7ff fd12 	bl	8000740 <HAL_GetTick>
 8000d1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000d1e:	e009      	b.n	8000d34 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000d20:	f7ff fd0e 	bl	8000740 <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d2e:	d901      	bls.n	8000d34 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000d30:	2303      	movs	r3, #3
 8000d32:	e007      	b.n	8000d44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <HAL_PWREx_EnableOverDrive+0x98>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d40:	d1ee      	bne.n	8000d20 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	420e0040 	.word	0x420e0040
 8000d54:	40007000 	.word	0x40007000
 8000d58:	420e0044 	.word	0x420e0044

08000d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d101      	bne.n	8000d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e264      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d075      	beq.n	8000e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d7a:	4ba3      	ldr	r3, [pc, #652]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	f003 030c 	and.w	r3, r3, #12
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	d00c      	beq.n	8000da0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d86:	4ba0      	ldr	r3, [pc, #640]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d8e:	2b08      	cmp	r3, #8
 8000d90:	d112      	bne.n	8000db8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d92:	4b9d      	ldr	r3, [pc, #628]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000d9e:	d10b      	bne.n	8000db8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da0:	4b99      	ldr	r3, [pc, #612]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d05b      	beq.n	8000e64 <HAL_RCC_OscConfig+0x108>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d157      	bne.n	8000e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e23f      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dc0:	d106      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x74>
 8000dc2:	4b91      	ldr	r3, [pc, #580]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a90      	ldr	r2, [pc, #576]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	e01d      	b.n	8000e0c <HAL_RCC_OscConfig+0xb0>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dd8:	d10c      	bne.n	8000df4 <HAL_RCC_OscConfig+0x98>
 8000dda:	4b8b      	ldr	r3, [pc, #556]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a8a      	ldr	r2, [pc, #552]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	4b88      	ldr	r3, [pc, #544]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a87      	ldr	r2, [pc, #540]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	e00b      	b.n	8000e0c <HAL_RCC_OscConfig+0xb0>
 8000df4:	4b84      	ldr	r3, [pc, #528]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a83      	ldr	r2, [pc, #524]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	4b81      	ldr	r3, [pc, #516]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a80      	ldr	r2, [pc, #512]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d013      	beq.n	8000e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e14:	f7ff fc94 	bl	8000740 <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e1c:	f7ff fc90 	bl	8000740 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b64      	cmp	r3, #100	; 0x64
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e204      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e2e:	4b76      	ldr	r3, [pc, #472]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f0      	beq.n	8000e1c <HAL_RCC_OscConfig+0xc0>
 8000e3a:	e014      	b.n	8000e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3c:	f7ff fc80 	bl	8000740 <HAL_GetTick>
 8000e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e42:	e008      	b.n	8000e56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e44:	f7ff fc7c 	bl	8000740 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b64      	cmp	r3, #100	; 0x64
 8000e50:	d901      	bls.n	8000e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e1f0      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e56:	4b6c      	ldr	r3, [pc, #432]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f0      	bne.n	8000e44 <HAL_RCC_OscConfig+0xe8>
 8000e62:	e000      	b.n	8000e66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d063      	beq.n	8000f3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e72:	4b65      	ldr	r3, [pc, #404]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f003 030c 	and.w	r3, r3, #12
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00b      	beq.n	8000e96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e7e:	4b62      	ldr	r3, [pc, #392]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e86:	2b08      	cmp	r3, #8
 8000e88:	d11c      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e8a:	4b5f      	ldr	r3, [pc, #380]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d116      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e96:	4b5c      	ldr	r3, [pc, #368]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d005      	beq.n	8000eae <HAL_RCC_OscConfig+0x152>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d001      	beq.n	8000eae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e1c4      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eae:	4b56      	ldr	r3, [pc, #344]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	4952      	ldr	r1, [pc, #328]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ec2:	e03a      	b.n	8000f3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d020      	beq.n	8000f0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ecc:	4b4f      	ldr	r3, [pc, #316]	; (800100c <HAL_RCC_OscConfig+0x2b0>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed2:	f7ff fc35 	bl	8000740 <HAL_GetTick>
 8000ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed8:	e008      	b.n	8000eec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eda:	f7ff fc31 	bl	8000740 <HAL_GetTick>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e1a5      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eec:	4b46      	ldr	r3, [pc, #280]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0f0      	beq.n	8000eda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef8:	4b43      	ldr	r3, [pc, #268]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	691b      	ldr	r3, [r3, #16]
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	4940      	ldr	r1, [pc, #256]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	600b      	str	r3, [r1, #0]
 8000f0c:	e015      	b.n	8000f3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f0e:	4b3f      	ldr	r3, [pc, #252]	; (800100c <HAL_RCC_OscConfig+0x2b0>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f14:	f7ff fc14 	bl	8000740 <HAL_GetTick>
 8000f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f1c:	f7ff fc10 	bl	8000740 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e184      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f2e:	4b36      	ldr	r3, [pc, #216]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1f0      	bne.n	8000f1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0308 	and.w	r3, r3, #8
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d030      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d016      	beq.n	8000f7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f4e:	4b30      	ldr	r3, [pc, #192]	; (8001010 <HAL_RCC_OscConfig+0x2b4>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f54:	f7ff fbf4 	bl	8000740 <HAL_GetTick>
 8000f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f5c:	f7ff fbf0 	bl	8000740 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e164      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0f0      	beq.n	8000f5c <HAL_RCC_OscConfig+0x200>
 8000f7a:	e015      	b.n	8000fa8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f7c:	4b24      	ldr	r3, [pc, #144]	; (8001010 <HAL_RCC_OscConfig+0x2b4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f82:	f7ff fbdd 	bl	8000740 <HAL_GetTick>
 8000f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f88:	e008      	b.n	8000f9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f8a:	f7ff fbd9 	bl	8000740 <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e14d      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1f0      	bne.n	8000f8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 80a0 	beq.w	80010f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10f      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <HAL_RCC_OscConfig+0x2ac>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <HAL_RCC_OscConfig+0x2b8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d121      	bne.n	8001036 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <HAL_RCC_OscConfig+0x2b8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a07      	ldr	r2, [pc, #28]	; (8001014 <HAL_RCC_OscConfig+0x2b8>)
 8000ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ffe:	f7ff fb9f 	bl	8000740 <HAL_GetTick>
 8001002:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001004:	e011      	b.n	800102a <HAL_RCC_OscConfig+0x2ce>
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	42470000 	.word	0x42470000
 8001010:	42470e80 	.word	0x42470e80
 8001014:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001018:	f7ff fb92 	bl	8000740 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e106      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800102a:	4b85      	ldr	r3, [pc, #532]	; (8001240 <HAL_RCC_OscConfig+0x4e4>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001032:	2b00      	cmp	r3, #0
 8001034:	d0f0      	beq.n	8001018 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d106      	bne.n	800104c <HAL_RCC_OscConfig+0x2f0>
 800103e:	4b81      	ldr	r3, [pc, #516]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001042:	4a80      	ldr	r2, [pc, #512]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6713      	str	r3, [r2, #112]	; 0x70
 800104a:	e01c      	b.n	8001086 <HAL_RCC_OscConfig+0x32a>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	2b05      	cmp	r3, #5
 8001052:	d10c      	bne.n	800106e <HAL_RCC_OscConfig+0x312>
 8001054:	4b7b      	ldr	r3, [pc, #492]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001058:	4a7a      	ldr	r2, [pc, #488]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	6713      	str	r3, [r2, #112]	; 0x70
 8001060:	4b78      	ldr	r3, [pc, #480]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001064:	4a77      	ldr	r2, [pc, #476]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6713      	str	r3, [r2, #112]	; 0x70
 800106c:	e00b      	b.n	8001086 <HAL_RCC_OscConfig+0x32a>
 800106e:	4b75      	ldr	r3, [pc, #468]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001072:	4a74      	ldr	r2, [pc, #464]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001074:	f023 0301 	bic.w	r3, r3, #1
 8001078:	6713      	str	r3, [r2, #112]	; 0x70
 800107a:	4b72      	ldr	r3, [pc, #456]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 800107c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800107e:	4a71      	ldr	r2, [pc, #452]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001080:	f023 0304 	bic.w	r3, r3, #4
 8001084:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d015      	beq.n	80010ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800108e:	f7ff fb57 	bl	8000740 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001094:	e00a      	b.n	80010ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001096:	f7ff fb53 	bl	8000740 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e0c5      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ac:	4b65      	ldr	r3, [pc, #404]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 80010ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0ee      	beq.n	8001096 <HAL_RCC_OscConfig+0x33a>
 80010b8:	e014      	b.n	80010e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ba:	f7ff fb41 	bl	8000740 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010c0:	e00a      	b.n	80010d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010c2:	f7ff fb3d 	bl	8000740 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e0af      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d8:	4b5a      	ldr	r3, [pc, #360]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 80010da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1ee      	bne.n	80010c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d105      	bne.n	80010f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ea:	4b56      	ldr	r3, [pc, #344]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	4a55      	ldr	r2, [pc, #340]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 80010f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 809b 	beq.w	8001236 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001100:	4b50      	ldr	r3, [pc, #320]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 030c 	and.w	r3, r3, #12
 8001108:	2b08      	cmp	r3, #8
 800110a:	d05c      	beq.n	80011c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d141      	bne.n	8001198 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001114:	4b4c      	ldr	r3, [pc, #304]	; (8001248 <HAL_RCC_OscConfig+0x4ec>)
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111a:	f7ff fb11 	bl	8000740 <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001122:	f7ff fb0d 	bl	8000740 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e081      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001134:	4b43      	ldr	r3, [pc, #268]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f0      	bne.n	8001122 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69da      	ldr	r2, [r3, #28]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	431a      	orrs	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	019b      	lsls	r3, r3, #6
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001156:	085b      	lsrs	r3, r3, #1
 8001158:	3b01      	subs	r3, #1
 800115a:	041b      	lsls	r3, r3, #16
 800115c:	431a      	orrs	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001162:	061b      	lsls	r3, r3, #24
 8001164:	4937      	ldr	r1, [pc, #220]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001166:	4313      	orrs	r3, r2
 8001168:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800116a:	4b37      	ldr	r3, [pc, #220]	; (8001248 <HAL_RCC_OscConfig+0x4ec>)
 800116c:	2201      	movs	r2, #1
 800116e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001170:	f7ff fae6 	bl	8000740 <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001178:	f7ff fae2 	bl	8000740 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e056      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800118a:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d0f0      	beq.n	8001178 <HAL_RCC_OscConfig+0x41c>
 8001196:	e04e      	b.n	8001236 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <HAL_RCC_OscConfig+0x4ec>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119e:	f7ff facf 	bl	8000740 <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011a6:	f7ff facb 	bl	8000740 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e03f      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011b8:	4b22      	ldr	r3, [pc, #136]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1f0      	bne.n	80011a6 <HAL_RCC_OscConfig+0x44a>
 80011c4:	e037      	b.n	8001236 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d101      	bne.n	80011d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e032      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80011d2:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d028      	beq.n	8001232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d121      	bne.n	8001232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d11a      	bne.n	8001232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001202:	4013      	ands	r3, r2
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001208:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800120a:	4293      	cmp	r3, r2
 800120c:	d111      	bne.n	8001232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001218:	085b      	lsrs	r3, r3, #1
 800121a:	3b01      	subs	r3, #1
 800121c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800121e:	429a      	cmp	r2, r3
 8001220:	d107      	bne.n	8001232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800122e:	429a      	cmp	r2, r3
 8001230:	d001      	beq.n	8001236 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40007000 	.word	0x40007000
 8001244:	40023800 	.word	0x40023800
 8001248:	42470060 	.word	0x42470060

0800124c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e0cc      	b.n	80013fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001260:	4b68      	ldr	r3, [pc, #416]	; (8001404 <HAL_RCC_ClockConfig+0x1b8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 030f 	and.w	r3, r3, #15
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	d90c      	bls.n	8001288 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126e:	4b65      	ldr	r3, [pc, #404]	; (8001404 <HAL_RCC_ClockConfig+0x1b8>)
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001276:	4b63      	ldr	r3, [pc, #396]	; (8001404 <HAL_RCC_ClockConfig+0x1b8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	429a      	cmp	r2, r3
 8001282:	d001      	beq.n	8001288 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e0b8      	b.n	80013fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d020      	beq.n	80012d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	2b00      	cmp	r3, #0
 800129e:	d005      	beq.n	80012ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012a0:	4b59      	ldr	r3, [pc, #356]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	4a58      	ldr	r2, [pc, #352]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80012a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0308 	and.w	r3, r3, #8
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012b8:	4b53      	ldr	r3, [pc, #332]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	4a52      	ldr	r2, [pc, #328]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80012be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012c4:	4b50      	ldr	r3, [pc, #320]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	494d      	ldr	r1, [pc, #308]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d044      	beq.n	800136c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d107      	bne.n	80012fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ea:	4b47      	ldr	r3, [pc, #284]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d119      	bne.n	800132a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e07f      	b.n	80013fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d003      	beq.n	800130a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001306:	2b03      	cmp	r3, #3
 8001308:	d107      	bne.n	800131a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130a:	4b3f      	ldr	r3, [pc, #252]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d109      	bne.n	800132a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e06f      	b.n	80013fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131a:	4b3b      	ldr	r3, [pc, #236]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e067      	b.n	80013fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800132a:	4b37      	ldr	r3, [pc, #220]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f023 0203 	bic.w	r2, r3, #3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	4934      	ldr	r1, [pc, #208]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 8001338:	4313      	orrs	r3, r2
 800133a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800133c:	f7ff fa00 	bl	8000740 <HAL_GetTick>
 8001340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001342:	e00a      	b.n	800135a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001344:	f7ff f9fc 	bl	8000740 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001352:	4293      	cmp	r3, r2
 8001354:	d901      	bls.n	800135a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e04f      	b.n	80013fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135a:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 020c 	and.w	r2, r3, #12
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	429a      	cmp	r2, r3
 800136a:	d1eb      	bne.n	8001344 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800136c:	4b25      	ldr	r3, [pc, #148]	; (8001404 <HAL_RCC_ClockConfig+0x1b8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 030f 	and.w	r3, r3, #15
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	d20c      	bcs.n	8001394 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137a:	4b22      	ldr	r3, [pc, #136]	; (8001404 <HAL_RCC_ClockConfig+0x1b8>)
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001382:	4b20      	ldr	r3, [pc, #128]	; (8001404 <HAL_RCC_ClockConfig+0x1b8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	429a      	cmp	r2, r3
 800138e:	d001      	beq.n	8001394 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e032      	b.n	80013fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	2b00      	cmp	r3, #0
 800139e:	d008      	beq.n	80013b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013a0:	4b19      	ldr	r3, [pc, #100]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	4916      	ldr	r1, [pc, #88]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d009      	beq.n	80013d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	490e      	ldr	r1, [pc, #56]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013d2:	f000 f821 	bl	8001418 <HAL_RCC_GetSysClockFreq>
 80013d6:	4602      	mov	r2, r0
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_RCC_ClockConfig+0x1bc>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	091b      	lsrs	r3, r3, #4
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	490a      	ldr	r1, [pc, #40]	; (800140c <HAL_RCC_ClockConfig+0x1c0>)
 80013e4:	5ccb      	ldrb	r3, [r1, r3]
 80013e6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ea:	4a09      	ldr	r2, [pc, #36]	; (8001410 <HAL_RCC_ClockConfig+0x1c4>)
 80013ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_RCC_ClockConfig+0x1c8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f960 	bl	80006b8 <HAL_InitTick>

  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023c00 	.word	0x40023c00
 8001408:	40023800 	.word	0x40023800
 800140c:	08001788 	.word	0x08001788
 8001410:	2000000c 	.word	0x2000000c
 8001414:	20000010 	.word	0x20000010

08001418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001418:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800141c:	b084      	sub	sp, #16
 800141e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	2300      	movs	r3, #0
 800142a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001430:	4b67      	ldr	r3, [pc, #412]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 030c 	and.w	r3, r3, #12
 8001438:	2b08      	cmp	r3, #8
 800143a:	d00d      	beq.n	8001458 <HAL_RCC_GetSysClockFreq+0x40>
 800143c:	2b08      	cmp	r3, #8
 800143e:	f200 80bd 	bhi.w	80015bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8001442:	2b00      	cmp	r3, #0
 8001444:	d002      	beq.n	800144c <HAL_RCC_GetSysClockFreq+0x34>
 8001446:	2b04      	cmp	r3, #4
 8001448:	d003      	beq.n	8001452 <HAL_RCC_GetSysClockFreq+0x3a>
 800144a:	e0b7      	b.n	80015bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800144c:	4b61      	ldr	r3, [pc, #388]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800144e:	60bb      	str	r3, [r7, #8]
       break;
 8001450:	e0b7      	b.n	80015c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001452:	4b61      	ldr	r3, [pc, #388]	; (80015d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001454:	60bb      	str	r3, [r7, #8]
      break;
 8001456:	e0b4      	b.n	80015c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001458:	4b5d      	ldr	r3, [pc, #372]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001460:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001462:	4b5b      	ldr	r3, [pc, #364]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d04d      	beq.n	800150a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800146e:	4b58      	ldr	r3, [pc, #352]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	099b      	lsrs	r3, r3, #6
 8001474:	461a      	mov	r2, r3
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800147e:	f04f 0100 	mov.w	r1, #0
 8001482:	ea02 0800 	and.w	r8, r2, r0
 8001486:	ea03 0901 	and.w	r9, r3, r1
 800148a:	4640      	mov	r0, r8
 800148c:	4649      	mov	r1, r9
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	014b      	lsls	r3, r1, #5
 8001498:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800149c:	0142      	lsls	r2, r0, #5
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	ebb0 0008 	subs.w	r0, r0, r8
 80014a6:	eb61 0109 	sbc.w	r1, r1, r9
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	018b      	lsls	r3, r1, #6
 80014b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80014b8:	0182      	lsls	r2, r0, #6
 80014ba:	1a12      	subs	r2, r2, r0
 80014bc:	eb63 0301 	sbc.w	r3, r3, r1
 80014c0:	f04f 0000 	mov.w	r0, #0
 80014c4:	f04f 0100 	mov.w	r1, #0
 80014c8:	00d9      	lsls	r1, r3, #3
 80014ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80014ce:	00d0      	lsls	r0, r2, #3
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	eb12 0208 	adds.w	r2, r2, r8
 80014d8:	eb43 0309 	adc.w	r3, r3, r9
 80014dc:	f04f 0000 	mov.w	r0, #0
 80014e0:	f04f 0100 	mov.w	r1, #0
 80014e4:	0259      	lsls	r1, r3, #9
 80014e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80014ea:	0250      	lsls	r0, r2, #9
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	461a      	mov	r2, r3
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	f7fe fe76 	bl	80001ec <__aeabi_uldivmod>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4613      	mov	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	e04a      	b.n	80015a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800150a:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	099b      	lsrs	r3, r3, #6
 8001510:	461a      	mov	r2, r3
 8001512:	f04f 0300 	mov.w	r3, #0
 8001516:	f240 10ff 	movw	r0, #511	; 0x1ff
 800151a:	f04f 0100 	mov.w	r1, #0
 800151e:	ea02 0400 	and.w	r4, r2, r0
 8001522:	ea03 0501 	and.w	r5, r3, r1
 8001526:	4620      	mov	r0, r4
 8001528:	4629      	mov	r1, r5
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	014b      	lsls	r3, r1, #5
 8001534:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001538:	0142      	lsls	r2, r0, #5
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	1b00      	subs	r0, r0, r4
 8001540:	eb61 0105 	sbc.w	r1, r1, r5
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	018b      	lsls	r3, r1, #6
 800154e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001552:	0182      	lsls	r2, r0, #6
 8001554:	1a12      	subs	r2, r2, r0
 8001556:	eb63 0301 	sbc.w	r3, r3, r1
 800155a:	f04f 0000 	mov.w	r0, #0
 800155e:	f04f 0100 	mov.w	r1, #0
 8001562:	00d9      	lsls	r1, r3, #3
 8001564:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001568:	00d0      	lsls	r0, r2, #3
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	1912      	adds	r2, r2, r4
 8001570:	eb45 0303 	adc.w	r3, r5, r3
 8001574:	f04f 0000 	mov.w	r0, #0
 8001578:	f04f 0100 	mov.w	r1, #0
 800157c:	0299      	lsls	r1, r3, #10
 800157e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001582:	0290      	lsls	r0, r2, #10
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4610      	mov	r0, r2
 800158a:	4619      	mov	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	461a      	mov	r2, r3
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	f7fe fe2a 	bl	80001ec <__aeabi_uldivmod>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4613      	mov	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	0c1b      	lsrs	r3, r3, #16
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	3301      	adds	r3, #1
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b8:	60bb      	str	r3, [r7, #8]
      break;
 80015ba:	e002      	b.n	80015c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80015be:	60bb      	str	r3, [r7, #8]
      break;
 80015c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015c2:	68bb      	ldr	r3, [r7, #8]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	00f42400 	.word	0x00f42400
 80015d8:	007a1200 	.word	0x007a1200

080015dc <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 80015e0:	f7ff f84e 	bl	8000680 <HAL_Init>

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 80015e4:	f000 f80a 	bl	80015fc <SystemClock_Config>

  /* Initialize BSP Led for LED2 */
  BSP_LED_Init(LED1);
 80015e8:	2000      	movs	r0, #0
 80015ea:	f7fe ff7b 	bl	80004e4 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 80015ee:	2001      	movs	r0, #1
 80015f0:	f7fe ff78 	bl	80004e4 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 80015f4:	2002      	movs	r0, #2
 80015f6:	f7fe ff75 	bl	80004e4 <BSP_LED_Init>


  /* Infinite loop */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <main+0x1e>

080015fc <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b094      	sub	sp, #80	; 0x50
 8001600:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	4b2c      	ldr	r3, [pc, #176]	; (80016b8 <SystemClock_Config+0xbc>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	4a2b      	ldr	r2, [pc, #172]	; (80016b8 <SystemClock_Config+0xbc>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001610:	6413      	str	r3, [r2, #64]	; 0x40
 8001612:	4b29      	ldr	r3, [pc, #164]	; (80016b8 <SystemClock_Config+0xbc>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	4b26      	ldr	r3, [pc, #152]	; (80016bc <SystemClock_Config+0xc0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a25      	ldr	r2, [pc, #148]	; (80016bc <SystemClock_Config+0xc0>)
 8001628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	4b23      	ldr	r3, [pc, #140]	; (80016bc <SystemClock_Config+0xc0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800163a:	2301      	movs	r3, #1
 800163c:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800163e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001642:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001644:	2302      	movs	r3, #2
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001648:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800164c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 800164e:	2308      	movs	r3, #8
 8001650:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001652:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001656:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001658:	2302      	movs	r3, #2
 800165a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800165c:	2307      	movs	r3, #7
 800165e:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fb79 	bl	8000d5c <HAL_RCC_OscConfig>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 8001670:	f000 f826 	bl	80016c0 <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001674:	f7ff fb22 	bl	8000cbc <HAL_PWREx_EnableOverDrive>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 800167e:	f000 f81f 	bl	80016c0 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001682:	230f      	movs	r3, #15
 8001684:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001686:	2302      	movs	r3, #2
 8001688:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168a:	2300      	movs	r3, #0
 800168c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 800168e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8001694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001698:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800169a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800169e:	2105      	movs	r1, #5
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fdd3 	bl	800124c <HAL_RCC_ClockConfig>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 80016ac:	f000 f808 	bl	80016c0 <Error_Handler>
  }
}
 80016b0:	bf00      	nop
 80016b2:	3750      	adds	r7, #80	; 0x50
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40007000 	.word	0x40007000

080016c0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 80016c4:	2001      	movs	r0, #1
 80016c6:	f7fe ff5d 	bl	8000584 <BSP_LED_On>
  while (1)
 80016ca:	e7fe      	b.n	80016ca <Error_Handler+0xa>

080016cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80016cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001704 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016d2:	e003      	b.n	80016dc <LoopCopyDataInit>

080016d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016da:	3104      	adds	r1, #4

080016dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016dc:	480b      	ldr	r0, [pc, #44]	; (800170c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016e4:	d3f6      	bcc.n	80016d4 <CopyDataInit>
  ldr  r2, =_sbss
 80016e6:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016e8:	e002      	b.n	80016f0 <LoopFillZerobss>

080016ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016ec:	f842 3b04 	str.w	r3, [r2], #4

080016f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016f4:	d3f9      	bcc.n	80016ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016f6:	f7fe ff5f 	bl	80005b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016fa:	f000 f811 	bl	8001720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016fe:	f7ff ff6d 	bl	80015dc <main>
  bx  lr    
 8001702:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001704:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001708:	080017a8 	.word	0x080017a8
  ldr  r0, =_sdata
 800170c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001710:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8001714:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8001718:	20000038 	.word	0x20000038

0800171c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800171c:	e7fe      	b.n	800171c <ADC_IRQHandler>
	...

08001720 <__libc_init_array>:
 8001720:	b570      	push	{r4, r5, r6, lr}
 8001722:	4d0d      	ldr	r5, [pc, #52]	; (8001758 <__libc_init_array+0x38>)
 8001724:	4c0d      	ldr	r4, [pc, #52]	; (800175c <__libc_init_array+0x3c>)
 8001726:	1b64      	subs	r4, r4, r5
 8001728:	10a4      	asrs	r4, r4, #2
 800172a:	2600      	movs	r6, #0
 800172c:	42a6      	cmp	r6, r4
 800172e:	d109      	bne.n	8001744 <__libc_init_array+0x24>
 8001730:	4d0b      	ldr	r5, [pc, #44]	; (8001760 <__libc_init_array+0x40>)
 8001732:	4c0c      	ldr	r4, [pc, #48]	; (8001764 <__libc_init_array+0x44>)
 8001734:	f000 f818 	bl	8001768 <_init>
 8001738:	1b64      	subs	r4, r4, r5
 800173a:	10a4      	asrs	r4, r4, #2
 800173c:	2600      	movs	r6, #0
 800173e:	42a6      	cmp	r6, r4
 8001740:	d105      	bne.n	800174e <__libc_init_array+0x2e>
 8001742:	bd70      	pop	{r4, r5, r6, pc}
 8001744:	f855 3b04 	ldr.w	r3, [r5], #4
 8001748:	4798      	blx	r3
 800174a:	3601      	adds	r6, #1
 800174c:	e7ee      	b.n	800172c <__libc_init_array+0xc>
 800174e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001752:	4798      	blx	r3
 8001754:	3601      	adds	r6, #1
 8001756:	e7f2      	b.n	800173e <__libc_init_array+0x1e>
 8001758:	080017a0 	.word	0x080017a0
 800175c:	080017a0 	.word	0x080017a0
 8001760:	080017a0 	.word	0x080017a0
 8001764:	080017a4 	.word	0x080017a4

08001768 <_init>:
 8001768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800176a:	bf00      	nop
 800176c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800176e:	bc08      	pop	{r3}
 8001770:	469e      	mov	lr, r3
 8001772:	4770      	bx	lr

08001774 <_fini>:
 8001774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001776:	bf00      	nop
 8001778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800177a:	bc08      	pop	{r3}
 800177c:	469e      	mov	lr, r3
 800177e:	4770      	bx	lr
