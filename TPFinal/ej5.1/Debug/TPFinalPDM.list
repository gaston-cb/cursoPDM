
TPFinalPDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000562c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080057e0  080057e0  000157e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058d8  080058d8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080058d8  080058d8  000158d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058e0  080058e0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058e0  080058e0  000158e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058e4  080058e4  000158e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080058e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000000d4  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000154  20000154  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fe7a  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027c5  00000000  00000000  0002ff2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a98  00000000  00000000  000326f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000980  00000000  00000000  00033188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027576  00000000  00000000  00033b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000119d5  00000000  00000000  0005b07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea48a  00000000  00000000  0006ca53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00156edd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030c8  00000000  00000000  00156f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080057c4 	.word	0x080057c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	080057c4 	.word	0x080057c4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96e 	b.w	8000f9c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468c      	mov	ip, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8083 	bne.w	8000dee <__udivmoddi4+0x116>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d947      	bls.n	8000d7e <__udivmoddi4+0xa6>
 8000cee:	fab2 f282 	clz	r2, r2
 8000cf2:	b142      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	f1c2 0020 	rsb	r0, r2, #32
 8000cf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	4097      	lsls	r7, r2
 8000d00:	ea40 0c01 	orr.w	ip, r0, r1
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d10:	fa1f fe87 	uxth.w	lr, r7
 8000d14:	fb08 c116 	mls	r1, r8, r6, ip
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 8119 	bcs.w	8000f60 <__udivmoddi4+0x288>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8116 	bls.w	8000f60 <__udivmoddi4+0x288>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8105 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f240 8102 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d60:	3802      	subs	r0, #2
 8000d62:	443c      	add	r4, r7
 8000d64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d68:	eba4 040e 	sub.w	r4, r4, lr
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	b902      	cbnz	r2, 8000d82 <__udivmoddi4+0xaa>
 8000d80:	deff      	udf	#255	; 0xff
 8000d82:	fab2 f282 	clz	r2, r2
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d150      	bne.n	8000e2c <__udivmoddi4+0x154>
 8000d8a:	1bcb      	subs	r3, r1, r7
 8000d8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d90:	fa1f f887 	uxth.w	r8, r7
 8000d94:	2601      	movs	r6, #1
 8000d96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d9a:	0c21      	lsrs	r1, r4, #16
 8000d9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb08 f30c 	mul.w	r3, r8, ip
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0xe2>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	f200 80e9 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1ac9      	subs	r1, r1, r3
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x10c>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x10a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80d9 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e7bf      	b.n	8000d6e <__udivmoddi4+0x96>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0x12e>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80b1 	beq.w	8000f5a <__udivmoddi4+0x282>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x1cc>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0x140>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80b8 	bhi.w	8000f88 <__udivmoddi4+0x2b0>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	468c      	mov	ip, r1
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0a8      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000e26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e2a:	e7a5      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f603 	lsr.w	r6, r0, r3
 8000e34:	4097      	lsls	r7, r2
 8000e36:	fa01 f002 	lsl.w	r0, r1, r2
 8000e3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3e:	40d9      	lsrs	r1, r3
 8000e40:	4330      	orrs	r0, r6
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e48:	fa1f f887 	uxth.w	r8, r7
 8000e4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e54:	fb06 f108 	mul.w	r1, r6, r8
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5e:	d909      	bls.n	8000e74 <__udivmoddi4+0x19c>
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e66:	f080 808d 	bcs.w	8000f84 <__udivmoddi4+0x2ac>
 8000e6a:	4299      	cmp	r1, r3
 8000e6c:	f240 808a 	bls.w	8000f84 <__udivmoddi4+0x2ac>
 8000e70:	3e02      	subs	r6, #2
 8000e72:	443b      	add	r3, r7
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b281      	uxth	r1, r0
 8000e78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e84:	fb00 f308 	mul.w	r3, r0, r8
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x1c4>
 8000e8c:	1879      	adds	r1, r7, r1
 8000e8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e92:	d273      	bcs.n	8000f7c <__udivmoddi4+0x2a4>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d971      	bls.n	8000f7c <__udivmoddi4+0x2a4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4439      	add	r1, r7
 8000e9c:	1acb      	subs	r3, r1, r3
 8000e9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ea2:	e778      	b.n	8000d96 <__udivmoddi4+0xbe>
 8000ea4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ea8:	fa03 f406 	lsl.w	r4, r3, r6
 8000eac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000eb0:	431c      	orrs	r4, r3
 8000eb2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ebe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ec2:	431f      	orrs	r7, r3
 8000ec4:	0c3b      	lsrs	r3, r7, #16
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fa1f f884 	uxth.w	r8, r4
 8000ece:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ed2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ed6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eda:	458a      	cmp	sl, r1
 8000edc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x220>
 8000ee6:	1861      	adds	r1, r4, r1
 8000ee8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eec:	d248      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000eee:	458a      	cmp	sl, r1
 8000ef0:	d946      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000ef2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef6:	4421      	add	r1, r4
 8000ef8:	eba1 010a 	sub.w	r1, r1, sl
 8000efc:	b2bf      	uxth	r7, r7
 8000efe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f0a:	fb00 f808 	mul.w	r8, r0, r8
 8000f0e:	45b8      	cmp	r8, r7
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x24a>
 8000f12:	19e7      	adds	r7, r4, r7
 8000f14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f18:	d22e      	bcs.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1a:	45b8      	cmp	r8, r7
 8000f1c:	d92c      	bls.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	4427      	add	r7, r4
 8000f22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f26:	eba7 0708 	sub.w	r7, r7, r8
 8000f2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2e:	454f      	cmp	r7, r9
 8000f30:	46c6      	mov	lr, r8
 8000f32:	4649      	mov	r1, r9
 8000f34:	d31a      	bcc.n	8000f6c <__udivmoddi4+0x294>
 8000f36:	d017      	beq.n	8000f68 <__udivmoddi4+0x290>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x27a>
 8000f3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f46:	40f2      	lsrs	r2, r6
 8000f48:	ea4c 0202 	orr.w	r2, ip, r2
 8000f4c:	40f7      	lsrs	r7, r6
 8000f4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f52:	2600      	movs	r6, #0
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e70b      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6fd      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f68:	4543      	cmp	r3, r8
 8000f6a:	d2e5      	bcs.n	8000f38 <__udivmoddi4+0x260>
 8000f6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f70:	eb69 0104 	sbc.w	r1, r9, r4
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7df      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e7d2      	b.n	8000f22 <__udivmoddi4+0x24a>
 8000f7c:	4660      	mov	r0, ip
 8000f7e:	e78d      	b.n	8000e9c <__udivmoddi4+0x1c4>
 8000f80:	4681      	mov	r9, r0
 8000f82:	e7b9      	b.n	8000ef8 <__udivmoddi4+0x220>
 8000f84:	4666      	mov	r6, ip
 8000f86:	e775      	b.n	8000e74 <__udivmoddi4+0x19c>
 8000f88:	4630      	mov	r0, r6
 8000f8a:	e74a      	b.n	8000e22 <__udivmoddi4+0x14a>
 8000f8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f90:	4439      	add	r1, r7
 8000f92:	e713      	b.n	8000dbc <__udivmoddi4+0xe4>
 8000f94:	3802      	subs	r0, #2
 8000f96:	443c      	add	r4, r7
 8000f98:	e724      	b.n	8000de4 <__udivmoddi4+0x10c>
 8000f9a:	bf00      	nop

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <initFSMButton>:
static uint16_t number_port ;
GPIO_TypeDef GPIO_sel ;
static uint32_t tickstart = 0 ;


void initFSMButton(char p, uint8_t num_port){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	460a      	mov	r2, r1
 8000faa:	71fb      	strb	r3, [r7, #7]
 8000fac:	4613      	mov	r3, r2
 8000fae:	71bb      	strb	r3, [r7, #6]
	button_state = BUTTON_UP ;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <initFSMButton+0x2c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
	selectPortButton(p, num_port) ;
 8000fb6:	79ba      	ldrb	r2, [r7, #6]
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f807 	bl	8000fd0 <selectPortButton>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2000009c 	.word	0x2000009c

08000fd0 <selectPortButton>:




static void selectPortButton(char p, uint8_t num_port){
 8000fd0:	b5b0      	push	{r4, r5, r7, lr}
 8000fd2:	b092      	sub	sp, #72	; 0x48
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	460a      	mov	r2, r1
 8000fda:	71fb      	strb	r3, [r7, #7]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	71bb      	strb	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Pin = selectGPIOport(num_port);
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f99e 	bl	800133c <selectGPIOport>
 8001000:	4603      	mov	r3, r0
 8001002:	637b      	str	r3, [r7, #52]	; 0x34
	number_port = GPIO_InitStruct.Pin ;
 8001004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001006:	b29a      	uxth	r2, r3
 8001008:	4bb0      	ldr	r3, [pc, #704]	; (80012cc <selectPortButton+0x2fc>)
 800100a:	801a      	strh	r2, [r3, #0]
	// if port== 0 - port0 , port == 1 , port1 ....


	switch(p){
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	3b41      	subs	r3, #65	; 0x41
 8001010:	2b2a      	cmp	r3, #42	; 0x2a
 8001012:	f200 818a 	bhi.w	800132a <selectPortButton+0x35a>
 8001016:	a201      	add	r2, pc, #4	; (adr r2, 800101c <selectPortButton+0x4c>)
 8001018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101c:	080010c9 	.word	0x080010c9
 8001020:	0800110b 	.word	0x0800110b
 8001024:	0800114d 	.word	0x0800114d
 8001028:	0800118f 	.word	0x0800118f
 800102c:	080011d1 	.word	0x080011d1
 8001030:	080011fb 	.word	0x080011fb
 8001034:	08001225 	.word	0x08001225
 8001038:	0800124f 	.word	0x0800124f
 800103c:	08001279 	.word	0x08001279
 8001040:	080012a3 	.word	0x080012a3
 8001044:	08001301 	.word	0x08001301
 8001048:	0800132b 	.word	0x0800132b
 800104c:	0800132b 	.word	0x0800132b
 8001050:	0800132b 	.word	0x0800132b
 8001054:	0800132b 	.word	0x0800132b
 8001058:	0800132b 	.word	0x0800132b
 800105c:	0800132b 	.word	0x0800132b
 8001060:	0800132b 	.word	0x0800132b
 8001064:	0800132b 	.word	0x0800132b
 8001068:	0800132b 	.word	0x0800132b
 800106c:	0800132b 	.word	0x0800132b
 8001070:	0800132b 	.word	0x0800132b
 8001074:	0800132b 	.word	0x0800132b
 8001078:	0800132b 	.word	0x0800132b
 800107c:	0800132b 	.word	0x0800132b
 8001080:	0800132b 	.word	0x0800132b
 8001084:	0800132b 	.word	0x0800132b
 8001088:	0800132b 	.word	0x0800132b
 800108c:	0800132b 	.word	0x0800132b
 8001090:	0800132b 	.word	0x0800132b
 8001094:	0800132b 	.word	0x0800132b
 8001098:	0800132b 	.word	0x0800132b
 800109c:	080010c9 	.word	0x080010c9
 80010a0:	0800110b 	.word	0x0800110b
 80010a4:	0800114d 	.word	0x0800114d
 80010a8:	0800118f 	.word	0x0800118f
 80010ac:	080011d1 	.word	0x080011d1
 80010b0:	080011fb 	.word	0x080011fb
 80010b4:	08001225 	.word	0x08001225
 80010b8:	0800124f 	.word	0x0800124f
 80010bc:	08001279 	.word	0x08001279
 80010c0:	080012a3 	.word	0x080012a3
 80010c4:	08001301 	.word	0x08001301
	case 'a':
	case 'A':
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	633b      	str	r3, [r7, #48]	; 0x30
 80010cc:	4b80      	ldr	r3, [pc, #512]	; (80012d0 <selectPortButton+0x300>)
 80010ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d0:	4a7f      	ldr	r2, [pc, #508]	; (80012d0 <selectPortButton+0x300>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6313      	str	r3, [r2, #48]	; 0x30
 80010d8:	4b7d      	ldr	r3, [pc, #500]	; (80012d0 <selectPortButton+0x300>)
 80010da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	633b      	str	r3, [r7, #48]	; 0x30
 80010e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    	GPIO_sel = *GPIOA ;
 80010e4:	4b7b      	ldr	r3, [pc, #492]	; (80012d4 <selectPortButton+0x304>)
 80010e6:	4a7c      	ldr	r2, [pc, #496]	; (80012d8 <selectPortButton+0x308>)
 80010e8:	4614      	mov	r4, r2
 80010ea:	461d      	mov	r5, r3
 80010ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010f8:	e884 0003 	stmia.w	r4, {r0, r1}
		//HAL_GPIO_Init(&GPIO_sel, &GPIO_InitStruct);
    	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001100:	4619      	mov	r1, r3
 8001102:	4874      	ldr	r0, [pc, #464]	; (80012d4 <selectPortButton+0x304>)
 8001104:	f001 f8c6 	bl	8002294 <HAL_GPIO_Init>

    	break ;
 8001108:	e110      	b.n	800132c <selectPortButton+0x35c>
	case 'b':
	case 'B':
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800110e:	4b70      	ldr	r3, [pc, #448]	; (80012d0 <selectPortButton+0x300>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a6f      	ldr	r2, [pc, #444]	; (80012d0 <selectPortButton+0x300>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b6d      	ldr	r3, [pc, #436]	; (80012d0 <selectPortButton+0x300>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		GPIO_sel = *GPIOB ;
 8001126:	4b6d      	ldr	r3, [pc, #436]	; (80012dc <selectPortButton+0x30c>)
 8001128:	4a6b      	ldr	r2, [pc, #428]	; (80012d8 <selectPortButton+0x308>)
 800112a:	4614      	mov	r4, r2
 800112c:	461d      	mov	r5, r3
 800112e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001130:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001132:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001134:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001136:	e895 0003 	ldmia.w	r5, {r0, r1}
 800113a:	e884 0003 	stmia.w	r4, {r0, r1}
		HAL_GPIO_Init(&GPIO_sel, &GPIO_InitStruct);
 800113e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001142:	4619      	mov	r1, r3
 8001144:	4864      	ldr	r0, [pc, #400]	; (80012d8 <selectPortButton+0x308>)
 8001146:	f001 f8a5 	bl	8002294 <HAL_GPIO_Init>

		break ;
 800114a:	e0ef      	b.n	800132c <selectPortButton+0x35c>
	case 'c':
	case 'C':
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001150:	4b5f      	ldr	r3, [pc, #380]	; (80012d0 <selectPortButton+0x300>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	4a5e      	ldr	r2, [pc, #376]	; (80012d0 <selectPortButton+0x300>)
 8001156:	f043 0304 	orr.w	r3, r3, #4
 800115a:	6313      	str	r3, [r2, #48]	; 0x30
 800115c:	4b5c      	ldr	r3, [pc, #368]	; (80012d0 <selectPortButton+0x300>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
 8001166:	6abb      	ldr	r3, [r7, #40]	; 0x28
		GPIO_sel = *GPIOC ;
 8001168:	4b5d      	ldr	r3, [pc, #372]	; (80012e0 <selectPortButton+0x310>)
 800116a:	4a5b      	ldr	r2, [pc, #364]	; (80012d8 <selectPortButton+0x308>)
 800116c:	4614      	mov	r4, r2
 800116e:	461d      	mov	r5, r3
 8001170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001178:	e895 0003 	ldmia.w	r5, {r0, r1}
 800117c:	e884 0003 	stmia.w	r4, {r0, r1}
		HAL_GPIO_Init(&GPIO_sel, &GPIO_InitStruct);
 8001180:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001184:	4619      	mov	r1, r3
 8001186:	4854      	ldr	r0, [pc, #336]	; (80012d8 <selectPortButton+0x308>)
 8001188:	f001 f884 	bl	8002294 <HAL_GPIO_Init>

		break ;
 800118c:	e0ce      	b.n	800132c <selectPortButton+0x35c>
	case 'd':
	case 'D':
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
 8001192:	4b4f      	ldr	r3, [pc, #316]	; (80012d0 <selectPortButton+0x300>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a4e      	ldr	r2, [pc, #312]	; (80012d0 <selectPortButton+0x300>)
 8001198:	f043 0308 	orr.w	r3, r3, #8
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b4c      	ldr	r3, [pc, #304]	; (80012d0 <selectPortButton+0x300>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		GPIO_sel = *GPIOD ;
 80011aa:	4b4e      	ldr	r3, [pc, #312]	; (80012e4 <selectPortButton+0x314>)
 80011ac:	4a4a      	ldr	r2, [pc, #296]	; (80012d8 <selectPortButton+0x308>)
 80011ae:	4614      	mov	r4, r2
 80011b0:	461d      	mov	r5, r3
 80011b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011be:	e884 0003 	stmia.w	r4, {r0, r1}
		HAL_GPIO_Init(&GPIO_sel, &GPIO_InitStruct);
 80011c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011c6:	4619      	mov	r1, r3
 80011c8:	4843      	ldr	r0, [pc, #268]	; (80012d8 <selectPortButton+0x308>)
 80011ca:	f001 f863 	bl	8002294 <HAL_GPIO_Init>

		break ;
 80011ce:	e0ad      	b.n	800132c <selectPortButton+0x35c>
	case 'e':
	case 'E':
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
 80011d4:	4b3e      	ldr	r3, [pc, #248]	; (80012d0 <selectPortButton+0x300>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	4a3d      	ldr	r2, [pc, #244]	; (80012d0 <selectPortButton+0x300>)
 80011da:	f043 0310 	orr.w	r3, r3, #16
 80011de:	6313      	str	r3, [r2, #48]	; 0x30
 80011e0:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <selectPortButton+0x300>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e4:	f003 0310 	and.w	r3, r3, #16
 80011e8:	623b      	str	r3, [r7, #32]
 80011ea:	6a3b      	ldr	r3, [r7, #32]
    	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011f0:	4619      	mov	r1, r3
 80011f2:	483d      	ldr	r0, [pc, #244]	; (80012e8 <selectPortButton+0x318>)
 80011f4:	f001 f84e 	bl	8002294 <HAL_GPIO_Init>

		break ;
 80011f8:	e098      	b.n	800132c <selectPortButton+0x35c>
	case 'f':
	case 'F':
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	4b34      	ldr	r3, [pc, #208]	; (80012d0 <selectPortButton+0x300>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a33      	ldr	r2, [pc, #204]	; (80012d0 <selectPortButton+0x300>)
 8001204:	f043 0320 	orr.w	r3, r3, #32
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <selectPortButton+0x300>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0320 	and.w	r3, r3, #32
 8001212:	61fb      	str	r3, [r7, #28]
 8001214:	69fb      	ldr	r3, [r7, #28]
    	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001216:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800121a:	4619      	mov	r1, r3
 800121c:	4833      	ldr	r0, [pc, #204]	; (80012ec <selectPortButton+0x31c>)
 800121e:	f001 f839 	bl	8002294 <HAL_GPIO_Init>

		break ;
 8001222:	e083      	b.n	800132c <selectPortButton+0x35c>
	case 'g':
	case 'G':
		__HAL_RCC_GPIOG_CLK_ENABLE();
 8001224:	2300      	movs	r3, #0
 8001226:	61bb      	str	r3, [r7, #24]
 8001228:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <selectPortButton+0x300>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	4a28      	ldr	r2, [pc, #160]	; (80012d0 <selectPortButton+0x300>)
 800122e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001232:	6313      	str	r3, [r2, #48]	; 0x30
 8001234:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <selectPortButton+0x300>)
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800123c:	61bb      	str	r3, [r7, #24]
 800123e:	69bb      	ldr	r3, [r7, #24]
    	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001240:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001244:	4619      	mov	r1, r3
 8001246:	482a      	ldr	r0, [pc, #168]	; (80012f0 <selectPortButton+0x320>)
 8001248:	f001 f824 	bl	8002294 <HAL_GPIO_Init>

		break ;
 800124c:	e06e      	b.n	800132c <selectPortButton+0x35c>
	case 'h':
	case 'H':
		__HAL_RCC_GPIOH_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <selectPortButton+0x300>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a1e      	ldr	r2, [pc, #120]	; (80012d0 <selectPortButton+0x300>)
 8001258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <selectPortButton+0x300>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697b      	ldr	r3, [r7, #20]
    	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800126a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800126e:	4619      	mov	r1, r3
 8001270:	4820      	ldr	r0, [pc, #128]	; (80012f4 <selectPortButton+0x324>)
 8001272:	f001 f80f 	bl	8002294 <HAL_GPIO_Init>

		break ;
 8001276:	e059      	b.n	800132c <selectPortButton+0x35c>
	case 'i':
	case 'I':
		__HAL_RCC_GPIOI_CLK_ENABLE();
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <selectPortButton+0x300>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	4a13      	ldr	r2, [pc, #76]	; (80012d0 <selectPortButton+0x300>)
 8001282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001286:	6313      	str	r3, [r2, #48]	; 0x30
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <selectPortButton+0x300>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	693b      	ldr	r3, [r7, #16]
    	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001294:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001298:	4619      	mov	r1, r3
 800129a:	4817      	ldr	r0, [pc, #92]	; (80012f8 <selectPortButton+0x328>)
 800129c:	f000 fffa 	bl	8002294 <HAL_GPIO_Init>

		break ;
 80012a0:	e044      	b.n	800132c <selectPortButton+0x35c>
	case 'j':
	case 'J':
		__HAL_RCC_GPIOJ_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <selectPortButton+0x300>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a09      	ldr	r2, [pc, #36]	; (80012d0 <selectPortButton+0x300>)
 80012ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <selectPortButton+0x300>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    	HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80012be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012c2:	4619      	mov	r1, r3
 80012c4:	480d      	ldr	r0, [pc, #52]	; (80012fc <selectPortButton+0x32c>)
 80012c6:	f000 ffe5 	bl	8002294 <HAL_GPIO_Init>

		break ;
 80012ca:	e02f      	b.n	800132c <selectPortButton+0x35c>
 80012cc:	2000009e 	.word	0x2000009e
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020000 	.word	0x40020000
 80012d8:	200000d4 	.word	0x200000d4
 80012dc:	40020400 	.word	0x40020400
 80012e0:	40020800 	.word	0x40020800
 80012e4:	40020c00 	.word	0x40020c00
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40021400 	.word	0x40021400
 80012f0:	40021800 	.word	0x40021800
 80012f4:	40021c00 	.word	0x40021c00
 80012f8:	40022000 	.word	0x40022000
 80012fc:	40022400 	.word	0x40022400
	case 'k':
	case 'K':
		__HAL_RCC_GPIOK_CLK_ENABLE();
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <selectPortButton+0x364>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001308:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <selectPortButton+0x364>)
 800130a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800130e:	6313      	str	r3, [r2, #48]	; 0x30
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <selectPortButton+0x364>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
    	HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800131c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001320:	4619      	mov	r1, r3
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <selectPortButton+0x368>)
 8001324:	f000 ffb6 	bl	8002294 <HAL_GPIO_Init>

		break ;
 8001328:	e000      	b.n	800132c <selectPortButton+0x35c>
	default:
		//management of error
		break ;
 800132a:	bf00      	nop
	}

}
 800132c:	bf00      	nop
 800132e:	3748      	adds	r7, #72	; 0x48
 8001330:	46bd      	mov	sp, r7
 8001332:	bdb0      	pop	{r4, r5, r7, pc}
 8001334:	40023800 	.word	0x40023800
 8001338:	40022800 	.word	0x40022800

0800133c <selectGPIOport>:

static uint32_t selectGPIOport(uint8_t numport){
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
	uint32_t responsePortNumber ;
	switch(numport){
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d85b      	bhi.n	8001404 <selectGPIOport+0xc8>
 800134c:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <selectGPIOport+0x18>)
 800134e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001352:	bf00      	nop
 8001354:	08001395 	.word	0x08001395
 8001358:	0800139b 	.word	0x0800139b
 800135c:	080013a1 	.word	0x080013a1
 8001360:	080013a7 	.word	0x080013a7
 8001364:	080013ad 	.word	0x080013ad
 8001368:	080013b3 	.word	0x080013b3
 800136c:	080013b9 	.word	0x080013b9
 8001370:	080013bf 	.word	0x080013bf
 8001374:	080013c5 	.word	0x080013c5
 8001378:	080013cd 	.word	0x080013cd
 800137c:	080013d5 	.word	0x080013d5
 8001380:	080013dd 	.word	0x080013dd
 8001384:	080013e5 	.word	0x080013e5
 8001388:	080013ed 	.word	0x080013ed
 800138c:	080013f5 	.word	0x080013f5
 8001390:	080013fd 	.word	0x080013fd
	case 0:
		responsePortNumber = GPIO_PIN_0 ;
 8001394:	2301      	movs	r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
		break ;
 8001398:	e038      	b.n	800140c <selectGPIOport+0xd0>
	case 1:
		responsePortNumber = GPIO_PIN_1 ;
 800139a:	2302      	movs	r3, #2
 800139c:	60fb      	str	r3, [r7, #12]
		break ;
 800139e:	e035      	b.n	800140c <selectGPIOport+0xd0>
	case 2:
		responsePortNumber = GPIO_PIN_2 ;
 80013a0:	2304      	movs	r3, #4
 80013a2:	60fb      	str	r3, [r7, #12]
		break ;
 80013a4:	e032      	b.n	800140c <selectGPIOport+0xd0>
	case 3:
		responsePortNumber = GPIO_PIN_3 ;
 80013a6:	2308      	movs	r3, #8
 80013a8:	60fb      	str	r3, [r7, #12]
		break ;
 80013aa:	e02f      	b.n	800140c <selectGPIOport+0xd0>
	case 4:
		responsePortNumber = GPIO_PIN_4 ;
 80013ac:	2310      	movs	r3, #16
 80013ae:	60fb      	str	r3, [r7, #12]
		break ;
 80013b0:	e02c      	b.n	800140c <selectGPIOport+0xd0>
	case 5:
		responsePortNumber = GPIO_PIN_5 ;
 80013b2:	2320      	movs	r3, #32
 80013b4:	60fb      	str	r3, [r7, #12]
		break ;
 80013b6:	e029      	b.n	800140c <selectGPIOport+0xd0>
	case 6:
		responsePortNumber = GPIO_PIN_6 ;
 80013b8:	2340      	movs	r3, #64	; 0x40
 80013ba:	60fb      	str	r3, [r7, #12]
		break ;
 80013bc:	e026      	b.n	800140c <selectGPIOport+0xd0>
	case 7:
		responsePortNumber = GPIO_PIN_7 ;
 80013be:	2380      	movs	r3, #128	; 0x80
 80013c0:	60fb      	str	r3, [r7, #12]
		break ;
 80013c2:	e023      	b.n	800140c <selectGPIOport+0xd0>
	case 8:
		responsePortNumber = GPIO_PIN_8 ;
 80013c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c8:	60fb      	str	r3, [r7, #12]
		break ;
 80013ca:	e01f      	b.n	800140c <selectGPIOport+0xd0>
	case 9:
		responsePortNumber = GPIO_PIN_9 ;
 80013cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013d0:	60fb      	str	r3, [r7, #12]
		break ;
 80013d2:	e01b      	b.n	800140c <selectGPIOport+0xd0>
	case 10:
		responsePortNumber = GPIO_PIN_10 ;
 80013d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013d8:	60fb      	str	r3, [r7, #12]
		break ;
 80013da:	e017      	b.n	800140c <selectGPIOport+0xd0>
	case 11:
		responsePortNumber = GPIO_PIN_11 ;
 80013dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013e0:	60fb      	str	r3, [r7, #12]
		break ;
 80013e2:	e013      	b.n	800140c <selectGPIOport+0xd0>
	case 12:
		responsePortNumber = GPIO_PIN_12 ;
 80013e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e8:	60fb      	str	r3, [r7, #12]
		break ;
 80013ea:	e00f      	b.n	800140c <selectGPIOport+0xd0>
	case 13:
		responsePortNumber = GPIO_PIN_13;
 80013ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f0:	60fb      	str	r3, [r7, #12]
		break ;
 80013f2:	e00b      	b.n	800140c <selectGPIOport+0xd0>
	case 14:
		responsePortNumber = GPIO_PIN_14 ;
 80013f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013f8:	60fb      	str	r3, [r7, #12]
		break ;
 80013fa:	e007      	b.n	800140c <selectGPIOport+0xd0>
	case 15:
		responsePortNumber = GPIO_PIN_15 ;
 80013fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001400:	60fb      	str	r3, [r7, #12]
		break ;
 8001402:	e003      	b.n	800140c <selectGPIOport+0xd0>
	default:
		responsePortNumber = -1 ;
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
 8001408:	60fb      	str	r3, [r7, #12]
		break ;
 800140a:	bf00      	nop
	}
	return responsePortNumber ;
 800140c:	68fb      	ldr	r3, [r7, #12]

}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop

0800141c <debounceFSM_update>:
 * Se implementa una máquina de estados de la siguientes estados
 * Estado inicial: BUTTON_UP
 * BUTTON_UP <-> BUTTON_FALLING <->BUTTON_DOWN <-> BUTTON_RAISING ->BUTTON_UP
 *
 */
void debounceFSM_update(){
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	// Devuelve 0 sin presionar, 1  con boton presionado


	switch(button_state)
 8001420:	4b3a      	ldr	r3, [pc, #232]	; (800150c <debounceFSM_update+0xf0>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b03      	cmp	r3, #3
 8001426:	d866      	bhi.n	80014f6 <debounceFSM_update+0xda>
 8001428:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <debounceFSM_update+0x14>)
 800142a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142e:	bf00      	nop
 8001430:	08001441 	.word	0x08001441
 8001434:	0800146b 	.word	0x0800146b
 8001438:	080014a3 	.word	0x080014a3
 800143c:	080014c7 	.word	0x080014c7
	{
		case BUTTON_UP:


			if (HAL_GPIO_ReadPin(GPIOA,number_port) ==   GPIO_PIN_RESET )
 8001440:	4b33      	ldr	r3, [pc, #204]	; (8001510 <debounceFSM_update+0xf4>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	4833      	ldr	r0, [pc, #204]	; (8001514 <debounceFSM_update+0xf8>)
 8001448:	f001 f8d0 	bl	80025ec <HAL_GPIO_ReadPin>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d155      	bne.n	80014fe <debounceFSM_update+0xe2>
			{
				uartSendString("GPIO_RESET\r\n") ;
 8001452:	4831      	ldr	r0, [pc, #196]	; (8001518 <debounceFSM_update+0xfc>)
 8001454:	f000 fc74 	bl	8001d40 <uartSendString>
				button_state = BUTTON_FALLING ;
 8001458:	4b2c      	ldr	r3, [pc, #176]	; (800150c <debounceFSM_update+0xf0>)
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
				tickstart = HAL_GetTick() ;
 800145e:	f000 fe03 	bl	8002068 <HAL_GetTick>
 8001462:	4603      	mov	r3, r0
 8001464:	4a2d      	ldr	r2, [pc, #180]	; (800151c <debounceFSM_update+0x100>)
 8001466:	6013      	str	r3, [r2, #0]
			}
			break ;
 8001468:	e049      	b.n	80014fe <debounceFSM_update+0xe2>
		case BUTTON_FALLING:
			//espera 40 ms y lee el estado del boton
			if (HAL_GetTick() - tickstart >TIME_FALLING_READ)
 800146a:	f000 fdfd 	bl	8002068 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	4b2a      	ldr	r3, [pc, #168]	; (800151c <debounceFSM_update+0x100>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b28      	cmp	r3, #40	; 0x28
 8001478:	d943      	bls.n	8001502 <debounceFSM_update+0xe6>
			{
				//GPIO_sel ;
				//HAL_GPIO_ReadPin()
				if (HAL_GPIO_ReadPin(GPIOA,number_port) ==   GPIO_PIN_RESET )
 800147a:	4b25      	ldr	r3, [pc, #148]	; (8001510 <debounceFSM_update+0xf4>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	4619      	mov	r1, r3
 8001480:	4824      	ldr	r0, [pc, #144]	; (8001514 <debounceFSM_update+0xf8>)
 8001482:	f001 f8b3 	bl	80025ec <HAL_GPIO_ReadPin>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d106      	bne.n	800149a <debounceFSM_update+0x7e>
				{
					button_state = BUTTON_DOWN; // SE PRESIONO EL BOTON
 800148c:	4b1f      	ldr	r3, [pc, #124]	; (800150c <debounceFSM_update+0xf0>)
 800148e:	2202      	movs	r2, #2
 8001490:	701a      	strb	r2, [r3, #0]
					is_press_button = true ;
 8001492:	4b23      	ldr	r3, [pc, #140]	; (8001520 <debounceFSM_update+0x104>)
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
					// ACCIÓN A REALIZAR !
				}else{
					button_state = BUTTON_UP ;
				}
			}
			break ;
 8001498:	e033      	b.n	8001502 <debounceFSM_update+0xe6>
					button_state = BUTTON_UP ;
 800149a:	4b1c      	ldr	r3, [pc, #112]	; (800150c <debounceFSM_update+0xf0>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
			break ;
 80014a0:	e02f      	b.n	8001502 <debounceFSM_update+0xe6>
		case BUTTON_DOWN:
			if (HAL_GPIO_ReadPin(GPIOA,number_port) ==   GPIO_PIN_SET )
 80014a2:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <debounceFSM_update+0xf4>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	4619      	mov	r1, r3
 80014a8:	481a      	ldr	r0, [pc, #104]	; (8001514 <debounceFSM_update+0xf8>)
 80014aa:	f001 f89f 	bl	80025ec <HAL_GPIO_ReadPin>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d128      	bne.n	8001506 <debounceFSM_update+0xea>
			{

				button_state = BUTTON_RAISING ;
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <debounceFSM_update+0xf0>)
 80014b6:	2203      	movs	r2, #3
 80014b8:	701a      	strb	r2, [r3, #0]
				tickstart = HAL_GetTick() ;
 80014ba:	f000 fdd5 	bl	8002068 <HAL_GetTick>
 80014be:	4603      	mov	r3, r0
 80014c0:	4a16      	ldr	r2, [pc, #88]	; (800151c <debounceFSM_update+0x100>)
 80014c2:	6013      	str	r3, [r2, #0]
			}
			break ;
 80014c4:	e01f      	b.n	8001506 <debounceFSM_update+0xea>
		case BUTTON_RAISING:
			if (HAL_GetTick() - tickstart >TIME_FALLING_READ){
 80014c6:	f000 fdcf 	bl	8002068 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <debounceFSM_update+0x100>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b28      	cmp	r3, #40	; 0x28
 80014d4:	d90f      	bls.n	80014f6 <debounceFSM_update+0xda>
				if (HAL_GPIO_ReadPin(GPIOA,number_port) ==   GPIO_PIN_SET ){
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <debounceFSM_update+0xf4>)
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	4619      	mov	r1, r3
 80014dc:	480d      	ldr	r0, [pc, #52]	; (8001514 <debounceFSM_update+0xf8>)
 80014de:	f001 f885 	bl	80025ec <HAL_GPIO_ReadPin>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d103      	bne.n	80014f0 <debounceFSM_update+0xd4>
					button_state = BUTTON_UP ;
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <debounceFSM_update+0xf0>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
 80014ee:	e002      	b.n	80014f6 <debounceFSM_update+0xda>
				}else {
					button_state = BUTTON_DOWN ;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <debounceFSM_update+0xf0>)
 80014f2:	2202      	movs	r2, #2
 80014f4:	701a      	strb	r2, [r3, #0]
				}
			}
		default:
			button_state = BUTTON_UP ; // ESTADO DE INICIO !
 80014f6:	4b05      	ldr	r3, [pc, #20]	; (800150c <debounceFSM_update+0xf0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
		break ;
 80014fc:	e004      	b.n	8001508 <debounceFSM_update+0xec>
			break ;
 80014fe:	bf00      	nop
 8001500:	e002      	b.n	8001508 <debounceFSM_update+0xec>
			break ;
 8001502:	bf00      	nop
 8001504:	e000      	b.n	8001508 <debounceFSM_update+0xec>
			break ;
 8001506:	bf00      	nop

	}

}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	2000009c 	.word	0x2000009c
 8001510:	2000009e 	.word	0x2000009e
 8001514:	40020000 	.word	0x40020000
 8001518:	080057e0 	.word	0x080057e0
 800151c:	200000a0 	.word	0x200000a0
 8001520:	2000009d 	.word	0x2000009d

08001524 <getPressButton>:



bool getPressButton(void ){
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
	bool value_press = is_press_button ;
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <getPressButton+0x28>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
	if (value_press == true){
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d002      	beq.n	800153c <getPressButton+0x18>
		is_press_button = false ;
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <getPressButton+0x28>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
	}

	return value_press ;
 800153c:	79fb      	ldrb	r3, [r7, #7]



}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	2000009d 	.word	0x2000009d

08001550 <initFSM>:
 SENDSERIALST
}handle_FSM ;

static handle_FSM FSM ; //FIXME: cambiar nombre por un nombre mas representativo

void initFSM(void){
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
	FSM = RTCCONFIG ;
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <initFSM+0x14>)
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	200000a4 	.word	0x200000a4

08001568 <FSM_loop>:


void FSM_loop(){
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	switch(FSM){
 800156c:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <FSM_loop+0x70>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d021      	beq.n	80015b8 <FSM_loop+0x50>
 8001574:	2b02      	cmp	r3, #2
 8001576:	dc28      	bgt.n	80015ca <FSM_loop+0x62>
 8001578:	2b00      	cmp	r3, #0
 800157a:	d002      	beq.n	8001582 <FSM_loop+0x1a>
 800157c:	2b01      	cmp	r3, #1
 800157e:	d00d      	beq.n	800159c <FSM_loop+0x34>
 8001580:	e023      	b.n	80015ca <FSM_loop+0x62>
	case RTCCONFIG:
		FSM = WAITBUTTON ;
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <FSM_loop+0x70>)
 8001584:	2201      	movs	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]
		rtcInit() ;
 8001588:	f000 f82e 	bl	80015e8 <rtcInit>
		initFSMButton('a', 15) ;
 800158c:	210f      	movs	r1, #15
 800158e:	2061      	movs	r0, #97	; 0x61
 8001590:	f7ff fd06 	bl	8000fa0 <initFSMButton>
		uartSendString("WAITBUTTON") ;
 8001594:	4811      	ldr	r0, [pc, #68]	; (80015dc <FSM_loop+0x74>)
 8001596:	f000 fbd3 	bl	8001d40 <uartSendString>
		break ;
 800159a:	e01b      	b.n	80015d4 <FSM_loop+0x6c>
	case WAITBUTTON:
		//uartSendString("updateWAIT\r\n") ;

		debounceFSM_update() ;
 800159c:	f7ff ff3e 	bl	800141c <debounceFSM_update>
		if (getPressButton() == true){
 80015a0:	f7ff ffc0 	bl	8001524 <getPressButton>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d013      	beq.n	80015d2 <FSM_loop+0x6a>
			FSM = SENDSERIALST ;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <FSM_loop+0x70>)
 80015ac:	2202      	movs	r2, #2
 80015ae:	701a      	strb	r2, [r3, #0]
			uartSendString("cambiowait to st\r\n") ;
 80015b0:	480b      	ldr	r0, [pc, #44]	; (80015e0 <FSM_loop+0x78>)
 80015b2:	f000 fbc5 	bl	8001d40 <uartSendString>

		}
		break ;
 80015b6:	e00c      	b.n	80015d2 <FSM_loop+0x6a>
	case SENDSERIALST:
		sendSiderealTime() ;
 80015b8:	f000 fb8c 	bl	8001cd4 <sendSiderealTime>
		// CODE FOR SEND UART
		uartSendString("sendserialst\r\n") ;
 80015bc:	4809      	ldr	r0, [pc, #36]	; (80015e4 <FSM_loop+0x7c>)
 80015be:	f000 fbbf 	bl	8001d40 <uartSendString>
		FSM = WAITBUTTON ;
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <FSM_loop+0x70>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
		break ;
 80015c8:	e004      	b.n	80015d4 <FSM_loop+0x6c>
	default:

		FSM = RTCCONFIG ;
 80015ca:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <FSM_loop+0x70>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
		break  ;
 80015d0:	e000      	b.n	80015d4 <FSM_loop+0x6c>
		break ;
 80015d2:	bf00      	nop
	}

}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	200000a4 	.word	0x200000a4
 80015dc:	080057f0 	.word	0x080057f0
 80015e0:	080057fc 	.word	0x080057fc
 80015e4:	08005810 	.word	0x08005810

080015e8 <rtcInit>:

static fecha_t getDateTime() ;
static void setDayAndHour(void) ;

void rtcInit()
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
	BSP_LED_Init(LED1) ;
 80015ee:	2000      	movs	r0, #0
 80015f0:	f000 fbbc 	bl	8001d6c <BSP_LED_Init>
	BSP_LED_Init(LED2) ;
 80015f4:	2001      	movs	r0, #1
 80015f6:	f000 fbb9 	bl	8001d6c <BSP_LED_Init>
	// HABILITA EL DOMINIO DE BACKUP PARA QUE EL SISTEMA RTC PUEDA SER
	// USADO.
	__HAL_RCC_PWR_CLK_ENABLE() ;
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b22      	ldr	r3, [pc, #136]	; (8001688 <rtcInit+0xa0>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	4a21      	ldr	r2, [pc, #132]	; (8001688 <rtcInit+0xa0>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001608:	6413      	str	r3, [r2, #64]	; 0x40
 800160a:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <rtcInit+0xa0>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
	HAL_PWR_EnableBkUpAccess() ;
 8001616:	f001 f88f 	bl	8002738 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE) ;
 800161a:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <rtcInit+0xa0>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	4a1a      	ldr	r2, [pc, #104]	; (8001688 <rtcInit+0xa0>)
 8001620:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001624:	6093      	str	r3, [r2, #8]
 8001626:	4b18      	ldr	r3, [pc, #96]	; (8001688 <rtcInit+0xa0>)
 8001628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162a:	4a17      	ldr	r2, [pc, #92]	; (8001688 <rtcInit+0xa0>)
 800162c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001630:	6713      	str	r3, [r2, #112]	; 0x70
	__HAL_RCC_RTC_ENABLE();
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <rtcInit+0xa4>)
 8001634:	2201      	movs	r2, #1
 8001636:	601a      	str	r2, [r3, #0]
	rtc.Instance = RTC;
 8001638:	4b15      	ldr	r3, [pc, #84]	; (8001690 <rtcInit+0xa8>)
 800163a:	4a16      	ldr	r2, [pc, #88]	; (8001694 <rtcInit+0xac>)
 800163c:	601a      	str	r2, [r3, #0]
	rtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800163e:	4b14      	ldr	r3, [pc, #80]	; (8001690 <rtcInit+0xa8>)
 8001640:	2200      	movs	r2, #0
 8001642:	605a      	str	r2, [r3, #4]
	rtc.Init.AsynchPrediv = 127;
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <rtcInit+0xa8>)
 8001646:	227f      	movs	r2, #127	; 0x7f
 8001648:	609a      	str	r2, [r3, #8]
	rtc.Init.SynchPrediv = 255;
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <rtcInit+0xa8>)
 800164c:	22ff      	movs	r2, #255	; 0xff
 800164e:	60da      	str	r2, [r3, #12]
	rtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <rtcInit+0xa8>)
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
	rtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <rtcInit+0xa8>)
 8001658:	2200      	movs	r2, #0
 800165a:	615a      	str	r2, [r3, #20]
	rtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <rtcInit+0xa8>)
 800165e:	2200      	movs	r2, #0
 8001660:	619a      	str	r2, [r3, #24]
	// verifica si el RTC se inicia correctamente
	if (HAL_RTC_Init(&rtc) != HAL_OK)
 8001662:	480b      	ldr	r0, [pc, #44]	; (8001690 <rtcInit+0xa8>)
 8001664:	f001 fd40 	bl	80030e8 <HAL_RTC_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d002      	beq.n	8001674 <rtcInit+0x8c>
	{
		BSP_LED_On(LED2) ;
 800166e:	2001      	movs	r0, #1
 8001670:	f000 fbcc 	bl	8001e0c <BSP_LED_On>

	}

	setDayAndHour() ;
 8001674:	f000 f810 	bl	8001698 <setDayAndHour>
	BSP_LED_On(LED1) ;
 8001678:	2000      	movs	r0, #0
 800167a:	f000 fbc7 	bl	8001e0c <BSP_LED_On>

}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	42470e3c 	.word	0x42470e3c
 8001690:	200000a8 	.word	0x200000a8
 8001694:	40002800 	.word	0x40002800

08001698 <setDayAndHour>:
 * Se usan las macros __TIME__ y __DATE__
 *
 *
 */
static void setDayAndHour(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0

	  RTC_TimeTypeDef sTime = {0};
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 80016ac:	2300      	movs	r3, #0
 80016ae:	603b      	str	r3, [r7, #0]
	  // Se obtiene la hora de compilación y se carga como valor inicial en el RTC.
	  // Dado que __TIME__[0] ... son variables de tipo char, se le resta 0x30 para obtener
	  // el entero correspondiente.
	  sTime.Hours = (__TIME__[0] - 0x30)*10 + __TIME__[1] - 0x30 ;
 80016b0:	2332      	movs	r3, #50	; 0x32
 80016b2:	3b30      	subs	r3, #48	; 0x30
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	461a      	mov	r2, r3
 80016b8:	0092      	lsls	r2, r2, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2231      	movs	r2, #49	; 0x31
 80016c2:	4413      	add	r3, r2
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	3b30      	subs	r3, #48	; 0x30
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = (__TIME__[3] - 0x30)*10+ __TIME__[4] - 0x30 ;
 80016cc:	2333      	movs	r3, #51	; 0x33
 80016ce:	3b30      	subs	r3, #48	; 0x30
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	461a      	mov	r2, r3
 80016d4:	0092      	lsls	r2, r2, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2234      	movs	r2, #52	; 0x34
 80016de:	4413      	add	r3, r2
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	3b30      	subs	r3, #48	; 0x30
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 10;
 80016e8:	230a      	movs	r3, #10
 80016ea:	71bb      	strb	r3, [r7, #6]
	  sTime.TimeFormat = RTC_HOURFORMAT_24;
 80016ec:	2300      	movs	r3, #0
 80016ee:	71fb      	strb	r3, [r7, #7]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_SET; // DEPRECATED ! ??
 80016f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016f8:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&rtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	2200      	movs	r2, #0
 80016fe:	4619      	mov	r1, r3
 8001700:	480b      	ldr	r0, [pc, #44]	; (8001730 <setDayAndHour+0x98>)
 8001702:	f001 fd8c 	bl	800321e <HAL_RTC_SetTime>
	  {
	     //uartSendString("\r\nerror set Time\r\n") ;
	   }
	   // FECHA EN FORMATO J2000: (1° de enero del año 2000, 12:00:00 GMT)
	   sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001706:	2301      	movs	r3, #1
 8001708:	703b      	strb	r3, [r7, #0]
	   sDate.Month = RTC_MONTH_JANUARY;
 800170a:	2301      	movs	r3, #1
 800170c:	707b      	strb	r3, [r7, #1]
	   sDate.Date = 1;
 800170e:	2301      	movs	r3, #1
 8001710:	70bb      	strb	r3, [r7, #2]
	   sDate.Year = 50;
 8001712:	2332      	movs	r3, #50	; 0x32
 8001714:	70fb      	strb	r3, [r7, #3]

	   if (HAL_RTC_SetDate(&rtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001716:	463b      	mov	r3, r7
 8001718:	2200      	movs	r2, #0
 800171a:	4619      	mov	r1, r3
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <setDayAndHour+0x98>)
 800171e:	f001 fe99 	bl	8003454 <HAL_RTC_SetDate>
	   {
	   }
	   /** Enable the reference Clock input
	   */
	   if (HAL_RTCEx_SetRefClock(&rtc) != HAL_OK)
 8001722:	4803      	ldr	r0, [pc, #12]	; (8001730 <setDayAndHour+0x98>)
 8001724:	f002 f81c 	bl	8003760 <HAL_RTCEx_SetRefClock>
	   }
	   /* USER CODE BEGIN RTC_Init 2 */
	   // HAL_RTCEx_BKUPWrite(&rtc,  RTC_BKP_DR1, 0x32F2); // HABILITA EL REGISTRO DE GUARDADO
	   /* USER CODE END RTC_Init 2 */

}
 8001728:	bf00      	nop
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	200000a8 	.word	0x200000a8
 8001734:	00000000 	.word	0x00000000

08001738 <computeSiderealTime>:
 *
 * @param sidereal_time: Parámetro donde se va a cargar la hora siderea calculada. En caso de error
 * 		  al realizar el cálculo se carga un parámetro NULL
 * @return Retorna si se ha realizado o no correctamente el cálculo de la hora siderea
 */
uint8_t computeSiderealTime(sidereal_t *sidereal_time){
 8001738:	b5b0      	push	{r4, r5, r7, lr}
 800173a:	ed2d 8b02 	vpush	{d8}
 800173e:	b08c      	sub	sp, #48	; 0x30
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	fecha_t sd_time = getDateTime() ;
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	4618      	mov	r0, r3
 800174a:	f000 fa4d 	bl	8001be8 <getDateTime>
	uint8_t error ;
	uint8_t hs,ms,ss ;
	const float multiplicador_term_negativo = (7.0/4.0) ;
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <computeSiderealTime+0x34>)
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
	// j0 calcula el número de dias julianos
	float j0,fract_day,sid_time,jul_cent ; // dia juliano hasta las 12:00:00. JD fraccion de dia para completar el día
	float negative_term ;
	// Error de lectura en día o fecha en el RTC
	if (sd_time.error == ERROR_RTC_DATE ||  sd_time.error == ERROR_RTC_TIME)
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	2b03      	cmp	r3, #3
 8001756:	d002      	beq.n	800175e <computeSiderealTime+0x26>
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d108      	bne.n	8001770 <computeSiderealTime+0x38>
	{
		sidereal_time = NULL  ;
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
		error = ERROR_SIDEREAL ;
 8001762:	23ff      	movs	r3, #255	; 0xff
 8001764:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001768:	e233      	b.n	8001bd2 <computeSiderealTime+0x49a>
 800176a:	bf00      	nop
 800176c:	3fe00000 	.word	0x3fe00000
	}else{
		//
		// (float)(int): primero se realiza  (int) para cumplir con el algoritmo
		// pide la parte entera del término. Luego se transforma a flotante para realizar
		// la suma
		j0 = K1*sd_time.year + (float) (int )(K2*(float)sd_time.month/K3)
 8001770:	893b      	ldrh	r3, [r7, #8]
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fee6 	bl	8000544 <__aeabi_i2d>
 8001778:	a3fc      	add	r3, pc, #1008	; (adr r3, 8001b6c <computeSiderealTime+0x434>)
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	f7fe ff4b 	bl	8000618 <__aeabi_dmul>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4614      	mov	r4, r2
 8001788:	461d      	mov	r5, r3
 800178a:	7abb      	ldrb	r3, [r7, #10]
 800178c:	ee07 3a90 	vmov	s15, r3
 8001790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001794:	ee17 0a90 	vmov	r0, s15
 8001798:	f7fe fee6 	bl	8000568 <__aeabi_f2d>
 800179c:	a3f5      	add	r3, pc, #980	; (adr r3, 8001b74 <computeSiderealTime+0x43c>)
 800179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a2:	f7fe ff39 	bl	8000618 <__aeabi_dmul>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	4be7      	ldr	r3, [pc, #924]	; (8001b50 <computeSiderealTime+0x418>)
 80017b4:	f7ff f85a 	bl	800086c <__aeabi_ddiv>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	f7ff f9da 	bl	8000b78 <__aeabi_d2iz>
 80017c4:	ee07 0a90 	vmov	s15, r0
 80017c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017cc:	ee17 0a90 	vmov	r0, s15
 80017d0:	f7fe feca 	bl	8000568 <__aeabi_f2d>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4620      	mov	r0, r4
 80017da:	4629      	mov	r1, r5
 80017dc:	f7fe fd66 	bl	80002ac <__adddf3>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4614      	mov	r4, r2
 80017e6:	461d      	mov	r5, r3
			+ (float) sd_time.day +  K4 ;
 80017e8:	7afb      	ldrb	r3, [r7, #11]
 80017ea:	ee07 3a90 	vmov	s15, r3
 80017ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017f2:	ee17 0a90 	vmov	r0, s15
 80017f6:	f7fe feb7 	bl	8000568 <__aeabi_f2d>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4620      	mov	r0, r4
 8001800:	4629      	mov	r1, r5
 8001802:	f7fe fd53 	bl	80002ac <__adddf3>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	a3be      	add	r3, pc, #760	; (adr r3, 8001b08 <computeSiderealTime+0x3d0>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7fe fd4a 	bl	80002ac <__adddf3>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
		j0 = K1*sd_time.year + (float) (int )(K2*(float)sd_time.month/K3)
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	f7ff f9f2 	bl	8000c08 <__aeabi_d2f>
 8001824:	4603      	mov	r3, r0
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
		negative_term =(float) (int) (multiplicador_term_negativo *((float )sd_time.year
 8001828:	893b      	ldrh	r3, [r7, #8]
 800182a:	ee07 3a90 	vmov	s15, r3
 800182e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
					   + (int)(float)((sd_time.month+9.0)/12.0))) ;
 8001832:	7abb      	ldrb	r3, [r7, #10]
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fe85 	bl	8000544 <__aeabi_i2d>
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	4bc4      	ldr	r3, [pc, #784]	; (8001b50 <computeSiderealTime+0x418>)
 8001840:	f7fe fd34 	bl	80002ac <__adddf3>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	4bc0      	ldr	r3, [pc, #768]	; (8001b54 <computeSiderealTime+0x41c>)
 8001852:	f7ff f80b 	bl	800086c <__aeabi_ddiv>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f7ff f9d3 	bl	8000c08 <__aeabi_d2f>
 8001862:	ee07 0a90 	vmov	s15, r0
 8001866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800186a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800186e:	ee38 7a27 	vadd.f32	s14, s16, s15
		negative_term =(float) (int) (multiplicador_term_negativo *((float )sd_time.year
 8001872:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800187a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800187e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001882:	edc7 7a08 	vstr	s15, [r7, #32]
		j0 = j0-negative_term ;
 8001886:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800188a:	edd7 7a08 	vldr	s15, [r7, #32]
 800188e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001892:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		fract_day = (float) sd_time.hour +  (float)sd_time.minute/60.0
 8001896:	7b3b      	ldrb	r3, [r7, #12]
 8001898:	ee07 3a90 	vmov	s15, r3
 800189c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018a0:	ee17 0a90 	vmov	r0, s15
 80018a4:	f7fe fe60 	bl	8000568 <__aeabi_f2d>
 80018a8:	4604      	mov	r4, r0
 80018aa:	460d      	mov	r5, r1
 80018ac:	7b7b      	ldrb	r3, [r7, #13]
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018b6:	ee17 0a90 	vmov	r0, s15
 80018ba:	f7fe fe55 	bl	8000568 <__aeabi_f2d>
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	4ba5      	ldr	r3, [pc, #660]	; (8001b58 <computeSiderealTime+0x420>)
 80018c4:	f7fe ffd2 	bl	800086c <__aeabi_ddiv>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4620      	mov	r0, r4
 80018ce:	4629      	mov	r1, r5
 80018d0:	f7fe fcec 	bl	80002ac <__adddf3>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4614      	mov	r4, r2
 80018da:	461d      	mov	r5, r3
					+ (float)sd_time.second/3600.0 ;
 80018dc:	7bbb      	ldrb	r3, [r7, #14]
 80018de:	ee07 3a90 	vmov	s15, r3
 80018e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018e6:	ee17 0a90 	vmov	r0, s15
 80018ea:	f7fe fe3d 	bl	8000568 <__aeabi_f2d>
 80018ee:	a388      	add	r3, pc, #544	; (adr r3, 8001b10 <computeSiderealTime+0x3d8>)
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	f7fe ffba 	bl	800086c <__aeabi_ddiv>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4620      	mov	r0, r4
 80018fe:	4629      	mov	r1, r5
 8001900:	f7fe fcd4 	bl	80002ac <__adddf3>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
		fract_day = (float) sd_time.hour +  (float)sd_time.minute/60.0
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f7ff f97c 	bl	8000c08 <__aeabi_d2f>
 8001910:	4603      	mov	r3, r0
 8001912:	61fb      	str	r3, [r7, #28]
		// calculo de centurias julianas
		jul_cent = (j0 - 2451545)/36525 ;
 8001914:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001918:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8001b5c <computeSiderealTime+0x424>
 800191c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001920:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8001b60 <computeSiderealTime+0x428>
 8001924:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001928:	edc7 7a06 	vstr	s15, [r7, #24]
		sid_time = KS1 + KS2 * jul_cent + KS3 * pow(jul_cent,2) + KS4 * pow(jul_cent,3) ;
 800192c:	69b8      	ldr	r0, [r7, #24]
 800192e:	f7fe fe1b 	bl	8000568 <__aeabi_f2d>
 8001932:	a379      	add	r3, pc, #484	; (adr r3, 8001b18 <computeSiderealTime+0x3e0>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	f7fe fe6e 	bl	8000618 <__aeabi_dmul>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	a376      	add	r3, pc, #472	; (adr r3, 8001b20 <computeSiderealTime+0x3e8>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7fe fcaf 	bl	80002ac <__adddf3>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4614      	mov	r4, r2
 8001954:	461d      	mov	r5, r3
 8001956:	69b8      	ldr	r0, [r7, #24]
 8001958:	f7fe fe06 	bl	8000568 <__aeabi_f2d>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8001b28 <computeSiderealTime+0x3f0>
 8001964:	ec43 2b10 	vmov	d0, r2, r3
 8001968:	f002 ff76 	bl	8004858 <pow>
 800196c:	ec51 0b10 	vmov	r0, r1, d0
 8001970:	a36f      	add	r3, pc, #444	; (adr r3, 8001b30 <computeSiderealTime+0x3f8>)
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	f7fe fe4f 	bl	8000618 <__aeabi_dmul>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4620      	mov	r0, r4
 8001980:	4629      	mov	r1, r5
 8001982:	f7fe fc93 	bl	80002ac <__adddf3>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4614      	mov	r4, r2
 800198c:	461d      	mov	r5, r3
 800198e:	69b8      	ldr	r0, [r7, #24]
 8001990:	f7fe fdea 	bl	8000568 <__aeabi_f2d>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	ed9f 1b67 	vldr	d1, [pc, #412]	; 8001b38 <computeSiderealTime+0x400>
 800199c:	ec43 2b10 	vmov	d0, r2, r3
 80019a0:	f002 ff5a 	bl	8004858 <pow>
 80019a4:	ec51 0b10 	vmov	r0, r1, d0
 80019a8:	a365      	add	r3, pc, #404	; (adr r3, 8001b40 <computeSiderealTime+0x408>)
 80019aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ae:	f7fe fe33 	bl	8000618 <__aeabi_dmul>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4620      	mov	r0, r4
 80019b8:	4629      	mov	r1, r5
 80019ba:	f7fe fc77 	bl	80002ac <__adddf3>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4610      	mov	r0, r2
 80019c4:	4619      	mov	r1, r3
 80019c6:	f7ff f91f 	bl	8000c08 <__aeabi_d2f>
 80019ca:	4603      	mov	r3, r0
 80019cc:	617b      	str	r3, [r7, #20]
    	// el cálculo anterior sid_time puede ser mayor a 360°. Para quedarnos con el giro que corresponde
		// a la unidad angular restamos 360°. Lo calculado esta a las 12:00:00. Se debe pasar a UTC con UTC/24
		sid_time = sid_time - (float) (int)(sid_time/360.0) * 360.0 ;
 80019ce:	6978      	ldr	r0, [r7, #20]
 80019d0:	f7fe fdca 	bl	8000568 <__aeabi_f2d>
 80019d4:	4604      	mov	r4, r0
 80019d6:	460d      	mov	r5, r1
 80019d8:	6978      	ldr	r0, [r7, #20]
 80019da:	f7fe fdc5 	bl	8000568 <__aeabi_f2d>
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	4b60      	ldr	r3, [pc, #384]	; (8001b64 <computeSiderealTime+0x42c>)
 80019e4:	f7fe ff42 	bl	800086c <__aeabi_ddiv>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	f7ff f8c2 	bl	8000b78 <__aeabi_d2iz>
 80019f4:	ee07 0a90 	vmov	s15, r0
 80019f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019fc:	ee17 0a90 	vmov	r0, s15
 8001a00:	f7fe fdb2 	bl	8000568 <__aeabi_f2d>
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	4b56      	ldr	r3, [pc, #344]	; (8001b64 <computeSiderealTime+0x42c>)
 8001a0a:	f7fe fe05 	bl	8000618 <__aeabi_dmul>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4620      	mov	r0, r4
 8001a14:	4629      	mov	r1, r5
 8001a16:	f7fe fc47 	bl	80002a8 <__aeabi_dsub>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4610      	mov	r0, r2
 8001a20:	4619      	mov	r1, r3
 8001a22:	f7ff f8f1 	bl	8000c08 <__aeabi_d2f>
 8001a26:	4603      	mov	r3, r0
 8001a28:	617b      	str	r3, [r7, #20]
		// Puede ser superior a 360°, idem al caso anterior
		sid_time = sid_time + 360.98564724*(fract_day/24.0);
 8001a2a:	6978      	ldr	r0, [r7, #20]
 8001a2c:	f7fe fd9c 	bl	8000568 <__aeabi_f2d>
 8001a30:	4604      	mov	r4, r0
 8001a32:	460d      	mov	r5, r1
 8001a34:	69f8      	ldr	r0, [r7, #28]
 8001a36:	f7fe fd97 	bl	8000568 <__aeabi_f2d>
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	4b4a      	ldr	r3, [pc, #296]	; (8001b68 <computeSiderealTime+0x430>)
 8001a40:	f7fe ff14 	bl	800086c <__aeabi_ddiv>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	a33e      	add	r3, pc, #248	; (adr r3, 8001b48 <computeSiderealTime+0x410>)
 8001a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a52:	f7fe fde1 	bl	8000618 <__aeabi_dmul>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	4629      	mov	r1, r5
 8001a5e:	f7fe fc25 	bl	80002ac <__adddf3>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4610      	mov	r0, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f7ff f8cd 	bl	8000c08 <__aeabi_d2f>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	617b      	str	r3, [r7, #20]
		sid_time = sid_time - (float) (int)(sid_time/360.0) * 360.0 ;
 8001a72:	6978      	ldr	r0, [r7, #20]
 8001a74:	f7fe fd78 	bl	8000568 <__aeabi_f2d>
 8001a78:	4604      	mov	r4, r0
 8001a7a:	460d      	mov	r5, r1
 8001a7c:	6978      	ldr	r0, [r7, #20]
 8001a7e:	f7fe fd73 	bl	8000568 <__aeabi_f2d>
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <computeSiderealTime+0x42c>)
 8001a88:	f7fe fef0 	bl	800086c <__aeabi_ddiv>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7ff f870 	bl	8000b78 <__aeabi_d2iz>
 8001a98:	ee07 0a90 	vmov	s15, r0
 8001a9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa0:	ee17 0a90 	vmov	r0, s15
 8001aa4:	f7fe fd60 	bl	8000568 <__aeabi_f2d>
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <computeSiderealTime+0x42c>)
 8001aae:	f7fe fdb3 	bl	8000618 <__aeabi_dmul>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	4629      	mov	r1, r5
 8001aba:	f7fe fbf5 	bl	80002a8 <__aeabi_dsub>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7ff f89f 	bl	8000c08 <__aeabi_d2f>
 8001aca:	4603      	mov	r3, r0
 8001acc:	617b      	str	r3, [r7, #20]
		// transformación a hora, minuto y segundo: 360° -- 24hs, 60min -- 1h y 60s -- 1min
		hs = (uint8_t) ((sid_time*24)/360.0 ) ;
 8001ace:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ad2:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001ad6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ada:	ee17 0a90 	vmov	r0, s15
 8001ade:	f7fe fd43 	bl	8000568 <__aeabi_f2d>
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <computeSiderealTime+0x42c>)
 8001ae8:	f7fe fec0 	bl	800086c <__aeabi_ddiv>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	f7ff f868 	bl	8000bc8 <__aeabi_d2uiz>
 8001af8:	4603      	mov	r3, r0
 8001afa:	74fb      	strb	r3, [r7, #19]
		sidereal_time->h = hs ;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7cfa      	ldrb	r2, [r7, #19]
 8001b00:	701a      	strb	r2, [r3, #0]
 8001b02:	e03b      	b.n	8001b7c <computeSiderealTime+0x444>
 8001b04:	f3af 8000 	nop.w
 8001b08:	80000000 	.word	0x80000000
 8001b0c:	413a42b5 	.word	0x413a42b5
 8001b10:	00000000 	.word	0x00000000
 8001b14:	40ac2000 	.word	0x40ac2000
 8001b18:	a3d70a3d 	.word	0xa3d70a3d
 8001b1c:	40e19418 	.word	0x40e19418
 8001b20:	c598fbe5 	.word	0xc598fbe5
 8001b24:	40591d7a 	.word	0x40591d7a
 8001b28:	00000000 	.word	0x00000000
 8001b2c:	40000000 	.word	0x40000000
 8001b30:	8c4c4b7f 	.word	0x8c4c4b7f
 8001b34:	3f396c6f 	.word	0x3f396c6f
 8001b38:	00000000 	.word	0x00000000
 8001b3c:	40080000 	.word	0x40080000
 8001b40:	a97ffabc 	.word	0xa97ffabc
 8001b44:	be5bbc18 	.word	0xbe5bbc18
 8001b48:	360a5315 	.word	0x360a5315
 8001b4c:	40768fc5 	.word	0x40768fc5
 8001b50:	40220000 	.word	0x40220000
 8001b54:	40280000 	.word	0x40280000
 8001b58:	404e0000 	.word	0x404e0000
 8001b5c:	4a15a164 	.word	0x4a15a164
 8001b60:	470ead00 	.word	0x470ead00
 8001b64:	40768000 	.word	0x40768000
 8001b68:	40380000 	.word	0x40380000
 8001b6c:	00000000 	.word	0x00000000
 8001b70:	4076f000 	.word	0x4076f000
 8001b74:	00000000 	.word	0x00000000
 8001b78:	40713000 	.word	0x40713000
		ms  = (uint8_t)  ((sid_time*24)/360.0  - hs) ;
 8001b7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b80:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001b84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b88:	ee17 0a90 	vmov	r0, s15
 8001b8c:	f7fe fcec 	bl	8000568 <__aeabi_f2d>
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <computeSiderealTime+0x4ac>)
 8001b96:	f7fe fe69 	bl	800086c <__aeabi_ddiv>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4614      	mov	r4, r2
 8001ba0:	461d      	mov	r5, r3
 8001ba2:	7cfb      	ldrb	r3, [r7, #19]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fccd 	bl	8000544 <__aeabi_i2d>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4620      	mov	r0, r4
 8001bb0:	4629      	mov	r1, r5
 8001bb2:	f7fe fb79 	bl	80002a8 <__aeabi_dsub>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f7ff f803 	bl	8000bc8 <__aeabi_d2uiz>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	74bb      	strb	r3, [r7, #18]
		sidereal_time->m = ms ;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	7cba      	ldrb	r2, [r7, #18]
 8001bca:	705a      	strb	r2, [r3, #1]
		error = NO_ERROR_SIDEREAL;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	}
	return error ;
 8001bd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f

}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3730      	adds	r7, #48	; 0x30
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	ecbd 8b02 	vpop	{d8}
 8001be0:	bdb0      	pop	{r4, r5, r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40768000 	.word	0x40768000

08001be8 <getDateTime>:
 * 		   							 3:  error al obtener la hora del RTC
 * 		   Al usar esta estructura se prescinde de la libreria "time.h" nativa de C
 *
 */
fecha_t getDateTime()
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef sdatestructureget ;
	RTC_TimeTypeDef stimestructureget ;
	fecha_t response  ;
	/* USER CODE END WHILE */
	if (HAL_RTC_GetTime(&rtc, &stimestructureget, RTC_FORMAT_BIN) != HAL_OK)
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4819      	ldr	r0, [pc, #100]	; (8001c60 <getDateTime+0x78>)
 8001bfa:	f001 fbcd 	bl	8003398 <HAL_RTC_GetTime>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <getDateTime+0x22>
	{
		response.error = ERROR_RTC_TIME ;
 8001c04:	2302      	movs	r3, #2
 8001c06:	73fb      	strb	r3, [r7, #15]
 8001c08:	e01e      	b.n	8001c48 <getDateTime+0x60>
	}else{
		if(HAL_RTC_GetDate(&rtc, &sdatestructureget, RTC_FORMAT_BIN) == HAL_OK)
 8001c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0e:	2200      	movs	r2, #0
 8001c10:	4619      	mov	r1, r3
 8001c12:	4813      	ldr	r0, [pc, #76]	; (8001c60 <getDateTime+0x78>)
 8001c14:	f001 fcc5 	bl	80035a2 <HAL_RTC_GetDate>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d112      	bne.n	8001c44 <getDateTime+0x5c>
		{
			//lectura del RTC de la placa nucleo y carga de valores en fecha_t
			response.year = sdatestructureget.Year ;
 8001c1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	813b      	strh	r3, [r7, #8]
			response.day = sdatestructureget.Date;
 8001c26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c2a:	72fb      	strb	r3, [r7, #11]
			response.month = sdatestructureget.Month ;
 8001c2c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c30:	72bb      	strb	r3, [r7, #10]
			response.minute = stimestructureget.Minutes ;
 8001c32:	7c7b      	ldrb	r3, [r7, #17]
 8001c34:	737b      	strb	r3, [r7, #13]
			response.hour = stimestructureget.Hours ;
 8001c36:	7c3b      	ldrb	r3, [r7, #16]
 8001c38:	733b      	strb	r3, [r7, #12]
			response.second = stimestructureget.Seconds ;
 8001c3a:	7cbb      	ldrb	r3, [r7, #18]
 8001c3c:	73bb      	strb	r3, [r7, #14]
			response.error = NO_ERROR_GET_RTC ;// 0x01 --> correct!
 8001c3e:	2301      	movs	r3, #1
 8001c40:	73fb      	strb	r3, [r7, #15]
 8001c42:	e001      	b.n	8001c48 <getDateTime+0x60>
		}else{
			response.error = ERROR_RTC_DATE ;
 8001c44:	2303      	movs	r3, #3
 8001c46:	73fb      	strb	r3, [r7, #15]
		}
	}
	return response ;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	f107 0308 	add.w	r3, r7, #8
 8001c50:	cb03      	ldmia	r3!, {r0, r1}
 8001c52:	6010      	str	r0, [r2, #0]
 8001c54:	6051      	str	r1, [r2, #4]
}
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	3728      	adds	r7, #40	; 0x28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200000a8 	.word	0x200000a8

08001c64 <uartInit>:

//static void uartSendString( char *uart_tx) ;

UART_HandleTypeDef uart_handle ;

uint8_t uartInit(uint32_t baud_rate){
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	if (baud_rate == 0){
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <uartInit+0x12>
		return 0xFF ;
 8001c72:	23ff      	movs	r3, #255	; 0xff
 8001c74:	e023      	b.n	8001cbe <uartInit+0x5a>
	}

	uart_handle.Instance 		  = USART3;
 8001c76:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <uartInit+0x64>)
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <uartInit+0x68>)
 8001c7a:	601a      	str	r2, [r3, #0]
	uart_handle.Init.BaudRate     = baud_rate;
 8001c7c:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <uartInit+0x64>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6053      	str	r3, [r2, #4]
	uart_handle.Init.WordLength   = UART_WORDLENGTH_8B;
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <uartInit+0x64>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
	uart_handle.Init.StopBits     = UART_STOPBITS_1;
 8001c88:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <uartInit+0x64>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
	uart_handle.Init.Parity       = UART_PARITY_NONE ;
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <uartInit+0x64>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
	uart_handle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <uartInit+0x64>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	619a      	str	r2, [r3, #24]
	uart_handle.Init.Mode         = UART_MODE_TX_RX;
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <uartInit+0x64>)
 8001c9c:	220c      	movs	r2, #12
 8001c9e:	615a      	str	r2, [r3, #20]
	uart_handle.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <uartInit+0x64>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&uart_handle)){
 8001ca6:	4808      	ldr	r0, [pc, #32]	; (8001cc8 <uartInit+0x64>)
 8001ca8:	f001 fda3 	bl	80037f2 <HAL_UART_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <uartInit+0x52>
		return 0xFF ;
 8001cb2:	23ff      	movs	r3, #255	; 0xff
 8001cb4:	e003      	b.n	8001cbe <uartInit+0x5a>
	}
	uartSendString("INICIO CORRECTO") ;
 8001cb6:	4806      	ldr	r0, [pc, #24]	; (8001cd0 <uartInit+0x6c>)
 8001cb8:	f000 f842 	bl	8001d40 <uartSendString>
	return 1 ;
 8001cbc:	2301      	movs	r3, #1
	//(&uart_handle, &data_rx, 2) ;
	//HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(USART3_IRQn);


}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200000fc 	.word	0x200000fc
 8001ccc:	40004800 	.word	0x40004800
 8001cd0:	08005820 	.word	0x08005820

08001cd4 <sendSiderealTime>:


uint8_t sendSiderealTime(){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af02      	add	r7, sp, #8
	sidereal_t stime ;
	char uart_tx [10] ; //"hh:mm:ss" ;
	uint8_t get_sidereal_time =computeSiderealTime(&stime) ;
 8001cda:	f107 0310 	add.w	r3, r7, #16
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fd2a 	bl	8001738 <computeSiderealTime>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	75bb      	strb	r3, [r7, #22]
	uint8_t response ;
	if (get_sidereal_time ==0xFF){
 8001ce8:	7dbb      	ldrb	r3, [r7, #22]
 8001cea:	2bff      	cmp	r3, #255	; 0xff
 8001cec:	d10d      	bne.n	8001d0a <sendSiderealTime+0x36>
		//transmitir "error RTC" por puerto serie
		sprintf(uart_tx,"%02d:%02d:%02d",stime.h,stime.m,0) ;
 8001cee:	7c3b      	ldrb	r3, [r7, #16]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	7c7b      	ldrb	r3, [r7, #17]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	1d38      	adds	r0, r7, #4
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	490f      	ldr	r1, [pc, #60]	; (8001d3c <sendSiderealTime+0x68>)
 8001d00:	f002 f97c 	bl	8003ffc <siprintf>
		response = 0xFF ;
 8001d04:	23ff      	movs	r3, #255	; 0xff
 8001d06:	75fb      	strb	r3, [r7, #23]
 8001d08:	e00f      	b.n	8001d2a <sendSiderealTime+0x56>

	}else if (get_sidereal_time==0x01){
 8001d0a:	7dbb      	ldrb	r3, [r7, #22]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d10c      	bne.n	8001d2a <sendSiderealTime+0x56>
		sprintf(uart_tx,"%02d:%02d:%02d",stime.h,stime.m,0) ;
 8001d10:	7c3b      	ldrb	r3, [r7, #16]
 8001d12:	461a      	mov	r2, r3
 8001d14:	7c7b      	ldrb	r3, [r7, #17]
 8001d16:	4619      	mov	r1, r3
 8001d18:	1d38      	adds	r0, r7, #4
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4906      	ldr	r1, [pc, #24]	; (8001d3c <sendSiderealTime+0x68>)
 8001d22:	f002 f96b 	bl	8003ffc <siprintf>
		response = 0x01 ;
 8001d26:	2301      	movs	r3, #1
 8001d28:	75fb      	strb	r3, [r7, #23]
	}


	uartSendString(uart_tx) ;
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f000 f807 	bl	8001d40 <uartSendString>
	return response ;
 8001d32:	7dfb      	ldrb	r3, [r7, #23]

}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	08005830 	.word	0x08005830

08001d40 <uartSendString>:

//uint8_t uartSendString(const char *uart_tx)
//static void uartSendString( char *uart_tx)
void uartSendString( char *uart_tx)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&uart_handle,uart_tx, strlen(uart_tx), 500) ;
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7fe fa51 	bl	80001f0 <strlen>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	4803      	ldr	r0, [pc, #12]	; (8001d68 <uartSendString+0x28>)
 8001d5a:	f001 fd97 	bl	800388c <HAL_UART_Transmit>

}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200000fc 	.word	0x200000fc

08001d6c <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10e      	bne.n	8001d9a <BSP_LED_Init+0x2e>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <BSP_LED_Init+0x94>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	4a1e      	ldr	r2, [pc, #120]	; (8001e00 <BSP_LED_Init+0x94>)
 8001d86:	f043 0302 	orr.w	r3, r3, #2
 8001d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8c:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <BSP_LED_Init+0x94>)
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	e00d      	b.n	8001db6 <BSP_LED_Init+0x4a>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <BSP_LED_Init+0x94>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a17      	ldr	r2, [pc, #92]	; (8001e00 <BSP_LED_Init+0x94>)
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <BSP_LED_Init+0x94>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <BSP_LED_Init+0x98>)
 8001dba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	4a0e      	ldr	r2, [pc, #56]	; (8001e08 <BSP_LED_Init+0x9c>)
 8001dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd4:	f107 0214 	add.w	r2, r7, #20
 8001dd8:	4611      	mov	r1, r2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 fa5a 	bl	8002294 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	4a09      	ldr	r2, [pc, #36]	; (8001e08 <BSP_LED_Init+0x9c>)
 8001de4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	4a06      	ldr	r2, [pc, #24]	; (8001e04 <BSP_LED_Init+0x98>)
 8001dec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001df0:	2200      	movs	r2, #0
 8001df2:	4619      	mov	r1, r3
 8001df4:	f000 fc12 	bl	800261c <HAL_GPIO_WritePin>
}
 8001df8:	bf00      	nop
 8001dfa:	3728      	adds	r7, #40	; 0x28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40023800 	.word	0x40023800
 8001e04:	08005840 	.word	0x08005840
 8001e08:	20000000 	.word	0x20000000

08001e0c <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	4a07      	ldr	r2, [pc, #28]	; (8001e38 <BSP_LED_On+0x2c>)
 8001e1a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <BSP_LED_On+0x30>)
 8001e22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e26:	2201      	movs	r2, #1
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f000 fbf7 	bl	800261c <HAL_GPIO_WritePin>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000000 	.word	0x20000000
 8001e3c:	08005840 	.word	0x08005840

08001e40 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	4a07      	ldr	r2, [pc, #28]	; (8001e6c <BSP_LED_Toggle+0x2c>)
 8001e4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	4906      	ldr	r1, [pc, #24]	; (8001e70 <BSP_LED_Toggle+0x30>)
 8001e56:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	f000 fbf6 	bl	800264e <HAL_GPIO_TogglePin>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	08005840 	.word	0x08005840

08001e74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e78:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <SystemInit+0x60>)
 8001e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7e:	4a15      	ldr	r2, [pc, #84]	; (8001ed4 <SystemInit+0x60>)
 8001e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001e88:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <SystemInit+0x64>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a12      	ldr	r2, [pc, #72]	; (8001ed8 <SystemInit+0x64>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e94:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <SystemInit+0x64>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <SystemInit+0x64>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a0e      	ldr	r2, [pc, #56]	; (8001ed8 <SystemInit+0x64>)
 8001ea0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <SystemInit+0x64>)
 8001eac:	4a0b      	ldr	r2, [pc, #44]	; (8001edc <SystemInit+0x68>)
 8001eae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <SystemInit+0x64>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a08      	ldr	r2, [pc, #32]	; (8001ed8 <SystemInit+0x64>)
 8001eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <SystemInit+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ec2:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <SystemInit+0x60>)
 8001ec4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ec8:	609a      	str	r2, [r3, #8]
#endif
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000ed00 	.word	0xe000ed00
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	24003010 	.word	0x24003010

08001ee0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001ef2:	e7fe      	b.n	8001ef2 <HardFault_Handler+0x4>

08001ef4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <MemManage_Handler+0x4>

08001efa <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001efe:	e7fe      	b.n	8001efe <BusFault_Handler+0x4>

08001f00 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <UsageFault_Handler+0x4>

08001f06 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001f34:	f000 f884 	bl	8002040 <HAL_IncTick>
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f44:	4a14      	ldr	r2, [pc, #80]	; (8001f98 <_sbrk+0x5c>)
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <_sbrk+0x60>)
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f50:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <_sbrk+0x64>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d102      	bne.n	8001f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <_sbrk+0x64>)
 8001f5a:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <_sbrk+0x68>)
 8001f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <_sbrk+0x64>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d207      	bcs.n	8001f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f6c:	f002 f814 	bl	8003f98 <__errno>
 8001f70:	4603      	mov	r3, r0
 8001f72:	220c      	movs	r2, #12
 8001f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7a:	e009      	b.n	8001f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f7c:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <_sbrk+0x64>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f82:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <_sbrk+0x64>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	4a05      	ldr	r2, [pc, #20]	; (8001fa0 <_sbrk+0x64>)
 8001f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20030000 	.word	0x20030000
 8001f9c:	00000400 	.word	0x00000400
 8001fa0:	200000c8 	.word	0x200000c8
 8001fa4:	20000158 	.word	0x20000158

08001fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_Init+0x34>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <HAL_Init+0x34>)
 8001fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fb6:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <HAL_Init+0x34>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <HAL_Init+0x34>)
 8001fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	f000 f931 	bl	800222c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fca:	200f      	movs	r0, #15
 8001fcc:	f000 f808 	bl	8001fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd0:	f000 fbaa 	bl	8002728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40023c00 	.word	0x40023c00

08001fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_InitTick+0x54>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_InitTick+0x58>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 f93b 	bl	800227a <HAL_SYSTICK_Config>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e00e      	b.n	800202c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b0f      	cmp	r3, #15
 8002012:	d80a      	bhi.n	800202a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002014:	2200      	movs	r2, #0
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	f000 f911 	bl	8002242 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002020:	4a06      	ldr	r2, [pc, #24]	; (800203c <HAL_InitTick+0x5c>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e000      	b.n	800202c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	2000000c 	.word	0x2000000c
 8002038:	20000014 	.word	0x20000014
 800203c:	20000010 	.word	0x20000010

08002040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_IncTick+0x20>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_IncTick+0x24>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4413      	add	r3, r2
 8002050:	4a04      	ldr	r2, [pc, #16]	; (8002064 <HAL_IncTick+0x24>)
 8002052:	6013      	str	r3, [r2, #0]
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000014 	.word	0x20000014
 8002064:	20000140 	.word	0x20000140

08002068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return uwTick;
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <HAL_GetTick+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000140 	.word	0x20000140

08002080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002088:	f7ff ffee 	bl	8002068 <HAL_GetTick>
 800208c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002098:	d005      	beq.n	80020a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_Delay+0x44>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4413      	add	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020a6:	bf00      	nop
 80020a8:	f7ff ffde 	bl	8002068 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d8f7      	bhi.n	80020a8 <HAL_Delay+0x28>
  {
  }
}
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000014 	.word	0x20000014

080020c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020e4:	4013      	ands	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fa:	4a04      	ldr	r2, [pc, #16]	; (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	60d3      	str	r3, [r2, #12]
}
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <__NVIC_GetPriorityGrouping+0x18>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	0a1b      	lsrs	r3, r3, #8
 800211a:	f003 0307 	and.w	r3, r3, #7
}
 800211e:	4618      	mov	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	6039      	str	r1, [r7, #0]
 8002136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213c:	2b00      	cmp	r3, #0
 800213e:	db0a      	blt.n	8002156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	b2da      	uxtb	r2, r3
 8002144:	490c      	ldr	r1, [pc, #48]	; (8002178 <__NVIC_SetPriority+0x4c>)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	0112      	lsls	r2, r2, #4
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	440b      	add	r3, r1
 8002150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002154:	e00a      	b.n	800216c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4908      	ldr	r1, [pc, #32]	; (800217c <__NVIC_SetPriority+0x50>)
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	3b04      	subs	r3, #4
 8002164:	0112      	lsls	r2, r2, #4
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	440b      	add	r3, r1
 800216a:	761a      	strb	r2, [r3, #24]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000e100 	.word	0xe000e100
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002180:	b480      	push	{r7}
 8002182:	b089      	sub	sp, #36	; 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f1c3 0307 	rsb	r3, r3, #7
 800219a:	2b04      	cmp	r3, #4
 800219c:	bf28      	it	cs
 800219e:	2304      	movcs	r3, #4
 80021a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3304      	adds	r3, #4
 80021a6:	2b06      	cmp	r3, #6
 80021a8:	d902      	bls.n	80021b0 <NVIC_EncodePriority+0x30>
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3b03      	subs	r3, #3
 80021ae:	e000      	b.n	80021b2 <NVIC_EncodePriority+0x32>
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	f04f 32ff 	mov.w	r2, #4294967295
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43da      	mvns	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	401a      	ands	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c8:	f04f 31ff 	mov.w	r1, #4294967295
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
 80021d2:	43d9      	mvns	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	4313      	orrs	r3, r2
         );
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3724      	adds	r7, #36	; 0x24
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f8:	d301      	bcc.n	80021fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00f      	b.n	800221e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fe:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <SysTick_Config+0x40>)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002206:	210f      	movs	r1, #15
 8002208:	f04f 30ff 	mov.w	r0, #4294967295
 800220c:	f7ff ff8e 	bl	800212c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <SysTick_Config+0x40>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002216:	4b04      	ldr	r3, [pc, #16]	; (8002228 <SysTick_Config+0x40>)
 8002218:	2207      	movs	r2, #7
 800221a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	e000e010 	.word	0xe000e010

0800222c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff ff47 	bl	80020c8 <__NVIC_SetPriorityGrouping>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002242:	b580      	push	{r7, lr}
 8002244:	b086      	sub	sp, #24
 8002246:	af00      	add	r7, sp, #0
 8002248:	4603      	mov	r3, r0
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002254:	f7ff ff5c 	bl	8002110 <__NVIC_GetPriorityGrouping>
 8002258:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	6978      	ldr	r0, [r7, #20]
 8002260:	f7ff ff8e 	bl	8002180 <NVIC_EncodePriority>
 8002264:	4602      	mov	r2, r0
 8002266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff5d 	bl	800212c <__NVIC_SetPriority>
}
 8002272:	bf00      	nop
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff ffb0 	bl	80021e8 <SysTick_Config>
 8002288:	4603      	mov	r3, r0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	; 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	e177      	b.n	80025a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022b0:	2201      	movs	r2, #1
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	f040 8166 	bne.w	800259a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d005      	beq.n	80022e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d130      	bne.n	8002348 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	2203      	movs	r2, #3
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800231c:	2201      	movs	r2, #1
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	091b      	lsrs	r3, r3, #4
 8002332:	f003 0201 	and.w	r2, r3, #1
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	2b03      	cmp	r3, #3
 8002352:	d017      	beq.n	8002384 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	2203      	movs	r2, #3
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d123      	bne.n	80023d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	08da      	lsrs	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3208      	adds	r2, #8
 8002398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800239c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	220f      	movs	r2, #15
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	08da      	lsrs	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3208      	adds	r2, #8
 80023d2:	69b9      	ldr	r1, [r7, #24]
 80023d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	2203      	movs	r2, #3
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0203 	and.w	r2, r3, #3
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80c0 	beq.w	800259a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	4b66      	ldr	r3, [pc, #408]	; (80025b8 <HAL_GPIO_Init+0x324>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	4a65      	ldr	r2, [pc, #404]	; (80025b8 <HAL_GPIO_Init+0x324>)
 8002424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002428:	6453      	str	r3, [r2, #68]	; 0x44
 800242a:	4b63      	ldr	r3, [pc, #396]	; (80025b8 <HAL_GPIO_Init+0x324>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002436:	4a61      	ldr	r2, [pc, #388]	; (80025bc <HAL_GPIO_Init+0x328>)
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	089b      	lsrs	r3, r3, #2
 800243c:	3302      	adds	r3, #2
 800243e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	220f      	movs	r2, #15
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a58      	ldr	r2, [pc, #352]	; (80025c0 <HAL_GPIO_Init+0x32c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d037      	beq.n	80024d2 <HAL_GPIO_Init+0x23e>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a57      	ldr	r2, [pc, #348]	; (80025c4 <HAL_GPIO_Init+0x330>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d031      	beq.n	80024ce <HAL_GPIO_Init+0x23a>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a56      	ldr	r2, [pc, #344]	; (80025c8 <HAL_GPIO_Init+0x334>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d02b      	beq.n	80024ca <HAL_GPIO_Init+0x236>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a55      	ldr	r2, [pc, #340]	; (80025cc <HAL_GPIO_Init+0x338>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d025      	beq.n	80024c6 <HAL_GPIO_Init+0x232>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a54      	ldr	r2, [pc, #336]	; (80025d0 <HAL_GPIO_Init+0x33c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d01f      	beq.n	80024c2 <HAL_GPIO_Init+0x22e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a53      	ldr	r2, [pc, #332]	; (80025d4 <HAL_GPIO_Init+0x340>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d019      	beq.n	80024be <HAL_GPIO_Init+0x22a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a52      	ldr	r2, [pc, #328]	; (80025d8 <HAL_GPIO_Init+0x344>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d013      	beq.n	80024ba <HAL_GPIO_Init+0x226>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a51      	ldr	r2, [pc, #324]	; (80025dc <HAL_GPIO_Init+0x348>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00d      	beq.n	80024b6 <HAL_GPIO_Init+0x222>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a50      	ldr	r2, [pc, #320]	; (80025e0 <HAL_GPIO_Init+0x34c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d007      	beq.n	80024b2 <HAL_GPIO_Init+0x21e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a4f      	ldr	r2, [pc, #316]	; (80025e4 <HAL_GPIO_Init+0x350>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d101      	bne.n	80024ae <HAL_GPIO_Init+0x21a>
 80024aa:	2309      	movs	r3, #9
 80024ac:	e012      	b.n	80024d4 <HAL_GPIO_Init+0x240>
 80024ae:	230a      	movs	r3, #10
 80024b0:	e010      	b.n	80024d4 <HAL_GPIO_Init+0x240>
 80024b2:	2308      	movs	r3, #8
 80024b4:	e00e      	b.n	80024d4 <HAL_GPIO_Init+0x240>
 80024b6:	2307      	movs	r3, #7
 80024b8:	e00c      	b.n	80024d4 <HAL_GPIO_Init+0x240>
 80024ba:	2306      	movs	r3, #6
 80024bc:	e00a      	b.n	80024d4 <HAL_GPIO_Init+0x240>
 80024be:	2305      	movs	r3, #5
 80024c0:	e008      	b.n	80024d4 <HAL_GPIO_Init+0x240>
 80024c2:	2304      	movs	r3, #4
 80024c4:	e006      	b.n	80024d4 <HAL_GPIO_Init+0x240>
 80024c6:	2303      	movs	r3, #3
 80024c8:	e004      	b.n	80024d4 <HAL_GPIO_Init+0x240>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e002      	b.n	80024d4 <HAL_GPIO_Init+0x240>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <HAL_GPIO_Init+0x240>
 80024d2:	2300      	movs	r3, #0
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	f002 0203 	and.w	r2, r2, #3
 80024da:	0092      	lsls	r2, r2, #2
 80024dc:	4093      	lsls	r3, r2
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024e4:	4935      	ldr	r1, [pc, #212]	; (80025bc <HAL_GPIO_Init+0x328>)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	089b      	lsrs	r3, r3, #2
 80024ea:	3302      	adds	r3, #2
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024f2:	4b3d      	ldr	r3, [pc, #244]	; (80025e8 <HAL_GPIO_Init+0x354>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002516:	4a34      	ldr	r2, [pc, #208]	; (80025e8 <HAL_GPIO_Init+0x354>)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800251c:	4b32      	ldr	r3, [pc, #200]	; (80025e8 <HAL_GPIO_Init+0x354>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002540:	4a29      	ldr	r2, [pc, #164]	; (80025e8 <HAL_GPIO_Init+0x354>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002546:	4b28      	ldr	r3, [pc, #160]	; (80025e8 <HAL_GPIO_Init+0x354>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800256a:	4a1f      	ldr	r2, [pc, #124]	; (80025e8 <HAL_GPIO_Init+0x354>)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002570:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <HAL_GPIO_Init+0x354>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002594:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <HAL_GPIO_Init+0x354>)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3301      	adds	r3, #1
 800259e:	61fb      	str	r3, [r7, #28]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	2b0f      	cmp	r3, #15
 80025a4:	f67f ae84 	bls.w	80022b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025a8:	bf00      	nop
 80025aa:	bf00      	nop
 80025ac:	3724      	adds	r7, #36	; 0x24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40013800 	.word	0x40013800
 80025c0:	40020000 	.word	0x40020000
 80025c4:	40020400 	.word	0x40020400
 80025c8:	40020800 	.word	0x40020800
 80025cc:	40020c00 	.word	0x40020c00
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40021400 	.word	0x40021400
 80025d8:	40021800 	.word	0x40021800
 80025dc:	40021c00 	.word	0x40021c00
 80025e0:	40022000 	.word	0x40022000
 80025e4:	40022400 	.word	0x40022400
 80025e8:	40013c00 	.word	0x40013c00

080025ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	887b      	ldrh	r3, [r7, #2]
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002604:	2301      	movs	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
 8002608:	e001      	b.n	800260e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800260a:	2300      	movs	r3, #0
 800260c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800260e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	807b      	strh	r3, [r7, #2]
 8002628:	4613      	mov	r3, r2
 800262a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800262c:	787b      	ldrb	r3, [r7, #1]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002638:	e003      	b.n	8002642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800263a:	887b      	ldrh	r3, [r7, #2]
 800263c:	041a      	lsls	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	619a      	str	r2, [r3, #24]
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800264e:	b480      	push	{r7}
 8002650:	b085      	sub	sp, #20
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	460b      	mov	r3, r1
 8002658:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002660:	887a      	ldrh	r2, [r7, #2]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4013      	ands	r3, r2
 8002666:	041a      	lsls	r2, r3, #16
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	43d9      	mvns	r1, r3
 800266c:	887b      	ldrh	r3, [r7, #2]
 800266e:	400b      	ands	r3, r1
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	619a      	str	r2, [r3, #24]
}
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 800268c:	2300      	movs	r3, #0
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	4b23      	ldr	r3, [pc, #140]	; (8002720 <HAL_UART_MspInit+0x9c>)
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	4a22      	ldr	r2, [pc, #136]	; (8002720 <HAL_UART_MspInit+0x9c>)
 8002696:	f043 0308 	orr.w	r3, r3, #8
 800269a:	6313      	str	r3, [r2, #48]	; 0x30
 800269c:	4b20      	ldr	r3, [pc, #128]	; (8002720 <HAL_UART_MspInit+0x9c>)
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	4b1c      	ldr	r3, [pc, #112]	; (8002720 <HAL_UART_MspInit+0x9c>)
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	4a1b      	ldr	r2, [pc, #108]	; (8002720 <HAL_UART_MspInit+0x9c>)
 80026b2:	f043 0308 	orr.w	r3, r3, #8
 80026b6:	6313      	str	r3, [r2, #48]	; 0x30
 80026b8:	4b19      	ldr	r3, [pc, #100]	; (8002720 <HAL_UART_MspInit+0x9c>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 80026c4:	2300      	movs	r3, #0
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	4b15      	ldr	r3, [pc, #84]	; (8002720 <HAL_UART_MspInit+0x9c>)
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	4a14      	ldr	r2, [pc, #80]	; (8002720 <HAL_UART_MspInit+0x9c>)
 80026ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d2:	6413      	str	r3, [r2, #64]	; 0x40
 80026d4:	4b12      	ldr	r3, [pc, #72]	; (8002720 <HAL_UART_MspInit+0x9c>)
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80026e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80026e6:	2302      	movs	r3, #2
 80026e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80026ea:	2301      	movs	r3, #1
 80026ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ee:	2303      	movs	r3, #3
 80026f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80026f2:	2307      	movs	r3, #7
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80026f6:	f107 0314 	add.w	r3, r7, #20
 80026fa:	4619      	mov	r1, r3
 80026fc:	4809      	ldr	r0, [pc, #36]	; (8002724 <HAL_UART_MspInit+0xa0>)
 80026fe:	f7ff fdc9 	bl	8002294 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8002702:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8002708:	2307      	movs	r3, #7
 800270a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	4619      	mov	r1, r3
 8002712:	4804      	ldr	r0, [pc, #16]	; (8002724 <HAL_UART_MspInit+0xa0>)
 8002714:	f7ff fdbe 	bl	8002294 <HAL_GPIO_Init>
}
 8002718:	bf00      	nop
 800271a:	3728      	adds	r7, #40	; 0x28
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40023800 	.word	0x40023800
 8002724:	40020c00 	.word	0x40020c00

08002728 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0

}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
	...

08002738 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_PWR_EnableBkUpAccess+0x20>)
 8002740:	2201      	movs	r2, #1
 8002742:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_PWR_EnableBkUpAccess+0x24>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800274a:	687b      	ldr	r3, [r7, #4]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	420e0020 	.word	0x420e0020
 800275c:	40007000 	.word	0x40007000

08002760 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	603b      	str	r3, [r7, #0]
 800276e:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4a1f      	ldr	r2, [pc, #124]	; (80027f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002778:	6413      	str	r3, [r2, #64]	; 0x40
 800277a:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <HAL_PWREx_EnableOverDrive+0x90>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002786:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002788:	2201      	movs	r2, #1
 800278a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800278c:	f7ff fc6c 	bl	8002068 <HAL_GetTick>
 8002790:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002792:	e009      	b.n	80027a8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002794:	f7ff fc68 	bl	8002068 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027a2:	d901      	bls.n	80027a8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e01f      	b.n	80027e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027a8:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b4:	d1ee      	bne.n	8002794 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027bc:	f7ff fc54 	bl	8002068 <HAL_GetTick>
 80027c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027c2:	e009      	b.n	80027d8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027c4:	f7ff fc50 	bl	8002068 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027d2:	d901      	bls.n	80027d8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e007      	b.n	80027e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027d8:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027e4:	d1ee      	bne.n	80027c4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40023800 	.word	0x40023800
 80027f4:	420e0040 	.word	0x420e0040
 80027f8:	40007000 	.word	0x40007000
 80027fc:	420e0044 	.word	0x420e0044

08002800 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e264      	b.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d075      	beq.n	800290a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800281e:	4ba3      	ldr	r3, [pc, #652]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b04      	cmp	r3, #4
 8002828:	d00c      	beq.n	8002844 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800282a:	4ba0      	ldr	r3, [pc, #640]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002832:	2b08      	cmp	r3, #8
 8002834:	d112      	bne.n	800285c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002836:	4b9d      	ldr	r3, [pc, #628]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002842:	d10b      	bne.n	800285c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002844:	4b99      	ldr	r3, [pc, #612]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d05b      	beq.n	8002908 <HAL_RCC_OscConfig+0x108>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d157      	bne.n	8002908 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e23f      	b.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002864:	d106      	bne.n	8002874 <HAL_RCC_OscConfig+0x74>
 8002866:	4b91      	ldr	r3, [pc, #580]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a90      	ldr	r2, [pc, #576]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 800286c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e01d      	b.n	80028b0 <HAL_RCC_OscConfig+0xb0>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800287c:	d10c      	bne.n	8002898 <HAL_RCC_OscConfig+0x98>
 800287e:	4b8b      	ldr	r3, [pc, #556]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a8a      	ldr	r2, [pc, #552]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 8002884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	4b88      	ldr	r3, [pc, #544]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a87      	ldr	r2, [pc, #540]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 8002890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	e00b      	b.n	80028b0 <HAL_RCC_OscConfig+0xb0>
 8002898:	4b84      	ldr	r3, [pc, #528]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a83      	ldr	r2, [pc, #524]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 800289e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	4b81      	ldr	r3, [pc, #516]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a80      	ldr	r2, [pc, #512]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 80028aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d013      	beq.n	80028e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7ff fbd6 	bl	8002068 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c0:	f7ff fbd2 	bl	8002068 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	; 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e204      	b.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d2:	4b76      	ldr	r3, [pc, #472]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0xc0>
 80028de:	e014      	b.n	800290a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7ff fbc2 	bl	8002068 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e8:	f7ff fbbe 	bl	8002068 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	; 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e1f0      	b.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fa:	4b6c      	ldr	r3, [pc, #432]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0xe8>
 8002906:	e000      	b.n	800290a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d063      	beq.n	80029de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002916:	4b65      	ldr	r3, [pc, #404]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00b      	beq.n	800293a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002922:	4b62      	ldr	r3, [pc, #392]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800292a:	2b08      	cmp	r3, #8
 800292c:	d11c      	bne.n	8002968 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800292e:	4b5f      	ldr	r3, [pc, #380]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d116      	bne.n	8002968 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293a:	4b5c      	ldr	r3, [pc, #368]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_RCC_OscConfig+0x152>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d001      	beq.n	8002952 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e1c4      	b.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002952:	4b56      	ldr	r3, [pc, #344]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4952      	ldr	r1, [pc, #328]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002966:	e03a      	b.n	80029de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d020      	beq.n	80029b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002970:	4b4f      	ldr	r3, [pc, #316]	; (8002ab0 <HAL_RCC_OscConfig+0x2b0>)
 8002972:	2201      	movs	r2, #1
 8002974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7ff fb77 	bl	8002068 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800297e:	f7ff fb73 	bl	8002068 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e1a5      	b.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002990:	4b46      	ldr	r3, [pc, #280]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299c:	4b43      	ldr	r3, [pc, #268]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4940      	ldr	r1, [pc, #256]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	600b      	str	r3, [r1, #0]
 80029b0:	e015      	b.n	80029de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b2:	4b3f      	ldr	r3, [pc, #252]	; (8002ab0 <HAL_RCC_OscConfig+0x2b0>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7ff fb56 	bl	8002068 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c0:	f7ff fb52 	bl	8002068 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e184      	b.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d2:	4b36      	ldr	r3, [pc, #216]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d030      	beq.n	8002a4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d016      	beq.n	8002a20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f2:	4b30      	ldr	r3, [pc, #192]	; (8002ab4 <HAL_RCC_OscConfig+0x2b4>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7ff fb36 	bl	8002068 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a00:	f7ff fb32 	bl	8002068 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e164      	b.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a12:	4b26      	ldr	r3, [pc, #152]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 8002a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0x200>
 8002a1e:	e015      	b.n	8002a4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a20:	4b24      	ldr	r3, [pc, #144]	; (8002ab4 <HAL_RCC_OscConfig+0x2b4>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a26:	f7ff fb1f 	bl	8002068 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a2e:	f7ff fb1b 	bl	8002068 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e14d      	b.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a40:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 8002a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f0      	bne.n	8002a2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 80a0 	beq.w	8002b9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a5e:	4b13      	ldr	r3, [pc, #76]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10f      	bne.n	8002a8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	4a0e      	ldr	r2, [pc, #56]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 8002a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a78:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a86:	2301      	movs	r3, #1
 8002a88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_RCC_OscConfig+0x2b8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d121      	bne.n	8002ada <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a96:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <HAL_RCC_OscConfig+0x2b8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a07      	ldr	r2, [pc, #28]	; (8002ab8 <HAL_RCC_OscConfig+0x2b8>)
 8002a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aa2:	f7ff fae1 	bl	8002068 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa8:	e011      	b.n	8002ace <HAL_RCC_OscConfig+0x2ce>
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	42470000 	.word	0x42470000
 8002ab4:	42470e80 	.word	0x42470e80
 8002ab8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002abc:	f7ff fad4 	bl	8002068 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e106      	b.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ace:	4b85      	ldr	r3, [pc, #532]	; (8002ce4 <HAL_RCC_OscConfig+0x4e4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d106      	bne.n	8002af0 <HAL_RCC_OscConfig+0x2f0>
 8002ae2:	4b81      	ldr	r3, [pc, #516]	; (8002ce8 <HAL_RCC_OscConfig+0x4e8>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae6:	4a80      	ldr	r2, [pc, #512]	; (8002ce8 <HAL_RCC_OscConfig+0x4e8>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	6713      	str	r3, [r2, #112]	; 0x70
 8002aee:	e01c      	b.n	8002b2a <HAL_RCC_OscConfig+0x32a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	d10c      	bne.n	8002b12 <HAL_RCC_OscConfig+0x312>
 8002af8:	4b7b      	ldr	r3, [pc, #492]	; (8002ce8 <HAL_RCC_OscConfig+0x4e8>)
 8002afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afc:	4a7a      	ldr	r2, [pc, #488]	; (8002ce8 <HAL_RCC_OscConfig+0x4e8>)
 8002afe:	f043 0304 	orr.w	r3, r3, #4
 8002b02:	6713      	str	r3, [r2, #112]	; 0x70
 8002b04:	4b78      	ldr	r3, [pc, #480]	; (8002ce8 <HAL_RCC_OscConfig+0x4e8>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	4a77      	ldr	r2, [pc, #476]	; (8002ce8 <HAL_RCC_OscConfig+0x4e8>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b10:	e00b      	b.n	8002b2a <HAL_RCC_OscConfig+0x32a>
 8002b12:	4b75      	ldr	r3, [pc, #468]	; (8002ce8 <HAL_RCC_OscConfig+0x4e8>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b16:	4a74      	ldr	r2, [pc, #464]	; (8002ce8 <HAL_RCC_OscConfig+0x4e8>)
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b1e:	4b72      	ldr	r3, [pc, #456]	; (8002ce8 <HAL_RCC_OscConfig+0x4e8>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	4a71      	ldr	r2, [pc, #452]	; (8002ce8 <HAL_RCC_OscConfig+0x4e8>)
 8002b24:	f023 0304 	bic.w	r3, r3, #4
 8002b28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d015      	beq.n	8002b5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b32:	f7ff fa99 	bl	8002068 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b38:	e00a      	b.n	8002b50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3a:	f7ff fa95 	bl	8002068 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e0c5      	b.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b50:	4b65      	ldr	r3, [pc, #404]	; (8002ce8 <HAL_RCC_OscConfig+0x4e8>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0ee      	beq.n	8002b3a <HAL_RCC_OscConfig+0x33a>
 8002b5c:	e014      	b.n	8002b88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5e:	f7ff fa83 	bl	8002068 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b64:	e00a      	b.n	8002b7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b66:	f7ff fa7f 	bl	8002068 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e0af      	b.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7c:	4b5a      	ldr	r3, [pc, #360]	; (8002ce8 <HAL_RCC_OscConfig+0x4e8>)
 8002b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1ee      	bne.n	8002b66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b88:	7dfb      	ldrb	r3, [r7, #23]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d105      	bne.n	8002b9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b8e:	4b56      	ldr	r3, [pc, #344]	; (8002ce8 <HAL_RCC_OscConfig+0x4e8>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	4a55      	ldr	r2, [pc, #340]	; (8002ce8 <HAL_RCC_OscConfig+0x4e8>)
 8002b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 809b 	beq.w	8002cda <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ba4:	4b50      	ldr	r3, [pc, #320]	; (8002ce8 <HAL_RCC_OscConfig+0x4e8>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d05c      	beq.n	8002c6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d141      	bne.n	8002c3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb8:	4b4c      	ldr	r3, [pc, #304]	; (8002cec <HAL_RCC_OscConfig+0x4ec>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbe:	f7ff fa53 	bl	8002068 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc6:	f7ff fa4f 	bl	8002068 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e081      	b.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd8:	4b43      	ldr	r3, [pc, #268]	; (8002ce8 <HAL_RCC_OscConfig+0x4e8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1f0      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	69da      	ldr	r2, [r3, #28]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	019b      	lsls	r3, r3, #6
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfa:	085b      	lsrs	r3, r3, #1
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	041b      	lsls	r3, r3, #16
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	061b      	lsls	r3, r3, #24
 8002c08:	4937      	ldr	r1, [pc, #220]	; (8002ce8 <HAL_RCC_OscConfig+0x4e8>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c0e:	4b37      	ldr	r3, [pc, #220]	; (8002cec <HAL_RCC_OscConfig+0x4ec>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7ff fa28 	bl	8002068 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7ff fa24 	bl	8002068 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e056      	b.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2e:	4b2e      	ldr	r3, [pc, #184]	; (8002ce8 <HAL_RCC_OscConfig+0x4e8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0x41c>
 8002c3a:	e04e      	b.n	8002cda <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3c:	4b2b      	ldr	r3, [pc, #172]	; (8002cec <HAL_RCC_OscConfig+0x4ec>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c42:	f7ff fa11 	bl	8002068 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c4a:	f7ff fa0d 	bl	8002068 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e03f      	b.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5c:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <HAL_RCC_OscConfig+0x4e8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1f0      	bne.n	8002c4a <HAL_RCC_OscConfig+0x44a>
 8002c68:	e037      	b.n	8002cda <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e032      	b.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c76:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <HAL_RCC_OscConfig+0x4e8>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d028      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d121      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d11a      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d111      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	085b      	lsrs	r3, r3, #1
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d107      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d001      	beq.n	8002cda <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40007000 	.word	0x40007000
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	42470060 	.word	0x42470060

08002cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0cc      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d04:	4b68      	ldr	r3, [pc, #416]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d90c      	bls.n	8002d2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b65      	ldr	r3, [pc, #404]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1a:	4b63      	ldr	r3, [pc, #396]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0b8      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d020      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d44:	4b59      	ldr	r3, [pc, #356]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	4a58      	ldr	r2, [pc, #352]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d5c:	4b53      	ldr	r3, [pc, #332]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4a52      	ldr	r2, [pc, #328]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d68:	4b50      	ldr	r3, [pc, #320]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	494d      	ldr	r1, [pc, #308]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d044      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d107      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8e:	4b47      	ldr	r3, [pc, #284]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d119      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e07f      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d003      	beq.n	8002dae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d107      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dae:	4b3f      	ldr	r3, [pc, #252]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e06f      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbe:	4b3b      	ldr	r3, [pc, #236]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e067      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dce:	4b37      	ldr	r3, [pc, #220]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f023 0203 	bic.w	r2, r3, #3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4934      	ldr	r1, [pc, #208]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002de0:	f7ff f942 	bl	8002068 <HAL_GetTick>
 8002de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de6:	e00a      	b.n	8002dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de8:	f7ff f93e 	bl	8002068 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e04f      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfe:	4b2b      	ldr	r3, [pc, #172]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 020c 	and.w	r2, r3, #12
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d1eb      	bne.n	8002de8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e10:	4b25      	ldr	r3, [pc, #148]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d20c      	bcs.n	8002e38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1e:	4b22      	ldr	r3, [pc, #136]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e26:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e032      	b.n	8002e9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	4916      	ldr	r1, [pc, #88]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d009      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e62:	4b12      	ldr	r3, [pc, #72]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	490e      	ldr	r1, [pc, #56]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e76:	f000 f821 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	490a      	ldr	r1, [pc, #40]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e88:	5ccb      	ldrb	r3, [r1, r3]
 8002e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8e:	4a09      	ldr	r2, [pc, #36]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff f8a2 	bl	8001fe0 <HAL_InitTick>

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023c00 	.word	0x40023c00
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	08005848 	.word	0x08005848
 8002eb4:	2000000c 	.word	0x2000000c
 8002eb8:	20000010 	.word	0x20000010

08002ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ebc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	607b      	str	r3, [r7, #4]
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	2300      	movs	r3, #0
 8002ece:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ed4:	4b67      	ldr	r3, [pc, #412]	; (8003074 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 030c 	and.w	r3, r3, #12
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d00d      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0x40>
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	f200 80bd 	bhi.w	8003060 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d003      	beq.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eee:	e0b7      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ef0:	4b61      	ldr	r3, [pc, #388]	; (8003078 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ef2:	60bb      	str	r3, [r7, #8]
       break;
 8002ef4:	e0b7      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ef6:	4b61      	ldr	r3, [pc, #388]	; (800307c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002ef8:	60bb      	str	r3, [r7, #8]
      break;
 8002efa:	e0b4      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002efc:	4b5d      	ldr	r3, [pc, #372]	; (8003074 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f06:	4b5b      	ldr	r3, [pc, #364]	; (8003074 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d04d      	beq.n	8002fae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f12:	4b58      	ldr	r3, [pc, #352]	; (8003074 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	099b      	lsrs	r3, r3, #6
 8002f18:	461a      	mov	r2, r3
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f22:	f04f 0100 	mov.w	r1, #0
 8002f26:	ea02 0800 	and.w	r8, r2, r0
 8002f2a:	ea03 0901 	and.w	r9, r3, r1
 8002f2e:	4640      	mov	r0, r8
 8002f30:	4649      	mov	r1, r9
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	014b      	lsls	r3, r1, #5
 8002f3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f40:	0142      	lsls	r2, r0, #5
 8002f42:	4610      	mov	r0, r2
 8002f44:	4619      	mov	r1, r3
 8002f46:	ebb0 0008 	subs.w	r0, r0, r8
 8002f4a:	eb61 0109 	sbc.w	r1, r1, r9
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	018b      	lsls	r3, r1, #6
 8002f58:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f5c:	0182      	lsls	r2, r0, #6
 8002f5e:	1a12      	subs	r2, r2, r0
 8002f60:	eb63 0301 	sbc.w	r3, r3, r1
 8002f64:	f04f 0000 	mov.w	r0, #0
 8002f68:	f04f 0100 	mov.w	r1, #0
 8002f6c:	00d9      	lsls	r1, r3, #3
 8002f6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f72:	00d0      	lsls	r0, r2, #3
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	eb12 0208 	adds.w	r2, r2, r8
 8002f7c:	eb43 0309 	adc.w	r3, r3, r9
 8002f80:	f04f 0000 	mov.w	r0, #0
 8002f84:	f04f 0100 	mov.w	r1, #0
 8002f88:	0259      	lsls	r1, r3, #9
 8002f8a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002f8e:	0250      	lsls	r0, r2, #9
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4610      	mov	r0, r2
 8002f96:	4619      	mov	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	f7fd fe82 	bl	8000ca8 <__aeabi_uldivmod>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4613      	mov	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	e04a      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fae:	4b31      	ldr	r3, [pc, #196]	; (8003074 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	099b      	lsrs	r3, r3, #6
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fbe:	f04f 0100 	mov.w	r1, #0
 8002fc2:	ea02 0400 	and.w	r4, r2, r0
 8002fc6:	ea03 0501 	and.w	r5, r3, r1
 8002fca:	4620      	mov	r0, r4
 8002fcc:	4629      	mov	r1, r5
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	014b      	lsls	r3, r1, #5
 8002fd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fdc:	0142      	lsls	r2, r0, #5
 8002fde:	4610      	mov	r0, r2
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	1b00      	subs	r0, r0, r4
 8002fe4:	eb61 0105 	sbc.w	r1, r1, r5
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	018b      	lsls	r3, r1, #6
 8002ff2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ff6:	0182      	lsls	r2, r0, #6
 8002ff8:	1a12      	subs	r2, r2, r0
 8002ffa:	eb63 0301 	sbc.w	r3, r3, r1
 8002ffe:	f04f 0000 	mov.w	r0, #0
 8003002:	f04f 0100 	mov.w	r1, #0
 8003006:	00d9      	lsls	r1, r3, #3
 8003008:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800300c:	00d0      	lsls	r0, r2, #3
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	1912      	adds	r2, r2, r4
 8003014:	eb45 0303 	adc.w	r3, r5, r3
 8003018:	f04f 0000 	mov.w	r0, #0
 800301c:	f04f 0100 	mov.w	r1, #0
 8003020:	0299      	lsls	r1, r3, #10
 8003022:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003026:	0290      	lsls	r0, r2, #10
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4610      	mov	r0, r2
 800302e:	4619      	mov	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	461a      	mov	r2, r3
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	f7fd fe36 	bl	8000ca8 <__aeabi_uldivmod>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4613      	mov	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	0c1b      	lsrs	r3, r3, #16
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	3301      	adds	r3, #1
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	fbb2 f3f3 	udiv	r3, r2, r3
 800305c:	60bb      	str	r3, [r7, #8]
      break;
 800305e:	e002      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003062:	60bb      	str	r3, [r7, #8]
      break;
 8003064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003066:	68bb      	ldr	r3, [r7, #8]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003072:	bf00      	nop
 8003074:	40023800 	.word	0x40023800
 8003078:	00f42400 	.word	0x00f42400
 800307c:	007a1200 	.word	0x007a1200

08003080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003084:	4b03      	ldr	r3, [pc, #12]	; (8003094 <HAL_RCC_GetHCLKFreq+0x14>)
 8003086:	681b      	ldr	r3, [r3, #0]
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	2000000c 	.word	0x2000000c

08003098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800309c:	f7ff fff0 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	0a9b      	lsrs	r3, r3, #10
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	4903      	ldr	r1, [pc, #12]	; (80030bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40023800 	.word	0x40023800
 80030bc:	08005858 	.word	0x08005858

080030c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030c4:	f7ff ffdc 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030c8:	4602      	mov	r2, r0
 80030ca:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	0b5b      	lsrs	r3, r3, #13
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	4903      	ldr	r1, [pc, #12]	; (80030e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030d6:	5ccb      	ldrb	r3, [r1, r3]
 80030d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030dc:	4618      	mov	r0, r3
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40023800 	.word	0x40023800
 80030e4:	08005858 	.word	0x08005858

080030e8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e083      	b.n	8003202 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	7f5b      	ldrb	r3, [r3, #29]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d105      	bne.n	8003110 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f87d 	bl	800320a <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	22ca      	movs	r2, #202	; 0xca
 800311c:	625a      	str	r2, [r3, #36]	; 0x24
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2253      	movs	r2, #83	; 0x53
 8003124:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fab2 	bl	8003690 <RTC_EnterInitMode>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d008      	beq.n	8003144 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	22ff      	movs	r2, #255	; 0xff
 8003138:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2204      	movs	r2, #4
 800313e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e05e      	b.n	8003202 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003156:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6899      	ldr	r1, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	68d2      	ldr	r2, [r2, #12]
 800317e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6919      	ldr	r1, [r3, #16]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	041a      	lsls	r2, r3, #16
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031a2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10e      	bne.n	80031d0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fa44 	bl	8003640 <HAL_RTC_WaitForSynchro>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d008      	beq.n	80031d0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	22ff      	movs	r2, #255	; 0xff
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2204      	movs	r2, #4
 80031ca:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e018      	b.n	8003202 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031de:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699a      	ldr	r2, [r3, #24]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	22ff      	movs	r2, #255	; 0xff
 80031f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003200:	2300      	movs	r3, #0
  }
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_RTC_MspInit>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800321e:	b590      	push	{r4, r7, lr}
 8003220:	b087      	sub	sp, #28
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	7f1b      	ldrb	r3, [r3, #28]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_RTC_SetTime+0x1c>
 8003236:	2302      	movs	r3, #2
 8003238:	e0aa      	b.n	8003390 <HAL_RTC_SetTime+0x172>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2202      	movs	r2, #2
 8003244:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d126      	bne.n	800329a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2200      	movs	r2, #0
 800325e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f000 fa3f 	bl	80036e8 <RTC_ByteToBcd2>
 800326a:	4603      	mov	r3, r0
 800326c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	785b      	ldrb	r3, [r3, #1]
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fa38 	bl	80036e8 <RTC_ByteToBcd2>
 8003278:	4603      	mov	r3, r0
 800327a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800327c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	789b      	ldrb	r3, [r3, #2]
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fa30 	bl	80036e8 <RTC_ByteToBcd2>
 8003288:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800328a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	78db      	ldrb	r3, [r3, #3]
 8003292:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003294:	4313      	orrs	r3, r2
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	e018      	b.n	80032cc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d102      	bne.n	80032ae <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2200      	movs	r2, #0
 80032ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	785b      	ldrb	r3, [r3, #1]
 80032b8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80032ba:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80032c0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	78db      	ldrb	r3, [r3, #3]
 80032c6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80032c8:	4313      	orrs	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	22ca      	movs	r2, #202	; 0xca
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2253      	movs	r2, #83	; 0x53
 80032da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 f9d7 	bl	8003690 <RTC_EnterInitMode>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00b      	beq.n	8003300 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	22ff      	movs	r2, #255	; 0xff
 80032ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2204      	movs	r2, #4
 80032f4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e047      	b.n	8003390 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800330a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800330e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800331e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6899      	ldr	r1, [r3, #8]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	431a      	orrs	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003346:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d111      	bne.n	800337a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f972 	bl	8003640 <HAL_RTC_WaitForSynchro>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00b      	beq.n	800337a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	22ff      	movs	r2, #255	; 0xff
 8003368:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2204      	movs	r2, #4
 800336e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e00a      	b.n	8003390 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	22ff      	movs	r2, #255	; 0xff
 8003380:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2201      	movs	r2, #1
 8003386:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800338e:	2300      	movs	r3, #0
  }
}
 8003390:	4618      	mov	r0, r3
 8003392:	371c      	adds	r7, #28
 8003394:	46bd      	mov	sp, r7
 8003396:	bd90      	pop	{r4, r7, pc}

08003398 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80033ca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80033ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	0c1b      	lsrs	r3, r3, #16
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	0a1b      	lsrs	r3, r3, #8
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	0c1b      	lsrs	r3, r3, #16
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003408:	b2da      	uxtb	r2, r3
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d11a      	bne.n	800344a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f000 f983 	bl	8003724 <RTC_Bcd2ToByte>
 800341e:	4603      	mov	r3, r0
 8003420:	461a      	mov	r2, r3
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	785b      	ldrb	r3, [r3, #1]
 800342a:	4618      	mov	r0, r3
 800342c:	f000 f97a 	bl	8003724 <RTC_Bcd2ToByte>
 8003430:	4603      	mov	r3, r0
 8003432:	461a      	mov	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	789b      	ldrb	r3, [r3, #2]
 800343c:	4618      	mov	r0, r3
 800343e:	f000 f971 	bl	8003724 <RTC_Bcd2ToByte>
 8003442:	4603      	mov	r3, r0
 8003444:	461a      	mov	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003454:	b590      	push	{r4, r7, lr}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	7f1b      	ldrb	r3, [r3, #28]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_RTC_SetDate+0x1c>
 800346c:	2302      	movs	r3, #2
 800346e:	e094      	b.n	800359a <HAL_RTC_SetDate+0x146>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2202      	movs	r2, #2
 800347a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10e      	bne.n	80034a0 <HAL_RTC_SetDate+0x4c>
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	785b      	ldrb	r3, [r3, #1]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	d008      	beq.n	80034a0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	785b      	ldrb	r3, [r3, #1]
 8003492:	f023 0310 	bic.w	r3, r3, #16
 8003496:	b2db      	uxtb	r3, r3
 8003498:	330a      	adds	r3, #10
 800349a:	b2da      	uxtb	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d11c      	bne.n	80034e0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	78db      	ldrb	r3, [r3, #3]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 f91c 	bl	80036e8 <RTC_ByteToBcd2>
 80034b0:	4603      	mov	r3, r0
 80034b2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	785b      	ldrb	r3, [r3, #1]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 f915 	bl	80036e8 <RTC_ByteToBcd2>
 80034be:	4603      	mov	r3, r0
 80034c0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80034c2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	789b      	ldrb	r3, [r3, #2]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 f90d 	bl	80036e8 <RTC_ByteToBcd2>
 80034ce:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80034d0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80034da:	4313      	orrs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	e00e      	b.n	80034fe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	78db      	ldrb	r3, [r3, #3]
 80034e4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	785b      	ldrb	r3, [r3, #1]
 80034ea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80034ec:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80034f2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80034fa:	4313      	orrs	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	22ca      	movs	r2, #202	; 0xca
 8003504:	625a      	str	r2, [r3, #36]	; 0x24
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2253      	movs	r2, #83	; 0x53
 800350c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f8be 	bl	8003690 <RTC_EnterInitMode>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	22ff      	movs	r2, #255	; 0xff
 8003520:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2204      	movs	r2, #4
 8003526:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e033      	b.n	800359a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800353c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003540:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003550:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0320 	and.w	r3, r3, #32
 800355c:	2b00      	cmp	r3, #0
 800355e:	d111      	bne.n	8003584 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f86d 	bl	8003640 <HAL_RTC_WaitForSynchro>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00b      	beq.n	8003584 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	22ff      	movs	r2, #255	; 0xff
 8003572:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2204      	movs	r2, #4
 8003578:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e00a      	b.n	800359a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	22ff      	movs	r2, #255	; 0xff
 800358a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2201      	movs	r2, #1
 8003590:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003598:	2300      	movs	r3, #0
  }
}
 800359a:	4618      	mov	r0, r3
 800359c:	371c      	adds	r7, #28
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd90      	pop	{r4, r7, pc}

080035a2 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b086      	sub	sp, #24
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80035bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80035c0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	0c1b      	lsrs	r3, r3, #16
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	0a1b      	lsrs	r3, r3, #8
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	f003 031f 	and.w	r3, r3, #31
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	0b5b      	lsrs	r3, r3, #13
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d11a      	bne.n	8003636 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	78db      	ldrb	r3, [r3, #3]
 8003604:	4618      	mov	r0, r3
 8003606:	f000 f88d 	bl	8003724 <RTC_Bcd2ToByte>
 800360a:	4603      	mov	r3, r0
 800360c:	461a      	mov	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	785b      	ldrb	r3, [r3, #1]
 8003616:	4618      	mov	r0, r3
 8003618:	f000 f884 	bl	8003724 <RTC_Bcd2ToByte>
 800361c:	4603      	mov	r3, r0
 800361e:	461a      	mov	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	789b      	ldrb	r3, [r3, #2]
 8003628:	4618      	mov	r0, r3
 800362a:	f000 f87b 	bl	8003724 <RTC_Bcd2ToByte>
 800362e:	4603      	mov	r3, r0
 8003630:	461a      	mov	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800365a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800365c:	f7fe fd04 	bl	8002068 <HAL_GetTick>
 8003660:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003662:	e009      	b.n	8003678 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003664:	f7fe fd00 	bl	8002068 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003672:	d901      	bls.n	8003678 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e007      	b.n	8003688 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0ee      	beq.n	8003664 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d119      	bne.n	80036de <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f04f 32ff 	mov.w	r2, #4294967295
 80036b2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036b4:	f7fe fcd8 	bl	8002068 <HAL_GetTick>
 80036b8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80036ba:	e009      	b.n	80036d0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80036bc:	f7fe fcd4 	bl	8002068 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036ca:	d901      	bls.n	80036d0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e007      	b.n	80036e0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0ee      	beq.n	80036bc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80036f6:	e005      	b.n	8003704 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	3301      	adds	r3, #1
 80036fc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	3b0a      	subs	r3, #10
 8003702:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	2b09      	cmp	r3, #9
 8003708:	d8f6      	bhi.n	80036f8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	b2db      	uxtb	r3, r3
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	b2da      	uxtb	r2, r3
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	4313      	orrs	r3, r2
 8003716:	b2db      	uxtb	r3, r3
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	091b      	lsrs	r3, r3, #4
 8003736:	b2db      	uxtb	r3, r3
 8003738:	461a      	mov	r2, r3
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	b2da      	uxtb	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	b2db      	uxtb	r3, r3
 8003750:	4413      	add	r3, r2
 8003752:	b2db      	uxtb	r3, r3
}
 8003754:	4618      	mov	r0, r3
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_RTCEx_SetRefClock>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef* hrtc)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	7f1b      	ldrb	r3, [r3, #28]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_RTCEx_SetRefClock+0x14>
 8003770:	2302      	movs	r3, #2
 8003772:	e03a      	b.n	80037ea <HAL_RTCEx_SetRefClock+0x8a>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2202      	movs	r2, #2
 800377e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	22ca      	movs	r2, #202	; 0xca
 8003786:	625a      	str	r2, [r3, #36]	; 0x24
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2253      	movs	r2, #83	; 0x53
 800378e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff ff7d 	bl	8003690 <RTC_EnterInitMode>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00b      	beq.n	80037b4 <HAL_RTCEx_SetRefClock+0x54>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	22ff      	movs	r2, #255	; 0xff
 80037a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2204      	movs	r2, #4
 80037a8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e01a      	b.n	80037ea <HAL_RTCEx_SetRefClock+0x8a>
  }
  else
  {
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0210 	orr.w	r2, r2, #16
 80037c2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037d2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	22ff      	movs	r2, #255	; 0xff
 80037da:	625a      	str	r2, [r3, #36]	; 0x24

   /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b082      	sub	sp, #8
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e03f      	b.n	8003884 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d106      	bne.n	800381e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7fe ff33 	bl	8002684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2224      	movs	r2, #36	; 0x24
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003834:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f928 	bl	8003a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800384a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695a      	ldr	r2, [r3, #20]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800385a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800386a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08a      	sub	sp, #40	; 0x28
 8003890:	af02      	add	r7, sp, #8
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	603b      	str	r3, [r7, #0]
 8003898:	4613      	mov	r3, r2
 800389a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d17c      	bne.n	80039a6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <HAL_UART_Transmit+0x2c>
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e075      	b.n	80039a8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_UART_Transmit+0x3e>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e06e      	b.n	80039a8 <HAL_UART_Transmit+0x11c>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2221      	movs	r2, #33	; 0x21
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038e0:	f7fe fbc2 	bl	8002068 <HAL_GetTick>
 80038e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	88fa      	ldrh	r2, [r7, #6]
 80038ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	88fa      	ldrh	r2, [r7, #6]
 80038f0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fa:	d108      	bne.n	800390e <HAL_UART_Transmit+0x82>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d104      	bne.n	800390e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003904:	2300      	movs	r3, #0
 8003906:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	61bb      	str	r3, [r7, #24]
 800390c:	e003      	b.n	8003916 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800391e:	e02a      	b.n	8003976 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2200      	movs	r2, #0
 8003928:	2180      	movs	r1, #128	; 0x80
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 f840 	bl	80039b0 <UART_WaitOnFlagUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e036      	b.n	80039a8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10b      	bne.n	8003958 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	461a      	mov	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800394e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	3302      	adds	r3, #2
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	e007      	b.n	8003968 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	781a      	ldrb	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	3301      	adds	r3, #1
 8003966:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800396c:	b29b      	uxth	r3, r3
 800396e:	3b01      	subs	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1cf      	bne.n	8003920 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2200      	movs	r2, #0
 8003988:	2140      	movs	r1, #64	; 0x40
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f810 	bl	80039b0 <UART_WaitOnFlagUntilTimeout>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e006      	b.n	80039a8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2220      	movs	r2, #32
 800399e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	e000      	b.n	80039a8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039a6:	2302      	movs	r3, #2
  }
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3720      	adds	r7, #32
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b090      	sub	sp, #64	; 0x40
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	4613      	mov	r3, r2
 80039be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c0:	e050      	b.n	8003a64 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c8:	d04c      	beq.n	8003a64 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d007      	beq.n	80039e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80039d0:	f7fe fb4a 	bl	8002068 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039dc:	429a      	cmp	r2, r3
 80039de:	d241      	bcs.n	8003a64 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	330c      	adds	r3, #12
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ea:	e853 3f00 	ldrex	r3, [r3]
 80039ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	330c      	adds	r3, #12
 80039fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a00:	637a      	str	r2, [r7, #52]	; 0x34
 8003a02:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a08:	e841 2300 	strex	r3, r2, [r1]
 8003a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e5      	bne.n	80039e0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3314      	adds	r3, #20
 8003a1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	e853 3f00 	ldrex	r3, [r3]
 8003a22:	613b      	str	r3, [r7, #16]
   return(result);
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f023 0301 	bic.w	r3, r3, #1
 8003a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3314      	adds	r3, #20
 8003a32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a34:	623a      	str	r2, [r7, #32]
 8003a36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a38:	69f9      	ldr	r1, [r7, #28]
 8003a3a:	6a3a      	ldr	r2, [r7, #32]
 8003a3c:	e841 2300 	strex	r3, r2, [r1]
 8003a40:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e5      	bne.n	8003a14 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e00f      	b.n	8003a84 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	bf0c      	ite	eq
 8003a74:	2301      	moveq	r3, #1
 8003a76:	2300      	movne	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	79fb      	ldrb	r3, [r7, #7]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d09f      	beq.n	80039c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3740      	adds	r7, #64	; 0x40
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a90:	b09f      	sub	sp, #124	; 0x7c
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa2:	68d9      	ldr	r1, [r3, #12]
 8003aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	ea40 0301 	orr.w	r3, r0, r1
 8003aac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	431a      	orrs	r2, r3
 8003abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ad0:	f021 010c 	bic.w	r1, r1, #12
 8003ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ada:	430b      	orrs	r3, r1
 8003adc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aea:	6999      	ldr	r1, [r3, #24]
 8003aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	ea40 0301 	orr.w	r3, r0, r1
 8003af4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	4bc5      	ldr	r3, [pc, #788]	; (8003e10 <UART_SetConfig+0x384>)
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d004      	beq.n	8003b0a <UART_SetConfig+0x7e>
 8003b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	4bc3      	ldr	r3, [pc, #780]	; (8003e14 <UART_SetConfig+0x388>)
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d103      	bne.n	8003b12 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b0a:	f7ff fad9 	bl	80030c0 <HAL_RCC_GetPCLK2Freq>
 8003b0e:	6778      	str	r0, [r7, #116]	; 0x74
 8003b10:	e002      	b.n	8003b18 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b12:	f7ff fac1 	bl	8003098 <HAL_RCC_GetPCLK1Freq>
 8003b16:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b20:	f040 80b6 	bne.w	8003c90 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b26:	461c      	mov	r4, r3
 8003b28:	f04f 0500 	mov.w	r5, #0
 8003b2c:	4622      	mov	r2, r4
 8003b2e:	462b      	mov	r3, r5
 8003b30:	1891      	adds	r1, r2, r2
 8003b32:	6439      	str	r1, [r7, #64]	; 0x40
 8003b34:	415b      	adcs	r3, r3
 8003b36:	647b      	str	r3, [r7, #68]	; 0x44
 8003b38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b3c:	1912      	adds	r2, r2, r4
 8003b3e:	eb45 0303 	adc.w	r3, r5, r3
 8003b42:	f04f 0000 	mov.w	r0, #0
 8003b46:	f04f 0100 	mov.w	r1, #0
 8003b4a:	00d9      	lsls	r1, r3, #3
 8003b4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b50:	00d0      	lsls	r0, r2, #3
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	1911      	adds	r1, r2, r4
 8003b58:	6639      	str	r1, [r7, #96]	; 0x60
 8003b5a:	416b      	adcs	r3, r5
 8003b5c:	667b      	str	r3, [r7, #100]	; 0x64
 8003b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	461a      	mov	r2, r3
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	1891      	adds	r1, r2, r2
 8003b6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b6c:	415b      	adcs	r3, r3
 8003b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b74:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003b78:	f7fd f896 	bl	8000ca8 <__aeabi_uldivmod>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4ba5      	ldr	r3, [pc, #660]	; (8003e18 <UART_SetConfig+0x38c>)
 8003b82:	fba3 2302 	umull	r2, r3, r3, r2
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	011e      	lsls	r6, r3, #4
 8003b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b8c:	461c      	mov	r4, r3
 8003b8e:	f04f 0500 	mov.w	r5, #0
 8003b92:	4622      	mov	r2, r4
 8003b94:	462b      	mov	r3, r5
 8003b96:	1891      	adds	r1, r2, r2
 8003b98:	6339      	str	r1, [r7, #48]	; 0x30
 8003b9a:	415b      	adcs	r3, r3
 8003b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003ba2:	1912      	adds	r2, r2, r4
 8003ba4:	eb45 0303 	adc.w	r3, r5, r3
 8003ba8:	f04f 0000 	mov.w	r0, #0
 8003bac:	f04f 0100 	mov.w	r1, #0
 8003bb0:	00d9      	lsls	r1, r3, #3
 8003bb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bb6:	00d0      	lsls	r0, r2, #3
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	1911      	adds	r1, r2, r4
 8003bbe:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bc0:	416b      	adcs	r3, r5
 8003bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	1891      	adds	r1, r2, r2
 8003bd0:	62b9      	str	r1, [r7, #40]	; 0x28
 8003bd2:	415b      	adcs	r3, r3
 8003bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bda:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003bde:	f7fd f863 	bl	8000ca8 <__aeabi_uldivmod>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4b8c      	ldr	r3, [pc, #560]	; (8003e18 <UART_SetConfig+0x38c>)
 8003be8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	2164      	movs	r1, #100	; 0x64
 8003bf0:	fb01 f303 	mul.w	r3, r1, r3
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	3332      	adds	r3, #50	; 0x32
 8003bfa:	4a87      	ldr	r2, [pc, #540]	; (8003e18 <UART_SetConfig+0x38c>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c08:	441e      	add	r6, r3
 8003c0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f04f 0100 	mov.w	r1, #0
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	1894      	adds	r4, r2, r2
 8003c18:	623c      	str	r4, [r7, #32]
 8003c1a:	415b      	adcs	r3, r3
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c22:	1812      	adds	r2, r2, r0
 8003c24:	eb41 0303 	adc.w	r3, r1, r3
 8003c28:	f04f 0400 	mov.w	r4, #0
 8003c2c:	f04f 0500 	mov.w	r5, #0
 8003c30:	00dd      	lsls	r5, r3, #3
 8003c32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c36:	00d4      	lsls	r4, r2, #3
 8003c38:	4622      	mov	r2, r4
 8003c3a:	462b      	mov	r3, r5
 8003c3c:	1814      	adds	r4, r2, r0
 8003c3e:	653c      	str	r4, [r7, #80]	; 0x50
 8003c40:	414b      	adcs	r3, r1
 8003c42:	657b      	str	r3, [r7, #84]	; 0x54
 8003c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	1891      	adds	r1, r2, r2
 8003c50:	61b9      	str	r1, [r7, #24]
 8003c52:	415b      	adcs	r3, r3
 8003c54:	61fb      	str	r3, [r7, #28]
 8003c56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c5a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003c5e:	f7fd f823 	bl	8000ca8 <__aeabi_uldivmod>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4b6c      	ldr	r3, [pc, #432]	; (8003e18 <UART_SetConfig+0x38c>)
 8003c68:	fba3 1302 	umull	r1, r3, r3, r2
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	2164      	movs	r1, #100	; 0x64
 8003c70:	fb01 f303 	mul.w	r3, r1, r3
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	3332      	adds	r3, #50	; 0x32
 8003c7a:	4a67      	ldr	r2, [pc, #412]	; (8003e18 <UART_SetConfig+0x38c>)
 8003c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	f003 0207 	and.w	r2, r3, #7
 8003c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4432      	add	r2, r6
 8003c8c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c8e:	e0b9      	b.n	8003e04 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c92:	461c      	mov	r4, r3
 8003c94:	f04f 0500 	mov.w	r5, #0
 8003c98:	4622      	mov	r2, r4
 8003c9a:	462b      	mov	r3, r5
 8003c9c:	1891      	adds	r1, r2, r2
 8003c9e:	6139      	str	r1, [r7, #16]
 8003ca0:	415b      	adcs	r3, r3
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ca8:	1912      	adds	r2, r2, r4
 8003caa:	eb45 0303 	adc.w	r3, r5, r3
 8003cae:	f04f 0000 	mov.w	r0, #0
 8003cb2:	f04f 0100 	mov.w	r1, #0
 8003cb6:	00d9      	lsls	r1, r3, #3
 8003cb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cbc:	00d0      	lsls	r0, r2, #3
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	eb12 0804 	adds.w	r8, r2, r4
 8003cc6:	eb43 0905 	adc.w	r9, r3, r5
 8003cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f04f 0100 	mov.w	r1, #0
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	008b      	lsls	r3, r1, #2
 8003cde:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ce2:	0082      	lsls	r2, r0, #2
 8003ce4:	4640      	mov	r0, r8
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	f7fc ffde 	bl	8000ca8 <__aeabi_uldivmod>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4b49      	ldr	r3, [pc, #292]	; (8003e18 <UART_SetConfig+0x38c>)
 8003cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	011e      	lsls	r6, r3, #4
 8003cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f04f 0100 	mov.w	r1, #0
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	1894      	adds	r4, r2, r2
 8003d08:	60bc      	str	r4, [r7, #8]
 8003d0a:	415b      	adcs	r3, r3
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d12:	1812      	adds	r2, r2, r0
 8003d14:	eb41 0303 	adc.w	r3, r1, r3
 8003d18:	f04f 0400 	mov.w	r4, #0
 8003d1c:	f04f 0500 	mov.w	r5, #0
 8003d20:	00dd      	lsls	r5, r3, #3
 8003d22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d26:	00d4      	lsls	r4, r2, #3
 8003d28:	4622      	mov	r2, r4
 8003d2a:	462b      	mov	r3, r5
 8003d2c:	1814      	adds	r4, r2, r0
 8003d2e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003d30:	414b      	adcs	r3, r1
 8003d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f04f 0100 	mov.w	r1, #0
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	008b      	lsls	r3, r1, #2
 8003d48:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d4c:	0082      	lsls	r2, r0, #2
 8003d4e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003d52:	f7fc ffa9 	bl	8000ca8 <__aeabi_uldivmod>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4b2f      	ldr	r3, [pc, #188]	; (8003e18 <UART_SetConfig+0x38c>)
 8003d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d60:	095b      	lsrs	r3, r3, #5
 8003d62:	2164      	movs	r1, #100	; 0x64
 8003d64:	fb01 f303 	mul.w	r3, r1, r3
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	3332      	adds	r3, #50	; 0x32
 8003d6e:	4a2a      	ldr	r2, [pc, #168]	; (8003e18 <UART_SetConfig+0x38c>)
 8003d70:	fba2 2303 	umull	r2, r3, r2, r3
 8003d74:	095b      	lsrs	r3, r3, #5
 8003d76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d7a:	441e      	add	r6, r3
 8003d7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f04f 0100 	mov.w	r1, #0
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	1894      	adds	r4, r2, r2
 8003d8a:	603c      	str	r4, [r7, #0]
 8003d8c:	415b      	adcs	r3, r3
 8003d8e:	607b      	str	r3, [r7, #4]
 8003d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d94:	1812      	adds	r2, r2, r0
 8003d96:	eb41 0303 	adc.w	r3, r1, r3
 8003d9a:	f04f 0400 	mov.w	r4, #0
 8003d9e:	f04f 0500 	mov.w	r5, #0
 8003da2:	00dd      	lsls	r5, r3, #3
 8003da4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003da8:	00d4      	lsls	r4, r2, #3
 8003daa:	4622      	mov	r2, r4
 8003dac:	462b      	mov	r3, r5
 8003dae:	eb12 0a00 	adds.w	sl, r2, r0
 8003db2:	eb43 0b01 	adc.w	fp, r3, r1
 8003db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f04f 0100 	mov.w	r1, #0
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	f04f 0300 	mov.w	r3, #0
 8003dc8:	008b      	lsls	r3, r1, #2
 8003dca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003dce:	0082      	lsls	r2, r0, #2
 8003dd0:	4650      	mov	r0, sl
 8003dd2:	4659      	mov	r1, fp
 8003dd4:	f7fc ff68 	bl	8000ca8 <__aeabi_uldivmod>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4b0e      	ldr	r3, [pc, #56]	; (8003e18 <UART_SetConfig+0x38c>)
 8003dde:	fba3 1302 	umull	r1, r3, r3, r2
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	2164      	movs	r1, #100	; 0x64
 8003de6:	fb01 f303 	mul.w	r3, r1, r3
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	3332      	adds	r3, #50	; 0x32
 8003df0:	4a09      	ldr	r2, [pc, #36]	; (8003e18 <UART_SetConfig+0x38c>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	f003 020f 	and.w	r2, r3, #15
 8003dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4432      	add	r2, r6
 8003e02:	609a      	str	r2, [r3, #8]
}
 8003e04:	bf00      	nop
 8003e06:	377c      	adds	r7, #124	; 0x7c
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e0e:	bf00      	nop
 8003e10:	40011000 	.word	0x40011000
 8003e14:	40011400 	.word	0x40011400
 8003e18:	51eb851f 	.word	0x51eb851f

08003e1c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
	HAL_Init();
 8003e20:	f7fe f8c2 	bl	8001fa8 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8003e24:	f000 f80a 	bl	8003e3c <SystemClock_Config>
	uartInit(9600) ;
 8003e28:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8003e2c:	f7fd ff1a 	bl	8001c64 <uartInit>
	initFSM()  ;
 8003e30:	f7fd fb8e 	bl	8001550 <initFSM>
	/* Infinite loop */

	while (1)
    {
		FSM_loop()  ;
 8003e34:	f7fd fb98 	bl	8001568 <FSM_loop>
 8003e38:	e7fc      	b.n	8003e34 <main+0x18>
	...

08003e3c <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b094      	sub	sp, #80	; 0x50
 8003e40:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e42:	f107 0320 	add.w	r3, r7, #32
 8003e46:	2230      	movs	r2, #48	; 0x30
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 f8ce 	bl	8003fec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e50:	f107 030c 	add.w	r3, r7, #12
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	605a      	str	r2, [r3, #4]
 8003e5a:	609a      	str	r2, [r3, #8]
 8003e5c:	60da      	str	r2, [r3, #12]
 8003e5e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8003e60:	2300      	movs	r3, #0
 8003e62:	60bb      	str	r3, [r7, #8]
 8003e64:	4b2d      	ldr	r3, [pc, #180]	; (8003f1c <SystemClock_Config+0xe0>)
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	4a2c      	ldr	r2, [pc, #176]	; (8003f1c <SystemClock_Config+0xe0>)
 8003e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8003e70:	4b2a      	ldr	r3, [pc, #168]	; (8003f1c <SystemClock_Config+0xe0>)
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	607b      	str	r3, [r7, #4]
 8003e80:	4b27      	ldr	r3, [pc, #156]	; (8003f20 <SystemClock_Config+0xe4>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a26      	ldr	r2, [pc, #152]	; (8003f20 <SystemClock_Config+0xe4>)
 8003e86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e8a:	6013      	str	r3, [r2, #0]
 8003e8c:	4b24      	ldr	r3, [pc, #144]	; (8003f20 <SystemClock_Config+0xe4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e94:	607b      	str	r3, [r7, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003e98:	2305      	movs	r3, #5
 8003e9a:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003e9c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
	  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003eaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003eae:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 8;
 8003eb0:	2308      	movs	r3, #8
 8003eb2:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLN = 360;
 8003eb4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003eb8:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003eba:	2302      	movs	r3, #2
 8003ebc:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003ebe:	2307      	movs	r3, #7
 8003ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ec2:	f107 0320 	add.w	r3, r7, #32
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fe fc9a 	bl	8002800 <HAL_RCC_OscConfig>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <SystemClock_Config+0x9a>
	  {
	    Error_Handler();
 8003ed2:	f000 f827 	bl	8003f24 <Error_Handler>
	  }
	  /** Activate the Over-Drive mode
	  */
	  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003ed6:	f7fe fc43 	bl	8002760 <HAL_PWREx_EnableOverDrive>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <SystemClock_Config+0xa8>
	  {
	    Error_Handler();
 8003ee0:	f000 f820 	bl	8003f24 <Error_Handler>
	  }
	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ee4:	230f      	movs	r3, #15
 8003ee6:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ee8:	2302      	movs	r3, #2
 8003eea:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003eec:	2300      	movs	r3, #0
 8003eee:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003ef0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003ef4:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003efa:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003efc:	f107 030c 	add.w	r3, r7, #12
 8003f00:	2105      	movs	r1, #5
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fe fef4 	bl	8002cf0 <HAL_RCC_ClockConfig>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <SystemClock_Config+0xd6>
	  {
	    Error_Handler();
 8003f0e:	f000 f809 	bl	8003f24 <Error_Handler>
	  }
}
 8003f12:	bf00      	nop
 8003f14:	3750      	adds	r7, #80	; 0x50
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	40007000 	.word	0x40007000

08003f24 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_Init(LED2) ;
 8003f28:	2001      	movs	r0, #1
 8003f2a:	f7fd ff1f 	bl	8001d6c <BSP_LED_Init>
  BSP_LED_On(LED2);
 8003f2e:	2001      	movs	r0, #1
 8003f30:	f7fd ff6c 	bl	8001e0c <BSP_LED_On>
  while (1)
  {
	  BSP_LED_Toggle(LED2);
 8003f34:	2001      	movs	r0, #1
 8003f36:	f7fd ff83 	bl	8001e40 <BSP_LED_Toggle>
	  HAL_Delay(100) ;
 8003f3a:	2064      	movs	r0, #100	; 0x64
 8003f3c:	f7fe f8a0 	bl	8002080 <HAL_Delay>
	  BSP_LED_Toggle(LED2);
 8003f40:	e7f8      	b.n	8003f34 <Error_Handler+0x10>
	...

08003f44 <Reset_Handler>:

   .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f7c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003f48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003f4a:	e003      	b.n	8003f54 <LoopCopyDataInit>

08003f4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003f4c:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003f4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003f50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003f52:	3104      	adds	r1, #4

08003f54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003f54:	480b      	ldr	r0, [pc, #44]	; (8003f84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003f56:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003f58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003f5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003f5c:	d3f6      	bcc.n	8003f4c <CopyDataInit>
  ldr  r2, =_sbss
 8003f5e:	4a0b      	ldr	r2, [pc, #44]	; (8003f8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003f60:	e002      	b.n	8003f68 <LoopFillZerobss>

08003f62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003f62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003f64:	f842 3b04 	str.w	r3, [r2], #4

08003f68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003f68:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003f6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003f6c:	d3f9      	bcc.n	8003f62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f6e:	f7fd ff81 	bl	8001e74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f72:	f000 f817 	bl	8003fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f76:	f7ff ff51 	bl	8003e1c <main>
  bx  lr    
 8003f7a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003f7c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003f80:	080058e8 	.word	0x080058e8
  ldr  r0, =_sdata
 8003f84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003f88:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8003f8c:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8003f90:	20000154 	.word	0x20000154

08003f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f94:	e7fe      	b.n	8003f94 <ADC_IRQHandler>
	...

08003f98 <__errno>:
 8003f98:	4b01      	ldr	r3, [pc, #4]	; (8003fa0 <__errno+0x8>)
 8003f9a:	6818      	ldr	r0, [r3, #0]
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	20000018 	.word	0x20000018

08003fa4 <__libc_init_array>:
 8003fa4:	b570      	push	{r4, r5, r6, lr}
 8003fa6:	4d0d      	ldr	r5, [pc, #52]	; (8003fdc <__libc_init_array+0x38>)
 8003fa8:	4c0d      	ldr	r4, [pc, #52]	; (8003fe0 <__libc_init_array+0x3c>)
 8003faa:	1b64      	subs	r4, r4, r5
 8003fac:	10a4      	asrs	r4, r4, #2
 8003fae:	2600      	movs	r6, #0
 8003fb0:	42a6      	cmp	r6, r4
 8003fb2:	d109      	bne.n	8003fc8 <__libc_init_array+0x24>
 8003fb4:	4d0b      	ldr	r5, [pc, #44]	; (8003fe4 <__libc_init_array+0x40>)
 8003fb6:	4c0c      	ldr	r4, [pc, #48]	; (8003fe8 <__libc_init_array+0x44>)
 8003fb8:	f001 fc04 	bl	80057c4 <_init>
 8003fbc:	1b64      	subs	r4, r4, r5
 8003fbe:	10a4      	asrs	r4, r4, #2
 8003fc0:	2600      	movs	r6, #0
 8003fc2:	42a6      	cmp	r6, r4
 8003fc4:	d105      	bne.n	8003fd2 <__libc_init_array+0x2e>
 8003fc6:	bd70      	pop	{r4, r5, r6, pc}
 8003fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fcc:	4798      	blx	r3
 8003fce:	3601      	adds	r6, #1
 8003fd0:	e7ee      	b.n	8003fb0 <__libc_init_array+0xc>
 8003fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fd6:	4798      	blx	r3
 8003fd8:	3601      	adds	r6, #1
 8003fda:	e7f2      	b.n	8003fc2 <__libc_init_array+0x1e>
 8003fdc:	080058e0 	.word	0x080058e0
 8003fe0:	080058e0 	.word	0x080058e0
 8003fe4:	080058e0 	.word	0x080058e0
 8003fe8:	080058e4 	.word	0x080058e4

08003fec <memset>:
 8003fec:	4402      	add	r2, r0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d100      	bne.n	8003ff6 <memset+0xa>
 8003ff4:	4770      	bx	lr
 8003ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8003ffa:	e7f9      	b.n	8003ff0 <memset+0x4>

08003ffc <siprintf>:
 8003ffc:	b40e      	push	{r1, r2, r3}
 8003ffe:	b500      	push	{lr}
 8004000:	b09c      	sub	sp, #112	; 0x70
 8004002:	ab1d      	add	r3, sp, #116	; 0x74
 8004004:	9002      	str	r0, [sp, #8]
 8004006:	9006      	str	r0, [sp, #24]
 8004008:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800400c:	4809      	ldr	r0, [pc, #36]	; (8004034 <siprintf+0x38>)
 800400e:	9107      	str	r1, [sp, #28]
 8004010:	9104      	str	r1, [sp, #16]
 8004012:	4909      	ldr	r1, [pc, #36]	; (8004038 <siprintf+0x3c>)
 8004014:	f853 2b04 	ldr.w	r2, [r3], #4
 8004018:	9105      	str	r1, [sp, #20]
 800401a:	6800      	ldr	r0, [r0, #0]
 800401c:	9301      	str	r3, [sp, #4]
 800401e:	a902      	add	r1, sp, #8
 8004020:	f000 f868 	bl	80040f4 <_svfiprintf_r>
 8004024:	9b02      	ldr	r3, [sp, #8]
 8004026:	2200      	movs	r2, #0
 8004028:	701a      	strb	r2, [r3, #0]
 800402a:	b01c      	add	sp, #112	; 0x70
 800402c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004030:	b003      	add	sp, #12
 8004032:	4770      	bx	lr
 8004034:	20000018 	.word	0x20000018
 8004038:	ffff0208 	.word	0xffff0208

0800403c <__ssputs_r>:
 800403c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004040:	688e      	ldr	r6, [r1, #8]
 8004042:	429e      	cmp	r6, r3
 8004044:	4682      	mov	sl, r0
 8004046:	460c      	mov	r4, r1
 8004048:	4690      	mov	r8, r2
 800404a:	461f      	mov	r7, r3
 800404c:	d838      	bhi.n	80040c0 <__ssputs_r+0x84>
 800404e:	898a      	ldrh	r2, [r1, #12]
 8004050:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004054:	d032      	beq.n	80040bc <__ssputs_r+0x80>
 8004056:	6825      	ldr	r5, [r4, #0]
 8004058:	6909      	ldr	r1, [r1, #16]
 800405a:	eba5 0901 	sub.w	r9, r5, r1
 800405e:	6965      	ldr	r5, [r4, #20]
 8004060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004064:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004068:	3301      	adds	r3, #1
 800406a:	444b      	add	r3, r9
 800406c:	106d      	asrs	r5, r5, #1
 800406e:	429d      	cmp	r5, r3
 8004070:	bf38      	it	cc
 8004072:	461d      	movcc	r5, r3
 8004074:	0553      	lsls	r3, r2, #21
 8004076:	d531      	bpl.n	80040dc <__ssputs_r+0xa0>
 8004078:	4629      	mov	r1, r5
 800407a:	f000 fb47 	bl	800470c <_malloc_r>
 800407e:	4606      	mov	r6, r0
 8004080:	b950      	cbnz	r0, 8004098 <__ssputs_r+0x5c>
 8004082:	230c      	movs	r3, #12
 8004084:	f8ca 3000 	str.w	r3, [sl]
 8004088:	89a3      	ldrh	r3, [r4, #12]
 800408a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800408e:	81a3      	strh	r3, [r4, #12]
 8004090:	f04f 30ff 	mov.w	r0, #4294967295
 8004094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004098:	6921      	ldr	r1, [r4, #16]
 800409a:	464a      	mov	r2, r9
 800409c:	f000 fabe 	bl	800461c <memcpy>
 80040a0:	89a3      	ldrh	r3, [r4, #12]
 80040a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80040a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040aa:	81a3      	strh	r3, [r4, #12]
 80040ac:	6126      	str	r6, [r4, #16]
 80040ae:	6165      	str	r5, [r4, #20]
 80040b0:	444e      	add	r6, r9
 80040b2:	eba5 0509 	sub.w	r5, r5, r9
 80040b6:	6026      	str	r6, [r4, #0]
 80040b8:	60a5      	str	r5, [r4, #8]
 80040ba:	463e      	mov	r6, r7
 80040bc:	42be      	cmp	r6, r7
 80040be:	d900      	bls.n	80040c2 <__ssputs_r+0x86>
 80040c0:	463e      	mov	r6, r7
 80040c2:	4632      	mov	r2, r6
 80040c4:	6820      	ldr	r0, [r4, #0]
 80040c6:	4641      	mov	r1, r8
 80040c8:	f000 fab6 	bl	8004638 <memmove>
 80040cc:	68a3      	ldr	r3, [r4, #8]
 80040ce:	6822      	ldr	r2, [r4, #0]
 80040d0:	1b9b      	subs	r3, r3, r6
 80040d2:	4432      	add	r2, r6
 80040d4:	60a3      	str	r3, [r4, #8]
 80040d6:	6022      	str	r2, [r4, #0]
 80040d8:	2000      	movs	r0, #0
 80040da:	e7db      	b.n	8004094 <__ssputs_r+0x58>
 80040dc:	462a      	mov	r2, r5
 80040de:	f000 fb6f 	bl	80047c0 <_realloc_r>
 80040e2:	4606      	mov	r6, r0
 80040e4:	2800      	cmp	r0, #0
 80040e6:	d1e1      	bne.n	80040ac <__ssputs_r+0x70>
 80040e8:	6921      	ldr	r1, [r4, #16]
 80040ea:	4650      	mov	r0, sl
 80040ec:	f000 fabe 	bl	800466c <_free_r>
 80040f0:	e7c7      	b.n	8004082 <__ssputs_r+0x46>
	...

080040f4 <_svfiprintf_r>:
 80040f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040f8:	4698      	mov	r8, r3
 80040fa:	898b      	ldrh	r3, [r1, #12]
 80040fc:	061b      	lsls	r3, r3, #24
 80040fe:	b09d      	sub	sp, #116	; 0x74
 8004100:	4607      	mov	r7, r0
 8004102:	460d      	mov	r5, r1
 8004104:	4614      	mov	r4, r2
 8004106:	d50e      	bpl.n	8004126 <_svfiprintf_r+0x32>
 8004108:	690b      	ldr	r3, [r1, #16]
 800410a:	b963      	cbnz	r3, 8004126 <_svfiprintf_r+0x32>
 800410c:	2140      	movs	r1, #64	; 0x40
 800410e:	f000 fafd 	bl	800470c <_malloc_r>
 8004112:	6028      	str	r0, [r5, #0]
 8004114:	6128      	str	r0, [r5, #16]
 8004116:	b920      	cbnz	r0, 8004122 <_svfiprintf_r+0x2e>
 8004118:	230c      	movs	r3, #12
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	f04f 30ff 	mov.w	r0, #4294967295
 8004120:	e0d1      	b.n	80042c6 <_svfiprintf_r+0x1d2>
 8004122:	2340      	movs	r3, #64	; 0x40
 8004124:	616b      	str	r3, [r5, #20]
 8004126:	2300      	movs	r3, #0
 8004128:	9309      	str	r3, [sp, #36]	; 0x24
 800412a:	2320      	movs	r3, #32
 800412c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004130:	f8cd 800c 	str.w	r8, [sp, #12]
 8004134:	2330      	movs	r3, #48	; 0x30
 8004136:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80042e0 <_svfiprintf_r+0x1ec>
 800413a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800413e:	f04f 0901 	mov.w	r9, #1
 8004142:	4623      	mov	r3, r4
 8004144:	469a      	mov	sl, r3
 8004146:	f813 2b01 	ldrb.w	r2, [r3], #1
 800414a:	b10a      	cbz	r2, 8004150 <_svfiprintf_r+0x5c>
 800414c:	2a25      	cmp	r2, #37	; 0x25
 800414e:	d1f9      	bne.n	8004144 <_svfiprintf_r+0x50>
 8004150:	ebba 0b04 	subs.w	fp, sl, r4
 8004154:	d00b      	beq.n	800416e <_svfiprintf_r+0x7a>
 8004156:	465b      	mov	r3, fp
 8004158:	4622      	mov	r2, r4
 800415a:	4629      	mov	r1, r5
 800415c:	4638      	mov	r0, r7
 800415e:	f7ff ff6d 	bl	800403c <__ssputs_r>
 8004162:	3001      	adds	r0, #1
 8004164:	f000 80aa 	beq.w	80042bc <_svfiprintf_r+0x1c8>
 8004168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800416a:	445a      	add	r2, fp
 800416c:	9209      	str	r2, [sp, #36]	; 0x24
 800416e:	f89a 3000 	ldrb.w	r3, [sl]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 80a2 	beq.w	80042bc <_svfiprintf_r+0x1c8>
 8004178:	2300      	movs	r3, #0
 800417a:	f04f 32ff 	mov.w	r2, #4294967295
 800417e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004182:	f10a 0a01 	add.w	sl, sl, #1
 8004186:	9304      	str	r3, [sp, #16]
 8004188:	9307      	str	r3, [sp, #28]
 800418a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800418e:	931a      	str	r3, [sp, #104]	; 0x68
 8004190:	4654      	mov	r4, sl
 8004192:	2205      	movs	r2, #5
 8004194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004198:	4851      	ldr	r0, [pc, #324]	; (80042e0 <_svfiprintf_r+0x1ec>)
 800419a:	f7fc f831 	bl	8000200 <memchr>
 800419e:	9a04      	ldr	r2, [sp, #16]
 80041a0:	b9d8      	cbnz	r0, 80041da <_svfiprintf_r+0xe6>
 80041a2:	06d0      	lsls	r0, r2, #27
 80041a4:	bf44      	itt	mi
 80041a6:	2320      	movmi	r3, #32
 80041a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041ac:	0711      	lsls	r1, r2, #28
 80041ae:	bf44      	itt	mi
 80041b0:	232b      	movmi	r3, #43	; 0x2b
 80041b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041b6:	f89a 3000 	ldrb.w	r3, [sl]
 80041ba:	2b2a      	cmp	r3, #42	; 0x2a
 80041bc:	d015      	beq.n	80041ea <_svfiprintf_r+0xf6>
 80041be:	9a07      	ldr	r2, [sp, #28]
 80041c0:	4654      	mov	r4, sl
 80041c2:	2000      	movs	r0, #0
 80041c4:	f04f 0c0a 	mov.w	ip, #10
 80041c8:	4621      	mov	r1, r4
 80041ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041ce:	3b30      	subs	r3, #48	; 0x30
 80041d0:	2b09      	cmp	r3, #9
 80041d2:	d94e      	bls.n	8004272 <_svfiprintf_r+0x17e>
 80041d4:	b1b0      	cbz	r0, 8004204 <_svfiprintf_r+0x110>
 80041d6:	9207      	str	r2, [sp, #28]
 80041d8:	e014      	b.n	8004204 <_svfiprintf_r+0x110>
 80041da:	eba0 0308 	sub.w	r3, r0, r8
 80041de:	fa09 f303 	lsl.w	r3, r9, r3
 80041e2:	4313      	orrs	r3, r2
 80041e4:	9304      	str	r3, [sp, #16]
 80041e6:	46a2      	mov	sl, r4
 80041e8:	e7d2      	b.n	8004190 <_svfiprintf_r+0x9c>
 80041ea:	9b03      	ldr	r3, [sp, #12]
 80041ec:	1d19      	adds	r1, r3, #4
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	9103      	str	r1, [sp, #12]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	bfbb      	ittet	lt
 80041f6:	425b      	neglt	r3, r3
 80041f8:	f042 0202 	orrlt.w	r2, r2, #2
 80041fc:	9307      	strge	r3, [sp, #28]
 80041fe:	9307      	strlt	r3, [sp, #28]
 8004200:	bfb8      	it	lt
 8004202:	9204      	strlt	r2, [sp, #16]
 8004204:	7823      	ldrb	r3, [r4, #0]
 8004206:	2b2e      	cmp	r3, #46	; 0x2e
 8004208:	d10c      	bne.n	8004224 <_svfiprintf_r+0x130>
 800420a:	7863      	ldrb	r3, [r4, #1]
 800420c:	2b2a      	cmp	r3, #42	; 0x2a
 800420e:	d135      	bne.n	800427c <_svfiprintf_r+0x188>
 8004210:	9b03      	ldr	r3, [sp, #12]
 8004212:	1d1a      	adds	r2, r3, #4
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	9203      	str	r2, [sp, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	bfb8      	it	lt
 800421c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004220:	3402      	adds	r4, #2
 8004222:	9305      	str	r3, [sp, #20]
 8004224:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80042f0 <_svfiprintf_r+0x1fc>
 8004228:	7821      	ldrb	r1, [r4, #0]
 800422a:	2203      	movs	r2, #3
 800422c:	4650      	mov	r0, sl
 800422e:	f7fb ffe7 	bl	8000200 <memchr>
 8004232:	b140      	cbz	r0, 8004246 <_svfiprintf_r+0x152>
 8004234:	2340      	movs	r3, #64	; 0x40
 8004236:	eba0 000a 	sub.w	r0, r0, sl
 800423a:	fa03 f000 	lsl.w	r0, r3, r0
 800423e:	9b04      	ldr	r3, [sp, #16]
 8004240:	4303      	orrs	r3, r0
 8004242:	3401      	adds	r4, #1
 8004244:	9304      	str	r3, [sp, #16]
 8004246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800424a:	4826      	ldr	r0, [pc, #152]	; (80042e4 <_svfiprintf_r+0x1f0>)
 800424c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004250:	2206      	movs	r2, #6
 8004252:	f7fb ffd5 	bl	8000200 <memchr>
 8004256:	2800      	cmp	r0, #0
 8004258:	d038      	beq.n	80042cc <_svfiprintf_r+0x1d8>
 800425a:	4b23      	ldr	r3, [pc, #140]	; (80042e8 <_svfiprintf_r+0x1f4>)
 800425c:	bb1b      	cbnz	r3, 80042a6 <_svfiprintf_r+0x1b2>
 800425e:	9b03      	ldr	r3, [sp, #12]
 8004260:	3307      	adds	r3, #7
 8004262:	f023 0307 	bic.w	r3, r3, #7
 8004266:	3308      	adds	r3, #8
 8004268:	9303      	str	r3, [sp, #12]
 800426a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800426c:	4433      	add	r3, r6
 800426e:	9309      	str	r3, [sp, #36]	; 0x24
 8004270:	e767      	b.n	8004142 <_svfiprintf_r+0x4e>
 8004272:	fb0c 3202 	mla	r2, ip, r2, r3
 8004276:	460c      	mov	r4, r1
 8004278:	2001      	movs	r0, #1
 800427a:	e7a5      	b.n	80041c8 <_svfiprintf_r+0xd4>
 800427c:	2300      	movs	r3, #0
 800427e:	3401      	adds	r4, #1
 8004280:	9305      	str	r3, [sp, #20]
 8004282:	4619      	mov	r1, r3
 8004284:	f04f 0c0a 	mov.w	ip, #10
 8004288:	4620      	mov	r0, r4
 800428a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800428e:	3a30      	subs	r2, #48	; 0x30
 8004290:	2a09      	cmp	r2, #9
 8004292:	d903      	bls.n	800429c <_svfiprintf_r+0x1a8>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0c5      	beq.n	8004224 <_svfiprintf_r+0x130>
 8004298:	9105      	str	r1, [sp, #20]
 800429a:	e7c3      	b.n	8004224 <_svfiprintf_r+0x130>
 800429c:	fb0c 2101 	mla	r1, ip, r1, r2
 80042a0:	4604      	mov	r4, r0
 80042a2:	2301      	movs	r3, #1
 80042a4:	e7f0      	b.n	8004288 <_svfiprintf_r+0x194>
 80042a6:	ab03      	add	r3, sp, #12
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	462a      	mov	r2, r5
 80042ac:	4b0f      	ldr	r3, [pc, #60]	; (80042ec <_svfiprintf_r+0x1f8>)
 80042ae:	a904      	add	r1, sp, #16
 80042b0:	4638      	mov	r0, r7
 80042b2:	f3af 8000 	nop.w
 80042b6:	1c42      	adds	r2, r0, #1
 80042b8:	4606      	mov	r6, r0
 80042ba:	d1d6      	bne.n	800426a <_svfiprintf_r+0x176>
 80042bc:	89ab      	ldrh	r3, [r5, #12]
 80042be:	065b      	lsls	r3, r3, #25
 80042c0:	f53f af2c 	bmi.w	800411c <_svfiprintf_r+0x28>
 80042c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042c6:	b01d      	add	sp, #116	; 0x74
 80042c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042cc:	ab03      	add	r3, sp, #12
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	462a      	mov	r2, r5
 80042d2:	4b06      	ldr	r3, [pc, #24]	; (80042ec <_svfiprintf_r+0x1f8>)
 80042d4:	a904      	add	r1, sp, #16
 80042d6:	4638      	mov	r0, r7
 80042d8:	f000 f87a 	bl	80043d0 <_printf_i>
 80042dc:	e7eb      	b.n	80042b6 <_svfiprintf_r+0x1c2>
 80042de:	bf00      	nop
 80042e0:	08005860 	.word	0x08005860
 80042e4:	0800586a 	.word	0x0800586a
 80042e8:	00000000 	.word	0x00000000
 80042ec:	0800403d 	.word	0x0800403d
 80042f0:	08005866 	.word	0x08005866

080042f4 <_printf_common>:
 80042f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042f8:	4616      	mov	r6, r2
 80042fa:	4699      	mov	r9, r3
 80042fc:	688a      	ldr	r2, [r1, #8]
 80042fe:	690b      	ldr	r3, [r1, #16]
 8004300:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004304:	4293      	cmp	r3, r2
 8004306:	bfb8      	it	lt
 8004308:	4613      	movlt	r3, r2
 800430a:	6033      	str	r3, [r6, #0]
 800430c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004310:	4607      	mov	r7, r0
 8004312:	460c      	mov	r4, r1
 8004314:	b10a      	cbz	r2, 800431a <_printf_common+0x26>
 8004316:	3301      	adds	r3, #1
 8004318:	6033      	str	r3, [r6, #0]
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	0699      	lsls	r1, r3, #26
 800431e:	bf42      	ittt	mi
 8004320:	6833      	ldrmi	r3, [r6, #0]
 8004322:	3302      	addmi	r3, #2
 8004324:	6033      	strmi	r3, [r6, #0]
 8004326:	6825      	ldr	r5, [r4, #0]
 8004328:	f015 0506 	ands.w	r5, r5, #6
 800432c:	d106      	bne.n	800433c <_printf_common+0x48>
 800432e:	f104 0a19 	add.w	sl, r4, #25
 8004332:	68e3      	ldr	r3, [r4, #12]
 8004334:	6832      	ldr	r2, [r6, #0]
 8004336:	1a9b      	subs	r3, r3, r2
 8004338:	42ab      	cmp	r3, r5
 800433a:	dc26      	bgt.n	800438a <_printf_common+0x96>
 800433c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004340:	1e13      	subs	r3, r2, #0
 8004342:	6822      	ldr	r2, [r4, #0]
 8004344:	bf18      	it	ne
 8004346:	2301      	movne	r3, #1
 8004348:	0692      	lsls	r2, r2, #26
 800434a:	d42b      	bmi.n	80043a4 <_printf_common+0xb0>
 800434c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004350:	4649      	mov	r1, r9
 8004352:	4638      	mov	r0, r7
 8004354:	47c0      	blx	r8
 8004356:	3001      	adds	r0, #1
 8004358:	d01e      	beq.n	8004398 <_printf_common+0xa4>
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	68e5      	ldr	r5, [r4, #12]
 800435e:	6832      	ldr	r2, [r6, #0]
 8004360:	f003 0306 	and.w	r3, r3, #6
 8004364:	2b04      	cmp	r3, #4
 8004366:	bf08      	it	eq
 8004368:	1aad      	subeq	r5, r5, r2
 800436a:	68a3      	ldr	r3, [r4, #8]
 800436c:	6922      	ldr	r2, [r4, #16]
 800436e:	bf0c      	ite	eq
 8004370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004374:	2500      	movne	r5, #0
 8004376:	4293      	cmp	r3, r2
 8004378:	bfc4      	itt	gt
 800437a:	1a9b      	subgt	r3, r3, r2
 800437c:	18ed      	addgt	r5, r5, r3
 800437e:	2600      	movs	r6, #0
 8004380:	341a      	adds	r4, #26
 8004382:	42b5      	cmp	r5, r6
 8004384:	d11a      	bne.n	80043bc <_printf_common+0xc8>
 8004386:	2000      	movs	r0, #0
 8004388:	e008      	b.n	800439c <_printf_common+0xa8>
 800438a:	2301      	movs	r3, #1
 800438c:	4652      	mov	r2, sl
 800438e:	4649      	mov	r1, r9
 8004390:	4638      	mov	r0, r7
 8004392:	47c0      	blx	r8
 8004394:	3001      	adds	r0, #1
 8004396:	d103      	bne.n	80043a0 <_printf_common+0xac>
 8004398:	f04f 30ff 	mov.w	r0, #4294967295
 800439c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043a0:	3501      	adds	r5, #1
 80043a2:	e7c6      	b.n	8004332 <_printf_common+0x3e>
 80043a4:	18e1      	adds	r1, r4, r3
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	2030      	movs	r0, #48	; 0x30
 80043aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043ae:	4422      	add	r2, r4
 80043b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043b8:	3302      	adds	r3, #2
 80043ba:	e7c7      	b.n	800434c <_printf_common+0x58>
 80043bc:	2301      	movs	r3, #1
 80043be:	4622      	mov	r2, r4
 80043c0:	4649      	mov	r1, r9
 80043c2:	4638      	mov	r0, r7
 80043c4:	47c0      	blx	r8
 80043c6:	3001      	adds	r0, #1
 80043c8:	d0e6      	beq.n	8004398 <_printf_common+0xa4>
 80043ca:	3601      	adds	r6, #1
 80043cc:	e7d9      	b.n	8004382 <_printf_common+0x8e>
	...

080043d0 <_printf_i>:
 80043d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043d4:	460c      	mov	r4, r1
 80043d6:	4691      	mov	r9, r2
 80043d8:	7e27      	ldrb	r7, [r4, #24]
 80043da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80043dc:	2f78      	cmp	r7, #120	; 0x78
 80043de:	4680      	mov	r8, r0
 80043e0:	469a      	mov	sl, r3
 80043e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043e6:	d807      	bhi.n	80043f8 <_printf_i+0x28>
 80043e8:	2f62      	cmp	r7, #98	; 0x62
 80043ea:	d80a      	bhi.n	8004402 <_printf_i+0x32>
 80043ec:	2f00      	cmp	r7, #0
 80043ee:	f000 80d8 	beq.w	80045a2 <_printf_i+0x1d2>
 80043f2:	2f58      	cmp	r7, #88	; 0x58
 80043f4:	f000 80a3 	beq.w	800453e <_printf_i+0x16e>
 80043f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80043fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004400:	e03a      	b.n	8004478 <_printf_i+0xa8>
 8004402:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004406:	2b15      	cmp	r3, #21
 8004408:	d8f6      	bhi.n	80043f8 <_printf_i+0x28>
 800440a:	a001      	add	r0, pc, #4	; (adr r0, 8004410 <_printf_i+0x40>)
 800440c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004410:	08004469 	.word	0x08004469
 8004414:	0800447d 	.word	0x0800447d
 8004418:	080043f9 	.word	0x080043f9
 800441c:	080043f9 	.word	0x080043f9
 8004420:	080043f9 	.word	0x080043f9
 8004424:	080043f9 	.word	0x080043f9
 8004428:	0800447d 	.word	0x0800447d
 800442c:	080043f9 	.word	0x080043f9
 8004430:	080043f9 	.word	0x080043f9
 8004434:	080043f9 	.word	0x080043f9
 8004438:	080043f9 	.word	0x080043f9
 800443c:	08004589 	.word	0x08004589
 8004440:	080044ad 	.word	0x080044ad
 8004444:	0800456b 	.word	0x0800456b
 8004448:	080043f9 	.word	0x080043f9
 800444c:	080043f9 	.word	0x080043f9
 8004450:	080045ab 	.word	0x080045ab
 8004454:	080043f9 	.word	0x080043f9
 8004458:	080044ad 	.word	0x080044ad
 800445c:	080043f9 	.word	0x080043f9
 8004460:	080043f9 	.word	0x080043f9
 8004464:	08004573 	.word	0x08004573
 8004468:	680b      	ldr	r3, [r1, #0]
 800446a:	1d1a      	adds	r2, r3, #4
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	600a      	str	r2, [r1, #0]
 8004470:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004478:	2301      	movs	r3, #1
 800447a:	e0a3      	b.n	80045c4 <_printf_i+0x1f4>
 800447c:	6825      	ldr	r5, [r4, #0]
 800447e:	6808      	ldr	r0, [r1, #0]
 8004480:	062e      	lsls	r6, r5, #24
 8004482:	f100 0304 	add.w	r3, r0, #4
 8004486:	d50a      	bpl.n	800449e <_printf_i+0xce>
 8004488:	6805      	ldr	r5, [r0, #0]
 800448a:	600b      	str	r3, [r1, #0]
 800448c:	2d00      	cmp	r5, #0
 800448e:	da03      	bge.n	8004498 <_printf_i+0xc8>
 8004490:	232d      	movs	r3, #45	; 0x2d
 8004492:	426d      	negs	r5, r5
 8004494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004498:	485e      	ldr	r0, [pc, #376]	; (8004614 <_printf_i+0x244>)
 800449a:	230a      	movs	r3, #10
 800449c:	e019      	b.n	80044d2 <_printf_i+0x102>
 800449e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80044a2:	6805      	ldr	r5, [r0, #0]
 80044a4:	600b      	str	r3, [r1, #0]
 80044a6:	bf18      	it	ne
 80044a8:	b22d      	sxthne	r5, r5
 80044aa:	e7ef      	b.n	800448c <_printf_i+0xbc>
 80044ac:	680b      	ldr	r3, [r1, #0]
 80044ae:	6825      	ldr	r5, [r4, #0]
 80044b0:	1d18      	adds	r0, r3, #4
 80044b2:	6008      	str	r0, [r1, #0]
 80044b4:	0628      	lsls	r0, r5, #24
 80044b6:	d501      	bpl.n	80044bc <_printf_i+0xec>
 80044b8:	681d      	ldr	r5, [r3, #0]
 80044ba:	e002      	b.n	80044c2 <_printf_i+0xf2>
 80044bc:	0669      	lsls	r1, r5, #25
 80044be:	d5fb      	bpl.n	80044b8 <_printf_i+0xe8>
 80044c0:	881d      	ldrh	r5, [r3, #0]
 80044c2:	4854      	ldr	r0, [pc, #336]	; (8004614 <_printf_i+0x244>)
 80044c4:	2f6f      	cmp	r7, #111	; 0x6f
 80044c6:	bf0c      	ite	eq
 80044c8:	2308      	moveq	r3, #8
 80044ca:	230a      	movne	r3, #10
 80044cc:	2100      	movs	r1, #0
 80044ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044d2:	6866      	ldr	r6, [r4, #4]
 80044d4:	60a6      	str	r6, [r4, #8]
 80044d6:	2e00      	cmp	r6, #0
 80044d8:	bfa2      	ittt	ge
 80044da:	6821      	ldrge	r1, [r4, #0]
 80044dc:	f021 0104 	bicge.w	r1, r1, #4
 80044e0:	6021      	strge	r1, [r4, #0]
 80044e2:	b90d      	cbnz	r5, 80044e8 <_printf_i+0x118>
 80044e4:	2e00      	cmp	r6, #0
 80044e6:	d04d      	beq.n	8004584 <_printf_i+0x1b4>
 80044e8:	4616      	mov	r6, r2
 80044ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80044ee:	fb03 5711 	mls	r7, r3, r1, r5
 80044f2:	5dc7      	ldrb	r7, [r0, r7]
 80044f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044f8:	462f      	mov	r7, r5
 80044fa:	42bb      	cmp	r3, r7
 80044fc:	460d      	mov	r5, r1
 80044fe:	d9f4      	bls.n	80044ea <_printf_i+0x11a>
 8004500:	2b08      	cmp	r3, #8
 8004502:	d10b      	bne.n	800451c <_printf_i+0x14c>
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	07df      	lsls	r7, r3, #31
 8004508:	d508      	bpl.n	800451c <_printf_i+0x14c>
 800450a:	6923      	ldr	r3, [r4, #16]
 800450c:	6861      	ldr	r1, [r4, #4]
 800450e:	4299      	cmp	r1, r3
 8004510:	bfde      	ittt	le
 8004512:	2330      	movle	r3, #48	; 0x30
 8004514:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004518:	f106 36ff 	addle.w	r6, r6, #4294967295
 800451c:	1b92      	subs	r2, r2, r6
 800451e:	6122      	str	r2, [r4, #16]
 8004520:	f8cd a000 	str.w	sl, [sp]
 8004524:	464b      	mov	r3, r9
 8004526:	aa03      	add	r2, sp, #12
 8004528:	4621      	mov	r1, r4
 800452a:	4640      	mov	r0, r8
 800452c:	f7ff fee2 	bl	80042f4 <_printf_common>
 8004530:	3001      	adds	r0, #1
 8004532:	d14c      	bne.n	80045ce <_printf_i+0x1fe>
 8004534:	f04f 30ff 	mov.w	r0, #4294967295
 8004538:	b004      	add	sp, #16
 800453a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800453e:	4835      	ldr	r0, [pc, #212]	; (8004614 <_printf_i+0x244>)
 8004540:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	680e      	ldr	r6, [r1, #0]
 8004548:	061f      	lsls	r7, r3, #24
 800454a:	f856 5b04 	ldr.w	r5, [r6], #4
 800454e:	600e      	str	r6, [r1, #0]
 8004550:	d514      	bpl.n	800457c <_printf_i+0x1ac>
 8004552:	07d9      	lsls	r1, r3, #31
 8004554:	bf44      	itt	mi
 8004556:	f043 0320 	orrmi.w	r3, r3, #32
 800455a:	6023      	strmi	r3, [r4, #0]
 800455c:	b91d      	cbnz	r5, 8004566 <_printf_i+0x196>
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	f023 0320 	bic.w	r3, r3, #32
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	2310      	movs	r3, #16
 8004568:	e7b0      	b.n	80044cc <_printf_i+0xfc>
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	f043 0320 	orr.w	r3, r3, #32
 8004570:	6023      	str	r3, [r4, #0]
 8004572:	2378      	movs	r3, #120	; 0x78
 8004574:	4828      	ldr	r0, [pc, #160]	; (8004618 <_printf_i+0x248>)
 8004576:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800457a:	e7e3      	b.n	8004544 <_printf_i+0x174>
 800457c:	065e      	lsls	r6, r3, #25
 800457e:	bf48      	it	mi
 8004580:	b2ad      	uxthmi	r5, r5
 8004582:	e7e6      	b.n	8004552 <_printf_i+0x182>
 8004584:	4616      	mov	r6, r2
 8004586:	e7bb      	b.n	8004500 <_printf_i+0x130>
 8004588:	680b      	ldr	r3, [r1, #0]
 800458a:	6826      	ldr	r6, [r4, #0]
 800458c:	6960      	ldr	r0, [r4, #20]
 800458e:	1d1d      	adds	r5, r3, #4
 8004590:	600d      	str	r5, [r1, #0]
 8004592:	0635      	lsls	r5, r6, #24
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	d501      	bpl.n	800459c <_printf_i+0x1cc>
 8004598:	6018      	str	r0, [r3, #0]
 800459a:	e002      	b.n	80045a2 <_printf_i+0x1d2>
 800459c:	0671      	lsls	r1, r6, #25
 800459e:	d5fb      	bpl.n	8004598 <_printf_i+0x1c8>
 80045a0:	8018      	strh	r0, [r3, #0]
 80045a2:	2300      	movs	r3, #0
 80045a4:	6123      	str	r3, [r4, #16]
 80045a6:	4616      	mov	r6, r2
 80045a8:	e7ba      	b.n	8004520 <_printf_i+0x150>
 80045aa:	680b      	ldr	r3, [r1, #0]
 80045ac:	1d1a      	adds	r2, r3, #4
 80045ae:	600a      	str	r2, [r1, #0]
 80045b0:	681e      	ldr	r6, [r3, #0]
 80045b2:	6862      	ldr	r2, [r4, #4]
 80045b4:	2100      	movs	r1, #0
 80045b6:	4630      	mov	r0, r6
 80045b8:	f7fb fe22 	bl	8000200 <memchr>
 80045bc:	b108      	cbz	r0, 80045c2 <_printf_i+0x1f2>
 80045be:	1b80      	subs	r0, r0, r6
 80045c0:	6060      	str	r0, [r4, #4]
 80045c2:	6863      	ldr	r3, [r4, #4]
 80045c4:	6123      	str	r3, [r4, #16]
 80045c6:	2300      	movs	r3, #0
 80045c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045cc:	e7a8      	b.n	8004520 <_printf_i+0x150>
 80045ce:	6923      	ldr	r3, [r4, #16]
 80045d0:	4632      	mov	r2, r6
 80045d2:	4649      	mov	r1, r9
 80045d4:	4640      	mov	r0, r8
 80045d6:	47d0      	blx	sl
 80045d8:	3001      	adds	r0, #1
 80045da:	d0ab      	beq.n	8004534 <_printf_i+0x164>
 80045dc:	6823      	ldr	r3, [r4, #0]
 80045de:	079b      	lsls	r3, r3, #30
 80045e0:	d413      	bmi.n	800460a <_printf_i+0x23a>
 80045e2:	68e0      	ldr	r0, [r4, #12]
 80045e4:	9b03      	ldr	r3, [sp, #12]
 80045e6:	4298      	cmp	r0, r3
 80045e8:	bfb8      	it	lt
 80045ea:	4618      	movlt	r0, r3
 80045ec:	e7a4      	b.n	8004538 <_printf_i+0x168>
 80045ee:	2301      	movs	r3, #1
 80045f0:	4632      	mov	r2, r6
 80045f2:	4649      	mov	r1, r9
 80045f4:	4640      	mov	r0, r8
 80045f6:	47d0      	blx	sl
 80045f8:	3001      	adds	r0, #1
 80045fa:	d09b      	beq.n	8004534 <_printf_i+0x164>
 80045fc:	3501      	adds	r5, #1
 80045fe:	68e3      	ldr	r3, [r4, #12]
 8004600:	9903      	ldr	r1, [sp, #12]
 8004602:	1a5b      	subs	r3, r3, r1
 8004604:	42ab      	cmp	r3, r5
 8004606:	dcf2      	bgt.n	80045ee <_printf_i+0x21e>
 8004608:	e7eb      	b.n	80045e2 <_printf_i+0x212>
 800460a:	2500      	movs	r5, #0
 800460c:	f104 0619 	add.w	r6, r4, #25
 8004610:	e7f5      	b.n	80045fe <_printf_i+0x22e>
 8004612:	bf00      	nop
 8004614:	08005871 	.word	0x08005871
 8004618:	08005882 	.word	0x08005882

0800461c <memcpy>:
 800461c:	440a      	add	r2, r1
 800461e:	4291      	cmp	r1, r2
 8004620:	f100 33ff 	add.w	r3, r0, #4294967295
 8004624:	d100      	bne.n	8004628 <memcpy+0xc>
 8004626:	4770      	bx	lr
 8004628:	b510      	push	{r4, lr}
 800462a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800462e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004632:	4291      	cmp	r1, r2
 8004634:	d1f9      	bne.n	800462a <memcpy+0xe>
 8004636:	bd10      	pop	{r4, pc}

08004638 <memmove>:
 8004638:	4288      	cmp	r0, r1
 800463a:	b510      	push	{r4, lr}
 800463c:	eb01 0402 	add.w	r4, r1, r2
 8004640:	d902      	bls.n	8004648 <memmove+0x10>
 8004642:	4284      	cmp	r4, r0
 8004644:	4623      	mov	r3, r4
 8004646:	d807      	bhi.n	8004658 <memmove+0x20>
 8004648:	1e43      	subs	r3, r0, #1
 800464a:	42a1      	cmp	r1, r4
 800464c:	d008      	beq.n	8004660 <memmove+0x28>
 800464e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004652:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004656:	e7f8      	b.n	800464a <memmove+0x12>
 8004658:	4402      	add	r2, r0
 800465a:	4601      	mov	r1, r0
 800465c:	428a      	cmp	r2, r1
 800465e:	d100      	bne.n	8004662 <memmove+0x2a>
 8004660:	bd10      	pop	{r4, pc}
 8004662:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004666:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800466a:	e7f7      	b.n	800465c <memmove+0x24>

0800466c <_free_r>:
 800466c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800466e:	2900      	cmp	r1, #0
 8004670:	d048      	beq.n	8004704 <_free_r+0x98>
 8004672:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004676:	9001      	str	r0, [sp, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	f1a1 0404 	sub.w	r4, r1, #4
 800467e:	bfb8      	it	lt
 8004680:	18e4      	addlt	r4, r4, r3
 8004682:	f000 f8d3 	bl	800482c <__malloc_lock>
 8004686:	4a20      	ldr	r2, [pc, #128]	; (8004708 <_free_r+0x9c>)
 8004688:	9801      	ldr	r0, [sp, #4]
 800468a:	6813      	ldr	r3, [r2, #0]
 800468c:	4615      	mov	r5, r2
 800468e:	b933      	cbnz	r3, 800469e <_free_r+0x32>
 8004690:	6063      	str	r3, [r4, #4]
 8004692:	6014      	str	r4, [r2, #0]
 8004694:	b003      	add	sp, #12
 8004696:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800469a:	f000 b8cd 	b.w	8004838 <__malloc_unlock>
 800469e:	42a3      	cmp	r3, r4
 80046a0:	d90b      	bls.n	80046ba <_free_r+0x4e>
 80046a2:	6821      	ldr	r1, [r4, #0]
 80046a4:	1862      	adds	r2, r4, r1
 80046a6:	4293      	cmp	r3, r2
 80046a8:	bf04      	itt	eq
 80046aa:	681a      	ldreq	r2, [r3, #0]
 80046ac:	685b      	ldreq	r3, [r3, #4]
 80046ae:	6063      	str	r3, [r4, #4]
 80046b0:	bf04      	itt	eq
 80046b2:	1852      	addeq	r2, r2, r1
 80046b4:	6022      	streq	r2, [r4, #0]
 80046b6:	602c      	str	r4, [r5, #0]
 80046b8:	e7ec      	b.n	8004694 <_free_r+0x28>
 80046ba:	461a      	mov	r2, r3
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	b10b      	cbz	r3, 80046c4 <_free_r+0x58>
 80046c0:	42a3      	cmp	r3, r4
 80046c2:	d9fa      	bls.n	80046ba <_free_r+0x4e>
 80046c4:	6811      	ldr	r1, [r2, #0]
 80046c6:	1855      	adds	r5, r2, r1
 80046c8:	42a5      	cmp	r5, r4
 80046ca:	d10b      	bne.n	80046e4 <_free_r+0x78>
 80046cc:	6824      	ldr	r4, [r4, #0]
 80046ce:	4421      	add	r1, r4
 80046d0:	1854      	adds	r4, r2, r1
 80046d2:	42a3      	cmp	r3, r4
 80046d4:	6011      	str	r1, [r2, #0]
 80046d6:	d1dd      	bne.n	8004694 <_free_r+0x28>
 80046d8:	681c      	ldr	r4, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	6053      	str	r3, [r2, #4]
 80046de:	4421      	add	r1, r4
 80046e0:	6011      	str	r1, [r2, #0]
 80046e2:	e7d7      	b.n	8004694 <_free_r+0x28>
 80046e4:	d902      	bls.n	80046ec <_free_r+0x80>
 80046e6:	230c      	movs	r3, #12
 80046e8:	6003      	str	r3, [r0, #0]
 80046ea:	e7d3      	b.n	8004694 <_free_r+0x28>
 80046ec:	6825      	ldr	r5, [r4, #0]
 80046ee:	1961      	adds	r1, r4, r5
 80046f0:	428b      	cmp	r3, r1
 80046f2:	bf04      	itt	eq
 80046f4:	6819      	ldreq	r1, [r3, #0]
 80046f6:	685b      	ldreq	r3, [r3, #4]
 80046f8:	6063      	str	r3, [r4, #4]
 80046fa:	bf04      	itt	eq
 80046fc:	1949      	addeq	r1, r1, r5
 80046fe:	6021      	streq	r1, [r4, #0]
 8004700:	6054      	str	r4, [r2, #4]
 8004702:	e7c7      	b.n	8004694 <_free_r+0x28>
 8004704:	b003      	add	sp, #12
 8004706:	bd30      	pop	{r4, r5, pc}
 8004708:	200000cc 	.word	0x200000cc

0800470c <_malloc_r>:
 800470c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470e:	1ccd      	adds	r5, r1, #3
 8004710:	f025 0503 	bic.w	r5, r5, #3
 8004714:	3508      	adds	r5, #8
 8004716:	2d0c      	cmp	r5, #12
 8004718:	bf38      	it	cc
 800471a:	250c      	movcc	r5, #12
 800471c:	2d00      	cmp	r5, #0
 800471e:	4606      	mov	r6, r0
 8004720:	db01      	blt.n	8004726 <_malloc_r+0x1a>
 8004722:	42a9      	cmp	r1, r5
 8004724:	d903      	bls.n	800472e <_malloc_r+0x22>
 8004726:	230c      	movs	r3, #12
 8004728:	6033      	str	r3, [r6, #0]
 800472a:	2000      	movs	r0, #0
 800472c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800472e:	f000 f87d 	bl	800482c <__malloc_lock>
 8004732:	4921      	ldr	r1, [pc, #132]	; (80047b8 <_malloc_r+0xac>)
 8004734:	680a      	ldr	r2, [r1, #0]
 8004736:	4614      	mov	r4, r2
 8004738:	b99c      	cbnz	r4, 8004762 <_malloc_r+0x56>
 800473a:	4f20      	ldr	r7, [pc, #128]	; (80047bc <_malloc_r+0xb0>)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	b923      	cbnz	r3, 800474a <_malloc_r+0x3e>
 8004740:	4621      	mov	r1, r4
 8004742:	4630      	mov	r0, r6
 8004744:	f000 f862 	bl	800480c <_sbrk_r>
 8004748:	6038      	str	r0, [r7, #0]
 800474a:	4629      	mov	r1, r5
 800474c:	4630      	mov	r0, r6
 800474e:	f000 f85d 	bl	800480c <_sbrk_r>
 8004752:	1c43      	adds	r3, r0, #1
 8004754:	d123      	bne.n	800479e <_malloc_r+0x92>
 8004756:	230c      	movs	r3, #12
 8004758:	6033      	str	r3, [r6, #0]
 800475a:	4630      	mov	r0, r6
 800475c:	f000 f86c 	bl	8004838 <__malloc_unlock>
 8004760:	e7e3      	b.n	800472a <_malloc_r+0x1e>
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	1b5b      	subs	r3, r3, r5
 8004766:	d417      	bmi.n	8004798 <_malloc_r+0x8c>
 8004768:	2b0b      	cmp	r3, #11
 800476a:	d903      	bls.n	8004774 <_malloc_r+0x68>
 800476c:	6023      	str	r3, [r4, #0]
 800476e:	441c      	add	r4, r3
 8004770:	6025      	str	r5, [r4, #0]
 8004772:	e004      	b.n	800477e <_malloc_r+0x72>
 8004774:	6863      	ldr	r3, [r4, #4]
 8004776:	42a2      	cmp	r2, r4
 8004778:	bf0c      	ite	eq
 800477a:	600b      	streq	r3, [r1, #0]
 800477c:	6053      	strne	r3, [r2, #4]
 800477e:	4630      	mov	r0, r6
 8004780:	f000 f85a 	bl	8004838 <__malloc_unlock>
 8004784:	f104 000b 	add.w	r0, r4, #11
 8004788:	1d23      	adds	r3, r4, #4
 800478a:	f020 0007 	bic.w	r0, r0, #7
 800478e:	1ac2      	subs	r2, r0, r3
 8004790:	d0cc      	beq.n	800472c <_malloc_r+0x20>
 8004792:	1a1b      	subs	r3, r3, r0
 8004794:	50a3      	str	r3, [r4, r2]
 8004796:	e7c9      	b.n	800472c <_malloc_r+0x20>
 8004798:	4622      	mov	r2, r4
 800479a:	6864      	ldr	r4, [r4, #4]
 800479c:	e7cc      	b.n	8004738 <_malloc_r+0x2c>
 800479e:	1cc4      	adds	r4, r0, #3
 80047a0:	f024 0403 	bic.w	r4, r4, #3
 80047a4:	42a0      	cmp	r0, r4
 80047a6:	d0e3      	beq.n	8004770 <_malloc_r+0x64>
 80047a8:	1a21      	subs	r1, r4, r0
 80047aa:	4630      	mov	r0, r6
 80047ac:	f000 f82e 	bl	800480c <_sbrk_r>
 80047b0:	3001      	adds	r0, #1
 80047b2:	d1dd      	bne.n	8004770 <_malloc_r+0x64>
 80047b4:	e7cf      	b.n	8004756 <_malloc_r+0x4a>
 80047b6:	bf00      	nop
 80047b8:	200000cc 	.word	0x200000cc
 80047bc:	200000d0 	.word	0x200000d0

080047c0 <_realloc_r>:
 80047c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c2:	4607      	mov	r7, r0
 80047c4:	4614      	mov	r4, r2
 80047c6:	460e      	mov	r6, r1
 80047c8:	b921      	cbnz	r1, 80047d4 <_realloc_r+0x14>
 80047ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80047ce:	4611      	mov	r1, r2
 80047d0:	f7ff bf9c 	b.w	800470c <_malloc_r>
 80047d4:	b922      	cbnz	r2, 80047e0 <_realloc_r+0x20>
 80047d6:	f7ff ff49 	bl	800466c <_free_r>
 80047da:	4625      	mov	r5, r4
 80047dc:	4628      	mov	r0, r5
 80047de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047e0:	f000 f830 	bl	8004844 <_malloc_usable_size_r>
 80047e4:	42a0      	cmp	r0, r4
 80047e6:	d20f      	bcs.n	8004808 <_realloc_r+0x48>
 80047e8:	4621      	mov	r1, r4
 80047ea:	4638      	mov	r0, r7
 80047ec:	f7ff ff8e 	bl	800470c <_malloc_r>
 80047f0:	4605      	mov	r5, r0
 80047f2:	2800      	cmp	r0, #0
 80047f4:	d0f2      	beq.n	80047dc <_realloc_r+0x1c>
 80047f6:	4631      	mov	r1, r6
 80047f8:	4622      	mov	r2, r4
 80047fa:	f7ff ff0f 	bl	800461c <memcpy>
 80047fe:	4631      	mov	r1, r6
 8004800:	4638      	mov	r0, r7
 8004802:	f7ff ff33 	bl	800466c <_free_r>
 8004806:	e7e9      	b.n	80047dc <_realloc_r+0x1c>
 8004808:	4635      	mov	r5, r6
 800480a:	e7e7      	b.n	80047dc <_realloc_r+0x1c>

0800480c <_sbrk_r>:
 800480c:	b538      	push	{r3, r4, r5, lr}
 800480e:	4d06      	ldr	r5, [pc, #24]	; (8004828 <_sbrk_r+0x1c>)
 8004810:	2300      	movs	r3, #0
 8004812:	4604      	mov	r4, r0
 8004814:	4608      	mov	r0, r1
 8004816:	602b      	str	r3, [r5, #0]
 8004818:	f7fd fb90 	bl	8001f3c <_sbrk>
 800481c:	1c43      	adds	r3, r0, #1
 800481e:	d102      	bne.n	8004826 <_sbrk_r+0x1a>
 8004820:	682b      	ldr	r3, [r5, #0]
 8004822:	b103      	cbz	r3, 8004826 <_sbrk_r+0x1a>
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	bd38      	pop	{r3, r4, r5, pc}
 8004828:	20000144 	.word	0x20000144

0800482c <__malloc_lock>:
 800482c:	4801      	ldr	r0, [pc, #4]	; (8004834 <__malloc_lock+0x8>)
 800482e:	f000 b811 	b.w	8004854 <__retarget_lock_acquire_recursive>
 8004832:	bf00      	nop
 8004834:	2000014c 	.word	0x2000014c

08004838 <__malloc_unlock>:
 8004838:	4801      	ldr	r0, [pc, #4]	; (8004840 <__malloc_unlock+0x8>)
 800483a:	f000 b80c 	b.w	8004856 <__retarget_lock_release_recursive>
 800483e:	bf00      	nop
 8004840:	2000014c 	.word	0x2000014c

08004844 <_malloc_usable_size_r>:
 8004844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004848:	1f18      	subs	r0, r3, #4
 800484a:	2b00      	cmp	r3, #0
 800484c:	bfbc      	itt	lt
 800484e:	580b      	ldrlt	r3, [r1, r0]
 8004850:	18c0      	addlt	r0, r0, r3
 8004852:	4770      	bx	lr

08004854 <__retarget_lock_acquire_recursive>:
 8004854:	4770      	bx	lr

08004856 <__retarget_lock_release_recursive>:
 8004856:	4770      	bx	lr

08004858 <pow>:
 8004858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800485c:	ec59 8b10 	vmov	r8, r9, d0
 8004860:	ec57 6b11 	vmov	r6, r7, d1
 8004864:	f000 f8a8 	bl	80049b8 <__ieee754_pow>
 8004868:	4b4e      	ldr	r3, [pc, #312]	; (80049a4 <pow+0x14c>)
 800486a:	f993 3000 	ldrsb.w	r3, [r3]
 800486e:	3301      	adds	r3, #1
 8004870:	ec55 4b10 	vmov	r4, r5, d0
 8004874:	d015      	beq.n	80048a2 <pow+0x4a>
 8004876:	4632      	mov	r2, r6
 8004878:	463b      	mov	r3, r7
 800487a:	4630      	mov	r0, r6
 800487c:	4639      	mov	r1, r7
 800487e:	f7fc f965 	bl	8000b4c <__aeabi_dcmpun>
 8004882:	b970      	cbnz	r0, 80048a2 <pow+0x4a>
 8004884:	4642      	mov	r2, r8
 8004886:	464b      	mov	r3, r9
 8004888:	4640      	mov	r0, r8
 800488a:	4649      	mov	r1, r9
 800488c:	f7fc f95e 	bl	8000b4c <__aeabi_dcmpun>
 8004890:	2200      	movs	r2, #0
 8004892:	2300      	movs	r3, #0
 8004894:	b148      	cbz	r0, 80048aa <pow+0x52>
 8004896:	4630      	mov	r0, r6
 8004898:	4639      	mov	r1, r7
 800489a:	f7fc f925 	bl	8000ae8 <__aeabi_dcmpeq>
 800489e:	2800      	cmp	r0, #0
 80048a0:	d17d      	bne.n	800499e <pow+0x146>
 80048a2:	ec45 4b10 	vmov	d0, r4, r5
 80048a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048aa:	4640      	mov	r0, r8
 80048ac:	4649      	mov	r1, r9
 80048ae:	f7fc f91b 	bl	8000ae8 <__aeabi_dcmpeq>
 80048b2:	b1e0      	cbz	r0, 80048ee <pow+0x96>
 80048b4:	2200      	movs	r2, #0
 80048b6:	2300      	movs	r3, #0
 80048b8:	4630      	mov	r0, r6
 80048ba:	4639      	mov	r1, r7
 80048bc:	f7fc f914 	bl	8000ae8 <__aeabi_dcmpeq>
 80048c0:	2800      	cmp	r0, #0
 80048c2:	d16c      	bne.n	800499e <pow+0x146>
 80048c4:	ec47 6b10 	vmov	d0, r6, r7
 80048c8:	f000 fe55 	bl	8005576 <finite>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d0e8      	beq.n	80048a2 <pow+0x4a>
 80048d0:	2200      	movs	r2, #0
 80048d2:	2300      	movs	r3, #0
 80048d4:	4630      	mov	r0, r6
 80048d6:	4639      	mov	r1, r7
 80048d8:	f7fc f910 	bl	8000afc <__aeabi_dcmplt>
 80048dc:	2800      	cmp	r0, #0
 80048de:	d0e0      	beq.n	80048a2 <pow+0x4a>
 80048e0:	f7ff fb5a 	bl	8003f98 <__errno>
 80048e4:	2321      	movs	r3, #33	; 0x21
 80048e6:	6003      	str	r3, [r0, #0]
 80048e8:	2400      	movs	r4, #0
 80048ea:	4d2f      	ldr	r5, [pc, #188]	; (80049a8 <pow+0x150>)
 80048ec:	e7d9      	b.n	80048a2 <pow+0x4a>
 80048ee:	ec45 4b10 	vmov	d0, r4, r5
 80048f2:	f000 fe40 	bl	8005576 <finite>
 80048f6:	bbb8      	cbnz	r0, 8004968 <pow+0x110>
 80048f8:	ec49 8b10 	vmov	d0, r8, r9
 80048fc:	f000 fe3b 	bl	8005576 <finite>
 8004900:	b390      	cbz	r0, 8004968 <pow+0x110>
 8004902:	ec47 6b10 	vmov	d0, r6, r7
 8004906:	f000 fe36 	bl	8005576 <finite>
 800490a:	b368      	cbz	r0, 8004968 <pow+0x110>
 800490c:	4622      	mov	r2, r4
 800490e:	462b      	mov	r3, r5
 8004910:	4620      	mov	r0, r4
 8004912:	4629      	mov	r1, r5
 8004914:	f7fc f91a 	bl	8000b4c <__aeabi_dcmpun>
 8004918:	b160      	cbz	r0, 8004934 <pow+0xdc>
 800491a:	f7ff fb3d 	bl	8003f98 <__errno>
 800491e:	2321      	movs	r3, #33	; 0x21
 8004920:	6003      	str	r3, [r0, #0]
 8004922:	2200      	movs	r2, #0
 8004924:	2300      	movs	r3, #0
 8004926:	4610      	mov	r0, r2
 8004928:	4619      	mov	r1, r3
 800492a:	f7fb ff9f 	bl	800086c <__aeabi_ddiv>
 800492e:	4604      	mov	r4, r0
 8004930:	460d      	mov	r5, r1
 8004932:	e7b6      	b.n	80048a2 <pow+0x4a>
 8004934:	f7ff fb30 	bl	8003f98 <__errno>
 8004938:	2322      	movs	r3, #34	; 0x22
 800493a:	6003      	str	r3, [r0, #0]
 800493c:	2200      	movs	r2, #0
 800493e:	2300      	movs	r3, #0
 8004940:	4640      	mov	r0, r8
 8004942:	4649      	mov	r1, r9
 8004944:	f7fc f8da 	bl	8000afc <__aeabi_dcmplt>
 8004948:	2400      	movs	r4, #0
 800494a:	b158      	cbz	r0, 8004964 <pow+0x10c>
 800494c:	ec47 6b10 	vmov	d0, r6, r7
 8004950:	f000 fe26 	bl	80055a0 <rint>
 8004954:	4632      	mov	r2, r6
 8004956:	ec51 0b10 	vmov	r0, r1, d0
 800495a:	463b      	mov	r3, r7
 800495c:	f7fc f8c4 	bl	8000ae8 <__aeabi_dcmpeq>
 8004960:	2800      	cmp	r0, #0
 8004962:	d0c2      	beq.n	80048ea <pow+0x92>
 8004964:	4d11      	ldr	r5, [pc, #68]	; (80049ac <pow+0x154>)
 8004966:	e79c      	b.n	80048a2 <pow+0x4a>
 8004968:	2200      	movs	r2, #0
 800496a:	2300      	movs	r3, #0
 800496c:	4620      	mov	r0, r4
 800496e:	4629      	mov	r1, r5
 8004970:	f7fc f8ba 	bl	8000ae8 <__aeabi_dcmpeq>
 8004974:	2800      	cmp	r0, #0
 8004976:	d094      	beq.n	80048a2 <pow+0x4a>
 8004978:	ec49 8b10 	vmov	d0, r8, r9
 800497c:	f000 fdfb 	bl	8005576 <finite>
 8004980:	2800      	cmp	r0, #0
 8004982:	d08e      	beq.n	80048a2 <pow+0x4a>
 8004984:	ec47 6b10 	vmov	d0, r6, r7
 8004988:	f000 fdf5 	bl	8005576 <finite>
 800498c:	2800      	cmp	r0, #0
 800498e:	d088      	beq.n	80048a2 <pow+0x4a>
 8004990:	f7ff fb02 	bl	8003f98 <__errno>
 8004994:	2322      	movs	r3, #34	; 0x22
 8004996:	6003      	str	r3, [r0, #0]
 8004998:	2400      	movs	r4, #0
 800499a:	2500      	movs	r5, #0
 800499c:	e781      	b.n	80048a2 <pow+0x4a>
 800499e:	4d04      	ldr	r5, [pc, #16]	; (80049b0 <pow+0x158>)
 80049a0:	2400      	movs	r4, #0
 80049a2:	e77e      	b.n	80048a2 <pow+0x4a>
 80049a4:	2000007c 	.word	0x2000007c
 80049a8:	fff00000 	.word	0xfff00000
 80049ac:	7ff00000 	.word	0x7ff00000
 80049b0:	3ff00000 	.word	0x3ff00000
 80049b4:	00000000 	.word	0x00000000

080049b8 <__ieee754_pow>:
 80049b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049bc:	ed2d 8b06 	vpush	{d8-d10}
 80049c0:	b08d      	sub	sp, #52	; 0x34
 80049c2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80049c6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80049ca:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80049ce:	ea56 0100 	orrs.w	r1, r6, r0
 80049d2:	ec53 2b10 	vmov	r2, r3, d0
 80049d6:	f000 84d1 	beq.w	800537c <__ieee754_pow+0x9c4>
 80049da:	497f      	ldr	r1, [pc, #508]	; (8004bd8 <__ieee754_pow+0x220>)
 80049dc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80049e0:	428c      	cmp	r4, r1
 80049e2:	ee10 8a10 	vmov	r8, s0
 80049e6:	4699      	mov	r9, r3
 80049e8:	dc09      	bgt.n	80049fe <__ieee754_pow+0x46>
 80049ea:	d103      	bne.n	80049f4 <__ieee754_pow+0x3c>
 80049ec:	b97a      	cbnz	r2, 8004a0e <__ieee754_pow+0x56>
 80049ee:	42a6      	cmp	r6, r4
 80049f0:	dd02      	ble.n	80049f8 <__ieee754_pow+0x40>
 80049f2:	e00c      	b.n	8004a0e <__ieee754_pow+0x56>
 80049f4:	428e      	cmp	r6, r1
 80049f6:	dc02      	bgt.n	80049fe <__ieee754_pow+0x46>
 80049f8:	428e      	cmp	r6, r1
 80049fa:	d110      	bne.n	8004a1e <__ieee754_pow+0x66>
 80049fc:	b178      	cbz	r0, 8004a1e <__ieee754_pow+0x66>
 80049fe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004a02:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004a06:	ea54 0308 	orrs.w	r3, r4, r8
 8004a0a:	f000 84b7 	beq.w	800537c <__ieee754_pow+0x9c4>
 8004a0e:	4873      	ldr	r0, [pc, #460]	; (8004bdc <__ieee754_pow+0x224>)
 8004a10:	b00d      	add	sp, #52	; 0x34
 8004a12:	ecbd 8b06 	vpop	{d8-d10}
 8004a16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a1a:	f000 bdb9 	b.w	8005590 <nan>
 8004a1e:	f1b9 0f00 	cmp.w	r9, #0
 8004a22:	da36      	bge.n	8004a92 <__ieee754_pow+0xda>
 8004a24:	496e      	ldr	r1, [pc, #440]	; (8004be0 <__ieee754_pow+0x228>)
 8004a26:	428e      	cmp	r6, r1
 8004a28:	dc51      	bgt.n	8004ace <__ieee754_pow+0x116>
 8004a2a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8004a2e:	428e      	cmp	r6, r1
 8004a30:	f340 84af 	ble.w	8005392 <__ieee754_pow+0x9da>
 8004a34:	1531      	asrs	r1, r6, #20
 8004a36:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8004a3a:	2914      	cmp	r1, #20
 8004a3c:	dd0f      	ble.n	8004a5e <__ieee754_pow+0xa6>
 8004a3e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8004a42:	fa20 fc01 	lsr.w	ip, r0, r1
 8004a46:	fa0c f101 	lsl.w	r1, ip, r1
 8004a4a:	4281      	cmp	r1, r0
 8004a4c:	f040 84a1 	bne.w	8005392 <__ieee754_pow+0x9da>
 8004a50:	f00c 0c01 	and.w	ip, ip, #1
 8004a54:	f1cc 0102 	rsb	r1, ip, #2
 8004a58:	9100      	str	r1, [sp, #0]
 8004a5a:	b180      	cbz	r0, 8004a7e <__ieee754_pow+0xc6>
 8004a5c:	e059      	b.n	8004b12 <__ieee754_pow+0x15a>
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	d155      	bne.n	8004b0e <__ieee754_pow+0x156>
 8004a62:	f1c1 0114 	rsb	r1, r1, #20
 8004a66:	fa46 fc01 	asr.w	ip, r6, r1
 8004a6a:	fa0c f101 	lsl.w	r1, ip, r1
 8004a6e:	42b1      	cmp	r1, r6
 8004a70:	f040 848c 	bne.w	800538c <__ieee754_pow+0x9d4>
 8004a74:	f00c 0c01 	and.w	ip, ip, #1
 8004a78:	f1cc 0102 	rsb	r1, ip, #2
 8004a7c:	9100      	str	r1, [sp, #0]
 8004a7e:	4959      	ldr	r1, [pc, #356]	; (8004be4 <__ieee754_pow+0x22c>)
 8004a80:	428e      	cmp	r6, r1
 8004a82:	d12d      	bne.n	8004ae0 <__ieee754_pow+0x128>
 8004a84:	2f00      	cmp	r7, #0
 8004a86:	da79      	bge.n	8004b7c <__ieee754_pow+0x1c4>
 8004a88:	4956      	ldr	r1, [pc, #344]	; (8004be4 <__ieee754_pow+0x22c>)
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	f7fb feee 	bl	800086c <__aeabi_ddiv>
 8004a90:	e016      	b.n	8004ac0 <__ieee754_pow+0x108>
 8004a92:	2100      	movs	r1, #0
 8004a94:	9100      	str	r1, [sp, #0]
 8004a96:	2800      	cmp	r0, #0
 8004a98:	d13b      	bne.n	8004b12 <__ieee754_pow+0x15a>
 8004a9a:	494f      	ldr	r1, [pc, #316]	; (8004bd8 <__ieee754_pow+0x220>)
 8004a9c:	428e      	cmp	r6, r1
 8004a9e:	d1ee      	bne.n	8004a7e <__ieee754_pow+0xc6>
 8004aa0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004aa4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004aa8:	ea53 0308 	orrs.w	r3, r3, r8
 8004aac:	f000 8466 	beq.w	800537c <__ieee754_pow+0x9c4>
 8004ab0:	4b4d      	ldr	r3, [pc, #308]	; (8004be8 <__ieee754_pow+0x230>)
 8004ab2:	429c      	cmp	r4, r3
 8004ab4:	dd0d      	ble.n	8004ad2 <__ieee754_pow+0x11a>
 8004ab6:	2f00      	cmp	r7, #0
 8004ab8:	f280 8464 	bge.w	8005384 <__ieee754_pow+0x9cc>
 8004abc:	2000      	movs	r0, #0
 8004abe:	2100      	movs	r1, #0
 8004ac0:	ec41 0b10 	vmov	d0, r0, r1
 8004ac4:	b00d      	add	sp, #52	; 0x34
 8004ac6:	ecbd 8b06 	vpop	{d8-d10}
 8004aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ace:	2102      	movs	r1, #2
 8004ad0:	e7e0      	b.n	8004a94 <__ieee754_pow+0xdc>
 8004ad2:	2f00      	cmp	r7, #0
 8004ad4:	daf2      	bge.n	8004abc <__ieee754_pow+0x104>
 8004ad6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8004ada:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004ade:	e7ef      	b.n	8004ac0 <__ieee754_pow+0x108>
 8004ae0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8004ae4:	d104      	bne.n	8004af0 <__ieee754_pow+0x138>
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	4619      	mov	r1, r3
 8004aea:	f7fb fd95 	bl	8000618 <__aeabi_dmul>
 8004aee:	e7e7      	b.n	8004ac0 <__ieee754_pow+0x108>
 8004af0:	493e      	ldr	r1, [pc, #248]	; (8004bec <__ieee754_pow+0x234>)
 8004af2:	428f      	cmp	r7, r1
 8004af4:	d10d      	bne.n	8004b12 <__ieee754_pow+0x15a>
 8004af6:	f1b9 0f00 	cmp.w	r9, #0
 8004afa:	db0a      	blt.n	8004b12 <__ieee754_pow+0x15a>
 8004afc:	ec43 2b10 	vmov	d0, r2, r3
 8004b00:	b00d      	add	sp, #52	; 0x34
 8004b02:	ecbd 8b06 	vpop	{d8-d10}
 8004b06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b0a:	f000 bc77 	b.w	80053fc <__ieee754_sqrt>
 8004b0e:	2100      	movs	r1, #0
 8004b10:	9100      	str	r1, [sp, #0]
 8004b12:	ec43 2b10 	vmov	d0, r2, r3
 8004b16:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004b1a:	f000 fd23 	bl	8005564 <fabs>
 8004b1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b22:	ec51 0b10 	vmov	r0, r1, d0
 8004b26:	f1b8 0f00 	cmp.w	r8, #0
 8004b2a:	d12a      	bne.n	8004b82 <__ieee754_pow+0x1ca>
 8004b2c:	b12c      	cbz	r4, 8004b3a <__ieee754_pow+0x182>
 8004b2e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8004be4 <__ieee754_pow+0x22c>
 8004b32:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8004b36:	45e6      	cmp	lr, ip
 8004b38:	d123      	bne.n	8004b82 <__ieee754_pow+0x1ca>
 8004b3a:	2f00      	cmp	r7, #0
 8004b3c:	da05      	bge.n	8004b4a <__ieee754_pow+0x192>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	2000      	movs	r0, #0
 8004b44:	4927      	ldr	r1, [pc, #156]	; (8004be4 <__ieee754_pow+0x22c>)
 8004b46:	f7fb fe91 	bl	800086c <__aeabi_ddiv>
 8004b4a:	f1b9 0f00 	cmp.w	r9, #0
 8004b4e:	dab7      	bge.n	8004ac0 <__ieee754_pow+0x108>
 8004b50:	9b00      	ldr	r3, [sp, #0]
 8004b52:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004b56:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004b5a:	4323      	orrs	r3, r4
 8004b5c:	d108      	bne.n	8004b70 <__ieee754_pow+0x1b8>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	4610      	mov	r0, r2
 8004b64:	4619      	mov	r1, r3
 8004b66:	f7fb fb9f 	bl	80002a8 <__aeabi_dsub>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	e78d      	b.n	8004a8c <__ieee754_pow+0xd4>
 8004b70:	9b00      	ldr	r3, [sp, #0]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d1a4      	bne.n	8004ac0 <__ieee754_pow+0x108>
 8004b76:	4602      	mov	r2, r0
 8004b78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	4619      	mov	r1, r3
 8004b80:	e79e      	b.n	8004ac0 <__ieee754_pow+0x108>
 8004b82:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8004b86:	f10c 35ff 	add.w	r5, ip, #4294967295
 8004b8a:	950a      	str	r5, [sp, #40]	; 0x28
 8004b8c:	9d00      	ldr	r5, [sp, #0]
 8004b8e:	46ac      	mov	ip, r5
 8004b90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004b92:	ea5c 0505 	orrs.w	r5, ip, r5
 8004b96:	d0e4      	beq.n	8004b62 <__ieee754_pow+0x1aa>
 8004b98:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <__ieee754_pow+0x238>)
 8004b9a:	429e      	cmp	r6, r3
 8004b9c:	f340 80fc 	ble.w	8004d98 <__ieee754_pow+0x3e0>
 8004ba0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004ba4:	429e      	cmp	r6, r3
 8004ba6:	4b10      	ldr	r3, [pc, #64]	; (8004be8 <__ieee754_pow+0x230>)
 8004ba8:	dd07      	ble.n	8004bba <__ieee754_pow+0x202>
 8004baa:	429c      	cmp	r4, r3
 8004bac:	dc0a      	bgt.n	8004bc4 <__ieee754_pow+0x20c>
 8004bae:	2f00      	cmp	r7, #0
 8004bb0:	da84      	bge.n	8004abc <__ieee754_pow+0x104>
 8004bb2:	a307      	add	r3, pc, #28	; (adr r3, 8004bd0 <__ieee754_pow+0x218>)
 8004bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb8:	e795      	b.n	8004ae6 <__ieee754_pow+0x12e>
 8004bba:	429c      	cmp	r4, r3
 8004bbc:	dbf7      	blt.n	8004bae <__ieee754_pow+0x1f6>
 8004bbe:	4b09      	ldr	r3, [pc, #36]	; (8004be4 <__ieee754_pow+0x22c>)
 8004bc0:	429c      	cmp	r4, r3
 8004bc2:	dd17      	ble.n	8004bf4 <__ieee754_pow+0x23c>
 8004bc4:	2f00      	cmp	r7, #0
 8004bc6:	dcf4      	bgt.n	8004bb2 <__ieee754_pow+0x1fa>
 8004bc8:	e778      	b.n	8004abc <__ieee754_pow+0x104>
 8004bca:	bf00      	nop
 8004bcc:	f3af 8000 	nop.w
 8004bd0:	8800759c 	.word	0x8800759c
 8004bd4:	7e37e43c 	.word	0x7e37e43c
 8004bd8:	7ff00000 	.word	0x7ff00000
 8004bdc:	08005865 	.word	0x08005865
 8004be0:	433fffff 	.word	0x433fffff
 8004be4:	3ff00000 	.word	0x3ff00000
 8004be8:	3fefffff 	.word	0x3fefffff
 8004bec:	3fe00000 	.word	0x3fe00000
 8004bf0:	41e00000 	.word	0x41e00000
 8004bf4:	4b64      	ldr	r3, [pc, #400]	; (8004d88 <__ieee754_pow+0x3d0>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f7fb fb56 	bl	80002a8 <__aeabi_dsub>
 8004bfc:	a356      	add	r3, pc, #344	; (adr r3, 8004d58 <__ieee754_pow+0x3a0>)
 8004bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c02:	4604      	mov	r4, r0
 8004c04:	460d      	mov	r5, r1
 8004c06:	f7fb fd07 	bl	8000618 <__aeabi_dmul>
 8004c0a:	a355      	add	r3, pc, #340	; (adr r3, 8004d60 <__ieee754_pow+0x3a8>)
 8004c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c10:	4606      	mov	r6, r0
 8004c12:	460f      	mov	r7, r1
 8004c14:	4620      	mov	r0, r4
 8004c16:	4629      	mov	r1, r5
 8004c18:	f7fb fcfe 	bl	8000618 <__aeabi_dmul>
 8004c1c:	4b5b      	ldr	r3, [pc, #364]	; (8004d8c <__ieee754_pow+0x3d4>)
 8004c1e:	4682      	mov	sl, r0
 8004c20:	468b      	mov	fp, r1
 8004c22:	2200      	movs	r2, #0
 8004c24:	4620      	mov	r0, r4
 8004c26:	4629      	mov	r1, r5
 8004c28:	f7fb fcf6 	bl	8000618 <__aeabi_dmul>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	a14d      	add	r1, pc, #308	; (adr r1, 8004d68 <__ieee754_pow+0x3b0>)
 8004c32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c36:	f7fb fb37 	bl	80002a8 <__aeabi_dsub>
 8004c3a:	4622      	mov	r2, r4
 8004c3c:	462b      	mov	r3, r5
 8004c3e:	f7fb fceb 	bl	8000618 <__aeabi_dmul>
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	2000      	movs	r0, #0
 8004c48:	4951      	ldr	r1, [pc, #324]	; (8004d90 <__ieee754_pow+0x3d8>)
 8004c4a:	f7fb fb2d 	bl	80002a8 <__aeabi_dsub>
 8004c4e:	4622      	mov	r2, r4
 8004c50:	4680      	mov	r8, r0
 8004c52:	4689      	mov	r9, r1
 8004c54:	462b      	mov	r3, r5
 8004c56:	4620      	mov	r0, r4
 8004c58:	4629      	mov	r1, r5
 8004c5a:	f7fb fcdd 	bl	8000618 <__aeabi_dmul>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4640      	mov	r0, r8
 8004c64:	4649      	mov	r1, r9
 8004c66:	f7fb fcd7 	bl	8000618 <__aeabi_dmul>
 8004c6a:	a341      	add	r3, pc, #260	; (adr r3, 8004d70 <__ieee754_pow+0x3b8>)
 8004c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c70:	f7fb fcd2 	bl	8000618 <__aeabi_dmul>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4650      	mov	r0, sl
 8004c7a:	4659      	mov	r1, fp
 8004c7c:	f7fb fb14 	bl	80002a8 <__aeabi_dsub>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4680      	mov	r8, r0
 8004c86:	4689      	mov	r9, r1
 8004c88:	4630      	mov	r0, r6
 8004c8a:	4639      	mov	r1, r7
 8004c8c:	f7fb fb0e 	bl	80002ac <__adddf3>
 8004c90:	2400      	movs	r4, #0
 8004c92:	4632      	mov	r2, r6
 8004c94:	463b      	mov	r3, r7
 8004c96:	4620      	mov	r0, r4
 8004c98:	460d      	mov	r5, r1
 8004c9a:	f7fb fb05 	bl	80002a8 <__aeabi_dsub>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4640      	mov	r0, r8
 8004ca4:	4649      	mov	r1, r9
 8004ca6:	f7fb faff 	bl	80002a8 <__aeabi_dsub>
 8004caa:	9b00      	ldr	r3, [sp, #0]
 8004cac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	4682      	mov	sl, r0
 8004cb4:	468b      	mov	fp, r1
 8004cb6:	f040 81f1 	bne.w	800509c <__ieee754_pow+0x6e4>
 8004cba:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8004d78 <__ieee754_pow+0x3c0>
 8004cbe:	eeb0 8a47 	vmov.f32	s16, s14
 8004cc2:	eef0 8a67 	vmov.f32	s17, s15
 8004cc6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004cca:	2600      	movs	r6, #0
 8004ccc:	4632      	mov	r2, r6
 8004cce:	463b      	mov	r3, r7
 8004cd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cd4:	f7fb fae8 	bl	80002a8 <__aeabi_dsub>
 8004cd8:	4622      	mov	r2, r4
 8004cda:	462b      	mov	r3, r5
 8004cdc:	f7fb fc9c 	bl	8000618 <__aeabi_dmul>
 8004ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ce4:	4680      	mov	r8, r0
 8004ce6:	4689      	mov	r9, r1
 8004ce8:	4650      	mov	r0, sl
 8004cea:	4659      	mov	r1, fp
 8004cec:	f7fb fc94 	bl	8000618 <__aeabi_dmul>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4640      	mov	r0, r8
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	f7fb fad8 	bl	80002ac <__adddf3>
 8004cfc:	4632      	mov	r2, r6
 8004cfe:	463b      	mov	r3, r7
 8004d00:	4680      	mov	r8, r0
 8004d02:	4689      	mov	r9, r1
 8004d04:	4620      	mov	r0, r4
 8004d06:	4629      	mov	r1, r5
 8004d08:	f7fb fc86 	bl	8000618 <__aeabi_dmul>
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	4604      	mov	r4, r0
 8004d10:	460d      	mov	r5, r1
 8004d12:	4602      	mov	r2, r0
 8004d14:	4649      	mov	r1, r9
 8004d16:	4640      	mov	r0, r8
 8004d18:	f7fb fac8 	bl	80002ac <__adddf3>
 8004d1c:	4b1d      	ldr	r3, [pc, #116]	; (8004d94 <__ieee754_pow+0x3dc>)
 8004d1e:	4299      	cmp	r1, r3
 8004d20:	ec45 4b19 	vmov	d9, r4, r5
 8004d24:	4606      	mov	r6, r0
 8004d26:	460f      	mov	r7, r1
 8004d28:	468b      	mov	fp, r1
 8004d2a:	f340 82fe 	ble.w	800532a <__ieee754_pow+0x972>
 8004d2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004d32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004d36:	4303      	orrs	r3, r0
 8004d38:	f000 81f0 	beq.w	800511c <__ieee754_pow+0x764>
 8004d3c:	a310      	add	r3, pc, #64	; (adr r3, 8004d80 <__ieee754_pow+0x3c8>)
 8004d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d42:	ec51 0b18 	vmov	r0, r1, d8
 8004d46:	f7fb fc67 	bl	8000618 <__aeabi_dmul>
 8004d4a:	a30d      	add	r3, pc, #52	; (adr r3, 8004d80 <__ieee754_pow+0x3c8>)
 8004d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d50:	e6cb      	b.n	8004aea <__ieee754_pow+0x132>
 8004d52:	bf00      	nop
 8004d54:	f3af 8000 	nop.w
 8004d58:	60000000 	.word	0x60000000
 8004d5c:	3ff71547 	.word	0x3ff71547
 8004d60:	f85ddf44 	.word	0xf85ddf44
 8004d64:	3e54ae0b 	.word	0x3e54ae0b
 8004d68:	55555555 	.word	0x55555555
 8004d6c:	3fd55555 	.word	0x3fd55555
 8004d70:	652b82fe 	.word	0x652b82fe
 8004d74:	3ff71547 	.word	0x3ff71547
 8004d78:	00000000 	.word	0x00000000
 8004d7c:	bff00000 	.word	0xbff00000
 8004d80:	8800759c 	.word	0x8800759c
 8004d84:	7e37e43c 	.word	0x7e37e43c
 8004d88:	3ff00000 	.word	0x3ff00000
 8004d8c:	3fd00000 	.word	0x3fd00000
 8004d90:	3fe00000 	.word	0x3fe00000
 8004d94:	408fffff 	.word	0x408fffff
 8004d98:	4bd7      	ldr	r3, [pc, #860]	; (80050f8 <__ieee754_pow+0x740>)
 8004d9a:	ea03 0309 	and.w	r3, r3, r9
 8004d9e:	2200      	movs	r2, #0
 8004da0:	b92b      	cbnz	r3, 8004dae <__ieee754_pow+0x3f6>
 8004da2:	4bd6      	ldr	r3, [pc, #856]	; (80050fc <__ieee754_pow+0x744>)
 8004da4:	f7fb fc38 	bl	8000618 <__aeabi_dmul>
 8004da8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004dac:	460c      	mov	r4, r1
 8004dae:	1523      	asrs	r3, r4, #20
 8004db0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004db4:	4413      	add	r3, r2
 8004db6:	9309      	str	r3, [sp, #36]	; 0x24
 8004db8:	4bd1      	ldr	r3, [pc, #836]	; (8005100 <__ieee754_pow+0x748>)
 8004dba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004dbe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004dc2:	429c      	cmp	r4, r3
 8004dc4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004dc8:	dd08      	ble.n	8004ddc <__ieee754_pow+0x424>
 8004dca:	4bce      	ldr	r3, [pc, #824]	; (8005104 <__ieee754_pow+0x74c>)
 8004dcc:	429c      	cmp	r4, r3
 8004dce:	f340 8163 	ble.w	8005098 <__ieee754_pow+0x6e0>
 8004dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8004dd8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004ddc:	2400      	movs	r4, #0
 8004dde:	00e3      	lsls	r3, r4, #3
 8004de0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004de2:	4bc9      	ldr	r3, [pc, #804]	; (8005108 <__ieee754_pow+0x750>)
 8004de4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004de8:	ed93 7b00 	vldr	d7, [r3]
 8004dec:	4629      	mov	r1, r5
 8004dee:	ec53 2b17 	vmov	r2, r3, d7
 8004df2:	eeb0 8a47 	vmov.f32	s16, s14
 8004df6:	eef0 8a67 	vmov.f32	s17, s15
 8004dfa:	4682      	mov	sl, r0
 8004dfc:	f7fb fa54 	bl	80002a8 <__aeabi_dsub>
 8004e00:	4652      	mov	r2, sl
 8004e02:	4606      	mov	r6, r0
 8004e04:	460f      	mov	r7, r1
 8004e06:	462b      	mov	r3, r5
 8004e08:	ec51 0b18 	vmov	r0, r1, d8
 8004e0c:	f7fb fa4e 	bl	80002ac <__adddf3>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	2000      	movs	r0, #0
 8004e16:	49bd      	ldr	r1, [pc, #756]	; (800510c <__ieee754_pow+0x754>)
 8004e18:	f7fb fd28 	bl	800086c <__aeabi_ddiv>
 8004e1c:	ec41 0b19 	vmov	d9, r0, r1
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4630      	mov	r0, r6
 8004e26:	4639      	mov	r1, r7
 8004e28:	f7fb fbf6 	bl	8000618 <__aeabi_dmul>
 8004e2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004e30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004e38:	2300      	movs	r3, #0
 8004e3a:	9304      	str	r3, [sp, #16]
 8004e3c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004e40:	46ab      	mov	fp, r5
 8004e42:	106d      	asrs	r5, r5, #1
 8004e44:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004e48:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004e4c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8004e50:	2200      	movs	r2, #0
 8004e52:	4640      	mov	r0, r8
 8004e54:	4649      	mov	r1, r9
 8004e56:	4614      	mov	r4, r2
 8004e58:	461d      	mov	r5, r3
 8004e5a:	f7fb fbdd 	bl	8000618 <__aeabi_dmul>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4630      	mov	r0, r6
 8004e64:	4639      	mov	r1, r7
 8004e66:	f7fb fa1f 	bl	80002a8 <__aeabi_dsub>
 8004e6a:	ec53 2b18 	vmov	r2, r3, d8
 8004e6e:	4606      	mov	r6, r0
 8004e70:	460f      	mov	r7, r1
 8004e72:	4620      	mov	r0, r4
 8004e74:	4629      	mov	r1, r5
 8004e76:	f7fb fa17 	bl	80002a8 <__aeabi_dsub>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4650      	mov	r0, sl
 8004e80:	4659      	mov	r1, fp
 8004e82:	f7fb fa11 	bl	80002a8 <__aeabi_dsub>
 8004e86:	4642      	mov	r2, r8
 8004e88:	464b      	mov	r3, r9
 8004e8a:	f7fb fbc5 	bl	8000618 <__aeabi_dmul>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4630      	mov	r0, r6
 8004e94:	4639      	mov	r1, r7
 8004e96:	f7fb fa07 	bl	80002a8 <__aeabi_dsub>
 8004e9a:	ec53 2b19 	vmov	r2, r3, d9
 8004e9e:	f7fb fbbb 	bl	8000618 <__aeabi_dmul>
 8004ea2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ea6:	ec41 0b18 	vmov	d8, r0, r1
 8004eaa:	4610      	mov	r0, r2
 8004eac:	4619      	mov	r1, r3
 8004eae:	f7fb fbb3 	bl	8000618 <__aeabi_dmul>
 8004eb2:	a37d      	add	r3, pc, #500	; (adr r3, 80050a8 <__ieee754_pow+0x6f0>)
 8004eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb8:	4604      	mov	r4, r0
 8004eba:	460d      	mov	r5, r1
 8004ebc:	f7fb fbac 	bl	8000618 <__aeabi_dmul>
 8004ec0:	a37b      	add	r3, pc, #492	; (adr r3, 80050b0 <__ieee754_pow+0x6f8>)
 8004ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec6:	f7fb f9f1 	bl	80002ac <__adddf3>
 8004eca:	4622      	mov	r2, r4
 8004ecc:	462b      	mov	r3, r5
 8004ece:	f7fb fba3 	bl	8000618 <__aeabi_dmul>
 8004ed2:	a379      	add	r3, pc, #484	; (adr r3, 80050b8 <__ieee754_pow+0x700>)
 8004ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed8:	f7fb f9e8 	bl	80002ac <__adddf3>
 8004edc:	4622      	mov	r2, r4
 8004ede:	462b      	mov	r3, r5
 8004ee0:	f7fb fb9a 	bl	8000618 <__aeabi_dmul>
 8004ee4:	a376      	add	r3, pc, #472	; (adr r3, 80050c0 <__ieee754_pow+0x708>)
 8004ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eea:	f7fb f9df 	bl	80002ac <__adddf3>
 8004eee:	4622      	mov	r2, r4
 8004ef0:	462b      	mov	r3, r5
 8004ef2:	f7fb fb91 	bl	8000618 <__aeabi_dmul>
 8004ef6:	a374      	add	r3, pc, #464	; (adr r3, 80050c8 <__ieee754_pow+0x710>)
 8004ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efc:	f7fb f9d6 	bl	80002ac <__adddf3>
 8004f00:	4622      	mov	r2, r4
 8004f02:	462b      	mov	r3, r5
 8004f04:	f7fb fb88 	bl	8000618 <__aeabi_dmul>
 8004f08:	a371      	add	r3, pc, #452	; (adr r3, 80050d0 <__ieee754_pow+0x718>)
 8004f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0e:	f7fb f9cd 	bl	80002ac <__adddf3>
 8004f12:	4622      	mov	r2, r4
 8004f14:	4606      	mov	r6, r0
 8004f16:	460f      	mov	r7, r1
 8004f18:	462b      	mov	r3, r5
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	4629      	mov	r1, r5
 8004f1e:	f7fb fb7b 	bl	8000618 <__aeabi_dmul>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4630      	mov	r0, r6
 8004f28:	4639      	mov	r1, r7
 8004f2a:	f7fb fb75 	bl	8000618 <__aeabi_dmul>
 8004f2e:	4642      	mov	r2, r8
 8004f30:	4604      	mov	r4, r0
 8004f32:	460d      	mov	r5, r1
 8004f34:	464b      	mov	r3, r9
 8004f36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f3a:	f7fb f9b7 	bl	80002ac <__adddf3>
 8004f3e:	ec53 2b18 	vmov	r2, r3, d8
 8004f42:	f7fb fb69 	bl	8000618 <__aeabi_dmul>
 8004f46:	4622      	mov	r2, r4
 8004f48:	462b      	mov	r3, r5
 8004f4a:	f7fb f9af 	bl	80002ac <__adddf3>
 8004f4e:	4642      	mov	r2, r8
 8004f50:	4682      	mov	sl, r0
 8004f52:	468b      	mov	fp, r1
 8004f54:	464b      	mov	r3, r9
 8004f56:	4640      	mov	r0, r8
 8004f58:	4649      	mov	r1, r9
 8004f5a:	f7fb fb5d 	bl	8000618 <__aeabi_dmul>
 8004f5e:	4b6c      	ldr	r3, [pc, #432]	; (8005110 <__ieee754_pow+0x758>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	4606      	mov	r6, r0
 8004f64:	460f      	mov	r7, r1
 8004f66:	f7fb f9a1 	bl	80002ac <__adddf3>
 8004f6a:	4652      	mov	r2, sl
 8004f6c:	465b      	mov	r3, fp
 8004f6e:	f7fb f99d 	bl	80002ac <__adddf3>
 8004f72:	9c04      	ldr	r4, [sp, #16]
 8004f74:	460d      	mov	r5, r1
 8004f76:	4622      	mov	r2, r4
 8004f78:	460b      	mov	r3, r1
 8004f7a:	4640      	mov	r0, r8
 8004f7c:	4649      	mov	r1, r9
 8004f7e:	f7fb fb4b 	bl	8000618 <__aeabi_dmul>
 8004f82:	4b63      	ldr	r3, [pc, #396]	; (8005110 <__ieee754_pow+0x758>)
 8004f84:	4680      	mov	r8, r0
 8004f86:	4689      	mov	r9, r1
 8004f88:	2200      	movs	r2, #0
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	f7fb f98b 	bl	80002a8 <__aeabi_dsub>
 8004f92:	4632      	mov	r2, r6
 8004f94:	463b      	mov	r3, r7
 8004f96:	f7fb f987 	bl	80002a8 <__aeabi_dsub>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4650      	mov	r0, sl
 8004fa0:	4659      	mov	r1, fp
 8004fa2:	f7fb f981 	bl	80002a8 <__aeabi_dsub>
 8004fa6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004faa:	f7fb fb35 	bl	8000618 <__aeabi_dmul>
 8004fae:	4622      	mov	r2, r4
 8004fb0:	4606      	mov	r6, r0
 8004fb2:	460f      	mov	r7, r1
 8004fb4:	462b      	mov	r3, r5
 8004fb6:	ec51 0b18 	vmov	r0, r1, d8
 8004fba:	f7fb fb2d 	bl	8000618 <__aeabi_dmul>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4630      	mov	r0, r6
 8004fc4:	4639      	mov	r1, r7
 8004fc6:	f7fb f971 	bl	80002ac <__adddf3>
 8004fca:	4606      	mov	r6, r0
 8004fcc:	460f      	mov	r7, r1
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4640      	mov	r0, r8
 8004fd4:	4649      	mov	r1, r9
 8004fd6:	f7fb f969 	bl	80002ac <__adddf3>
 8004fda:	9c04      	ldr	r4, [sp, #16]
 8004fdc:	a33e      	add	r3, pc, #248	; (adr r3, 80050d8 <__ieee754_pow+0x720>)
 8004fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	460d      	mov	r5, r1
 8004fe6:	f7fb fb17 	bl	8000618 <__aeabi_dmul>
 8004fea:	4642      	mov	r2, r8
 8004fec:	ec41 0b18 	vmov	d8, r0, r1
 8004ff0:	464b      	mov	r3, r9
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	4629      	mov	r1, r5
 8004ff6:	f7fb f957 	bl	80002a8 <__aeabi_dsub>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	4630      	mov	r0, r6
 8005000:	4639      	mov	r1, r7
 8005002:	f7fb f951 	bl	80002a8 <__aeabi_dsub>
 8005006:	a336      	add	r3, pc, #216	; (adr r3, 80050e0 <__ieee754_pow+0x728>)
 8005008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500c:	f7fb fb04 	bl	8000618 <__aeabi_dmul>
 8005010:	a335      	add	r3, pc, #212	; (adr r3, 80050e8 <__ieee754_pow+0x730>)
 8005012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005016:	4606      	mov	r6, r0
 8005018:	460f      	mov	r7, r1
 800501a:	4620      	mov	r0, r4
 800501c:	4629      	mov	r1, r5
 800501e:	f7fb fafb 	bl	8000618 <__aeabi_dmul>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4630      	mov	r0, r6
 8005028:	4639      	mov	r1, r7
 800502a:	f7fb f93f 	bl	80002ac <__adddf3>
 800502e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005030:	4b38      	ldr	r3, [pc, #224]	; (8005114 <__ieee754_pow+0x75c>)
 8005032:	4413      	add	r3, r2
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	f7fb f938 	bl	80002ac <__adddf3>
 800503c:	4682      	mov	sl, r0
 800503e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005040:	468b      	mov	fp, r1
 8005042:	f7fb fa7f 	bl	8000544 <__aeabi_i2d>
 8005046:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005048:	4b33      	ldr	r3, [pc, #204]	; (8005118 <__ieee754_pow+0x760>)
 800504a:	4413      	add	r3, r2
 800504c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005050:	4606      	mov	r6, r0
 8005052:	460f      	mov	r7, r1
 8005054:	4652      	mov	r2, sl
 8005056:	465b      	mov	r3, fp
 8005058:	ec51 0b18 	vmov	r0, r1, d8
 800505c:	f7fb f926 	bl	80002ac <__adddf3>
 8005060:	4642      	mov	r2, r8
 8005062:	464b      	mov	r3, r9
 8005064:	f7fb f922 	bl	80002ac <__adddf3>
 8005068:	4632      	mov	r2, r6
 800506a:	463b      	mov	r3, r7
 800506c:	f7fb f91e 	bl	80002ac <__adddf3>
 8005070:	9c04      	ldr	r4, [sp, #16]
 8005072:	4632      	mov	r2, r6
 8005074:	463b      	mov	r3, r7
 8005076:	4620      	mov	r0, r4
 8005078:	460d      	mov	r5, r1
 800507a:	f7fb f915 	bl	80002a8 <__aeabi_dsub>
 800507e:	4642      	mov	r2, r8
 8005080:	464b      	mov	r3, r9
 8005082:	f7fb f911 	bl	80002a8 <__aeabi_dsub>
 8005086:	ec53 2b18 	vmov	r2, r3, d8
 800508a:	f7fb f90d 	bl	80002a8 <__aeabi_dsub>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4650      	mov	r0, sl
 8005094:	4659      	mov	r1, fp
 8005096:	e606      	b.n	8004ca6 <__ieee754_pow+0x2ee>
 8005098:	2401      	movs	r4, #1
 800509a:	e6a0      	b.n	8004dde <__ieee754_pow+0x426>
 800509c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80050f0 <__ieee754_pow+0x738>
 80050a0:	e60d      	b.n	8004cbe <__ieee754_pow+0x306>
 80050a2:	bf00      	nop
 80050a4:	f3af 8000 	nop.w
 80050a8:	4a454eef 	.word	0x4a454eef
 80050ac:	3fca7e28 	.word	0x3fca7e28
 80050b0:	93c9db65 	.word	0x93c9db65
 80050b4:	3fcd864a 	.word	0x3fcd864a
 80050b8:	a91d4101 	.word	0xa91d4101
 80050bc:	3fd17460 	.word	0x3fd17460
 80050c0:	518f264d 	.word	0x518f264d
 80050c4:	3fd55555 	.word	0x3fd55555
 80050c8:	db6fabff 	.word	0xdb6fabff
 80050cc:	3fdb6db6 	.word	0x3fdb6db6
 80050d0:	33333303 	.word	0x33333303
 80050d4:	3fe33333 	.word	0x3fe33333
 80050d8:	e0000000 	.word	0xe0000000
 80050dc:	3feec709 	.word	0x3feec709
 80050e0:	dc3a03fd 	.word	0xdc3a03fd
 80050e4:	3feec709 	.word	0x3feec709
 80050e8:	145b01f5 	.word	0x145b01f5
 80050ec:	be3e2fe0 	.word	0xbe3e2fe0
 80050f0:	00000000 	.word	0x00000000
 80050f4:	3ff00000 	.word	0x3ff00000
 80050f8:	7ff00000 	.word	0x7ff00000
 80050fc:	43400000 	.word	0x43400000
 8005100:	0003988e 	.word	0x0003988e
 8005104:	000bb679 	.word	0x000bb679
 8005108:	08005898 	.word	0x08005898
 800510c:	3ff00000 	.word	0x3ff00000
 8005110:	40080000 	.word	0x40080000
 8005114:	080058b8 	.word	0x080058b8
 8005118:	080058a8 	.word	0x080058a8
 800511c:	a3b5      	add	r3, pc, #724	; (adr r3, 80053f4 <__ieee754_pow+0xa3c>)
 800511e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005122:	4640      	mov	r0, r8
 8005124:	4649      	mov	r1, r9
 8005126:	f7fb f8c1 	bl	80002ac <__adddf3>
 800512a:	4622      	mov	r2, r4
 800512c:	ec41 0b1a 	vmov	d10, r0, r1
 8005130:	462b      	mov	r3, r5
 8005132:	4630      	mov	r0, r6
 8005134:	4639      	mov	r1, r7
 8005136:	f7fb f8b7 	bl	80002a8 <__aeabi_dsub>
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	ec51 0b1a 	vmov	r0, r1, d10
 8005142:	f7fb fcf9 	bl	8000b38 <__aeabi_dcmpgt>
 8005146:	2800      	cmp	r0, #0
 8005148:	f47f adf8 	bne.w	8004d3c <__ieee754_pow+0x384>
 800514c:	4aa4      	ldr	r2, [pc, #656]	; (80053e0 <__ieee754_pow+0xa28>)
 800514e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005152:	4293      	cmp	r3, r2
 8005154:	f340 810b 	ble.w	800536e <__ieee754_pow+0x9b6>
 8005158:	151b      	asrs	r3, r3, #20
 800515a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800515e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005162:	fa4a f303 	asr.w	r3, sl, r3
 8005166:	445b      	add	r3, fp
 8005168:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800516c:	4e9d      	ldr	r6, [pc, #628]	; (80053e4 <__ieee754_pow+0xa2c>)
 800516e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005172:	4116      	asrs	r6, r2
 8005174:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005178:	2000      	movs	r0, #0
 800517a:	ea23 0106 	bic.w	r1, r3, r6
 800517e:	f1c2 0214 	rsb	r2, r2, #20
 8005182:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005186:	fa4a fa02 	asr.w	sl, sl, r2
 800518a:	f1bb 0f00 	cmp.w	fp, #0
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4620      	mov	r0, r4
 8005194:	4629      	mov	r1, r5
 8005196:	bfb8      	it	lt
 8005198:	f1ca 0a00 	rsblt	sl, sl, #0
 800519c:	f7fb f884 	bl	80002a8 <__aeabi_dsub>
 80051a0:	ec41 0b19 	vmov	d9, r0, r1
 80051a4:	4642      	mov	r2, r8
 80051a6:	464b      	mov	r3, r9
 80051a8:	ec51 0b19 	vmov	r0, r1, d9
 80051ac:	f7fb f87e 	bl	80002ac <__adddf3>
 80051b0:	2400      	movs	r4, #0
 80051b2:	a379      	add	r3, pc, #484	; (adr r3, 8005398 <__ieee754_pow+0x9e0>)
 80051b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b8:	4620      	mov	r0, r4
 80051ba:	460d      	mov	r5, r1
 80051bc:	f7fb fa2c 	bl	8000618 <__aeabi_dmul>
 80051c0:	ec53 2b19 	vmov	r2, r3, d9
 80051c4:	4606      	mov	r6, r0
 80051c6:	460f      	mov	r7, r1
 80051c8:	4620      	mov	r0, r4
 80051ca:	4629      	mov	r1, r5
 80051cc:	f7fb f86c 	bl	80002a8 <__aeabi_dsub>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4640      	mov	r0, r8
 80051d6:	4649      	mov	r1, r9
 80051d8:	f7fb f866 	bl	80002a8 <__aeabi_dsub>
 80051dc:	a370      	add	r3, pc, #448	; (adr r3, 80053a0 <__ieee754_pow+0x9e8>)
 80051de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e2:	f7fb fa19 	bl	8000618 <__aeabi_dmul>
 80051e6:	a370      	add	r3, pc, #448	; (adr r3, 80053a8 <__ieee754_pow+0x9f0>)
 80051e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ec:	4680      	mov	r8, r0
 80051ee:	4689      	mov	r9, r1
 80051f0:	4620      	mov	r0, r4
 80051f2:	4629      	mov	r1, r5
 80051f4:	f7fb fa10 	bl	8000618 <__aeabi_dmul>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4640      	mov	r0, r8
 80051fe:	4649      	mov	r1, r9
 8005200:	f7fb f854 	bl	80002ac <__adddf3>
 8005204:	4604      	mov	r4, r0
 8005206:	460d      	mov	r5, r1
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4630      	mov	r0, r6
 800520e:	4639      	mov	r1, r7
 8005210:	f7fb f84c 	bl	80002ac <__adddf3>
 8005214:	4632      	mov	r2, r6
 8005216:	463b      	mov	r3, r7
 8005218:	4680      	mov	r8, r0
 800521a:	4689      	mov	r9, r1
 800521c:	f7fb f844 	bl	80002a8 <__aeabi_dsub>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4620      	mov	r0, r4
 8005226:	4629      	mov	r1, r5
 8005228:	f7fb f83e 	bl	80002a8 <__aeabi_dsub>
 800522c:	4642      	mov	r2, r8
 800522e:	4606      	mov	r6, r0
 8005230:	460f      	mov	r7, r1
 8005232:	464b      	mov	r3, r9
 8005234:	4640      	mov	r0, r8
 8005236:	4649      	mov	r1, r9
 8005238:	f7fb f9ee 	bl	8000618 <__aeabi_dmul>
 800523c:	a35c      	add	r3, pc, #368	; (adr r3, 80053b0 <__ieee754_pow+0x9f8>)
 800523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005242:	4604      	mov	r4, r0
 8005244:	460d      	mov	r5, r1
 8005246:	f7fb f9e7 	bl	8000618 <__aeabi_dmul>
 800524a:	a35b      	add	r3, pc, #364	; (adr r3, 80053b8 <__ieee754_pow+0xa00>)
 800524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005250:	f7fb f82a 	bl	80002a8 <__aeabi_dsub>
 8005254:	4622      	mov	r2, r4
 8005256:	462b      	mov	r3, r5
 8005258:	f7fb f9de 	bl	8000618 <__aeabi_dmul>
 800525c:	a358      	add	r3, pc, #352	; (adr r3, 80053c0 <__ieee754_pow+0xa08>)
 800525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005262:	f7fb f823 	bl	80002ac <__adddf3>
 8005266:	4622      	mov	r2, r4
 8005268:	462b      	mov	r3, r5
 800526a:	f7fb f9d5 	bl	8000618 <__aeabi_dmul>
 800526e:	a356      	add	r3, pc, #344	; (adr r3, 80053c8 <__ieee754_pow+0xa10>)
 8005270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005274:	f7fb f818 	bl	80002a8 <__aeabi_dsub>
 8005278:	4622      	mov	r2, r4
 800527a:	462b      	mov	r3, r5
 800527c:	f7fb f9cc 	bl	8000618 <__aeabi_dmul>
 8005280:	a353      	add	r3, pc, #332	; (adr r3, 80053d0 <__ieee754_pow+0xa18>)
 8005282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005286:	f7fb f811 	bl	80002ac <__adddf3>
 800528a:	4622      	mov	r2, r4
 800528c:	462b      	mov	r3, r5
 800528e:	f7fb f9c3 	bl	8000618 <__aeabi_dmul>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	4640      	mov	r0, r8
 8005298:	4649      	mov	r1, r9
 800529a:	f7fb f805 	bl	80002a8 <__aeabi_dsub>
 800529e:	4604      	mov	r4, r0
 80052a0:	460d      	mov	r5, r1
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4640      	mov	r0, r8
 80052a8:	4649      	mov	r1, r9
 80052aa:	f7fb f9b5 	bl	8000618 <__aeabi_dmul>
 80052ae:	2200      	movs	r2, #0
 80052b0:	ec41 0b19 	vmov	d9, r0, r1
 80052b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80052b8:	4620      	mov	r0, r4
 80052ba:	4629      	mov	r1, r5
 80052bc:	f7fa fff4 	bl	80002a8 <__aeabi_dsub>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	ec51 0b19 	vmov	r0, r1, d9
 80052c8:	f7fb fad0 	bl	800086c <__aeabi_ddiv>
 80052cc:	4632      	mov	r2, r6
 80052ce:	4604      	mov	r4, r0
 80052d0:	460d      	mov	r5, r1
 80052d2:	463b      	mov	r3, r7
 80052d4:	4640      	mov	r0, r8
 80052d6:	4649      	mov	r1, r9
 80052d8:	f7fb f99e 	bl	8000618 <__aeabi_dmul>
 80052dc:	4632      	mov	r2, r6
 80052de:	463b      	mov	r3, r7
 80052e0:	f7fa ffe4 	bl	80002ac <__adddf3>
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	4620      	mov	r0, r4
 80052ea:	4629      	mov	r1, r5
 80052ec:	f7fa ffdc 	bl	80002a8 <__aeabi_dsub>
 80052f0:	4642      	mov	r2, r8
 80052f2:	464b      	mov	r3, r9
 80052f4:	f7fa ffd8 	bl	80002a8 <__aeabi_dsub>
 80052f8:	460b      	mov	r3, r1
 80052fa:	4602      	mov	r2, r0
 80052fc:	493a      	ldr	r1, [pc, #232]	; (80053e8 <__ieee754_pow+0xa30>)
 80052fe:	2000      	movs	r0, #0
 8005300:	f7fa ffd2 	bl	80002a8 <__aeabi_dsub>
 8005304:	e9cd 0100 	strd	r0, r1, [sp]
 8005308:	9b01      	ldr	r3, [sp, #4]
 800530a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800530e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005312:	da2f      	bge.n	8005374 <__ieee754_pow+0x9bc>
 8005314:	4650      	mov	r0, sl
 8005316:	ed9d 0b00 	vldr	d0, [sp]
 800531a:	f000 f9cd 	bl	80056b8 <scalbn>
 800531e:	ec51 0b10 	vmov	r0, r1, d0
 8005322:	ec53 2b18 	vmov	r2, r3, d8
 8005326:	f7ff bbe0 	b.w	8004aea <__ieee754_pow+0x132>
 800532a:	4b30      	ldr	r3, [pc, #192]	; (80053ec <__ieee754_pow+0xa34>)
 800532c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005330:	429e      	cmp	r6, r3
 8005332:	f77f af0b 	ble.w	800514c <__ieee754_pow+0x794>
 8005336:	4b2e      	ldr	r3, [pc, #184]	; (80053f0 <__ieee754_pow+0xa38>)
 8005338:	440b      	add	r3, r1
 800533a:	4303      	orrs	r3, r0
 800533c:	d00b      	beq.n	8005356 <__ieee754_pow+0x99e>
 800533e:	a326      	add	r3, pc, #152	; (adr r3, 80053d8 <__ieee754_pow+0xa20>)
 8005340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005344:	ec51 0b18 	vmov	r0, r1, d8
 8005348:	f7fb f966 	bl	8000618 <__aeabi_dmul>
 800534c:	a322      	add	r3, pc, #136	; (adr r3, 80053d8 <__ieee754_pow+0xa20>)
 800534e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005352:	f7ff bbca 	b.w	8004aea <__ieee754_pow+0x132>
 8005356:	4622      	mov	r2, r4
 8005358:	462b      	mov	r3, r5
 800535a:	f7fa ffa5 	bl	80002a8 <__aeabi_dsub>
 800535e:	4642      	mov	r2, r8
 8005360:	464b      	mov	r3, r9
 8005362:	f7fb fbdf 	bl	8000b24 <__aeabi_dcmpge>
 8005366:	2800      	cmp	r0, #0
 8005368:	f43f aef0 	beq.w	800514c <__ieee754_pow+0x794>
 800536c:	e7e7      	b.n	800533e <__ieee754_pow+0x986>
 800536e:	f04f 0a00 	mov.w	sl, #0
 8005372:	e717      	b.n	80051a4 <__ieee754_pow+0x7ec>
 8005374:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005378:	4619      	mov	r1, r3
 800537a:	e7d2      	b.n	8005322 <__ieee754_pow+0x96a>
 800537c:	491a      	ldr	r1, [pc, #104]	; (80053e8 <__ieee754_pow+0xa30>)
 800537e:	2000      	movs	r0, #0
 8005380:	f7ff bb9e 	b.w	8004ac0 <__ieee754_pow+0x108>
 8005384:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005388:	f7ff bb9a 	b.w	8004ac0 <__ieee754_pow+0x108>
 800538c:	9000      	str	r0, [sp, #0]
 800538e:	f7ff bb76 	b.w	8004a7e <__ieee754_pow+0xc6>
 8005392:	2100      	movs	r1, #0
 8005394:	f7ff bb60 	b.w	8004a58 <__ieee754_pow+0xa0>
 8005398:	00000000 	.word	0x00000000
 800539c:	3fe62e43 	.word	0x3fe62e43
 80053a0:	fefa39ef 	.word	0xfefa39ef
 80053a4:	3fe62e42 	.word	0x3fe62e42
 80053a8:	0ca86c39 	.word	0x0ca86c39
 80053ac:	be205c61 	.word	0xbe205c61
 80053b0:	72bea4d0 	.word	0x72bea4d0
 80053b4:	3e663769 	.word	0x3e663769
 80053b8:	c5d26bf1 	.word	0xc5d26bf1
 80053bc:	3ebbbd41 	.word	0x3ebbbd41
 80053c0:	af25de2c 	.word	0xaf25de2c
 80053c4:	3f11566a 	.word	0x3f11566a
 80053c8:	16bebd93 	.word	0x16bebd93
 80053cc:	3f66c16c 	.word	0x3f66c16c
 80053d0:	5555553e 	.word	0x5555553e
 80053d4:	3fc55555 	.word	0x3fc55555
 80053d8:	c2f8f359 	.word	0xc2f8f359
 80053dc:	01a56e1f 	.word	0x01a56e1f
 80053e0:	3fe00000 	.word	0x3fe00000
 80053e4:	000fffff 	.word	0x000fffff
 80053e8:	3ff00000 	.word	0x3ff00000
 80053ec:	4090cbff 	.word	0x4090cbff
 80053f0:	3f6f3400 	.word	0x3f6f3400
 80053f4:	652b82fe 	.word	0x652b82fe
 80053f8:	3c971547 	.word	0x3c971547

080053fc <__ieee754_sqrt>:
 80053fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005400:	ec55 4b10 	vmov	r4, r5, d0
 8005404:	4e56      	ldr	r6, [pc, #344]	; (8005560 <__ieee754_sqrt+0x164>)
 8005406:	43ae      	bics	r6, r5
 8005408:	ee10 0a10 	vmov	r0, s0
 800540c:	ee10 3a10 	vmov	r3, s0
 8005410:	4629      	mov	r1, r5
 8005412:	462a      	mov	r2, r5
 8005414:	d110      	bne.n	8005438 <__ieee754_sqrt+0x3c>
 8005416:	ee10 2a10 	vmov	r2, s0
 800541a:	462b      	mov	r3, r5
 800541c:	f7fb f8fc 	bl	8000618 <__aeabi_dmul>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	4620      	mov	r0, r4
 8005426:	4629      	mov	r1, r5
 8005428:	f7fa ff40 	bl	80002ac <__adddf3>
 800542c:	4604      	mov	r4, r0
 800542e:	460d      	mov	r5, r1
 8005430:	ec45 4b10 	vmov	d0, r4, r5
 8005434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005438:	2d00      	cmp	r5, #0
 800543a:	dc10      	bgt.n	800545e <__ieee754_sqrt+0x62>
 800543c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005440:	4330      	orrs	r0, r6
 8005442:	d0f5      	beq.n	8005430 <__ieee754_sqrt+0x34>
 8005444:	b15d      	cbz	r5, 800545e <__ieee754_sqrt+0x62>
 8005446:	ee10 2a10 	vmov	r2, s0
 800544a:	462b      	mov	r3, r5
 800544c:	ee10 0a10 	vmov	r0, s0
 8005450:	f7fa ff2a 	bl	80002a8 <__aeabi_dsub>
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	f7fb fa08 	bl	800086c <__aeabi_ddiv>
 800545c:	e7e6      	b.n	800542c <__ieee754_sqrt+0x30>
 800545e:	1509      	asrs	r1, r1, #20
 8005460:	d076      	beq.n	8005550 <__ieee754_sqrt+0x154>
 8005462:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005466:	07ce      	lsls	r6, r1, #31
 8005468:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800546c:	bf5e      	ittt	pl
 800546e:	0fda      	lsrpl	r2, r3, #31
 8005470:	005b      	lslpl	r3, r3, #1
 8005472:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8005476:	0fda      	lsrs	r2, r3, #31
 8005478:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800547c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8005480:	2000      	movs	r0, #0
 8005482:	106d      	asrs	r5, r5, #1
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	f04f 0e16 	mov.w	lr, #22
 800548a:	4684      	mov	ip, r0
 800548c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005490:	eb0c 0401 	add.w	r4, ip, r1
 8005494:	4294      	cmp	r4, r2
 8005496:	bfde      	ittt	le
 8005498:	1b12      	suble	r2, r2, r4
 800549a:	eb04 0c01 	addle.w	ip, r4, r1
 800549e:	1840      	addle	r0, r0, r1
 80054a0:	0052      	lsls	r2, r2, #1
 80054a2:	f1be 0e01 	subs.w	lr, lr, #1
 80054a6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80054aa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80054ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80054b2:	d1ed      	bne.n	8005490 <__ieee754_sqrt+0x94>
 80054b4:	4671      	mov	r1, lr
 80054b6:	2720      	movs	r7, #32
 80054b8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80054bc:	4562      	cmp	r2, ip
 80054be:	eb04 060e 	add.w	r6, r4, lr
 80054c2:	dc02      	bgt.n	80054ca <__ieee754_sqrt+0xce>
 80054c4:	d113      	bne.n	80054ee <__ieee754_sqrt+0xf2>
 80054c6:	429e      	cmp	r6, r3
 80054c8:	d811      	bhi.n	80054ee <__ieee754_sqrt+0xf2>
 80054ca:	2e00      	cmp	r6, #0
 80054cc:	eb06 0e04 	add.w	lr, r6, r4
 80054d0:	da43      	bge.n	800555a <__ieee754_sqrt+0x15e>
 80054d2:	f1be 0f00 	cmp.w	lr, #0
 80054d6:	db40      	blt.n	800555a <__ieee754_sqrt+0x15e>
 80054d8:	f10c 0801 	add.w	r8, ip, #1
 80054dc:	eba2 020c 	sub.w	r2, r2, ip
 80054e0:	429e      	cmp	r6, r3
 80054e2:	bf88      	it	hi
 80054e4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80054e8:	1b9b      	subs	r3, r3, r6
 80054ea:	4421      	add	r1, r4
 80054ec:	46c4      	mov	ip, r8
 80054ee:	0052      	lsls	r2, r2, #1
 80054f0:	3f01      	subs	r7, #1
 80054f2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80054f6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80054fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80054fe:	d1dd      	bne.n	80054bc <__ieee754_sqrt+0xc0>
 8005500:	4313      	orrs	r3, r2
 8005502:	d006      	beq.n	8005512 <__ieee754_sqrt+0x116>
 8005504:	1c4c      	adds	r4, r1, #1
 8005506:	bf13      	iteet	ne
 8005508:	3101      	addne	r1, #1
 800550a:	3001      	addeq	r0, #1
 800550c:	4639      	moveq	r1, r7
 800550e:	f021 0101 	bicne.w	r1, r1, #1
 8005512:	1043      	asrs	r3, r0, #1
 8005514:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005518:	0849      	lsrs	r1, r1, #1
 800551a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800551e:	07c2      	lsls	r2, r0, #31
 8005520:	bf48      	it	mi
 8005522:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8005526:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800552a:	460c      	mov	r4, r1
 800552c:	463d      	mov	r5, r7
 800552e:	e77f      	b.n	8005430 <__ieee754_sqrt+0x34>
 8005530:	0ada      	lsrs	r2, r3, #11
 8005532:	3815      	subs	r0, #21
 8005534:	055b      	lsls	r3, r3, #21
 8005536:	2a00      	cmp	r2, #0
 8005538:	d0fa      	beq.n	8005530 <__ieee754_sqrt+0x134>
 800553a:	02d7      	lsls	r7, r2, #11
 800553c:	d50a      	bpl.n	8005554 <__ieee754_sqrt+0x158>
 800553e:	f1c1 0420 	rsb	r4, r1, #32
 8005542:	fa23 f404 	lsr.w	r4, r3, r4
 8005546:	1e4d      	subs	r5, r1, #1
 8005548:	408b      	lsls	r3, r1
 800554a:	4322      	orrs	r2, r4
 800554c:	1b41      	subs	r1, r0, r5
 800554e:	e788      	b.n	8005462 <__ieee754_sqrt+0x66>
 8005550:	4608      	mov	r0, r1
 8005552:	e7f0      	b.n	8005536 <__ieee754_sqrt+0x13a>
 8005554:	0052      	lsls	r2, r2, #1
 8005556:	3101      	adds	r1, #1
 8005558:	e7ef      	b.n	800553a <__ieee754_sqrt+0x13e>
 800555a:	46e0      	mov	r8, ip
 800555c:	e7be      	b.n	80054dc <__ieee754_sqrt+0xe0>
 800555e:	bf00      	nop
 8005560:	7ff00000 	.word	0x7ff00000

08005564 <fabs>:
 8005564:	ec51 0b10 	vmov	r0, r1, d0
 8005568:	ee10 2a10 	vmov	r2, s0
 800556c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005570:	ec43 2b10 	vmov	d0, r2, r3
 8005574:	4770      	bx	lr

08005576 <finite>:
 8005576:	b082      	sub	sp, #8
 8005578:	ed8d 0b00 	vstr	d0, [sp]
 800557c:	9801      	ldr	r0, [sp, #4]
 800557e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005582:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005586:	0fc0      	lsrs	r0, r0, #31
 8005588:	b002      	add	sp, #8
 800558a:	4770      	bx	lr
 800558c:	0000      	movs	r0, r0
	...

08005590 <nan>:
 8005590:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005598 <nan+0x8>
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	00000000 	.word	0x00000000
 800559c:	7ff80000 	.word	0x7ff80000

080055a0 <rint>:
 80055a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055a2:	ec51 0b10 	vmov	r0, r1, d0
 80055a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80055aa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80055ae:	2e13      	cmp	r6, #19
 80055b0:	ee10 4a10 	vmov	r4, s0
 80055b4:	460b      	mov	r3, r1
 80055b6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80055ba:	dc58      	bgt.n	800566e <rint+0xce>
 80055bc:	2e00      	cmp	r6, #0
 80055be:	da2b      	bge.n	8005618 <rint+0x78>
 80055c0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80055c4:	4302      	orrs	r2, r0
 80055c6:	d023      	beq.n	8005610 <rint+0x70>
 80055c8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80055cc:	4302      	orrs	r2, r0
 80055ce:	4254      	negs	r4, r2
 80055d0:	4314      	orrs	r4, r2
 80055d2:	0c4b      	lsrs	r3, r1, #17
 80055d4:	0b24      	lsrs	r4, r4, #12
 80055d6:	045b      	lsls	r3, r3, #17
 80055d8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80055dc:	ea44 0103 	orr.w	r1, r4, r3
 80055e0:	4b32      	ldr	r3, [pc, #200]	; (80056ac <rint+0x10c>)
 80055e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80055e6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	4630      	mov	r0, r6
 80055f0:	4639      	mov	r1, r7
 80055f2:	f7fa fe5b 	bl	80002ac <__adddf3>
 80055f6:	e9cd 0100 	strd	r0, r1, [sp]
 80055fa:	463b      	mov	r3, r7
 80055fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005600:	4632      	mov	r2, r6
 8005602:	f7fa fe51 	bl	80002a8 <__aeabi_dsub>
 8005606:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800560a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800560e:	4639      	mov	r1, r7
 8005610:	ec41 0b10 	vmov	d0, r0, r1
 8005614:	b003      	add	sp, #12
 8005616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005618:	4a25      	ldr	r2, [pc, #148]	; (80056b0 <rint+0x110>)
 800561a:	4132      	asrs	r2, r6
 800561c:	ea01 0702 	and.w	r7, r1, r2
 8005620:	4307      	orrs	r7, r0
 8005622:	d0f5      	beq.n	8005610 <rint+0x70>
 8005624:	0851      	lsrs	r1, r2, #1
 8005626:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800562a:	4314      	orrs	r4, r2
 800562c:	d00c      	beq.n	8005648 <rint+0xa8>
 800562e:	ea23 0201 	bic.w	r2, r3, r1
 8005632:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005636:	2e13      	cmp	r6, #19
 8005638:	fa43 f606 	asr.w	r6, r3, r6
 800563c:	bf0c      	ite	eq
 800563e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8005642:	2400      	movne	r4, #0
 8005644:	ea42 0306 	orr.w	r3, r2, r6
 8005648:	4918      	ldr	r1, [pc, #96]	; (80056ac <rint+0x10c>)
 800564a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800564e:	4622      	mov	r2, r4
 8005650:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005654:	4620      	mov	r0, r4
 8005656:	4629      	mov	r1, r5
 8005658:	f7fa fe28 	bl	80002ac <__adddf3>
 800565c:	e9cd 0100 	strd	r0, r1, [sp]
 8005660:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005664:	4622      	mov	r2, r4
 8005666:	462b      	mov	r3, r5
 8005668:	f7fa fe1e 	bl	80002a8 <__aeabi_dsub>
 800566c:	e7d0      	b.n	8005610 <rint+0x70>
 800566e:	2e33      	cmp	r6, #51	; 0x33
 8005670:	dd07      	ble.n	8005682 <rint+0xe2>
 8005672:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005676:	d1cb      	bne.n	8005610 <rint+0x70>
 8005678:	ee10 2a10 	vmov	r2, s0
 800567c:	f7fa fe16 	bl	80002ac <__adddf3>
 8005680:	e7c6      	b.n	8005610 <rint+0x70>
 8005682:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8005686:	f04f 36ff 	mov.w	r6, #4294967295
 800568a:	40d6      	lsrs	r6, r2
 800568c:	4230      	tst	r0, r6
 800568e:	d0bf      	beq.n	8005610 <rint+0x70>
 8005690:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8005694:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8005698:	bf1f      	itttt	ne
 800569a:	ea24 0101 	bicne.w	r1, r4, r1
 800569e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80056a2:	fa44 f202 	asrne.w	r2, r4, r2
 80056a6:	ea41 0402 	orrne.w	r4, r1, r2
 80056aa:	e7cd      	b.n	8005648 <rint+0xa8>
 80056ac:	080058c8 	.word	0x080058c8
 80056b0:	000fffff 	.word	0x000fffff
 80056b4:	00000000 	.word	0x00000000

080056b8 <scalbn>:
 80056b8:	b570      	push	{r4, r5, r6, lr}
 80056ba:	ec55 4b10 	vmov	r4, r5, d0
 80056be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80056c2:	4606      	mov	r6, r0
 80056c4:	462b      	mov	r3, r5
 80056c6:	b99a      	cbnz	r2, 80056f0 <scalbn+0x38>
 80056c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80056cc:	4323      	orrs	r3, r4
 80056ce:	d036      	beq.n	800573e <scalbn+0x86>
 80056d0:	4b39      	ldr	r3, [pc, #228]	; (80057b8 <scalbn+0x100>)
 80056d2:	4629      	mov	r1, r5
 80056d4:	ee10 0a10 	vmov	r0, s0
 80056d8:	2200      	movs	r2, #0
 80056da:	f7fa ff9d 	bl	8000618 <__aeabi_dmul>
 80056de:	4b37      	ldr	r3, [pc, #220]	; (80057bc <scalbn+0x104>)
 80056e0:	429e      	cmp	r6, r3
 80056e2:	4604      	mov	r4, r0
 80056e4:	460d      	mov	r5, r1
 80056e6:	da10      	bge.n	800570a <scalbn+0x52>
 80056e8:	a32b      	add	r3, pc, #172	; (adr r3, 8005798 <scalbn+0xe0>)
 80056ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ee:	e03a      	b.n	8005766 <scalbn+0xae>
 80056f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80056f4:	428a      	cmp	r2, r1
 80056f6:	d10c      	bne.n	8005712 <scalbn+0x5a>
 80056f8:	ee10 2a10 	vmov	r2, s0
 80056fc:	4620      	mov	r0, r4
 80056fe:	4629      	mov	r1, r5
 8005700:	f7fa fdd4 	bl	80002ac <__adddf3>
 8005704:	4604      	mov	r4, r0
 8005706:	460d      	mov	r5, r1
 8005708:	e019      	b.n	800573e <scalbn+0x86>
 800570a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800570e:	460b      	mov	r3, r1
 8005710:	3a36      	subs	r2, #54	; 0x36
 8005712:	4432      	add	r2, r6
 8005714:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005718:	428a      	cmp	r2, r1
 800571a:	dd08      	ble.n	800572e <scalbn+0x76>
 800571c:	2d00      	cmp	r5, #0
 800571e:	a120      	add	r1, pc, #128	; (adr r1, 80057a0 <scalbn+0xe8>)
 8005720:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005724:	da1c      	bge.n	8005760 <scalbn+0xa8>
 8005726:	a120      	add	r1, pc, #128	; (adr r1, 80057a8 <scalbn+0xf0>)
 8005728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800572c:	e018      	b.n	8005760 <scalbn+0xa8>
 800572e:	2a00      	cmp	r2, #0
 8005730:	dd08      	ble.n	8005744 <scalbn+0x8c>
 8005732:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005736:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800573a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800573e:	ec45 4b10 	vmov	d0, r4, r5
 8005742:	bd70      	pop	{r4, r5, r6, pc}
 8005744:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005748:	da19      	bge.n	800577e <scalbn+0xc6>
 800574a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800574e:	429e      	cmp	r6, r3
 8005750:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005754:	dd0a      	ble.n	800576c <scalbn+0xb4>
 8005756:	a112      	add	r1, pc, #72	; (adr r1, 80057a0 <scalbn+0xe8>)
 8005758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1e2      	bne.n	8005726 <scalbn+0x6e>
 8005760:	a30f      	add	r3, pc, #60	; (adr r3, 80057a0 <scalbn+0xe8>)
 8005762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005766:	f7fa ff57 	bl	8000618 <__aeabi_dmul>
 800576a:	e7cb      	b.n	8005704 <scalbn+0x4c>
 800576c:	a10a      	add	r1, pc, #40	; (adr r1, 8005798 <scalbn+0xe0>)
 800576e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0b8      	beq.n	80056e8 <scalbn+0x30>
 8005776:	a10e      	add	r1, pc, #56	; (adr r1, 80057b0 <scalbn+0xf8>)
 8005778:	e9d1 0100 	ldrd	r0, r1, [r1]
 800577c:	e7b4      	b.n	80056e8 <scalbn+0x30>
 800577e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005782:	3236      	adds	r2, #54	; 0x36
 8005784:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005788:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800578c:	4620      	mov	r0, r4
 800578e:	4b0c      	ldr	r3, [pc, #48]	; (80057c0 <scalbn+0x108>)
 8005790:	2200      	movs	r2, #0
 8005792:	e7e8      	b.n	8005766 <scalbn+0xae>
 8005794:	f3af 8000 	nop.w
 8005798:	c2f8f359 	.word	0xc2f8f359
 800579c:	01a56e1f 	.word	0x01a56e1f
 80057a0:	8800759c 	.word	0x8800759c
 80057a4:	7e37e43c 	.word	0x7e37e43c
 80057a8:	8800759c 	.word	0x8800759c
 80057ac:	fe37e43c 	.word	0xfe37e43c
 80057b0:	c2f8f359 	.word	0xc2f8f359
 80057b4:	81a56e1f 	.word	0x81a56e1f
 80057b8:	43500000 	.word	0x43500000
 80057bc:	ffff3cb0 	.word	0xffff3cb0
 80057c0:	3c900000 	.word	0x3c900000

080057c4 <_init>:
 80057c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c6:	bf00      	nop
 80057c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ca:	bc08      	pop	{r3}
 80057cc:	469e      	mov	lr, r3
 80057ce:	4770      	bx	lr

080057d0 <_fini>:
 80057d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d2:	bf00      	nop
 80057d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057d6:	bc08      	pop	{r3}
 80057d8:	469e      	mov	lr, r3
 80057da:	4770      	bx	lr
