
TPFinalPDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d3c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08007ef0  08007ef0  00017ef0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008358  08008358  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08008358  08008358  00018358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008360  08008360  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008360  08008360  00018360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008364  08008364  00018364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          000000b0  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000029c  2000029c  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e2d  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a18  00000000  00000000  00031049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b40  00000000  00000000  00033a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a18  00000000  00000000  000345a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028312  00000000  00000000  00034fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001235f  00000000  00000000  0005d2d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb8c2  00000000  00000000  0006f631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015aef3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f20  00000000  00000000  0015af48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007ed4 	.word	0x08007ed4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	08007ed4 	.word	0x08007ed4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96e 	b.w	8000f9c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468c      	mov	ip, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8083 	bne.w	8000dee <__udivmoddi4+0x116>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d947      	bls.n	8000d7e <__udivmoddi4+0xa6>
 8000cee:	fab2 f282 	clz	r2, r2
 8000cf2:	b142      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	f1c2 0020 	rsb	r0, r2, #32
 8000cf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	4097      	lsls	r7, r2
 8000d00:	ea40 0c01 	orr.w	ip, r0, r1
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d10:	fa1f fe87 	uxth.w	lr, r7
 8000d14:	fb08 c116 	mls	r1, r8, r6, ip
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 8119 	bcs.w	8000f60 <__udivmoddi4+0x288>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8116 	bls.w	8000f60 <__udivmoddi4+0x288>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8105 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f240 8102 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d60:	3802      	subs	r0, #2
 8000d62:	443c      	add	r4, r7
 8000d64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d68:	eba4 040e 	sub.w	r4, r4, lr
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	b902      	cbnz	r2, 8000d82 <__udivmoddi4+0xaa>
 8000d80:	deff      	udf	#255	; 0xff
 8000d82:	fab2 f282 	clz	r2, r2
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d150      	bne.n	8000e2c <__udivmoddi4+0x154>
 8000d8a:	1bcb      	subs	r3, r1, r7
 8000d8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d90:	fa1f f887 	uxth.w	r8, r7
 8000d94:	2601      	movs	r6, #1
 8000d96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d9a:	0c21      	lsrs	r1, r4, #16
 8000d9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb08 f30c 	mul.w	r3, r8, ip
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0xe2>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	f200 80e9 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1ac9      	subs	r1, r1, r3
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x10c>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x10a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80d9 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e7bf      	b.n	8000d6e <__udivmoddi4+0x96>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0x12e>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80b1 	beq.w	8000f5a <__udivmoddi4+0x282>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x1cc>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0x140>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80b8 	bhi.w	8000f88 <__udivmoddi4+0x2b0>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	468c      	mov	ip, r1
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0a8      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000e26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e2a:	e7a5      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f603 	lsr.w	r6, r0, r3
 8000e34:	4097      	lsls	r7, r2
 8000e36:	fa01 f002 	lsl.w	r0, r1, r2
 8000e3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3e:	40d9      	lsrs	r1, r3
 8000e40:	4330      	orrs	r0, r6
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e48:	fa1f f887 	uxth.w	r8, r7
 8000e4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e54:	fb06 f108 	mul.w	r1, r6, r8
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5e:	d909      	bls.n	8000e74 <__udivmoddi4+0x19c>
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e66:	f080 808d 	bcs.w	8000f84 <__udivmoddi4+0x2ac>
 8000e6a:	4299      	cmp	r1, r3
 8000e6c:	f240 808a 	bls.w	8000f84 <__udivmoddi4+0x2ac>
 8000e70:	3e02      	subs	r6, #2
 8000e72:	443b      	add	r3, r7
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b281      	uxth	r1, r0
 8000e78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e84:	fb00 f308 	mul.w	r3, r0, r8
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x1c4>
 8000e8c:	1879      	adds	r1, r7, r1
 8000e8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e92:	d273      	bcs.n	8000f7c <__udivmoddi4+0x2a4>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d971      	bls.n	8000f7c <__udivmoddi4+0x2a4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4439      	add	r1, r7
 8000e9c:	1acb      	subs	r3, r1, r3
 8000e9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ea2:	e778      	b.n	8000d96 <__udivmoddi4+0xbe>
 8000ea4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ea8:	fa03 f406 	lsl.w	r4, r3, r6
 8000eac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000eb0:	431c      	orrs	r4, r3
 8000eb2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ebe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ec2:	431f      	orrs	r7, r3
 8000ec4:	0c3b      	lsrs	r3, r7, #16
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fa1f f884 	uxth.w	r8, r4
 8000ece:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ed2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ed6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eda:	458a      	cmp	sl, r1
 8000edc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x220>
 8000ee6:	1861      	adds	r1, r4, r1
 8000ee8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eec:	d248      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000eee:	458a      	cmp	sl, r1
 8000ef0:	d946      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000ef2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef6:	4421      	add	r1, r4
 8000ef8:	eba1 010a 	sub.w	r1, r1, sl
 8000efc:	b2bf      	uxth	r7, r7
 8000efe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f0a:	fb00 f808 	mul.w	r8, r0, r8
 8000f0e:	45b8      	cmp	r8, r7
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x24a>
 8000f12:	19e7      	adds	r7, r4, r7
 8000f14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f18:	d22e      	bcs.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1a:	45b8      	cmp	r8, r7
 8000f1c:	d92c      	bls.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	4427      	add	r7, r4
 8000f22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f26:	eba7 0708 	sub.w	r7, r7, r8
 8000f2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2e:	454f      	cmp	r7, r9
 8000f30:	46c6      	mov	lr, r8
 8000f32:	4649      	mov	r1, r9
 8000f34:	d31a      	bcc.n	8000f6c <__udivmoddi4+0x294>
 8000f36:	d017      	beq.n	8000f68 <__udivmoddi4+0x290>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x27a>
 8000f3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f46:	40f2      	lsrs	r2, r6
 8000f48:	ea4c 0202 	orr.w	r2, ip, r2
 8000f4c:	40f7      	lsrs	r7, r6
 8000f4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f52:	2600      	movs	r6, #0
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e70b      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6fd      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f68:	4543      	cmp	r3, r8
 8000f6a:	d2e5      	bcs.n	8000f38 <__udivmoddi4+0x260>
 8000f6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f70:	eb69 0104 	sbc.w	r1, r9, r4
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7df      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e7d2      	b.n	8000f22 <__udivmoddi4+0x24a>
 8000f7c:	4660      	mov	r0, ip
 8000f7e:	e78d      	b.n	8000e9c <__udivmoddi4+0x1c4>
 8000f80:	4681      	mov	r9, r0
 8000f82:	e7b9      	b.n	8000ef8 <__udivmoddi4+0x220>
 8000f84:	4666      	mov	r6, ip
 8000f86:	e775      	b.n	8000e74 <__udivmoddi4+0x19c>
 8000f88:	4630      	mov	r0, r6
 8000f8a:	e74a      	b.n	8000e22 <__udivmoddi4+0x14a>
 8000f8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f90:	4439      	add	r1, r7
 8000f92:	e713      	b.n	8000dbc <__udivmoddi4+0xe4>
 8000f94:	3802      	subs	r0, #2
 8000f96:	443c      	add	r4, r7
 8000f98:	e724      	b.n	8000de4 <__udivmoddi4+0x10c>
 8000f9a:	bf00      	nop

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <initFSMButton>:
static uint16_t number_port ;
static GPIO_TypeDef *GPIO_sel ;
static uint32_t tickstart = 0 ;


void initFSMButton(char p, uint8_t num_port){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	460a      	mov	r2, r1
 8000faa:	71fb      	strb	r3, [r7, #7]
 8000fac:	4613      	mov	r3, r2
 8000fae:	71bb      	strb	r3, [r7, #6]
	button_state = BUTTON_UP ;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <initFSMButton+0x2c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
	selectPortButton(p, num_port) ;
 8000fb6:	79ba      	ldrb	r2, [r7, #6]
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f807 	bl	8000fd0 <selectPortButton>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000208 	.word	0x20000208

08000fd0 <selectPortButton>:
 *
 * @param p: letra de puerto seleccionado
 * @param num_port: numero de puerto seleccionado
 *
 */
static void selectPortButton(char p, uint8_t num_port){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b092      	sub	sp, #72	; 0x48
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	460a      	mov	r2, r1
 8000fda:	71fb      	strb	r3, [r7, #7]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	71bb      	strb	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Pin = selectGPIOport(num_port);
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f97c 	bl	80012f8 <selectGPIOport>
 8001000:	4603      	mov	r3, r0
 8001002:	637b      	str	r3, [r7, #52]	; 0x34
	number_port = GPIO_InitStruct.Pin ;
 8001004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001006:	b29a      	uxth	r2, r3
 8001008:	4bad      	ldr	r3, [pc, #692]	; (80012c0 <selectPortButton+0x2f0>)
 800100a:	801a      	strh	r2, [r3, #0]

	switch(p){
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	3b41      	subs	r3, #65	; 0x41
 8001010:	2b2a      	cmp	r3, #42	; 0x2a
 8001012:	f200 8150 	bhi.w	80012b6 <selectPortButton+0x2e6>
 8001016:	a201      	add	r2, pc, #4	; (adr r2, 800101c <selectPortButton+0x4c>)
 8001018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101c:	080010c9 	.word	0x080010c9
 8001020:	080010f9 	.word	0x080010f9
 8001024:	0800112d 	.word	0x0800112d
 8001028:	0800115d 	.word	0x0800115d
 800102c:	08001191 	.word	0x08001191
 8001030:	080011bb 	.word	0x080011bb
 8001034:	080011e5 	.word	0x080011e5
 8001038:	0800120f 	.word	0x0800120f
 800103c:	08001239 	.word	0x08001239
 8001040:	08001263 	.word	0x08001263
 8001044:	0800128d 	.word	0x0800128d
 8001048:	080012b7 	.word	0x080012b7
 800104c:	080012b7 	.word	0x080012b7
 8001050:	080012b7 	.word	0x080012b7
 8001054:	080012b7 	.word	0x080012b7
 8001058:	080012b7 	.word	0x080012b7
 800105c:	080012b7 	.word	0x080012b7
 8001060:	080012b7 	.word	0x080012b7
 8001064:	080012b7 	.word	0x080012b7
 8001068:	080012b7 	.word	0x080012b7
 800106c:	080012b7 	.word	0x080012b7
 8001070:	080012b7 	.word	0x080012b7
 8001074:	080012b7 	.word	0x080012b7
 8001078:	080012b7 	.word	0x080012b7
 800107c:	080012b7 	.word	0x080012b7
 8001080:	080012b7 	.word	0x080012b7
 8001084:	080012b7 	.word	0x080012b7
 8001088:	080012b7 	.word	0x080012b7
 800108c:	080012b7 	.word	0x080012b7
 8001090:	080012b7 	.word	0x080012b7
 8001094:	080012b7 	.word	0x080012b7
 8001098:	080012b7 	.word	0x080012b7
 800109c:	080010c9 	.word	0x080010c9
 80010a0:	080010f9 	.word	0x080010f9
 80010a4:	0800112d 	.word	0x0800112d
 80010a8:	0800115d 	.word	0x0800115d
 80010ac:	08001191 	.word	0x08001191
 80010b0:	080011bb 	.word	0x080011bb
 80010b4:	080011e5 	.word	0x080011e5
 80010b8:	0800120f 	.word	0x0800120f
 80010bc:	08001239 	.word	0x08001239
 80010c0:	08001263 	.word	0x08001263
 80010c4:	0800128d 	.word	0x0800128d
	case 'a':
	case 'A':
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	633b      	str	r3, [r7, #48]	; 0x30
 80010cc:	4b7d      	ldr	r3, [pc, #500]	; (80012c4 <selectPortButton+0x2f4>)
 80010ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d0:	4a7c      	ldr	r2, [pc, #496]	; (80012c4 <selectPortButton+0x2f4>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6313      	str	r3, [r2, #48]	; 0x30
 80010d8:	4b7a      	ldr	r3, [pc, #488]	; (80012c4 <selectPortButton+0x2f4>)
 80010da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	633b      	str	r3, [r7, #48]	; 0x30
 80010e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    	GPIO_sel = GPIOA ;
 80010e4:	4b78      	ldr	r3, [pc, #480]	; (80012c8 <selectPortButton+0x2f8>)
 80010e6:	4a79      	ldr	r2, [pc, #484]	; (80012cc <selectPortButton+0x2fc>)
 80010e8:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_Init(&GPIO_sel, &GPIO_InitStruct);
    	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010ee:	4619      	mov	r1, r3
 80010f0:	4876      	ldr	r0, [pc, #472]	; (80012cc <selectPortButton+0x2fc>)
 80010f2:	f001 f9f3 	bl	80024dc <HAL_GPIO_Init>

    	break ;
 80010f6:	e0df      	b.n	80012b8 <selectPortButton+0x2e8>
	case 'b':
	case 'B':
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80010f8:	2300      	movs	r3, #0
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010fc:	4b71      	ldr	r3, [pc, #452]	; (80012c4 <selectPortButton+0x2f4>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	4a70      	ldr	r2, [pc, #448]	; (80012c4 <selectPortButton+0x2f4>)
 8001102:	f043 0302 	orr.w	r3, r3, #2
 8001106:	6313      	str	r3, [r2, #48]	; 0x30
 8001108:	4b6e      	ldr	r3, [pc, #440]	; (80012c4 <selectPortButton+0x2f4>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		GPIO_sel = GPIOB ;
 8001114:	4b6c      	ldr	r3, [pc, #432]	; (80012c8 <selectPortButton+0x2f8>)
 8001116:	4a6e      	ldr	r2, [pc, #440]	; (80012d0 <selectPortButton+0x300>)
 8001118:	601a      	str	r2, [r3, #0]
		HAL_GPIO_Init(GPIO_sel, &GPIO_InitStruct);
 800111a:	4b6b      	ldr	r3, [pc, #428]	; (80012c8 <selectPortButton+0x2f8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f001 f9d9 	bl	80024dc <HAL_GPIO_Init>

		break ;
 800112a:	e0c5      	b.n	80012b8 <selectPortButton+0x2e8>
	case 'c':
	case 'C':
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001130:	4b64      	ldr	r3, [pc, #400]	; (80012c4 <selectPortButton+0x2f4>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	4a63      	ldr	r2, [pc, #396]	; (80012c4 <selectPortButton+0x2f4>)
 8001136:	f043 0304 	orr.w	r3, r3, #4
 800113a:	6313      	str	r3, [r2, #48]	; 0x30
 800113c:	4b61      	ldr	r3, [pc, #388]	; (80012c4 <selectPortButton+0x2f4>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
 8001146:	6abb      	ldr	r3, [r7, #40]	; 0x28
		GPIO_sel = GPIOC ;
 8001148:	4b5f      	ldr	r3, [pc, #380]	; (80012c8 <selectPortButton+0x2f8>)
 800114a:	4a62      	ldr	r2, [pc, #392]	; (80012d4 <selectPortButton+0x304>)
 800114c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001152:	4619      	mov	r1, r3
 8001154:	485f      	ldr	r0, [pc, #380]	; (80012d4 <selectPortButton+0x304>)
 8001156:	f001 f9c1 	bl	80024dc <HAL_GPIO_Init>

		break ;
 800115a:	e0ad      	b.n	80012b8 <selectPortButton+0x2e8>
	case 'd':
	case 'D':
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800115c:	2300      	movs	r3, #0
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
 8001160:	4b58      	ldr	r3, [pc, #352]	; (80012c4 <selectPortButton+0x2f4>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001164:	4a57      	ldr	r2, [pc, #348]	; (80012c4 <selectPortButton+0x2f4>)
 8001166:	f043 0308 	orr.w	r3, r3, #8
 800116a:	6313      	str	r3, [r2, #48]	; 0x30
 800116c:	4b55      	ldr	r3, [pc, #340]	; (80012c4 <selectPortButton+0x2f4>)
 800116e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001170:	f003 0308 	and.w	r3, r3, #8
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		GPIO_sel = GPIOD ;
 8001178:	4b53      	ldr	r3, [pc, #332]	; (80012c8 <selectPortButton+0x2f8>)
 800117a:	4a57      	ldr	r2, [pc, #348]	; (80012d8 <selectPortButton+0x308>)
 800117c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_Init(GPIO_sel, &GPIO_InitStruct);
 800117e:	4b52      	ldr	r3, [pc, #328]	; (80012c8 <selectPortButton+0x2f8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f001 f9a7 	bl	80024dc <HAL_GPIO_Init>

		break ;
 800118e:	e093      	b.n	80012b8 <selectPortButton+0x2e8>
	case 'e':
	case 'E':
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
 8001194:	4b4b      	ldr	r3, [pc, #300]	; (80012c4 <selectPortButton+0x2f4>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	4a4a      	ldr	r2, [pc, #296]	; (80012c4 <selectPortButton+0x2f4>)
 800119a:	f043 0310 	orr.w	r3, r3, #16
 800119e:	6313      	str	r3, [r2, #48]	; 0x30
 80011a0:	4b48      	ldr	r3, [pc, #288]	; (80012c4 <selectPortButton+0x2f4>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a4:	f003 0310 	and.w	r3, r3, #16
 80011a8:	623b      	str	r3, [r7, #32]
 80011aa:	6a3b      	ldr	r3, [r7, #32]
    	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011b0:	4619      	mov	r1, r3
 80011b2:	484a      	ldr	r0, [pc, #296]	; (80012dc <selectPortButton+0x30c>)
 80011b4:	f001 f992 	bl	80024dc <HAL_GPIO_Init>

		break ;
 80011b8:	e07e      	b.n	80012b8 <selectPortButton+0x2e8>
	case 'f':
	case 'F':
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
 80011be:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <selectPortButton+0x2f4>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a40      	ldr	r2, [pc, #256]	; (80012c4 <selectPortButton+0x2f4>)
 80011c4:	f043 0320 	orr.w	r3, r3, #32
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <selectPortButton+0x2f4>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0320 	and.w	r3, r3, #32
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	69fb      	ldr	r3, [r7, #28]
    	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011da:	4619      	mov	r1, r3
 80011dc:	4840      	ldr	r0, [pc, #256]	; (80012e0 <selectPortButton+0x310>)
 80011de:	f001 f97d 	bl	80024dc <HAL_GPIO_Init>

		break ;
 80011e2:	e069      	b.n	80012b8 <selectPortButton+0x2e8>
	case 'g':
	case 'G':
		__HAL_RCC_GPIOG_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
 80011e8:	4b36      	ldr	r3, [pc, #216]	; (80012c4 <selectPortButton+0x2f4>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	4a35      	ldr	r2, [pc, #212]	; (80012c4 <selectPortButton+0x2f4>)
 80011ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011f2:	6313      	str	r3, [r2, #48]	; 0x30
 80011f4:	4b33      	ldr	r3, [pc, #204]	; (80012c4 <selectPortButton+0x2f4>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011fc:	61bb      	str	r3, [r7, #24]
 80011fe:	69bb      	ldr	r3, [r7, #24]
    	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001200:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001204:	4619      	mov	r1, r3
 8001206:	4837      	ldr	r0, [pc, #220]	; (80012e4 <selectPortButton+0x314>)
 8001208:	f001 f968 	bl	80024dc <HAL_GPIO_Init>

		break ;
 800120c:	e054      	b.n	80012b8 <selectPortButton+0x2e8>
	case 'h':
	case 'H':
		__HAL_RCC_GPIOH_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	4b2c      	ldr	r3, [pc, #176]	; (80012c4 <selectPortButton+0x2f4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a2b      	ldr	r2, [pc, #172]	; (80012c4 <selectPortButton+0x2f4>)
 8001218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <selectPortButton+0x2f4>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	697b      	ldr	r3, [r7, #20]
    	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800122a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800122e:	4619      	mov	r1, r3
 8001230:	482d      	ldr	r0, [pc, #180]	; (80012e8 <selectPortButton+0x318>)
 8001232:	f001 f953 	bl	80024dc <HAL_GPIO_Init>

		break ;
 8001236:	e03f      	b.n	80012b8 <selectPortButton+0x2e8>
	case 'i':
	case 'I':
		__HAL_RCC_GPIOI_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <selectPortButton+0x2f4>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001240:	4a20      	ldr	r2, [pc, #128]	; (80012c4 <selectPortButton+0x2f4>)
 8001242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001246:	6313      	str	r3, [r2, #48]	; 0x30
 8001248:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <selectPortButton+0x2f4>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	693b      	ldr	r3, [r7, #16]
    	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001254:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001258:	4619      	mov	r1, r3
 800125a:	4824      	ldr	r0, [pc, #144]	; (80012ec <selectPortButton+0x31c>)
 800125c:	f001 f93e 	bl	80024dc <HAL_GPIO_Init>

		break ;
 8001260:	e02a      	b.n	80012b8 <selectPortButton+0x2e8>
	case 'j':
	case 'J':
		__HAL_RCC_GPIOJ_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <selectPortButton+0x2f4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a16      	ldr	r2, [pc, #88]	; (80012c4 <selectPortButton+0x2f4>)
 800126c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <selectPortButton+0x2f4>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    	HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800127e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001282:	4619      	mov	r1, r3
 8001284:	481a      	ldr	r0, [pc, #104]	; (80012f0 <selectPortButton+0x320>)
 8001286:	f001 f929 	bl	80024dc <HAL_GPIO_Init>

		break ;
 800128a:	e015      	b.n	80012b8 <selectPortButton+0x2e8>
	case 'k':
	case 'K':
		__HAL_RCC_GPIOK_CLK_ENABLE();
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <selectPortButton+0x2f4>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <selectPortButton+0x2f4>)
 8001296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800129a:	6313      	str	r3, [r2, #48]	; 0x30
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <selectPortButton+0x2f4>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
    	HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80012a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012ac:	4619      	mov	r1, r3
 80012ae:	4811      	ldr	r0, [pc, #68]	; (80012f4 <selectPortButton+0x324>)
 80012b0:	f001 f914 	bl	80024dc <HAL_GPIO_Init>

		break ;
 80012b4:	e000      	b.n	80012b8 <selectPortButton+0x2e8>
	default:
		//management of error
		break ;
 80012b6:	bf00      	nop
	}

}
 80012b8:	bf00      	nop
 80012ba:	3748      	adds	r7, #72	; 0x48
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	2000020a 	.word	0x2000020a
 80012c4:	40023800 	.word	0x40023800
 80012c8:	2000020c 	.word	0x2000020c
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020c00 	.word	0x40020c00
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40021400 	.word	0x40021400
 80012e4:	40021800 	.word	0x40021800
 80012e8:	40021c00 	.word	0x40021c00
 80012ec:	40022000 	.word	0x40022000
 80012f0:	40022400 	.word	0x40022400
 80012f4:	40022800 	.word	0x40022800

080012f8 <selectGPIOport>:

static uint32_t selectGPIOport(uint8_t numport){
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
	uint32_t responsePortNumber ;
	switch(numport){
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b0f      	cmp	r3, #15
 8001306:	d85b      	bhi.n	80013c0 <selectGPIOport+0xc8>
 8001308:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <selectGPIOport+0x18>)
 800130a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130e:	bf00      	nop
 8001310:	08001351 	.word	0x08001351
 8001314:	08001357 	.word	0x08001357
 8001318:	0800135d 	.word	0x0800135d
 800131c:	08001363 	.word	0x08001363
 8001320:	08001369 	.word	0x08001369
 8001324:	0800136f 	.word	0x0800136f
 8001328:	08001375 	.word	0x08001375
 800132c:	0800137b 	.word	0x0800137b
 8001330:	08001381 	.word	0x08001381
 8001334:	08001389 	.word	0x08001389
 8001338:	08001391 	.word	0x08001391
 800133c:	08001399 	.word	0x08001399
 8001340:	080013a1 	.word	0x080013a1
 8001344:	080013a9 	.word	0x080013a9
 8001348:	080013b1 	.word	0x080013b1
 800134c:	080013b9 	.word	0x080013b9
	case 0:
		responsePortNumber = GPIO_PIN_0 ;
 8001350:	2301      	movs	r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
		break ;
 8001354:	e038      	b.n	80013c8 <selectGPIOport+0xd0>
	case 1:
		responsePortNumber = GPIO_PIN_1 ;
 8001356:	2302      	movs	r3, #2
 8001358:	60fb      	str	r3, [r7, #12]
		break ;
 800135a:	e035      	b.n	80013c8 <selectGPIOport+0xd0>
	case 2:
		responsePortNumber = GPIO_PIN_2 ;
 800135c:	2304      	movs	r3, #4
 800135e:	60fb      	str	r3, [r7, #12]
		break ;
 8001360:	e032      	b.n	80013c8 <selectGPIOport+0xd0>
	case 3:
		responsePortNumber = GPIO_PIN_3 ;
 8001362:	2308      	movs	r3, #8
 8001364:	60fb      	str	r3, [r7, #12]
		break ;
 8001366:	e02f      	b.n	80013c8 <selectGPIOport+0xd0>
	case 4:
		responsePortNumber = GPIO_PIN_4 ;
 8001368:	2310      	movs	r3, #16
 800136a:	60fb      	str	r3, [r7, #12]
		break ;
 800136c:	e02c      	b.n	80013c8 <selectGPIOport+0xd0>
	case 5:
		responsePortNumber = GPIO_PIN_5 ;
 800136e:	2320      	movs	r3, #32
 8001370:	60fb      	str	r3, [r7, #12]
		break ;
 8001372:	e029      	b.n	80013c8 <selectGPIOport+0xd0>
	case 6:
		responsePortNumber = GPIO_PIN_6 ;
 8001374:	2340      	movs	r3, #64	; 0x40
 8001376:	60fb      	str	r3, [r7, #12]
		break ;
 8001378:	e026      	b.n	80013c8 <selectGPIOport+0xd0>
	case 7:
		responsePortNumber = GPIO_PIN_7 ;
 800137a:	2380      	movs	r3, #128	; 0x80
 800137c:	60fb      	str	r3, [r7, #12]
		break ;
 800137e:	e023      	b.n	80013c8 <selectGPIOport+0xd0>
	case 8:
		responsePortNumber = GPIO_PIN_8 ;
 8001380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001384:	60fb      	str	r3, [r7, #12]
		break ;
 8001386:	e01f      	b.n	80013c8 <selectGPIOport+0xd0>
	case 9:
		responsePortNumber = GPIO_PIN_9 ;
 8001388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800138c:	60fb      	str	r3, [r7, #12]
		break ;
 800138e:	e01b      	b.n	80013c8 <selectGPIOport+0xd0>
	case 10:
		responsePortNumber = GPIO_PIN_10 ;
 8001390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001394:	60fb      	str	r3, [r7, #12]
		break ;
 8001396:	e017      	b.n	80013c8 <selectGPIOport+0xd0>
	case 11:
		responsePortNumber = GPIO_PIN_11 ;
 8001398:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800139c:	60fb      	str	r3, [r7, #12]
		break ;
 800139e:	e013      	b.n	80013c8 <selectGPIOport+0xd0>
	case 12:
		responsePortNumber = GPIO_PIN_12 ;
 80013a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a4:	60fb      	str	r3, [r7, #12]
		break ;
 80013a6:	e00f      	b.n	80013c8 <selectGPIOport+0xd0>
	case 13:
		responsePortNumber = GPIO_PIN_13;
 80013a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ac:	60fb      	str	r3, [r7, #12]
		break ;
 80013ae:	e00b      	b.n	80013c8 <selectGPIOport+0xd0>
	case 14:
		responsePortNumber = GPIO_PIN_14 ;
 80013b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013b4:	60fb      	str	r3, [r7, #12]
		break ;
 80013b6:	e007      	b.n	80013c8 <selectGPIOport+0xd0>
	case 15:
		responsePortNumber = GPIO_PIN_15 ;
 80013b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013bc:	60fb      	str	r3, [r7, #12]
		break ;
 80013be:	e003      	b.n	80013c8 <selectGPIOport+0xd0>
	default:
		responsePortNumber = -1 ;
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
 80013c4:	60fb      	str	r3, [r7, #12]
		break ;
 80013c6:	bf00      	nop
	}
	return responsePortNumber ;
 80013c8:	68fb      	ldr	r3, [r7, #12]

}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop

080013d8 <debounceFSM_update>:
 * Se implementa una máquina de estados de la siguientes estados
 * Estado inicial: BUTTON_UP
 * BUTTON_UP <-> BUTTON_FALLING <->BUTTON_DOWN <-> BUTTON_RAISING ->BUTTON_UP
 *
 */
void debounceFSM_update(){
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	// Devuelve 0 sin presionar, 1  con boton presionado


	switch(button_state)
 80013dc:	4b3a      	ldr	r3, [pc, #232]	; (80014c8 <debounceFSM_update+0xf0>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d865      	bhi.n	80014b0 <debounceFSM_update+0xd8>
 80013e4:	a201      	add	r2, pc, #4	; (adr r2, 80013ec <debounceFSM_update+0x14>)
 80013e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ea:	bf00      	nop
 80013ec:	080013fd 	.word	0x080013fd
 80013f0:	08001425 	.word	0x08001425
 80013f4:	0800145d 	.word	0x0800145d
 80013f8:	08001481 	.word	0x08001481
	{
		case BUTTON_UP:


			if (HAL_GPIO_ReadPin(GPIO_sel,number_port) ==   GPIO_PIN_RESET )
 80013fc:	4b33      	ldr	r3, [pc, #204]	; (80014cc <debounceFSM_update+0xf4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a33      	ldr	r2, [pc, #204]	; (80014d0 <debounceFSM_update+0xf8>)
 8001402:	8812      	ldrh	r2, [r2, #0]
 8001404:	4611      	mov	r1, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f001 fa14 	bl	8002834 <HAL_GPIO_ReadPin>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d152      	bne.n	80014b8 <debounceFSM_update+0xe0>
			{
				button_state = BUTTON_FALLING ;
 8001412:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <debounceFSM_update+0xf0>)
 8001414:	2201      	movs	r2, #1
 8001416:	701a      	strb	r2, [r3, #0]
				tickstart = HAL_GetTick() ;
 8001418:	f000 ff4a 	bl	80022b0 <HAL_GetTick>
 800141c:	4603      	mov	r3, r0
 800141e:	4a2d      	ldr	r2, [pc, #180]	; (80014d4 <debounceFSM_update+0xfc>)
 8001420:	6013      	str	r3, [r2, #0]
			}
			break ;
 8001422:	e049      	b.n	80014b8 <debounceFSM_update+0xe0>
		case BUTTON_FALLING:
			//espera 40 ms y lee el estado del boton
			if (HAL_GetTick() - tickstart >TIME_FALLING_READ)
 8001424:	f000 ff44 	bl	80022b0 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <debounceFSM_update+0xfc>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b28      	cmp	r3, #40	; 0x28
 8001432:	d943      	bls.n	80014bc <debounceFSM_update+0xe4>
			{
				//GPIO_sel ;
				//HAL_GPIO_ReadPin()
				if (HAL_GPIO_ReadPin(GPIOA,number_port) ==   GPIO_PIN_RESET )
 8001434:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <debounceFSM_update+0xf8>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	4827      	ldr	r0, [pc, #156]	; (80014d8 <debounceFSM_update+0x100>)
 800143c:	f001 f9fa 	bl	8002834 <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d106      	bne.n	8001454 <debounceFSM_update+0x7c>
				{
					button_state = BUTTON_DOWN; // SE PRESIONO EL BOTON
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <debounceFSM_update+0xf0>)
 8001448:	2202      	movs	r2, #2
 800144a:	701a      	strb	r2, [r3, #0]
					is_press_button = true ;
 800144c:	4b23      	ldr	r3, [pc, #140]	; (80014dc <debounceFSM_update+0x104>)
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
					// ACCIÓN A REALIZAR !
				}else{
					button_state = BUTTON_UP ;
				}
			}
			break ;
 8001452:	e033      	b.n	80014bc <debounceFSM_update+0xe4>
					button_state = BUTTON_UP ;
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <debounceFSM_update+0xf0>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
			break ;
 800145a:	e02f      	b.n	80014bc <debounceFSM_update+0xe4>
		case BUTTON_DOWN:
			if (HAL_GPIO_ReadPin(GPIOA,number_port) ==   GPIO_PIN_SET )
 800145c:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <debounceFSM_update+0xf8>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	481d      	ldr	r0, [pc, #116]	; (80014d8 <debounceFSM_update+0x100>)
 8001464:	f001 f9e6 	bl	8002834 <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
 800146a:	2b01      	cmp	r3, #1
 800146c:	d128      	bne.n	80014c0 <debounceFSM_update+0xe8>
			{

				button_state = BUTTON_RAISING ;
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <debounceFSM_update+0xf0>)
 8001470:	2203      	movs	r2, #3
 8001472:	701a      	strb	r2, [r3, #0]
				tickstart = HAL_GetTick() ;
 8001474:	f000 ff1c 	bl	80022b0 <HAL_GetTick>
 8001478:	4603      	mov	r3, r0
 800147a:	4a16      	ldr	r2, [pc, #88]	; (80014d4 <debounceFSM_update+0xfc>)
 800147c:	6013      	str	r3, [r2, #0]
			}
			break ;
 800147e:	e01f      	b.n	80014c0 <debounceFSM_update+0xe8>
		case BUTTON_RAISING:
			if (HAL_GetTick() - tickstart >TIME_FALLING_READ){
 8001480:	f000 ff16 	bl	80022b0 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <debounceFSM_update+0xfc>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b28      	cmp	r3, #40	; 0x28
 800148e:	d90f      	bls.n	80014b0 <debounceFSM_update+0xd8>
				if (HAL_GPIO_ReadPin(GPIOA,number_port) ==   GPIO_PIN_SET ){
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <debounceFSM_update+0xf8>)
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	4810      	ldr	r0, [pc, #64]	; (80014d8 <debounceFSM_update+0x100>)
 8001498:	f001 f9cc 	bl	8002834 <HAL_GPIO_ReadPin>
 800149c:	4603      	mov	r3, r0
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d103      	bne.n	80014aa <debounceFSM_update+0xd2>
					button_state = BUTTON_UP ;
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <debounceFSM_update+0xf0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e002      	b.n	80014b0 <debounceFSM_update+0xd8>
				}else {
					button_state = BUTTON_DOWN ;
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <debounceFSM_update+0xf0>)
 80014ac:	2202      	movs	r2, #2
 80014ae:	701a      	strb	r2, [r3, #0]
				}
			}
		default:
			button_state = BUTTON_UP ; // ESTADO DE INICIO !
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <debounceFSM_update+0xf0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
		break ;
 80014b6:	e004      	b.n	80014c2 <debounceFSM_update+0xea>
			break ;
 80014b8:	bf00      	nop
 80014ba:	e002      	b.n	80014c2 <debounceFSM_update+0xea>
			break ;
 80014bc:	bf00      	nop
 80014be:	e000      	b.n	80014c2 <debounceFSM_update+0xea>
			break ;
 80014c0:	bf00      	nop

	}

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000208 	.word	0x20000208
 80014cc:	2000020c 	.word	0x2000020c
 80014d0:	2000020a 	.word	0x2000020a
 80014d4:	20000210 	.word	0x20000210
 80014d8:	40020000 	.word	0x40020000
 80014dc:	20000209 	.word	0x20000209

080014e0 <getPressButton>:



bool getPressButton(void ){
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
	bool value_press = is_press_button ;
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <getPressButton+0x28>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	71fb      	strb	r3, [r7, #7]
	if (value_press == true){
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d002      	beq.n	80014f8 <getPressButton+0x18>
		is_press_button = false ;
 80014f2:	4b05      	ldr	r3, [pc, #20]	; (8001508 <getPressButton+0x28>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
	}

	return value_press ;
 80014f8:	79fb      	ldrb	r3, [r7, #7]



}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000209 	.word	0x20000209

0800150c <initFSM>:
	SENDSERIALST
}handle_FSM ;

static handle_FSM FSM ; //FIXME: cambiar nombre por un nombre mas representativo

void initFSM(void){
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	FSM = RTCCONFIG ;
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <initFSM+0x14>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	20000214 	.word	0x20000214

08001524 <FSM_loop>:


void FSM_loop(){
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	switch(FSM){
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <FSM_loop+0x60>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d01b      	beq.n	8001568 <FSM_loop+0x44>
 8001530:	2b02      	cmp	r3, #2
 8001532:	dc1f      	bgt.n	8001574 <FSM_loop+0x50>
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <FSM_loop+0x1a>
 8001538:	2b01      	cmp	r3, #1
 800153a:	d00a      	beq.n	8001552 <FSM_loop+0x2e>
 800153c:	e01a      	b.n	8001574 <FSM_loop+0x50>
	case RTCCONFIG:
		FSM = WAITBUTTON ;
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <FSM_loop+0x60>)
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
		rtcInit() ;
 8001544:	f000 f820 	bl	8001588 <rtcInit>
		initFSMButton('a', 15) ;
 8001548:	210f      	movs	r1, #15
 800154a:	2061      	movs	r0, #97	; 0x61
 800154c:	f7ff fd28 	bl	8000fa0 <initFSMButton>
		break ;
 8001550:	e015      	b.n	800157e <FSM_loop+0x5a>
	case WAITBUTTON:
		//uartSendString("updateWAIT\r\n") ;

		debounceFSM_update() ;
 8001552:	f7ff ff41 	bl	80013d8 <debounceFSM_update>
		if (getPressButton() == true){
 8001556:	f7ff ffc3 	bl	80014e0 <getPressButton>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00d      	beq.n	800157c <FSM_loop+0x58>
			FSM = SENDSERIALST ;
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <FSM_loop+0x60>)
 8001562:	2202      	movs	r2, #2
 8001564:	701a      	strb	r2, [r3, #0]

		}
		break ;
 8001566:	e009      	b.n	800157c <FSM_loop+0x58>
	case SENDSERIALST:
		sendSiderealTime() ;
 8001568:	f000 fc48 	bl	8001dfc <sendSiderealTime>
		// CODE FOR SEND UART
		FSM = WAITBUTTON ;
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <FSM_loop+0x60>)
 800156e:	2201      	movs	r2, #1
 8001570:	701a      	strb	r2, [r3, #0]
		break ;
 8001572:	e004      	b.n	800157e <FSM_loop+0x5a>
	default:

		FSM = RTCCONFIG ;
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <FSM_loop+0x60>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
		break  ;
 800157a:	e000      	b.n	800157e <FSM_loop+0x5a>
		break ;
 800157c:	bf00      	nop
	}

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000214 	.word	0x20000214

08001588 <rtcInit>:
 * @brief: Se realiza el inicio del RTC a partir de las macros definidas en la HAL de STM32.
 * 		   Se llama a la funcion setDayAndHour para realizar la carga de datos en el RTC.
 * 		   Estos datos que se cargan es la fecha de compilación del sistema.
 */
void rtcInit()
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
	BSP_LED_Init(LED1) ;
 800158e:	2000      	movs	r0, #0
 8001590:	f000 fc80 	bl	8001e94 <BSP_LED_Init>
	BSP_LED_Init(LED2) ;
 8001594:	2001      	movs	r0, #1
 8001596:	f000 fc7d 	bl	8001e94 <BSP_LED_Init>
	// HABILITA EL DOMINIO DE BACKUP PARA QUE EL SISTEMA RTC PUEDA SER
	// USADO.
	__HAL_RCC_PWR_CLK_ENABLE() ;
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b22      	ldr	r3, [pc, #136]	; (8001628 <rtcInit+0xa0>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a21      	ldr	r2, [pc, #132]	; (8001628 <rtcInit+0xa0>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b1f      	ldr	r3, [pc, #124]	; (8001628 <rtcInit+0xa0>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
	HAL_PWR_EnableBkUpAccess() ;
 80015b6:	f001 f9e3 	bl	8002980 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE) ;
 80015ba:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <rtcInit+0xa0>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	4a1a      	ldr	r2, [pc, #104]	; (8001628 <rtcInit+0xa0>)
 80015c0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80015c4:	6093      	str	r3, [r2, #8]
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <rtcInit+0xa0>)
 80015c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ca:	4a17      	ldr	r2, [pc, #92]	; (8001628 <rtcInit+0xa0>)
 80015cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d0:	6713      	str	r3, [r2, #112]	; 0x70
	__HAL_RCC_RTC_ENABLE();
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <rtcInit+0xa4>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	601a      	str	r2, [r3, #0]
	rtc.Instance = RTC;
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <rtcInit+0xa8>)
 80015da:	4a16      	ldr	r2, [pc, #88]	; (8001634 <rtcInit+0xac>)
 80015dc:	601a      	str	r2, [r3, #0]
	rtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015de:	4b14      	ldr	r3, [pc, #80]	; (8001630 <rtcInit+0xa8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	605a      	str	r2, [r3, #4]
	rtc.Init.AsynchPrediv = 127;
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <rtcInit+0xa8>)
 80015e6:	227f      	movs	r2, #127	; 0x7f
 80015e8:	609a      	str	r2, [r3, #8]
	rtc.Init.SynchPrediv = 255;
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <rtcInit+0xa8>)
 80015ec:	22ff      	movs	r2, #255	; 0xff
 80015ee:	60da      	str	r2, [r3, #12]
	rtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <rtcInit+0xa8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
	rtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <rtcInit+0xa8>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	615a      	str	r2, [r3, #20]
	rtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <rtcInit+0xa8>)
 80015fe:	2200      	movs	r2, #0
 8001600:	619a      	str	r2, [r3, #24]
	// verifica si el RTC se inicia correctamente
	if (HAL_RTC_Init(&rtc) != HAL_OK)
 8001602:	480b      	ldr	r0, [pc, #44]	; (8001630 <rtcInit+0xa8>)
 8001604:	f001 fe94 	bl	8003330 <HAL_RTC_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <rtcInit+0x8c>
	{
		BSP_LED_On(LED2) ;
 800160e:	2001      	movs	r0, #1
 8001610:	f000 fc90 	bl	8001f34 <BSP_LED_On>

	}

	setDayAndHour() ;
 8001614:	f000 f810 	bl	8001638 <setDayAndHour>
	BSP_LED_On(LED1) ;
 8001618:	2000      	movs	r0, #0
 800161a:	f000 fc8b 	bl	8001f34 <BSP_LED_On>

}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800
 800162c:	42470e3c 	.word	0x42470e3c
 8001630:	20000218 	.word	0x20000218
 8001634:	40002800 	.word	0x40002800

08001638 <setDayAndHour>:
 * que devuelve el número de mes que se realizó la compilación.
 *
 *
 */
static void setDayAndHour(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0

	  RTC_TimeTypeDef sTime = {0};
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 800164c:	2300      	movs	r3, #0
 800164e:	603b      	str	r3, [r7, #0]
	  // Se obtiene la hora de compilación y se carga como valor inicial en el RTC.
	  // Dado que __TIME__[0] ... son variables de tipo char, se le resta 0x30 para obtener
	  // el entero correspondiente.
	  sTime.Hours   = (__TIME__[0] - 0x30)*DECIMAL_INT + (__TIME__[1] - CHAR_TO_INT)  ;
 8001650:	2332      	movs	r3, #50	; 0x32
 8001652:	3b30      	subs	r3, #48	; 0x30
 8001654:	b2db      	uxtb	r3, r3
 8001656:	461a      	mov	r2, r3
 8001658:	0092      	lsls	r2, r2, #2
 800165a:	4413      	add	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2230      	movs	r2, #48	; 0x30
 8001662:	4413      	add	r3, r2
 8001664:	b2db      	uxtb	r3, r3
 8001666:	3b30      	subs	r3, #48	; 0x30
 8001668:	b2db      	uxtb	r3, r3
 800166a:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = (__TIME__[3] - 0x30)*DECIMAL_INT + (__TIME__[4] - CHAR_TO_INT) ;
 800166c:	2335      	movs	r3, #53	; 0x35
 800166e:	3b30      	subs	r3, #48	; 0x30
 8001670:	b2db      	uxtb	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	0092      	lsls	r2, r2, #2
 8001676:	4413      	add	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2231      	movs	r2, #49	; 0x31
 800167e:	4413      	add	r3, r2
 8001680:	b2db      	uxtb	r3, r3
 8001682:	3b30      	subs	r3, #48	; 0x30
 8001684:	b2db      	uxtb	r3, r3
 8001686:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = (__TIME__[3] - 0x30)*DECIMAL_INT + (__TIME__[4] - CHAR_TO_INT) ;
 8001688:	2335      	movs	r3, #53	; 0x35
 800168a:	3b30      	subs	r3, #48	; 0x30
 800168c:	b2db      	uxtb	r3, r3
 800168e:	461a      	mov	r2, r3
 8001690:	0092      	lsls	r2, r2, #2
 8001692:	4413      	add	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2231      	movs	r2, #49	; 0x31
 800169a:	4413      	add	r3, r2
 800169c:	b2db      	uxtb	r3, r3
 800169e:	3b30      	subs	r3, #48	; 0x30
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	71bb      	strb	r3, [r7, #6]
	  sTime.TimeFormat = RTC_HOURFORMAT_24;
 80016a4:	2300      	movs	r3, #0
 80016a6:	71fb      	strb	r3, [r7, #7]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_SET; // DEPRECATED ! ??
 80016ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016b0:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&rtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2200      	movs	r2, #0
 80016b6:	4619      	mov	r1, r3
 80016b8:	482e      	ldr	r0, [pc, #184]	; (8001774 <setDayAndHour+0x13c>)
 80016ba:	f001 fed4 	bl	8003466 <HAL_RTC_SetTime>
	  {
	     //uartSendString("\r\nerror set Time\r\n") ;
	   }
	   // FECHA EN FORMATO J2000: (1° de enero del año 2000, 12:00:00 GMT)
	   sDate.Month = MONTH_COMPILATION ;
 80016be:	2372      	movs	r3, #114	; 0x72
 80016c0:	2b6e      	cmp	r3, #110	; 0x6e
 80016c2:	d106      	bne.n	80016d2 <setDayAndHour+0x9a>
 80016c4:	2370      	movs	r3, #112	; 0x70
 80016c6:	2b61      	cmp	r3, #97	; 0x61
 80016c8:	d101      	bne.n	80016ce <setDayAndHour+0x96>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e02f      	b.n	800172e <setDayAndHour+0xf6>
 80016ce:	2306      	movs	r3, #6
 80016d0:	e02d      	b.n	800172e <setDayAndHour+0xf6>
 80016d2:	2372      	movs	r3, #114	; 0x72
 80016d4:	2b62      	cmp	r3, #98	; 0x62
 80016d6:	d029      	beq.n	800172c <setDayAndHour+0xf4>
 80016d8:	2372      	movs	r3, #114	; 0x72
 80016da:	2b72      	cmp	r3, #114	; 0x72
 80016dc:	d106      	bne.n	80016ec <setDayAndHour+0xb4>
 80016de:	2341      	movs	r3, #65	; 0x41
 80016e0:	2b4d      	cmp	r3, #77	; 0x4d
 80016e2:	d101      	bne.n	80016e8 <setDayAndHour+0xb0>
 80016e4:	2303      	movs	r3, #3
 80016e6:	e022      	b.n	800172e <setDayAndHour+0xf6>
 80016e8:	2304      	movs	r3, #4
 80016ea:	e020      	b.n	800172e <setDayAndHour+0xf6>
 80016ec:	2372      	movs	r3, #114	; 0x72
 80016ee:	2b79      	cmp	r3, #121	; 0x79
 80016f0:	d01a      	beq.n	8001728 <setDayAndHour+0xf0>
 80016f2:	2372      	movs	r3, #114	; 0x72
 80016f4:	2b6c      	cmp	r3, #108	; 0x6c
 80016f6:	d015      	beq.n	8001724 <setDayAndHour+0xec>
 80016f8:	2372      	movs	r3, #114	; 0x72
 80016fa:	2b67      	cmp	r3, #103	; 0x67
 80016fc:	d010      	beq.n	8001720 <setDayAndHour+0xe8>
 80016fe:	2372      	movs	r3, #114	; 0x72
 8001700:	2b70      	cmp	r3, #112	; 0x70
 8001702:	d00b      	beq.n	800171c <setDayAndHour+0xe4>
 8001704:	2372      	movs	r3, #114	; 0x72
 8001706:	2b74      	cmp	r3, #116	; 0x74
 8001708:	d006      	beq.n	8001718 <setDayAndHour+0xe0>
 800170a:	2372      	movs	r3, #114	; 0x72
 800170c:	2b76      	cmp	r3, #118	; 0x76
 800170e:	d101      	bne.n	8001714 <setDayAndHour+0xdc>
 8001710:	230b      	movs	r3, #11
 8001712:	e00c      	b.n	800172e <setDayAndHour+0xf6>
 8001714:	230c      	movs	r3, #12
 8001716:	e00a      	b.n	800172e <setDayAndHour+0xf6>
 8001718:	230a      	movs	r3, #10
 800171a:	e008      	b.n	800172e <setDayAndHour+0xf6>
 800171c:	2309      	movs	r3, #9
 800171e:	e006      	b.n	800172e <setDayAndHour+0xf6>
 8001720:	2308      	movs	r3, #8
 8001722:	e004      	b.n	800172e <setDayAndHour+0xf6>
 8001724:	2307      	movs	r3, #7
 8001726:	e002      	b.n	800172e <setDayAndHour+0xf6>
 8001728:	2305      	movs	r3, #5
 800172a:	e000      	b.n	800172e <setDayAndHour+0xf6>
 800172c:	2302      	movs	r3, #2
 800172e:	707b      	strb	r3, [r7, #1]
	   sDate.Date = __DATE__[5]*DECIMAL_INT + __DATE__[6] ;
 8001730:	2339      	movs	r3, #57	; 0x39
 8001732:	461a      	mov	r2, r3
 8001734:	0092      	lsls	r2, r2, #2
 8001736:	4413      	add	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2220      	movs	r2, #32
 800173e:	4413      	add	r3, r2
 8001740:	b2db      	uxtb	r3, r3
 8001742:	70bb      	strb	r3, [r7, #2]
	   sDate.Year = __DATE__[9]*DECIMAL_INT + __DATE__[10];
 8001744:	2332      	movs	r3, #50	; 0x32
 8001746:	461a      	mov	r2, r3
 8001748:	0092      	lsls	r2, r2, #2
 800174a:	4413      	add	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2232      	movs	r2, #50	; 0x32
 8001752:	4413      	add	r3, r2
 8001754:	b2db      	uxtb	r3, r3
 8001756:	70fb      	strb	r3, [r7, #3]

	   if (HAL_RTC_SetDate(&rtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001758:	463b      	mov	r3, r7
 800175a:	2200      	movs	r2, #0
 800175c:	4619      	mov	r1, r3
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <setDayAndHour+0x13c>)
 8001760:	f001 ff9c 	bl	800369c <HAL_RTC_SetDate>
	   {
	   }
	   /** Enable the reference Clock input
	   */
	   if (HAL_RTCEx_SetRefClock(&rtc) != HAL_OK)
 8001764:	4803      	ldr	r0, [pc, #12]	; (8001774 <setDayAndHour+0x13c>)
 8001766:	f002 f91f 	bl	80039a8 <HAL_RTCEx_SetRefClock>
	   }
	   /* USER CODE BEGIN RTC_Init 2 */
	   // HAL_RTCEx_BKUPWrite(&rtc,  RTC_BKP_DR1, 0x32F2); // HABILITA EL REGISTRO DE GUARDADO
	   /* USER CODE END RTC_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000218 	.word	0x20000218

08001778 <computeSiderealTime>:
 *
 * @param sidereal_time: Parámetro donde se va a cargar la hora siderea calculada. En caso de error
 * 		  al realizar el cálculo se carga un parámetro NULL
 * @return Retorna si se ha realizado o no correctamente el cálculo de la hora siderea
 */
uint8_t computeSiderealTime(sidereal_t *sidereal_time){
 8001778:	b5b0      	push	{r4, r5, r7, lr}
 800177a:	ed2d 8b02 	vpush	{d8}
 800177e:	b090      	sub	sp, #64	; 0x40
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	fecha_t sd_time = getDateTime() ;
 8001784:	f107 0308 	add.w	r3, r7, #8
 8001788:	4618      	mov	r0, r3
 800178a:	f000 fac1 	bl	8001d10 <getDateTime>
	uint8_t error ;
	uint8_t hs,ms,ss ;
	const float multiplicador_term_negativo = (7.0/4.0) ;
 800178e:	4b07      	ldr	r3, [pc, #28]	; (80017ac <computeSiderealTime+0x34>)
 8001790:	63bb      	str	r3, [r7, #56]	; 0x38
	// j0 calcula el número de dias julianos
	float j0,fract_day,sid_time,jul_cent ; // dia juliano hasta las 12:00:00. JD fraccion de dia para completar el día
	float negative_term ;
	float  aux_ms, aux_ss ;
	// Error de lectura en día o fecha en el RTC
	if (sd_time.error == ERROR_RTC_DATE ||  sd_time.error == ERROR_RTC_TIME)
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	2b03      	cmp	r3, #3
 8001796:	d002      	beq.n	800179e <computeSiderealTime+0x26>
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d108      	bne.n	80017b0 <computeSiderealTime+0x38>
	{
		sidereal_time = NULL  ;
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
		error = ERROR_SIDEREAL ;
 80017a2:	23ff      	movs	r3, #255	; 0xff
 80017a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80017a8:	e2a4      	b.n	8001cf4 <computeSiderealTime+0x57c>
 80017aa:	bf00      	nop
 80017ac:	3fe00000 	.word	0x3fe00000
	}else{
		// si no hay error al cargar la hora local, aplica el algoritmo de cálculo
		j0 = K1*sd_time.year + (float) (int )(K2*(float)sd_time.month/K3)
 80017b0:	893b      	ldrh	r3, [r7, #8]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fec6 	bl	8000544 <__aeabi_i2d>
 80017b8:	a3fa      	add	r3, pc, #1000	; (adr r3, 8001ba4 <computeSiderealTime+0x42c>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7fe ff2b 	bl	8000618 <__aeabi_dmul>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4614      	mov	r4, r2
 80017c8:	461d      	mov	r5, r3
 80017ca:	7abb      	ldrb	r3, [r7, #10]
 80017cc:	ee07 3a90 	vmov	s15, r3
 80017d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017d4:	ee17 0a90 	vmov	r0, s15
 80017d8:	f7fe fec6 	bl	8000568 <__aeabi_f2d>
 80017dc:	a3f3      	add	r3, pc, #972	; (adr r3, 8001bac <computeSiderealTime+0x434>)
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	f7fe ff19 	bl	8000618 <__aeabi_dmul>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	4be5      	ldr	r3, [pc, #916]	; (8001b88 <computeSiderealTime+0x410>)
 80017f4:	f7ff f83a 	bl	800086c <__aeabi_ddiv>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff f9ba 	bl	8000b78 <__aeabi_d2iz>
 8001804:	ee07 0a90 	vmov	s15, r0
 8001808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800180c:	ee17 0a90 	vmov	r0, s15
 8001810:	f7fe feaa 	bl	8000568 <__aeabi_f2d>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4620      	mov	r0, r4
 800181a:	4629      	mov	r1, r5
 800181c:	f7fe fd46 	bl	80002ac <__adddf3>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4614      	mov	r4, r2
 8001826:	461d      	mov	r5, r3
			+ (float) sd_time.day +  K4 ;
 8001828:	7afb      	ldrb	r3, [r7, #11]
 800182a:	ee07 3a90 	vmov	s15, r3
 800182e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001832:	ee17 0a90 	vmov	r0, s15
 8001836:	f7fe fe97 	bl	8000568 <__aeabi_f2d>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4620      	mov	r0, r4
 8001840:	4629      	mov	r1, r5
 8001842:	f7fe fd33 	bl	80002ac <__adddf3>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	a3ba      	add	r3, pc, #744	; (adr r3, 8001b38 <computeSiderealTime+0x3c0>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	f7fe fd2a 	bl	80002ac <__adddf3>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
		j0 = K1*sd_time.year + (float) (int )(K2*(float)sd_time.month/K3)
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	f7ff f9d2 	bl	8000c08 <__aeabi_d2f>
 8001864:	4603      	mov	r3, r0
 8001866:	637b      	str	r3, [r7, #52]	; 0x34
		negative_term =(float) (int) (multiplicador_term_negativo *((float )sd_time.year
 8001868:	893b      	ldrh	r3, [r7, #8]
 800186a:	ee07 3a90 	vmov	s15, r3
 800186e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
					   + (int)(float)((sd_time.month+9.0)/12.0))) ;
 8001872:	7abb      	ldrb	r3, [r7, #10]
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fe65 	bl	8000544 <__aeabi_i2d>
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	4bc2      	ldr	r3, [pc, #776]	; (8001b88 <computeSiderealTime+0x410>)
 8001880:	f7fe fd14 	bl	80002ac <__adddf3>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	4bbe      	ldr	r3, [pc, #760]	; (8001b8c <computeSiderealTime+0x414>)
 8001892:	f7fe ffeb 	bl	800086c <__aeabi_ddiv>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	f7ff f9b3 	bl	8000c08 <__aeabi_d2f>
 80018a2:	ee07 0a90 	vmov	s15, r0
 80018a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ae:	ee38 7a27 	vadd.f32	s14, s16, s15
		negative_term =(float) (int) (multiplicador_term_negativo *((float )sd_time.year
 80018b2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80018b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		j0 = j0-negative_term ;
 80018c6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80018ca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80018ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		fract_day = (float) sd_time.hour +  (float)sd_time.minute/60.0
 80018d6:	7b3b      	ldrb	r3, [r7, #12]
 80018d8:	ee07 3a90 	vmov	s15, r3
 80018dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018e0:	ee17 0a90 	vmov	r0, s15
 80018e4:	f7fe fe40 	bl	8000568 <__aeabi_f2d>
 80018e8:	4604      	mov	r4, r0
 80018ea:	460d      	mov	r5, r1
 80018ec:	7b7b      	ldrb	r3, [r7, #13]
 80018ee:	ee07 3a90 	vmov	s15, r3
 80018f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018f6:	ee17 0a90 	vmov	r0, s15
 80018fa:	f7fe fe35 	bl	8000568 <__aeabi_f2d>
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	4ba3      	ldr	r3, [pc, #652]	; (8001b90 <computeSiderealTime+0x418>)
 8001904:	f7fe ffb2 	bl	800086c <__aeabi_ddiv>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4620      	mov	r0, r4
 800190e:	4629      	mov	r1, r5
 8001910:	f7fe fccc 	bl	80002ac <__adddf3>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4614      	mov	r4, r2
 800191a:	461d      	mov	r5, r3
					+ (float)sd_time.second/3600.0 ;
 800191c:	7bbb      	ldrb	r3, [r7, #14]
 800191e:	ee07 3a90 	vmov	s15, r3
 8001922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001926:	ee17 0a90 	vmov	r0, s15
 800192a:	f7fe fe1d 	bl	8000568 <__aeabi_f2d>
 800192e:	a384      	add	r3, pc, #528	; (adr r3, 8001b40 <computeSiderealTime+0x3c8>)
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	f7fe ff9a 	bl	800086c <__aeabi_ddiv>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4620      	mov	r0, r4
 800193e:	4629      	mov	r1, r5
 8001940:	f7fe fcb4 	bl	80002ac <__adddf3>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
		fract_day = (float) sd_time.hour +  (float)sd_time.minute/60.0
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	f7ff f95c 	bl	8000c08 <__aeabi_d2f>
 8001950:	4603      	mov	r3, r0
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
		// calculo de centurias julianas
		jul_cent = (j0 - 2451545)/36525 ;
 8001954:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001958:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001b94 <computeSiderealTime+0x41c>
 800195c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001960:	eddf 6a8d 	vldr	s13, [pc, #564]	; 8001b98 <computeSiderealTime+0x420>
 8001964:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001968:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		sid_time = KS1 + KS2 * jul_cent + KS3 * pow(jul_cent,2) + KS4 * pow(jul_cent,3) ;
 800196c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800196e:	f7fe fdfb 	bl	8000568 <__aeabi_f2d>
 8001972:	a375      	add	r3, pc, #468	; (adr r3, 8001b48 <computeSiderealTime+0x3d0>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7fe fe4e 	bl	8000618 <__aeabi_dmul>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4610      	mov	r0, r2
 8001982:	4619      	mov	r1, r3
 8001984:	a372      	add	r3, pc, #456	; (adr r3, 8001b50 <computeSiderealTime+0x3d8>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	f7fe fc8f 	bl	80002ac <__adddf3>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4614      	mov	r4, r2
 8001994:	461d      	mov	r5, r3
 8001996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001998:	f7fe fde6 	bl	8000568 <__aeabi_f2d>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 8001b58 <computeSiderealTime+0x3e0>
 80019a4:	ec43 2b10 	vmov	d0, r2, r3
 80019a8:	f005 fae0 	bl	8006f6c <pow>
 80019ac:	ec51 0b10 	vmov	r0, r1, d0
 80019b0:	a36b      	add	r3, pc, #428	; (adr r3, 8001b60 <computeSiderealTime+0x3e8>)
 80019b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b6:	f7fe fe2f 	bl	8000618 <__aeabi_dmul>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4620      	mov	r0, r4
 80019c0:	4629      	mov	r1, r5
 80019c2:	f7fe fc73 	bl	80002ac <__adddf3>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4614      	mov	r4, r2
 80019cc:	461d      	mov	r5, r3
 80019ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019d0:	f7fe fdca 	bl	8000568 <__aeabi_f2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	ed9f 1b63 	vldr	d1, [pc, #396]	; 8001b68 <computeSiderealTime+0x3f0>
 80019dc:	ec43 2b10 	vmov	d0, r2, r3
 80019e0:	f005 fac4 	bl	8006f6c <pow>
 80019e4:	ec51 0b10 	vmov	r0, r1, d0
 80019e8:	a361      	add	r3, pc, #388	; (adr r3, 8001b70 <computeSiderealTime+0x3f8>)
 80019ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ee:	f7fe fe13 	bl	8000618 <__aeabi_dmul>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4620      	mov	r0, r4
 80019f8:	4629      	mov	r1, r5
 80019fa:	f7fe fc57 	bl	80002ac <__adddf3>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f7ff f8ff 	bl	8000c08 <__aeabi_d2f>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
		// el cálculo anterior sid_time puede ser mayor a 360°. Para quedarnos con el giro que corresponde
		// a la unidad angular restamos 360°. Lo calculado esta a las 12:00:00. Se debe pasar a UTC con UTC/24
		sid_time = sid_time - (float) (int)(sid_time/360.0) * 360.0 ;
 8001a0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a10:	f7fe fdaa 	bl	8000568 <__aeabi_f2d>
 8001a14:	4604      	mov	r4, r0
 8001a16:	460d      	mov	r5, r1
 8001a18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a1a:	f7fe fda5 	bl	8000568 <__aeabi_f2d>
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	4b5e      	ldr	r3, [pc, #376]	; (8001b9c <computeSiderealTime+0x424>)
 8001a24:	f7fe ff22 	bl	800086c <__aeabi_ddiv>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f7ff f8a2 	bl	8000b78 <__aeabi_d2iz>
 8001a34:	ee07 0a90 	vmov	s15, r0
 8001a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a3c:	ee17 0a90 	vmov	r0, s15
 8001a40:	f7fe fd92 	bl	8000568 <__aeabi_f2d>
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	4b54      	ldr	r3, [pc, #336]	; (8001b9c <computeSiderealTime+0x424>)
 8001a4a:	f7fe fde5 	bl	8000618 <__aeabi_dmul>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4620      	mov	r0, r4
 8001a54:	4629      	mov	r1, r5
 8001a56:	f7fe fc27 	bl	80002a8 <__aeabi_dsub>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4619      	mov	r1, r3
 8001a62:	f7ff f8d1 	bl	8000c08 <__aeabi_d2f>
 8001a66:	4603      	mov	r3, r0
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
		// Puede ser superior a 360°, idem al caso anterior
		sid_time = sid_time + 360.98564724*(fract_day/24.0);
 8001a6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a6c:	f7fe fd7c 	bl	8000568 <__aeabi_f2d>
 8001a70:	4604      	mov	r4, r0
 8001a72:	460d      	mov	r5, r1
 8001a74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a76:	f7fe fd77 	bl	8000568 <__aeabi_f2d>
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	4b48      	ldr	r3, [pc, #288]	; (8001ba0 <computeSiderealTime+0x428>)
 8001a80:	f7fe fef4 	bl	800086c <__aeabi_ddiv>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	a33a      	add	r3, pc, #232	; (adr r3, 8001b78 <computeSiderealTime+0x400>)
 8001a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a92:	f7fe fdc1 	bl	8000618 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	f7fe fc05 	bl	80002ac <__adddf3>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f7ff f8ad 	bl	8000c08 <__aeabi_d2f>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
		sid_time = sid_time - (float) (int)(sid_time/360.0) * 360.0 ;
 8001ab2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ab4:	f7fe fd58 	bl	8000568 <__aeabi_f2d>
 8001ab8:	4604      	mov	r4, r0
 8001aba:	460d      	mov	r5, r1
 8001abc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001abe:	f7fe fd53 	bl	8000568 <__aeabi_f2d>
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	4b35      	ldr	r3, [pc, #212]	; (8001b9c <computeSiderealTime+0x424>)
 8001ac8:	f7fe fed0 	bl	800086c <__aeabi_ddiv>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f7ff f850 	bl	8000b78 <__aeabi_d2iz>
 8001ad8:	ee07 0a90 	vmov	s15, r0
 8001adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae0:	ee17 0a90 	vmov	r0, s15
 8001ae4:	f7fe fd40 	bl	8000568 <__aeabi_f2d>
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <computeSiderealTime+0x424>)
 8001aee:	f7fe fd93 	bl	8000618 <__aeabi_dmul>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4620      	mov	r0, r4
 8001af8:	4629      	mov	r1, r5
 8001afa:	f7fe fbd5 	bl	80002a8 <__aeabi_dsub>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4610      	mov	r0, r2
 8001b04:	4619      	mov	r1, r3
 8001b06:	f7ff f87f 	bl	8000c08 <__aeabi_d2f>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
		sid_time = sid_time + LONGITUD_IAR ;
 8001b0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b10:	f7fe fd2a 	bl	8000568 <__aeabi_f2d>
 8001b14:	a31a      	add	r3, pc, #104	; (adr r3, 8001b80 <computeSiderealTime+0x408>)
 8001b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1a:	f7fe fbc5 	bl	80002a8 <__aeabi_dsub>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4610      	mov	r0, r2
 8001b24:	4619      	mov	r1, r3
 8001b26:	f7ff f86f 	bl	8000c08 <__aeabi_d2f>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
		sid_time = sid_time - (float) (int)(sid_time/360.0) * 360.0 ;
 8001b2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b30:	f7fe fd1a 	bl	8000568 <__aeabi_f2d>
 8001b34:	4604      	mov	r4, r0
 8001b36:	e03d      	b.n	8001bb4 <computeSiderealTime+0x43c>
 8001b38:	80000000 	.word	0x80000000
 8001b3c:	413a42b5 	.word	0x413a42b5
 8001b40:	00000000 	.word	0x00000000
 8001b44:	40ac2000 	.word	0x40ac2000
 8001b48:	a3d70a3d 	.word	0xa3d70a3d
 8001b4c:	40e19418 	.word	0x40e19418
 8001b50:	c598fbe5 	.word	0xc598fbe5
 8001b54:	40591d7a 	.word	0x40591d7a
 8001b58:	00000000 	.word	0x00000000
 8001b5c:	40000000 	.word	0x40000000
 8001b60:	8c4c4b7f 	.word	0x8c4c4b7f
 8001b64:	3f396c6f 	.word	0x3f396c6f
 8001b68:	00000000 	.word	0x00000000
 8001b6c:	40080000 	.word	0x40080000
 8001b70:	a97ffabc 	.word	0xa97ffabc
 8001b74:	be5bbc18 	.word	0xbe5bbc18
 8001b78:	360a5315 	.word	0x360a5315
 8001b7c:	40768fc5 	.word	0x40768fc5
 8001b80:	69ad42c4 	.word	0x69ad42c4
 8001b84:	404d11de 	.word	0x404d11de
 8001b88:	40220000 	.word	0x40220000
 8001b8c:	40280000 	.word	0x40280000
 8001b90:	404e0000 	.word	0x404e0000
 8001b94:	4a15a164 	.word	0x4a15a164
 8001b98:	470ead00 	.word	0x470ead00
 8001b9c:	40768000 	.word	0x40768000
 8001ba0:	40380000 	.word	0x40380000
 8001ba4:	00000000 	.word	0x00000000
 8001ba8:	4076f000 	.word	0x4076f000
 8001bac:	00000000 	.word	0x00000000
 8001bb0:	40713000 	.word	0x40713000
 8001bb4:	460d      	mov	r5, r1
 8001bb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001bb8:	f7fe fcd6 	bl	8000568 <__aeabi_f2d>
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	4b50      	ldr	r3, [pc, #320]	; (8001d04 <computeSiderealTime+0x58c>)
 8001bc2:	f7fe fe53 	bl	800086c <__aeabi_ddiv>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f7fe ffd3 	bl	8000b78 <__aeabi_d2iz>
 8001bd2:	ee07 0a90 	vmov	s15, r0
 8001bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bda:	ee17 0a90 	vmov	r0, s15
 8001bde:	f7fe fcc3 	bl	8000568 <__aeabi_f2d>
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	4b47      	ldr	r3, [pc, #284]	; (8001d04 <computeSiderealTime+0x58c>)
 8001be8:	f7fe fd16 	bl	8000618 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	4629      	mov	r1, r5
 8001bf4:	f7fe fb58 	bl	80002a8 <__aeabi_dsub>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f7ff f802 	bl	8000c08 <__aeabi_d2f>
 8001c04:	4603      	mov	r3, r0
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24

		// transformación a hora, minuto y segundo: 360° -- 24hs, 60min -- 1h y 60s -- 1min

		hs = (uint8_t)(float)((sid_time*24)/360.0 ) ;
 8001c08:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c0c:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001c10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c14:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001d08 <computeSiderealTime+0x590>
 8001c18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c20:	edc7 7a00 	vstr	s15, [r7]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		aux_ms = (float )((sid_time*24)/360.0 ) - (float) hs ;
 8001c2a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c2e:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001c32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c36:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001d08 <computeSiderealTime+0x590>
 8001c3a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c42:	ee07 3a90 	vmov	s15, r3
 8001c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c4e:	edc7 7a07 	vstr	s15, [r7, #28]
		ms = (uint8_t ) (aux_ms*60.0) ;
 8001c52:	69f8      	ldr	r0, [r7, #28]
 8001c54:	f7fe fc88 	bl	8000568 <__aeabi_f2d>
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <computeSiderealTime+0x594>)
 8001c5e:	f7fe fcdb 	bl	8000618 <__aeabi_dmul>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f7fe ffad 	bl	8000bc8 <__aeabi_d2uiz>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	76fb      	strb	r3, [r7, #27]
		//ms  =  ;//0.xxxx
		aux_ss = (aux_ms*60.0 - (float) ms)*60.0;
 8001c72:	69f8      	ldr	r0, [r7, #28]
 8001c74:	f7fe fc78 	bl	8000568 <__aeabi_f2d>
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	4b23      	ldr	r3, [pc, #140]	; (8001d0c <computeSiderealTime+0x594>)
 8001c7e:	f7fe fccb 	bl	8000618 <__aeabi_dmul>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4614      	mov	r4, r2
 8001c88:	461d      	mov	r5, r3
 8001c8a:	7efb      	ldrb	r3, [r7, #27]
 8001c8c:	ee07 3a90 	vmov	s15, r3
 8001c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c94:	ee17 0a90 	vmov	r0, s15
 8001c98:	f7fe fc66 	bl	8000568 <__aeabi_f2d>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	4629      	mov	r1, r5
 8001ca4:	f7fe fb00 	bl	80002a8 <__aeabi_dsub>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <computeSiderealTime+0x594>)
 8001cb6:	f7fe fcaf 	bl	8000618 <__aeabi_dmul>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f7fe ffa1 	bl	8000c08 <__aeabi_d2f>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	617b      	str	r3, [r7, #20]
		ss     = (uint8_t)  aux_ss ;
 8001cca:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cd2:	edc7 7a00 	vstr	s15, [r7]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	74fb      	strb	r3, [r7, #19]
		sidereal_time->h = hs ;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ce0:	701a      	strb	r2, [r3, #0]
		sidereal_time->m = ms ;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	7efa      	ldrb	r2, [r7, #27]
 8001ce6:	705a      	strb	r2, [r3, #1]
		sidereal_time->s = ss ;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	7cfa      	ldrb	r2, [r7, #19]
 8001cec:	709a      	strb	r2, [r3, #2]
		error = NO_ERROR_SIDEREAL;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


	}
	return error ;
 8001cf4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f

}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3740      	adds	r7, #64	; 0x40
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	ecbd 8b02 	vpop	{d8}
 8001d02:	bdb0      	pop	{r4, r5, r7, pc}
 8001d04:	40768000 	.word	0x40768000
 8001d08:	43b40000 	.word	0x43b40000
 8001d0c:	404e0000 	.word	0x404e0000

08001d10 <getDateTime>:
 * 		   							 3:  error al obtener la hora del RTC
 * 		   Al usar esta estructura se prescinde de la libreria "time.h" nativa de C
 *
 */
fecha_t getDateTime()
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	; 0x28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef sdatestructureget ;
	RTC_TimeTypeDef stimestructureget ;
	fecha_t response  ;
	/* USER CODE END WHILE */
	if (HAL_RTC_GetTime(&rtc, &stimestructureget, RTC_FORMAT_BIN) != HAL_OK)
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4819      	ldr	r0, [pc, #100]	; (8001d88 <getDateTime+0x78>)
 8001d22:	f001 fc5d 	bl	80035e0 <HAL_RTC_GetTime>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <getDateTime+0x22>
	{
		response.error = ERROR_RTC_TIME ;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	73fb      	strb	r3, [r7, #15]
 8001d30:	e01e      	b.n	8001d70 <getDateTime+0x60>
	}else{
		if(HAL_RTC_GetDate(&rtc, &sdatestructureget, RTC_FORMAT_BIN) == HAL_OK)
 8001d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d36:	2200      	movs	r2, #0
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4813      	ldr	r0, [pc, #76]	; (8001d88 <getDateTime+0x78>)
 8001d3c:	f001 fd55 	bl	80037ea <HAL_RTC_GetDate>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d112      	bne.n	8001d6c <getDateTime+0x5c>
		{
			//lectura del RTC de la placa nucleo y carga de valores en fecha_t
			response.year = sdatestructureget.Year ;
 8001d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	813b      	strh	r3, [r7, #8]
			response.day = sdatestructureget.Date;
 8001d4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d52:	72fb      	strb	r3, [r7, #11]
			response.month = sdatestructureget.Month ;
 8001d54:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d58:	72bb      	strb	r3, [r7, #10]
			response.minute = stimestructureget.Minutes ;
 8001d5a:	7c7b      	ldrb	r3, [r7, #17]
 8001d5c:	737b      	strb	r3, [r7, #13]
			response.hour = stimestructureget.Hours ;
 8001d5e:	7c3b      	ldrb	r3, [r7, #16]
 8001d60:	733b      	strb	r3, [r7, #12]
			response.second = stimestructureget.Seconds ;
 8001d62:	7cbb      	ldrb	r3, [r7, #18]
 8001d64:	73bb      	strb	r3, [r7, #14]
			response.error = NO_ERROR_GET_RTC ;// 0x01 --> correct!
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
 8001d6a:	e001      	b.n	8001d70 <getDateTime+0x60>
		}else{
			response.error = ERROR_RTC_DATE ;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	73fb      	strb	r3, [r7, #15]
		}
	}
	return response ;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	461a      	mov	r2, r3
 8001d74:	f107 0308 	add.w	r3, r7, #8
 8001d78:	cb03      	ldmia	r3!, {r0, r1}
 8001d7a:	6010      	str	r0, [r2, #0]
 8001d7c:	6051      	str	r1, [r2, #4]
}
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	3728      	adds	r7, #40	; 0x28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000218 	.word	0x20000218

08001d8c <uartInit>:

//static void uartSendString( char *uart_tx) ;

UART_HandleTypeDef uart_handle ;

uint8_t uartInit(uint32_t baud_rate){
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	if (baud_rate == 0){
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <uartInit+0x12>
		return 0xFF ;
 8001d9a:	23ff      	movs	r3, #255	; 0xff
 8001d9c:	e023      	b.n	8001de6 <uartInit+0x5a>
	}

	uart_handle.Instance 		  = USART3;
 8001d9e:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <uartInit+0x64>)
 8001da0:	4a14      	ldr	r2, [pc, #80]	; (8001df4 <uartInit+0x68>)
 8001da2:	601a      	str	r2, [r3, #0]
	uart_handle.Init.BaudRate     = baud_rate;
 8001da4:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <uartInit+0x64>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6053      	str	r3, [r2, #4]
	uart_handle.Init.WordLength   = UART_WORDLENGTH_8B;
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <uartInit+0x64>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
	uart_handle.Init.StopBits     = UART_STOPBITS_1;
 8001db0:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <uartInit+0x64>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	60da      	str	r2, [r3, #12]
	uart_handle.Init.Parity       = UART_PARITY_NONE ;
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <uartInit+0x64>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
	uart_handle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <uartInit+0x64>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	619a      	str	r2, [r3, #24]
	uart_handle.Init.Mode         = UART_MODE_TX_RX;
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <uartInit+0x64>)
 8001dc4:	220c      	movs	r2, #12
 8001dc6:	615a      	str	r2, [r3, #20]
	uart_handle.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <uartInit+0x64>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&uart_handle)){
 8001dce:	4808      	ldr	r0, [pc, #32]	; (8001df0 <uartInit+0x64>)
 8001dd0:	f001 fe33 	bl	8003a3a <HAL_UART_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <uartInit+0x52>
		return 0xFF ;
 8001dda:	23ff      	movs	r3, #255	; 0xff
 8001ddc:	e003      	b.n	8001de6 <uartInit+0x5a>
	}
	uartSendString("INICIO CORRECTO\r\n") ;
 8001dde:	4806      	ldr	r0, [pc, #24]	; (8001df8 <uartInit+0x6c>)
 8001de0:	f000 f842 	bl	8001e68 <uartSendString>
	return 1 ;
 8001de4:	2301      	movs	r3, #1
	//(&uart_handle, &data_rx, 2) ;
	//HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(USART3_IRQn);


}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000244 	.word	0x20000244
 8001df4:	40004800 	.word	0x40004800
 8001df8:	08007ef0 	.word	0x08007ef0

08001dfc <sendSiderealTime>:


uint8_t sendSiderealTime(){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af02      	add	r7, sp, #8
	sidereal_t stime ;
	char uart_tx [10] ; //"hh:mm:ss" ;
	uint8_t get_sidereal_time =computeSiderealTime(&stime) ;
 8001e02:	f107 0310 	add.w	r3, r7, #16
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fcb6 	bl	8001778 <computeSiderealTime>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	75bb      	strb	r3, [r7, #22]
	uint8_t response ;
	if (get_sidereal_time ==0xFF){
 8001e10:	7dbb      	ldrb	r3, [r7, #22]
 8001e12:	2bff      	cmp	r3, #255	; 0xff
 8001e14:	d10d      	bne.n	8001e32 <sendSiderealTime+0x36>
		//transmitir "error RTC" por puerto serie
		sprintf(uart_tx,"%02d:%02d:%02d",stime.h,stime.m,stime.s) ;
 8001e16:	7c3b      	ldrb	r3, [r7, #16]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	7c7b      	ldrb	r3, [r7, #17]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	7cbb      	ldrb	r3, [r7, #18]
 8001e20:	1d38      	adds	r0, r7, #4
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	460b      	mov	r3, r1
 8001e26:	490f      	ldr	r1, [pc, #60]	; (8001e64 <sendSiderealTime+0x68>)
 8001e28:	f002 fe76 	bl	8004b18 <siprintf>
		response = 0xFF ;
 8001e2c:	23ff      	movs	r3, #255	; 0xff
 8001e2e:	75fb      	strb	r3, [r7, #23]
 8001e30:	e00f      	b.n	8001e52 <sendSiderealTime+0x56>

	}else if (get_sidereal_time==0x01){
 8001e32:	7dbb      	ldrb	r3, [r7, #22]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d10c      	bne.n	8001e52 <sendSiderealTime+0x56>
		sprintf(uart_tx,"%02d:%02d:%02d",stime.h,stime.m,stime.s) ;
 8001e38:	7c3b      	ldrb	r3, [r7, #16]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	7c7b      	ldrb	r3, [r7, #17]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	7cbb      	ldrb	r3, [r7, #18]
 8001e42:	1d38      	adds	r0, r7, #4
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	460b      	mov	r3, r1
 8001e48:	4906      	ldr	r1, [pc, #24]	; (8001e64 <sendSiderealTime+0x68>)
 8001e4a:	f002 fe65 	bl	8004b18 <siprintf>
		response = 0x01 ;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	75fb      	strb	r3, [r7, #23]
	}


	uartSendString(uart_tx) ;
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 f807 	bl	8001e68 <uartSendString>
	return response ;
 8001e5a:	7dfb      	ldrb	r3, [r7, #23]

}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	08007f04 	.word	0x08007f04

08001e68 <uartSendString>:

//uint8_t uartSendString(const char *uart_tx)
//static void uartSendString( char *uart_tx)
void uartSendString( char *uart_tx)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&uart_handle,uart_tx, strlen(uart_tx), 500) ;
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7fe f9bd 	bl	80001f0 <strlen>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4803      	ldr	r0, [pc, #12]	; (8001e90 <uartSendString+0x28>)
 8001e82:	f001 fe27 	bl	8003ad4 <HAL_UART_Transmit>

}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000244 	.word	0x20000244

08001e94 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	; 0x28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10e      	bne.n	8001ec2 <BSP_LED_Init+0x2e>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <BSP_LED_Init+0x94>)
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	4a1e      	ldr	r2, [pc, #120]	; (8001f28 <BSP_LED_Init+0x94>)
 8001eae:	f043 0302 	orr.w	r3, r3, #2
 8001eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <BSP_LED_Init+0x94>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	e00d      	b.n	8001ede <BSP_LED_Init+0x4a>
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <BSP_LED_Init+0x94>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a17      	ldr	r2, [pc, #92]	; (8001f28 <BSP_LED_Init+0x94>)
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <BSP_LED_Init+0x94>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <BSP_LED_Init+0x98>)
 8001ee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <BSP_LED_Init+0x9c>)
 8001ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efc:	f107 0214 	add.w	r2, r7, #20
 8001f00:	4611      	mov	r1, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 faea 	bl	80024dc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	4a09      	ldr	r2, [pc, #36]	; (8001f30 <BSP_LED_Init+0x9c>)
 8001f0c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	4a06      	ldr	r2, [pc, #24]	; (8001f2c <BSP_LED_Init+0x98>)
 8001f14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f000 fca2 	bl	8002864 <HAL_GPIO_WritePin>
}
 8001f20:	bf00      	nop
 8001f22:	3728      	adds	r7, #40	; 0x28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	08007f14 	.word	0x08007f14
 8001f30:	20000000 	.word	0x20000000

08001f34 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	4a07      	ldr	r2, [pc, #28]	; (8001f60 <BSP_LED_On+0x2c>)
 8001f42:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	4a06      	ldr	r2, [pc, #24]	; (8001f64 <BSP_LED_On+0x30>)
 8001f4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	4619      	mov	r1, r3
 8001f52:	f000 fc87 	bl	8002864 <HAL_GPIO_WritePin>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000000 	.word	0x20000000
 8001f64:	08007f14 	.word	0x08007f14

08001f68 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	4a07      	ldr	r2, [pc, #28]	; (8001f94 <BSP_LED_Toggle+0x2c>)
 8001f76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	4906      	ldr	r1, [pc, #24]	; (8001f98 <BSP_LED_Toggle+0x30>)
 8001f7e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001f82:	4619      	mov	r1, r3
 8001f84:	4610      	mov	r0, r2
 8001f86:	f000 fc86 	bl	8002896 <HAL_GPIO_TogglePin>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000000 	.word	0x20000000
 8001f98:	08007f14 	.word	0x08007f14

08001f9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fa0:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <SystemInit+0x60>)
 8001fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa6:	4a15      	ldr	r2, [pc, #84]	; (8001ffc <SystemInit+0x60>)
 8001fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001fb0:	4b13      	ldr	r3, [pc, #76]	; (8002000 <SystemInit+0x64>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a12      	ldr	r2, [pc, #72]	; (8002000 <SystemInit+0x64>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001fbc:	4b10      	ldr	r3, [pc, #64]	; (8002000 <SystemInit+0x64>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001fc2:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <SystemInit+0x64>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a0e      	ldr	r2, [pc, #56]	; (8002000 <SystemInit+0x64>)
 8001fc8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <SystemInit+0x64>)
 8001fd4:	4a0b      	ldr	r2, [pc, #44]	; (8002004 <SystemInit+0x68>)
 8001fd6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <SystemInit+0x64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a08      	ldr	r2, [pc, #32]	; (8002000 <SystemInit+0x64>)
 8001fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <SystemInit+0x64>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fea:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <SystemInit+0x60>)
 8001fec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ff0:	609a      	str	r2, [r3, #8]
#endif
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00
 8002000:	40023800 	.word	0x40023800
 8002004:	24003010 	.word	0x24003010

08002008 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800201a:	e7fe      	b.n	800201a <HardFault_Handler+0x4>

0800201c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002020:	e7fe      	b.n	8002020 <MemManage_Handler+0x4>

08002022 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002026:	e7fe      	b.n	8002026 <BusFault_Handler+0x4>

08002028 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800202c:	e7fe      	b.n	800202c <UsageFault_Handler+0x4>

0800202e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0
}
 8002032:	bf00      	nop
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
    HAL_IncTick();
 800205c:	f000 f914 	bl	8002288 <HAL_IncTick>
}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}

08002064 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
	return 1;
 8002068:	2301      	movs	r3, #1
}
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <_kill>:

int _kill(int pid, int sig)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800207e:	f002 f8af 	bl	80041e0 <__errno>
 8002082:	4603      	mov	r3, r0
 8002084:	2216      	movs	r2, #22
 8002086:	601a      	str	r2, [r3, #0]
	return -1;
 8002088:	f04f 33ff 	mov.w	r3, #4294967295
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <_exit>:

void _exit (int status)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800209c:	f04f 31ff 	mov.w	r1, #4294967295
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff ffe7 	bl	8002074 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020a6:	e7fe      	b.n	80020a6 <_exit+0x12>

080020a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	e00a      	b.n	80020d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020ba:	f3af 8000 	nop.w
 80020be:	4601      	mov	r1, r0
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	60ba      	str	r2, [r7, #8]
 80020c6:	b2ca      	uxtb	r2, r1
 80020c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	3301      	adds	r3, #1
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	dbf0      	blt.n	80020ba <_read+0x12>
	}

return len;
 80020d8:	687b      	ldr	r3, [r7, #4]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	e009      	b.n	8002108 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	60ba      	str	r2, [r7, #8]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	3301      	adds	r3, #1
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	429a      	cmp	r2, r3
 800210e:	dbf1      	blt.n	80020f4 <_write+0x12>
	}
	return len;
 8002110:	687b      	ldr	r3, [r7, #4]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <_close>:

int _close(int file)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
	return -1;
 8002122:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002142:	605a      	str	r2, [r3, #4]
	return 0;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <_isatty>:

int _isatty(int file)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
	return 1;
 800215a:	2301      	movs	r3, #1
}
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
	return 0;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800218c:	4a14      	ldr	r2, [pc, #80]	; (80021e0 <_sbrk+0x5c>)
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <_sbrk+0x60>)
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002198:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <_sbrk+0x64>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d102      	bne.n	80021a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <_sbrk+0x64>)
 80021a2:	4a12      	ldr	r2, [pc, #72]	; (80021ec <_sbrk+0x68>)
 80021a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <_sbrk+0x64>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d207      	bcs.n	80021c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021b4:	f002 f814 	bl	80041e0 <__errno>
 80021b8:	4603      	mov	r3, r0
 80021ba:	220c      	movs	r2, #12
 80021bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021be:	f04f 33ff 	mov.w	r3, #4294967295
 80021c2:	e009      	b.n	80021d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <_sbrk+0x64>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ca:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <_sbrk+0x64>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	4a05      	ldr	r2, [pc, #20]	; (80021e8 <_sbrk+0x64>)
 80021d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021d6:	68fb      	ldr	r3, [r7, #12]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20030000 	.word	0x20030000
 80021e4:	00000400 	.word	0x00000400
 80021e8:	20000238 	.word	0x20000238
 80021ec:	200002a0 	.word	0x200002a0

080021f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_Init+0x34>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <HAL_Init+0x34>)
 80021fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021fe:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002200:	4b08      	ldr	r3, [pc, #32]	; (8002224 <HAL_Init+0x34>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a07      	ldr	r2, [pc, #28]	; (8002224 <HAL_Init+0x34>)
 8002206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800220a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800220c:	2003      	movs	r0, #3
 800220e:	f000 f931 	bl	8002474 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002212:	200f      	movs	r0, #15
 8002214:	f000 f808 	bl	8002228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002218:	f000 fbaa 	bl	8002970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40023c00 	.word	0x40023c00

08002228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002230:	4b12      	ldr	r3, [pc, #72]	; (800227c <HAL_InitTick+0x54>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b12      	ldr	r3, [pc, #72]	; (8002280 <HAL_InitTick+0x58>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	4619      	mov	r1, r3
 800223a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800223e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002242:	fbb2 f3f3 	udiv	r3, r2, r3
 8002246:	4618      	mov	r0, r3
 8002248:	f000 f93b 	bl	80024c2 <HAL_SYSTICK_Config>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e00e      	b.n	8002274 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b0f      	cmp	r3, #15
 800225a:	d80a      	bhi.n	8002272 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800225c:	2200      	movs	r2, #0
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	f04f 30ff 	mov.w	r0, #4294967295
 8002264:	f000 f911 	bl	800248a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002268:	4a06      	ldr	r2, [pc, #24]	; (8002284 <HAL_InitTick+0x5c>)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	e000      	b.n	8002274 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	2000000c 	.word	0x2000000c
 8002280:	20000014 	.word	0x20000014
 8002284:	20000010 	.word	0x20000010

08002288 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_IncTick+0x20>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	4b06      	ldr	r3, [pc, #24]	; (80022ac <HAL_IncTick+0x24>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4413      	add	r3, r2
 8002298:	4a04      	ldr	r2, [pc, #16]	; (80022ac <HAL_IncTick+0x24>)
 800229a:	6013      	str	r3, [r2, #0]
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	20000014 	.word	0x20000014
 80022ac:	20000288 	.word	0x20000288

080022b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return uwTick;
 80022b4:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <HAL_GetTick+0x14>)
 80022b6:	681b      	ldr	r3, [r3, #0]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	20000288 	.word	0x20000288

080022c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d0:	f7ff ffee 	bl	80022b0 <HAL_GetTick>
 80022d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e0:	d005      	beq.n	80022ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022e2:	4b0a      	ldr	r3, [pc, #40]	; (800230c <HAL_Delay+0x44>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4413      	add	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022ee:	bf00      	nop
 80022f0:	f7ff ffde 	bl	80022b0 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d8f7      	bhi.n	80022f0 <HAL_Delay+0x28>
  {
  }
}
 8002300:	bf00      	nop
 8002302:	bf00      	nop
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000014 	.word	0x20000014

08002310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800232c:	4013      	ands	r3, r2
 800232e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800233c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002342:	4a04      	ldr	r2, [pc, #16]	; (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	60d3      	str	r3, [r2, #12]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800235c:	4b04      	ldr	r3, [pc, #16]	; (8002370 <__NVIC_GetPriorityGrouping+0x18>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	f003 0307 	and.w	r3, r3, #7
}
 8002366:	4618      	mov	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	6039      	str	r1, [r7, #0]
 800237e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002384:	2b00      	cmp	r3, #0
 8002386:	db0a      	blt.n	800239e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	b2da      	uxtb	r2, r3
 800238c:	490c      	ldr	r1, [pc, #48]	; (80023c0 <__NVIC_SetPriority+0x4c>)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	0112      	lsls	r2, r2, #4
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	440b      	add	r3, r1
 8002398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800239c:	e00a      	b.n	80023b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	4908      	ldr	r1, [pc, #32]	; (80023c4 <__NVIC_SetPriority+0x50>)
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	3b04      	subs	r3, #4
 80023ac:	0112      	lsls	r2, r2, #4
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	440b      	add	r3, r1
 80023b2:	761a      	strb	r2, [r3, #24]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000e100 	.word	0xe000e100
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b089      	sub	sp, #36	; 0x24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f1c3 0307 	rsb	r3, r3, #7
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	bf28      	it	cs
 80023e6:	2304      	movcs	r3, #4
 80023e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3304      	adds	r3, #4
 80023ee:	2b06      	cmp	r3, #6
 80023f0:	d902      	bls.n	80023f8 <NVIC_EncodePriority+0x30>
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3b03      	subs	r3, #3
 80023f6:	e000      	b.n	80023fa <NVIC_EncodePriority+0x32>
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43da      	mvns	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	401a      	ands	r2, r3
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002410:	f04f 31ff 	mov.w	r1, #4294967295
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	fa01 f303 	lsl.w	r3, r1, r3
 800241a:	43d9      	mvns	r1, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002420:	4313      	orrs	r3, r2
         );
}
 8002422:	4618      	mov	r0, r3
 8002424:	3724      	adds	r7, #36	; 0x24
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3b01      	subs	r3, #1
 800243c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002440:	d301      	bcc.n	8002446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002442:	2301      	movs	r3, #1
 8002444:	e00f      	b.n	8002466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002446:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <SysTick_Config+0x40>)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3b01      	subs	r3, #1
 800244c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800244e:	210f      	movs	r1, #15
 8002450:	f04f 30ff 	mov.w	r0, #4294967295
 8002454:	f7ff ff8e 	bl	8002374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <SysTick_Config+0x40>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800245e:	4b04      	ldr	r3, [pc, #16]	; (8002470 <SysTick_Config+0x40>)
 8002460:	2207      	movs	r2, #7
 8002462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	e000e010 	.word	0xe000e010

08002474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff ff47 	bl	8002310 <__NVIC_SetPriorityGrouping>
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800248a:	b580      	push	{r7, lr}
 800248c:	b086      	sub	sp, #24
 800248e:	af00      	add	r7, sp, #0
 8002490:	4603      	mov	r3, r0
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800249c:	f7ff ff5c 	bl	8002358 <__NVIC_GetPriorityGrouping>
 80024a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68b9      	ldr	r1, [r7, #8]
 80024a6:	6978      	ldr	r0, [r7, #20]
 80024a8:	f7ff ff8e 	bl	80023c8 <NVIC_EncodePriority>
 80024ac:	4602      	mov	r2, r0
 80024ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b2:	4611      	mov	r1, r2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff5d 	bl	8002374 <__NVIC_SetPriority>
}
 80024ba:	bf00      	nop
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff ffb0 	bl	8002430 <SysTick_Config>
 80024d0:	4603      	mov	r3, r0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024dc:	b480      	push	{r7}
 80024de:	b089      	sub	sp, #36	; 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	e177      	b.n	80027e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024f8:	2201      	movs	r2, #1
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	429a      	cmp	r2, r3
 8002512:	f040 8166 	bne.w	80027e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d005      	beq.n	800252e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800252a:	2b02      	cmp	r3, #2
 800252c:	d130      	bne.n	8002590 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	2203      	movs	r2, #3
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002564:	2201      	movs	r2, #1
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f003 0201 	and.w	r2, r3, #1
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b03      	cmp	r3, #3
 800259a:	d017      	beq.n	80025cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d123      	bne.n	8002620 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	08da      	lsrs	r2, r3, #3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3208      	adds	r2, #8
 80025e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	220f      	movs	r2, #15
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	08da      	lsrs	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3208      	adds	r2, #8
 800261a:	69b9      	ldr	r1, [r7, #24]
 800261c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	2203      	movs	r2, #3
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0203 	and.w	r2, r3, #3
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80c0 	beq.w	80027e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	4b66      	ldr	r3, [pc, #408]	; (8002800 <HAL_GPIO_Init+0x324>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	4a65      	ldr	r2, [pc, #404]	; (8002800 <HAL_GPIO_Init+0x324>)
 800266c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002670:	6453      	str	r3, [r2, #68]	; 0x44
 8002672:	4b63      	ldr	r3, [pc, #396]	; (8002800 <HAL_GPIO_Init+0x324>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800267e:	4a61      	ldr	r2, [pc, #388]	; (8002804 <HAL_GPIO_Init+0x328>)
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3302      	adds	r3, #2
 8002686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	220f      	movs	r2, #15
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a58      	ldr	r2, [pc, #352]	; (8002808 <HAL_GPIO_Init+0x32c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d037      	beq.n	800271a <HAL_GPIO_Init+0x23e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a57      	ldr	r2, [pc, #348]	; (800280c <HAL_GPIO_Init+0x330>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d031      	beq.n	8002716 <HAL_GPIO_Init+0x23a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a56      	ldr	r2, [pc, #344]	; (8002810 <HAL_GPIO_Init+0x334>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d02b      	beq.n	8002712 <HAL_GPIO_Init+0x236>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a55      	ldr	r2, [pc, #340]	; (8002814 <HAL_GPIO_Init+0x338>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d025      	beq.n	800270e <HAL_GPIO_Init+0x232>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a54      	ldr	r2, [pc, #336]	; (8002818 <HAL_GPIO_Init+0x33c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d01f      	beq.n	800270a <HAL_GPIO_Init+0x22e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a53      	ldr	r2, [pc, #332]	; (800281c <HAL_GPIO_Init+0x340>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d019      	beq.n	8002706 <HAL_GPIO_Init+0x22a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a52      	ldr	r2, [pc, #328]	; (8002820 <HAL_GPIO_Init+0x344>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d013      	beq.n	8002702 <HAL_GPIO_Init+0x226>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a51      	ldr	r2, [pc, #324]	; (8002824 <HAL_GPIO_Init+0x348>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00d      	beq.n	80026fe <HAL_GPIO_Init+0x222>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a50      	ldr	r2, [pc, #320]	; (8002828 <HAL_GPIO_Init+0x34c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d007      	beq.n	80026fa <HAL_GPIO_Init+0x21e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a4f      	ldr	r2, [pc, #316]	; (800282c <HAL_GPIO_Init+0x350>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d101      	bne.n	80026f6 <HAL_GPIO_Init+0x21a>
 80026f2:	2309      	movs	r3, #9
 80026f4:	e012      	b.n	800271c <HAL_GPIO_Init+0x240>
 80026f6:	230a      	movs	r3, #10
 80026f8:	e010      	b.n	800271c <HAL_GPIO_Init+0x240>
 80026fa:	2308      	movs	r3, #8
 80026fc:	e00e      	b.n	800271c <HAL_GPIO_Init+0x240>
 80026fe:	2307      	movs	r3, #7
 8002700:	e00c      	b.n	800271c <HAL_GPIO_Init+0x240>
 8002702:	2306      	movs	r3, #6
 8002704:	e00a      	b.n	800271c <HAL_GPIO_Init+0x240>
 8002706:	2305      	movs	r3, #5
 8002708:	e008      	b.n	800271c <HAL_GPIO_Init+0x240>
 800270a:	2304      	movs	r3, #4
 800270c:	e006      	b.n	800271c <HAL_GPIO_Init+0x240>
 800270e:	2303      	movs	r3, #3
 8002710:	e004      	b.n	800271c <HAL_GPIO_Init+0x240>
 8002712:	2302      	movs	r3, #2
 8002714:	e002      	b.n	800271c <HAL_GPIO_Init+0x240>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <HAL_GPIO_Init+0x240>
 800271a:	2300      	movs	r3, #0
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	f002 0203 	and.w	r2, r2, #3
 8002722:	0092      	lsls	r2, r2, #2
 8002724:	4093      	lsls	r3, r2
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800272c:	4935      	ldr	r1, [pc, #212]	; (8002804 <HAL_GPIO_Init+0x328>)
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	089b      	lsrs	r3, r3, #2
 8002732:	3302      	adds	r3, #2
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800273a:	4b3d      	ldr	r3, [pc, #244]	; (8002830 <HAL_GPIO_Init+0x354>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800275e:	4a34      	ldr	r2, [pc, #208]	; (8002830 <HAL_GPIO_Init+0x354>)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002764:	4b32      	ldr	r3, [pc, #200]	; (8002830 <HAL_GPIO_Init+0x354>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002788:	4a29      	ldr	r2, [pc, #164]	; (8002830 <HAL_GPIO_Init+0x354>)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800278e:	4b28      	ldr	r3, [pc, #160]	; (8002830 <HAL_GPIO_Init+0x354>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027b2:	4a1f      	ldr	r2, [pc, #124]	; (8002830 <HAL_GPIO_Init+0x354>)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027b8:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <HAL_GPIO_Init+0x354>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027dc:	4a14      	ldr	r2, [pc, #80]	; (8002830 <HAL_GPIO_Init+0x354>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3301      	adds	r3, #1
 80027e6:	61fb      	str	r3, [r7, #28]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b0f      	cmp	r3, #15
 80027ec:	f67f ae84 	bls.w	80024f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	3724      	adds	r7, #36	; 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40023800 	.word	0x40023800
 8002804:	40013800 	.word	0x40013800
 8002808:	40020000 	.word	0x40020000
 800280c:	40020400 	.word	0x40020400
 8002810:	40020800 	.word	0x40020800
 8002814:	40020c00 	.word	0x40020c00
 8002818:	40021000 	.word	0x40021000
 800281c:	40021400 	.word	0x40021400
 8002820:	40021800 	.word	0x40021800
 8002824:	40021c00 	.word	0x40021c00
 8002828:	40022000 	.word	0x40022000
 800282c:	40022400 	.word	0x40022400
 8002830:	40013c00 	.word	0x40013c00

08002834 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	887b      	ldrh	r3, [r7, #2]
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
 8002850:	e001      	b.n	8002856 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002852:	2300      	movs	r3, #0
 8002854:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002856:	7bfb      	ldrb	r3, [r7, #15]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	807b      	strh	r3, [r7, #2]
 8002870:	4613      	mov	r3, r2
 8002872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002874:	787b      	ldrb	r3, [r7, #1]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800287a:	887a      	ldrh	r2, [r7, #2]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002880:	e003      	b.n	800288a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002882:	887b      	ldrh	r3, [r7, #2]
 8002884:	041a      	lsls	r2, r3, #16
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	619a      	str	r2, [r3, #24]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002896:	b480      	push	{r7}
 8002898:	b085      	sub	sp, #20
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	460b      	mov	r3, r1
 80028a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028a8:	887a      	ldrh	r2, [r7, #2]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4013      	ands	r3, r2
 80028ae:	041a      	lsls	r2, r3, #16
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	43d9      	mvns	r1, r3
 80028b4:	887b      	ldrh	r3, [r7, #2]
 80028b6:	400b      	ands	r3, r1
 80028b8:	431a      	orrs	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	619a      	str	r2, [r3, #24]
}
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	; 0x28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 80028d4:	2300      	movs	r3, #0
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	4b23      	ldr	r3, [pc, #140]	; (8002968 <HAL_UART_MspInit+0x9c>)
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	4a22      	ldr	r2, [pc, #136]	; (8002968 <HAL_UART_MspInit+0x9c>)
 80028de:	f043 0308 	orr.w	r3, r3, #8
 80028e2:	6313      	str	r3, [r2, #48]	; 0x30
 80028e4:	4b20      	ldr	r3, [pc, #128]	; (8002968 <HAL_UART_MspInit+0x9c>)
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <HAL_UART_MspInit+0x9c>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	4a1b      	ldr	r2, [pc, #108]	; (8002968 <HAL_UART_MspInit+0x9c>)
 80028fa:	f043 0308 	orr.w	r3, r3, #8
 80028fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002900:	4b19      	ldr	r3, [pc, #100]	; (8002968 <HAL_UART_MspInit+0x9c>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 800290c:	2300      	movs	r3, #0
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	4b15      	ldr	r3, [pc, #84]	; (8002968 <HAL_UART_MspInit+0x9c>)
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	4a14      	ldr	r2, [pc, #80]	; (8002968 <HAL_UART_MspInit+0x9c>)
 8002916:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800291a:	6413      	str	r3, [r2, #64]	; 0x40
 800291c:	4b12      	ldr	r3, [pc, #72]	; (8002968 <HAL_UART_MspInit+0x9c>)
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8002928:	f44f 7380 	mov.w	r3, #256	; 0x100
 800292c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800292e:	2302      	movs	r3, #2
 8002930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8002932:	2301      	movs	r3, #1
 8002934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002936:	2303      	movs	r3, #3
 8002938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800293a:	2307      	movs	r3, #7
 800293c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800293e:	f107 0314 	add.w	r3, r7, #20
 8002942:	4619      	mov	r1, r3
 8002944:	4809      	ldr	r0, [pc, #36]	; (800296c <HAL_UART_MspInit+0xa0>)
 8002946:	f7ff fdc9 	bl	80024dc <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800294a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800294e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8002950:	2307      	movs	r3, #7
 8002952:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	4619      	mov	r1, r3
 800295a:	4804      	ldr	r0, [pc, #16]	; (800296c <HAL_UART_MspInit+0xa0>)
 800295c:	f7ff fdbe 	bl	80024dc <HAL_GPIO_Init>
}
 8002960:	bf00      	nop
 8002962:	3728      	adds	r7, #40	; 0x28
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40023800 	.word	0x40023800
 800296c:	40020c00 	.word	0x40020c00

08002970 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0

}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_PWR_EnableBkUpAccess+0x20>)
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_PWR_EnableBkUpAccess+0x24>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8002992:	687b      	ldr	r3, [r7, #4]
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	420e0020 	.word	0x420e0020
 80029a4:	40007000 	.word	0x40007000

080029a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	603b      	str	r3, [r7, #0]
 80029b6:	4b20      	ldr	r3, [pc, #128]	; (8002a38 <HAL_PWREx_EnableOverDrive+0x90>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	4a1f      	ldr	r2, [pc, #124]	; (8002a38 <HAL_PWREx_EnableOverDrive+0x90>)
 80029bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c0:	6413      	str	r3, [r2, #64]	; 0x40
 80029c2:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <HAL_PWREx_EnableOverDrive+0x90>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80029ce:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <HAL_PWREx_EnableOverDrive+0x94>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029d4:	f7ff fc6c 	bl	80022b0 <HAL_GetTick>
 80029d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029da:	e009      	b.n	80029f0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029dc:	f7ff fc68 	bl	80022b0 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029ea:	d901      	bls.n	80029f0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e01f      	b.n	8002a30 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029f0:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <HAL_PWREx_EnableOverDrive+0x98>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029fc:	d1ee      	bne.n	80029dc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80029fe:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a04:	f7ff fc54 	bl	80022b0 <HAL_GetTick>
 8002a08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a0a:	e009      	b.n	8002a20 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a0c:	f7ff fc50 	bl	80022b0 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a1a:	d901      	bls.n	8002a20 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e007      	b.n	8002a30 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a20:	4b07      	ldr	r3, [pc, #28]	; (8002a40 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a2c:	d1ee      	bne.n	8002a0c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	420e0040 	.word	0x420e0040
 8002a40:	40007000 	.word	0x40007000
 8002a44:	420e0044 	.word	0x420e0044

08002a48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e264      	b.n	8002f24 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d075      	beq.n	8002b52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a66:	4ba3      	ldr	r3, [pc, #652]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d00c      	beq.n	8002a8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a72:	4ba0      	ldr	r3, [pc, #640]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d112      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a7e:	4b9d      	ldr	r3, [pc, #628]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a8a:	d10b      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8c:	4b99      	ldr	r3, [pc, #612]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d05b      	beq.n	8002b50 <HAL_RCC_OscConfig+0x108>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d157      	bne.n	8002b50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e23f      	b.n	8002f24 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aac:	d106      	bne.n	8002abc <HAL_RCC_OscConfig+0x74>
 8002aae:	4b91      	ldr	r3, [pc, #580]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a90      	ldr	r2, [pc, #576]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	e01d      	b.n	8002af8 <HAL_RCC_OscConfig+0xb0>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x98>
 8002ac6:	4b8b      	ldr	r3, [pc, #556]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a8a      	ldr	r2, [pc, #552]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b88      	ldr	r3, [pc, #544]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a87      	ldr	r2, [pc, #540]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e00b      	b.n	8002af8 <HAL_RCC_OscConfig+0xb0>
 8002ae0:	4b84      	ldr	r3, [pc, #528]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a83      	ldr	r2, [pc, #524]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	4b81      	ldr	r3, [pc, #516]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a80      	ldr	r2, [pc, #512]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d013      	beq.n	8002b28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7ff fbd6 	bl	80022b0 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b08:	f7ff fbd2 	bl	80022b0 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b64      	cmp	r3, #100	; 0x64
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e204      	b.n	8002f24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	4b76      	ldr	r3, [pc, #472]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0xc0>
 8002b26:	e014      	b.n	8002b52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b28:	f7ff fbc2 	bl	80022b0 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b30:	f7ff fbbe 	bl	80022b0 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b64      	cmp	r3, #100	; 0x64
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e1f0      	b.n	8002f24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b42:	4b6c      	ldr	r3, [pc, #432]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0xe8>
 8002b4e:	e000      	b.n	8002b52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d063      	beq.n	8002c26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b5e:	4b65      	ldr	r3, [pc, #404]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00b      	beq.n	8002b82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b6a:	4b62      	ldr	r3, [pc, #392]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d11c      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b76:	4b5f      	ldr	r3, [pc, #380]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d116      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b82:	4b5c      	ldr	r3, [pc, #368]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d005      	beq.n	8002b9a <HAL_RCC_OscConfig+0x152>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d001      	beq.n	8002b9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e1c4      	b.n	8002f24 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9a:	4b56      	ldr	r3, [pc, #344]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4952      	ldr	r1, [pc, #328]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bae:	e03a      	b.n	8002c26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d020      	beq.n	8002bfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb8:	4b4f      	ldr	r3, [pc, #316]	; (8002cf8 <HAL_RCC_OscConfig+0x2b0>)
 8002bba:	2201      	movs	r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbe:	f7ff fb77 	bl	80022b0 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bc6:	f7ff fb73 	bl	80022b0 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e1a5      	b.n	8002f24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd8:	4b46      	ldr	r3, [pc, #280]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f0      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be4:	4b43      	ldr	r3, [pc, #268]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4940      	ldr	r1, [pc, #256]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	600b      	str	r3, [r1, #0]
 8002bf8:	e015      	b.n	8002c26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfa:	4b3f      	ldr	r3, [pc, #252]	; (8002cf8 <HAL_RCC_OscConfig+0x2b0>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c00:	f7ff fb56 	bl	80022b0 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c08:	f7ff fb52 	bl	80022b0 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e184      	b.n	8002f24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1a:	4b36      	ldr	r3, [pc, #216]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d030      	beq.n	8002c94 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d016      	beq.n	8002c68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c3a:	4b30      	ldr	r3, [pc, #192]	; (8002cfc <HAL_RCC_OscConfig+0x2b4>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c40:	f7ff fb36 	bl	80022b0 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c48:	f7ff fb32 	bl	80022b0 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e164      	b.n	8002f24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5a:	4b26      	ldr	r3, [pc, #152]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x200>
 8002c66:	e015      	b.n	8002c94 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c68:	4b24      	ldr	r3, [pc, #144]	; (8002cfc <HAL_RCC_OscConfig+0x2b4>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c6e:	f7ff fb1f 	bl	80022b0 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c76:	f7ff fb1b 	bl	80022b0 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e14d      	b.n	8002f24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c88:	4b1a      	ldr	r3, [pc, #104]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f0      	bne.n	8002c76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 80a0 	beq.w	8002de2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca6:	4b13      	ldr	r3, [pc, #76]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10f      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	4a0e      	ldr	r2, [pc, #56]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_RCC_OscConfig+0x2b8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d121      	bne.n	8002d22 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cde:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <HAL_RCC_OscConfig+0x2b8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a07      	ldr	r2, [pc, #28]	; (8002d00 <HAL_RCC_OscConfig+0x2b8>)
 8002ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cea:	f7ff fae1 	bl	80022b0 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf0:	e011      	b.n	8002d16 <HAL_RCC_OscConfig+0x2ce>
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	42470000 	.word	0x42470000
 8002cfc:	42470e80 	.word	0x42470e80
 8002d00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d04:	f7ff fad4 	bl	80022b0 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e106      	b.n	8002f24 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d16:	4b85      	ldr	r3, [pc, #532]	; (8002f2c <HAL_RCC_OscConfig+0x4e4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d106      	bne.n	8002d38 <HAL_RCC_OscConfig+0x2f0>
 8002d2a:	4b81      	ldr	r3, [pc, #516]	; (8002f30 <HAL_RCC_OscConfig+0x4e8>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2e:	4a80      	ldr	r2, [pc, #512]	; (8002f30 <HAL_RCC_OscConfig+0x4e8>)
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	6713      	str	r3, [r2, #112]	; 0x70
 8002d36:	e01c      	b.n	8002d72 <HAL_RCC_OscConfig+0x32a>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b05      	cmp	r3, #5
 8002d3e:	d10c      	bne.n	8002d5a <HAL_RCC_OscConfig+0x312>
 8002d40:	4b7b      	ldr	r3, [pc, #492]	; (8002f30 <HAL_RCC_OscConfig+0x4e8>)
 8002d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d44:	4a7a      	ldr	r2, [pc, #488]	; (8002f30 <HAL_RCC_OscConfig+0x4e8>)
 8002d46:	f043 0304 	orr.w	r3, r3, #4
 8002d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4c:	4b78      	ldr	r3, [pc, #480]	; (8002f30 <HAL_RCC_OscConfig+0x4e8>)
 8002d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d50:	4a77      	ldr	r2, [pc, #476]	; (8002f30 <HAL_RCC_OscConfig+0x4e8>)
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	6713      	str	r3, [r2, #112]	; 0x70
 8002d58:	e00b      	b.n	8002d72 <HAL_RCC_OscConfig+0x32a>
 8002d5a:	4b75      	ldr	r3, [pc, #468]	; (8002f30 <HAL_RCC_OscConfig+0x4e8>)
 8002d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5e:	4a74      	ldr	r2, [pc, #464]	; (8002f30 <HAL_RCC_OscConfig+0x4e8>)
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	6713      	str	r3, [r2, #112]	; 0x70
 8002d66:	4b72      	ldr	r3, [pc, #456]	; (8002f30 <HAL_RCC_OscConfig+0x4e8>)
 8002d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6a:	4a71      	ldr	r2, [pc, #452]	; (8002f30 <HAL_RCC_OscConfig+0x4e8>)
 8002d6c:	f023 0304 	bic.w	r3, r3, #4
 8002d70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d015      	beq.n	8002da6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7a:	f7ff fa99 	bl	80022b0 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d82:	f7ff fa95 	bl	80022b0 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e0c5      	b.n	8002f24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d98:	4b65      	ldr	r3, [pc, #404]	; (8002f30 <HAL_RCC_OscConfig+0x4e8>)
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0ee      	beq.n	8002d82 <HAL_RCC_OscConfig+0x33a>
 8002da4:	e014      	b.n	8002dd0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da6:	f7ff fa83 	bl	80022b0 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dac:	e00a      	b.n	8002dc4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dae:	f7ff fa7f 	bl	80022b0 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e0af      	b.n	8002f24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc4:	4b5a      	ldr	r3, [pc, #360]	; (8002f30 <HAL_RCC_OscConfig+0x4e8>)
 8002dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1ee      	bne.n	8002dae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d105      	bne.n	8002de2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd6:	4b56      	ldr	r3, [pc, #344]	; (8002f30 <HAL_RCC_OscConfig+0x4e8>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	4a55      	ldr	r2, [pc, #340]	; (8002f30 <HAL_RCC_OscConfig+0x4e8>)
 8002ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 809b 	beq.w	8002f22 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dec:	4b50      	ldr	r3, [pc, #320]	; (8002f30 <HAL_RCC_OscConfig+0x4e8>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 030c 	and.w	r3, r3, #12
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d05c      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d141      	bne.n	8002e84 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e00:	4b4c      	ldr	r3, [pc, #304]	; (8002f34 <HAL_RCC_OscConfig+0x4ec>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e06:	f7ff fa53 	bl	80022b0 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e0e:	f7ff fa4f 	bl	80022b0 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e081      	b.n	8002f24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e20:	4b43      	ldr	r3, [pc, #268]	; (8002f30 <HAL_RCC_OscConfig+0x4e8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1f0      	bne.n	8002e0e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69da      	ldr	r2, [r3, #28]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	019b      	lsls	r3, r3, #6
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e42:	085b      	lsrs	r3, r3, #1
 8002e44:	3b01      	subs	r3, #1
 8002e46:	041b      	lsls	r3, r3, #16
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4e:	061b      	lsls	r3, r3, #24
 8002e50:	4937      	ldr	r1, [pc, #220]	; (8002f30 <HAL_RCC_OscConfig+0x4e8>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e56:	4b37      	ldr	r3, [pc, #220]	; (8002f34 <HAL_RCC_OscConfig+0x4ec>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5c:	f7ff fa28 	bl	80022b0 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e64:	f7ff fa24 	bl	80022b0 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e056      	b.n	8002f24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e76:	4b2e      	ldr	r3, [pc, #184]	; (8002f30 <HAL_RCC_OscConfig+0x4e8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCC_OscConfig+0x41c>
 8002e82:	e04e      	b.n	8002f22 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e84:	4b2b      	ldr	r3, [pc, #172]	; (8002f34 <HAL_RCC_OscConfig+0x4ec>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8a:	f7ff fa11 	bl	80022b0 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e92:	f7ff fa0d 	bl	80022b0 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e03f      	b.n	8002f24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea4:	4b22      	ldr	r3, [pc, #136]	; (8002f30 <HAL_RCC_OscConfig+0x4e8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f0      	bne.n	8002e92 <HAL_RCC_OscConfig+0x44a>
 8002eb0:	e037      	b.n	8002f22 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e032      	b.n	8002f24 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ebe:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <HAL_RCC_OscConfig+0x4e8>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d028      	beq.n	8002f1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d121      	bne.n	8002f1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d11a      	bne.n	8002f1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002eee:	4013      	ands	r3, r2
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ef4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d111      	bne.n	8002f1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f04:	085b      	lsrs	r3, r3, #1
 8002f06:	3b01      	subs	r3, #1
 8002f08:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d107      	bne.n	8002f1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d001      	beq.n	8002f22 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40007000 	.word	0x40007000
 8002f30:	40023800 	.word	0x40023800
 8002f34:	42470060 	.word	0x42470060

08002f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0cc      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f4c:	4b68      	ldr	r3, [pc, #416]	; (80030f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 030f 	and.w	r3, r3, #15
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d90c      	bls.n	8002f74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5a:	4b65      	ldr	r3, [pc, #404]	; (80030f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f62:	4b63      	ldr	r3, [pc, #396]	; (80030f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0b8      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d020      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f8c:	4b59      	ldr	r3, [pc, #356]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	4a58      	ldr	r2, [pc, #352]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0308 	and.w	r3, r3, #8
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fa4:	4b53      	ldr	r3, [pc, #332]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	4a52      	ldr	r2, [pc, #328]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb0:	4b50      	ldr	r3, [pc, #320]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	494d      	ldr	r1, [pc, #308]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d044      	beq.n	8003058 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d107      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd6:	4b47      	ldr	r3, [pc, #284]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d119      	bne.n	8003016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e07f      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d003      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ff2:	2b03      	cmp	r3, #3
 8002ff4:	d107      	bne.n	8003006 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff6:	4b3f      	ldr	r3, [pc, #252]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e06f      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003006:	4b3b      	ldr	r3, [pc, #236]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e067      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003016:	4b37      	ldr	r3, [pc, #220]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f023 0203 	bic.w	r2, r3, #3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4934      	ldr	r1, [pc, #208]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003024:	4313      	orrs	r3, r2
 8003026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003028:	f7ff f942 	bl	80022b0 <HAL_GetTick>
 800302c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302e:	e00a      	b.n	8003046 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003030:	f7ff f93e 	bl	80022b0 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	; 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e04f      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003046:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 020c 	and.w	r2, r3, #12
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	429a      	cmp	r2, r3
 8003056:	d1eb      	bne.n	8003030 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003058:	4b25      	ldr	r3, [pc, #148]	; (80030f0 <HAL_RCC_ClockConfig+0x1b8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d20c      	bcs.n	8003080 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003066:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800306e:	4b20      	ldr	r3, [pc, #128]	; (80030f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d001      	beq.n	8003080 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e032      	b.n	80030e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800308c:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4916      	ldr	r1, [pc, #88]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d009      	beq.n	80030be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030aa:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	490e      	ldr	r1, [pc, #56]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030be:	f000 f821 	bl	8003104 <HAL_RCC_GetSysClockFreq>
 80030c2:	4602      	mov	r2, r0
 80030c4:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	091b      	lsrs	r3, r3, #4
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	490a      	ldr	r1, [pc, #40]	; (80030f8 <HAL_RCC_ClockConfig+0x1c0>)
 80030d0:	5ccb      	ldrb	r3, [r1, r3]
 80030d2:	fa22 f303 	lsr.w	r3, r2, r3
 80030d6:	4a09      	ldr	r2, [pc, #36]	; (80030fc <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030da:	4b09      	ldr	r3, [pc, #36]	; (8003100 <HAL_RCC_ClockConfig+0x1c8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff f8a2 	bl	8002228 <HAL_InitTick>

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40023c00 	.word	0x40023c00
 80030f4:	40023800 	.word	0x40023800
 80030f8:	08007f1c 	.word	0x08007f1c
 80030fc:	2000000c 	.word	0x2000000c
 8003100:	20000010 	.word	0x20000010

08003104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003104:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	607b      	str	r3, [r7, #4]
 8003110:	2300      	movs	r3, #0
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	2300      	movs	r3, #0
 8003116:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800311c:	4b67      	ldr	r3, [pc, #412]	; (80032bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 030c 	and.w	r3, r3, #12
 8003124:	2b08      	cmp	r3, #8
 8003126:	d00d      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0x40>
 8003128:	2b08      	cmp	r3, #8
 800312a:	f200 80bd 	bhi.w	80032a8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0x34>
 8003132:	2b04      	cmp	r3, #4
 8003134:	d003      	beq.n	800313e <HAL_RCC_GetSysClockFreq+0x3a>
 8003136:	e0b7      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003138:	4b61      	ldr	r3, [pc, #388]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800313a:	60bb      	str	r3, [r7, #8]
       break;
 800313c:	e0b7      	b.n	80032ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800313e:	4b61      	ldr	r3, [pc, #388]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003140:	60bb      	str	r3, [r7, #8]
      break;
 8003142:	e0b4      	b.n	80032ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003144:	4b5d      	ldr	r3, [pc, #372]	; (80032bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800314c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800314e:	4b5b      	ldr	r3, [pc, #364]	; (80032bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d04d      	beq.n	80031f6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800315a:	4b58      	ldr	r3, [pc, #352]	; (80032bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	099b      	lsrs	r3, r3, #6
 8003160:	461a      	mov	r2, r3
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	f240 10ff 	movw	r0, #511	; 0x1ff
 800316a:	f04f 0100 	mov.w	r1, #0
 800316e:	ea02 0800 	and.w	r8, r2, r0
 8003172:	ea03 0901 	and.w	r9, r3, r1
 8003176:	4640      	mov	r0, r8
 8003178:	4649      	mov	r1, r9
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	014b      	lsls	r3, r1, #5
 8003184:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003188:	0142      	lsls	r2, r0, #5
 800318a:	4610      	mov	r0, r2
 800318c:	4619      	mov	r1, r3
 800318e:	ebb0 0008 	subs.w	r0, r0, r8
 8003192:	eb61 0109 	sbc.w	r1, r1, r9
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	018b      	lsls	r3, r1, #6
 80031a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031a4:	0182      	lsls	r2, r0, #6
 80031a6:	1a12      	subs	r2, r2, r0
 80031a8:	eb63 0301 	sbc.w	r3, r3, r1
 80031ac:	f04f 0000 	mov.w	r0, #0
 80031b0:	f04f 0100 	mov.w	r1, #0
 80031b4:	00d9      	lsls	r1, r3, #3
 80031b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031ba:	00d0      	lsls	r0, r2, #3
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	eb12 0208 	adds.w	r2, r2, r8
 80031c4:	eb43 0309 	adc.w	r3, r3, r9
 80031c8:	f04f 0000 	mov.w	r0, #0
 80031cc:	f04f 0100 	mov.w	r1, #0
 80031d0:	0259      	lsls	r1, r3, #9
 80031d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80031d6:	0250      	lsls	r0, r2, #9
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4610      	mov	r0, r2
 80031de:	4619      	mov	r1, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	461a      	mov	r2, r3
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	f7fd fd5e 	bl	8000ca8 <__aeabi_uldivmod>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4613      	mov	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	e04a      	b.n	800328c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f6:	4b31      	ldr	r3, [pc, #196]	; (80032bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	099b      	lsrs	r3, r3, #6
 80031fc:	461a      	mov	r2, r3
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003206:	f04f 0100 	mov.w	r1, #0
 800320a:	ea02 0400 	and.w	r4, r2, r0
 800320e:	ea03 0501 	and.w	r5, r3, r1
 8003212:	4620      	mov	r0, r4
 8003214:	4629      	mov	r1, r5
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	f04f 0300 	mov.w	r3, #0
 800321e:	014b      	lsls	r3, r1, #5
 8003220:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003224:	0142      	lsls	r2, r0, #5
 8003226:	4610      	mov	r0, r2
 8003228:	4619      	mov	r1, r3
 800322a:	1b00      	subs	r0, r0, r4
 800322c:	eb61 0105 	sbc.w	r1, r1, r5
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	018b      	lsls	r3, r1, #6
 800323a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800323e:	0182      	lsls	r2, r0, #6
 8003240:	1a12      	subs	r2, r2, r0
 8003242:	eb63 0301 	sbc.w	r3, r3, r1
 8003246:	f04f 0000 	mov.w	r0, #0
 800324a:	f04f 0100 	mov.w	r1, #0
 800324e:	00d9      	lsls	r1, r3, #3
 8003250:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003254:	00d0      	lsls	r0, r2, #3
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	1912      	adds	r2, r2, r4
 800325c:	eb45 0303 	adc.w	r3, r5, r3
 8003260:	f04f 0000 	mov.w	r0, #0
 8003264:	f04f 0100 	mov.w	r1, #0
 8003268:	0299      	lsls	r1, r3, #10
 800326a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800326e:	0290      	lsls	r0, r2, #10
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	461a      	mov	r2, r3
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	f7fd fd12 	bl	8000ca8 <__aeabi_uldivmod>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4613      	mov	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800328c:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	0c1b      	lsrs	r3, r3, #16
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	3301      	adds	r3, #1
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a4:	60bb      	str	r3, [r7, #8]
      break;
 80032a6:	e002      	b.n	80032ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032a8:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80032aa:	60bb      	str	r3, [r7, #8]
      break;
 80032ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ae:	68bb      	ldr	r3, [r7, #8]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032ba:	bf00      	nop
 80032bc:	40023800 	.word	0x40023800
 80032c0:	00f42400 	.word	0x00f42400
 80032c4:	007a1200 	.word	0x007a1200

080032c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032cc:	4b03      	ldr	r3, [pc, #12]	; (80032dc <HAL_RCC_GetHCLKFreq+0x14>)
 80032ce:	681b      	ldr	r3, [r3, #0]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	2000000c 	.word	0x2000000c

080032e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032e4:	f7ff fff0 	bl	80032c8 <HAL_RCC_GetHCLKFreq>
 80032e8:	4602      	mov	r2, r0
 80032ea:	4b05      	ldr	r3, [pc, #20]	; (8003300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	0a9b      	lsrs	r3, r3, #10
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	4903      	ldr	r1, [pc, #12]	; (8003304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032f6:	5ccb      	ldrb	r3, [r1, r3]
 80032f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40023800 	.word	0x40023800
 8003304:	08007f2c 	.word	0x08007f2c

08003308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800330c:	f7ff ffdc 	bl	80032c8 <HAL_RCC_GetHCLKFreq>
 8003310:	4602      	mov	r2, r0
 8003312:	4b05      	ldr	r3, [pc, #20]	; (8003328 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	0b5b      	lsrs	r3, r3, #13
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	4903      	ldr	r1, [pc, #12]	; (800332c <HAL_RCC_GetPCLK2Freq+0x24>)
 800331e:	5ccb      	ldrb	r3, [r1, r3]
 8003320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003324:	4618      	mov	r0, r3
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40023800 	.word	0x40023800
 800332c:	08007f2c 	.word	0x08007f2c

08003330 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e083      	b.n	800344a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	7f5b      	ldrb	r3, [r3, #29]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d105      	bne.n	8003358 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f87d 	bl	8003452 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	22ca      	movs	r2, #202	; 0xca
 8003364:	625a      	str	r2, [r3, #36]	; 0x24
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2253      	movs	r2, #83	; 0x53
 800336c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fab2 	bl	80038d8 <RTC_EnterInitMode>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	22ff      	movs	r2, #255	; 0xff
 8003380:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2204      	movs	r2, #4
 8003386:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e05e      	b.n	800344a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6812      	ldr	r2, [r2, #0]
 8003396:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800339a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800339e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6899      	ldr	r1, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68d2      	ldr	r2, [r2, #12]
 80033c6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6919      	ldr	r1, [r3, #16]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	041a      	lsls	r2, r3, #16
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033ea:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 0320 	and.w	r3, r3, #32
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10e      	bne.n	8003418 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fa44 	bl	8003888 <HAL_RTC_WaitForSynchro>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	22ff      	movs	r2, #255	; 0xff
 800340c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2204      	movs	r2, #4
 8003412:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e018      	b.n	800344a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003426:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699a      	ldr	r2, [r3, #24]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	22ff      	movs	r2, #255	; 0xff
 8003440:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003448:	2300      	movs	r3, #0
  }
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_RTC_MspInit>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003466:	b590      	push	{r4, r7, lr}
 8003468:	b087      	sub	sp, #28
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	7f1b      	ldrb	r3, [r3, #28]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_RTC_SetTime+0x1c>
 800347e:	2302      	movs	r3, #2
 8003480:	e0aa      	b.n	80035d8 <HAL_RTC_SetTime+0x172>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2202      	movs	r2, #2
 800348c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d126      	bne.n	80034e2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d102      	bne.n	80034a8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2200      	movs	r2, #0
 80034a6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 fa3f 	bl	8003930 <RTC_ByteToBcd2>
 80034b2:	4603      	mov	r3, r0
 80034b4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	785b      	ldrb	r3, [r3, #1]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 fa38 	bl	8003930 <RTC_ByteToBcd2>
 80034c0:	4603      	mov	r3, r0
 80034c2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80034c4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	789b      	ldrb	r3, [r3, #2]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fa30 	bl	8003930 <RTC_ByteToBcd2>
 80034d0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80034d2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	78db      	ldrb	r3, [r3, #3]
 80034da:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	e018      	b.n	8003514 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d102      	bne.n	80034f6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2200      	movs	r2, #0
 80034f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	785b      	ldrb	r3, [r3, #1]
 8003500:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003502:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003508:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	78db      	ldrb	r3, [r3, #3]
 800350e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	22ca      	movs	r2, #202	; 0xca
 800351a:	625a      	str	r2, [r3, #36]	; 0x24
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2253      	movs	r2, #83	; 0x53
 8003522:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f9d7 	bl	80038d8 <RTC_EnterInitMode>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00b      	beq.n	8003548 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	22ff      	movs	r2, #255	; 0xff
 8003536:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2204      	movs	r2, #4
 800353c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e047      	b.n	80035d8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003552:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003556:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003566:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6899      	ldr	r1, [r3, #8]
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	431a      	orrs	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800358e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b00      	cmp	r3, #0
 800359c:	d111      	bne.n	80035c2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f972 	bl	8003888 <HAL_RTC_WaitForSynchro>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00b      	beq.n	80035c2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	22ff      	movs	r2, #255	; 0xff
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2204      	movs	r2, #4
 80035b6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e00a      	b.n	80035d8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	22ff      	movs	r2, #255	; 0xff
 80035c8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2201      	movs	r2, #1
 80035ce:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80035d6:	2300      	movs	r3, #0
  }
}
 80035d8:	4618      	mov	r0, r3
 80035da:	371c      	adds	r7, #28
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd90      	pop	{r4, r7, pc}

080035e0 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003612:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003616:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	0c1b      	lsrs	r3, r3, #16
 800361c:	b2db      	uxtb	r3, r3
 800361e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003622:	b2da      	uxtb	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	0a1b      	lsrs	r3, r3, #8
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003632:	b2da      	uxtb	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003640:	b2da      	uxtb	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	0c1b      	lsrs	r3, r3, #16
 800364a:	b2db      	uxtb	r3, r3
 800364c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003650:	b2da      	uxtb	r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d11a      	bne.n	8003692 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f000 f983 	bl	800396c <RTC_Bcd2ToByte>
 8003666:	4603      	mov	r3, r0
 8003668:	461a      	mov	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	785b      	ldrb	r3, [r3, #1]
 8003672:	4618      	mov	r0, r3
 8003674:	f000 f97a 	bl	800396c <RTC_Bcd2ToByte>
 8003678:	4603      	mov	r3, r0
 800367a:	461a      	mov	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	789b      	ldrb	r3, [r3, #2]
 8003684:	4618      	mov	r0, r3
 8003686:	f000 f971 	bl	800396c <RTC_Bcd2ToByte>
 800368a:	4603      	mov	r3, r0
 800368c:	461a      	mov	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800369c:	b590      	push	{r4, r7, lr}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	7f1b      	ldrb	r3, [r3, #28]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <HAL_RTC_SetDate+0x1c>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e094      	b.n	80037e2 <HAL_RTC_SetDate+0x146>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2201      	movs	r2, #1
 80036bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2202      	movs	r2, #2
 80036c2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10e      	bne.n	80036e8 <HAL_RTC_SetDate+0x4c>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	785b      	ldrb	r3, [r3, #1]
 80036ce:	f003 0310 	and.w	r3, r3, #16
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d008      	beq.n	80036e8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	785b      	ldrb	r3, [r3, #1]
 80036da:	f023 0310 	bic.w	r3, r3, #16
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	330a      	adds	r3, #10
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d11c      	bne.n	8003728 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	78db      	ldrb	r3, [r3, #3]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 f91c 	bl	8003930 <RTC_ByteToBcd2>
 80036f8:	4603      	mov	r3, r0
 80036fa:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	785b      	ldrb	r3, [r3, #1]
 8003700:	4618      	mov	r0, r3
 8003702:	f000 f915 	bl	8003930 <RTC_ByteToBcd2>
 8003706:	4603      	mov	r3, r0
 8003708:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800370a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	789b      	ldrb	r3, [r3, #2]
 8003710:	4618      	mov	r0, r3
 8003712:	f000 f90d 	bl	8003930 <RTC_ByteToBcd2>
 8003716:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003718:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003722:	4313      	orrs	r3, r2
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	e00e      	b.n	8003746 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	78db      	ldrb	r3, [r3, #3]
 800372c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	785b      	ldrb	r3, [r3, #1]
 8003732:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003734:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800373a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	22ca      	movs	r2, #202	; 0xca
 800374c:	625a      	str	r2, [r3, #36]	; 0x24
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2253      	movs	r2, #83	; 0x53
 8003754:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f8be 	bl	80038d8 <RTC_EnterInitMode>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00b      	beq.n	800377a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	22ff      	movs	r2, #255	; 0xff
 8003768:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2204      	movs	r2, #4
 800376e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e033      	b.n	80037e2 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003784:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003788:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003798:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d111      	bne.n	80037cc <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f86d 	bl	8003888 <HAL_RTC_WaitForSynchro>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00b      	beq.n	80037cc <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	22ff      	movs	r2, #255	; 0xff
 80037ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2204      	movs	r2, #4
 80037c0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e00a      	b.n	80037e2 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	22ff      	movs	r2, #255	; 0xff
 80037d2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80037e0:	2300      	movs	r3, #0
  }
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	371c      	adds	r7, #28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd90      	pop	{r4, r7, pc}

080037ea <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b086      	sub	sp, #24
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003804:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003808:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	0c1b      	lsrs	r3, r3, #16
 800380e:	b2da      	uxtb	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	0a1b      	lsrs	r3, r3, #8
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	b2da      	uxtb	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	b2db      	uxtb	r3, r3
 8003828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800382c:	b2da      	uxtb	r2, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	0b5b      	lsrs	r3, r3, #13
 8003836:	b2db      	uxtb	r3, r3
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	b2da      	uxtb	r2, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d11a      	bne.n	800387e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	78db      	ldrb	r3, [r3, #3]
 800384c:	4618      	mov	r0, r3
 800384e:	f000 f88d 	bl	800396c <RTC_Bcd2ToByte>
 8003852:	4603      	mov	r3, r0
 8003854:	461a      	mov	r2, r3
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	785b      	ldrb	r3, [r3, #1]
 800385e:	4618      	mov	r0, r3
 8003860:	f000 f884 	bl	800396c <RTC_Bcd2ToByte>
 8003864:	4603      	mov	r3, r0
 8003866:	461a      	mov	r2, r3
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	789b      	ldrb	r3, [r3, #2]
 8003870:	4618      	mov	r0, r3
 8003872:	f000 f87b 	bl	800396c <RTC_Bcd2ToByte>
 8003876:	4603      	mov	r3, r0
 8003878:	461a      	mov	r2, r3
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038a2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038a4:	f7fe fd04 	bl	80022b0 <HAL_GetTick>
 80038a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80038aa:	e009      	b.n	80038c0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80038ac:	f7fe fd00 	bl	80022b0 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038ba:	d901      	bls.n	80038c0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e007      	b.n	80038d0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0ee      	beq.n	80038ac <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d119      	bne.n	8003926 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f04f 32ff 	mov.w	r2, #4294967295
 80038fa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038fc:	f7fe fcd8 	bl	80022b0 <HAL_GetTick>
 8003900:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003902:	e009      	b.n	8003918 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003904:	f7fe fcd4 	bl	80022b0 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003912:	d901      	bls.n	8003918 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e007      	b.n	8003928 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0ee      	beq.n	8003904 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800393e:	e005      	b.n	800394c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	3301      	adds	r3, #1
 8003944:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	3b0a      	subs	r3, #10
 800394a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	2b09      	cmp	r3, #9
 8003950:	d8f6      	bhi.n	8003940 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	b2db      	uxtb	r3, r3
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	b2da      	uxtb	r2, r3
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	4313      	orrs	r3, r2
 800395e:	b2db      	uxtb	r3, r3
}
 8003960:	4618      	mov	r0, r3
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	b2db      	uxtb	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	b2da      	uxtb	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	b2db      	uxtb	r3, r3
 8003998:	4413      	add	r3, r2
 800399a:	b2db      	uxtb	r3, r3
}
 800399c:	4618      	mov	r0, r3
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_RTCEx_SetRefClock>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef* hrtc)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	7f1b      	ldrb	r3, [r3, #28]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_RTCEx_SetRefClock+0x14>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e03a      	b.n	8003a32 <HAL_RTCEx_SetRefClock+0x8a>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2202      	movs	r2, #2
 80039c6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	22ca      	movs	r2, #202	; 0xca
 80039ce:	625a      	str	r2, [r3, #36]	; 0x24
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2253      	movs	r2, #83	; 0x53
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ff7d 	bl	80038d8 <RTC_EnterInitMode>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00b      	beq.n	80039fc <HAL_RTCEx_SetRefClock+0x54>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	22ff      	movs	r2, #255	; 0xff
 80039ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2204      	movs	r2, #4
 80039f0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e01a      	b.n	8003a32 <HAL_RTCEx_SetRefClock+0x8a>
  }
  else
  {
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0210 	orr.w	r2, r2, #16
 8003a0a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a1a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	22ff      	movs	r2, #255	; 0xff
 8003a22:	625a      	str	r2, [r3, #36]	; 0x24

   /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e03f      	b.n	8003acc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d106      	bne.n	8003a66 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7fe ff33 	bl	80028cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2224      	movs	r2, #36	; 0x24
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a7c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f928 	bl	8003cd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a92:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695a      	ldr	r2, [r3, #20]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aa2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ab2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08a      	sub	sp, #40	; 0x28
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d17c      	bne.n	8003bee <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <HAL_UART_Transmit+0x2c>
 8003afa:	88fb      	ldrh	r3, [r7, #6]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e075      	b.n	8003bf0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_UART_Transmit+0x3e>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e06e      	b.n	8003bf0 <HAL_UART_Transmit+0x11c>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2221      	movs	r2, #33	; 0x21
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b28:	f7fe fbc2 	bl	80022b0 <HAL_GetTick>
 8003b2c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	88fa      	ldrh	r2, [r7, #6]
 8003b32:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	88fa      	ldrh	r2, [r7, #6]
 8003b38:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b42:	d108      	bne.n	8003b56 <HAL_UART_Transmit+0x82>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d104      	bne.n	8003b56 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	61bb      	str	r3, [r7, #24]
 8003b54:	e003      	b.n	8003b5e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b66:	e02a      	b.n	8003bbe <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2180      	movs	r1, #128	; 0x80
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f840 	bl	8003bf8 <UART_WaitOnFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e036      	b.n	8003bf0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10b      	bne.n	8003ba0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b96:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	3302      	adds	r3, #2
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	e007      	b.n	8003bb0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	781a      	ldrb	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3301      	adds	r3, #1
 8003bae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1cf      	bne.n	8003b68 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2140      	movs	r1, #64	; 0x40
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 f810 	bl	8003bf8 <UART_WaitOnFlagUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e006      	b.n	8003bf0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	e000      	b.n	8003bf0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003bee:	2302      	movs	r3, #2
  }
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3720      	adds	r7, #32
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b090      	sub	sp, #64	; 0x40
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	4613      	mov	r3, r2
 8003c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c08:	e050      	b.n	8003cac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c10:	d04c      	beq.n	8003cac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d007      	beq.n	8003c28 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c18:	f7fe fb4a 	bl	80022b0 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d241      	bcs.n	8003cac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	330c      	adds	r3, #12
 8003c2e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c32:	e853 3f00 	ldrex	r3, [r3]
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	330c      	adds	r3, #12
 8003c46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c48:	637a      	str	r2, [r7, #52]	; 0x34
 8003c4a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c50:	e841 2300 	strex	r3, r2, [r1]
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e5      	bne.n	8003c28 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3314      	adds	r3, #20
 8003c62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	e853 3f00 	ldrex	r3, [r3]
 8003c6a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	f023 0301 	bic.w	r3, r3, #1
 8003c72:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3314      	adds	r3, #20
 8003c7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c7c:	623a      	str	r2, [r7, #32]
 8003c7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c80:	69f9      	ldr	r1, [r7, #28]
 8003c82:	6a3a      	ldr	r2, [r7, #32]
 8003c84:	e841 2300 	strex	r3, r2, [r1]
 8003c88:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e5      	bne.n	8003c5c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e00f      	b.n	8003ccc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	bf0c      	ite	eq
 8003cbc:	2301      	moveq	r3, #1
 8003cbe:	2300      	movne	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	79fb      	ldrb	r3, [r7, #7]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d09f      	beq.n	8003c0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3740      	adds	r7, #64	; 0x40
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cd8:	b09f      	sub	sp, #124	; 0x7c
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cea:	68d9      	ldr	r1, [r3, #12]
 8003cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	ea40 0301 	orr.w	r3, r0, r1
 8003cf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	431a      	orrs	r2, r3
 8003d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d18:	f021 010c 	bic.w	r1, r1, #12
 8003d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d22:	430b      	orrs	r3, r1
 8003d24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d32:	6999      	ldr	r1, [r3, #24]
 8003d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	ea40 0301 	orr.w	r3, r0, r1
 8003d3c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	4bc5      	ldr	r3, [pc, #788]	; (8004058 <UART_SetConfig+0x384>)
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d004      	beq.n	8003d52 <UART_SetConfig+0x7e>
 8003d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	4bc3      	ldr	r3, [pc, #780]	; (800405c <UART_SetConfig+0x388>)
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d103      	bne.n	8003d5a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d52:	f7ff fad9 	bl	8003308 <HAL_RCC_GetPCLK2Freq>
 8003d56:	6778      	str	r0, [r7, #116]	; 0x74
 8003d58:	e002      	b.n	8003d60 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d5a:	f7ff fac1 	bl	80032e0 <HAL_RCC_GetPCLK1Freq>
 8003d5e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d68:	f040 80b6 	bne.w	8003ed8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d6e:	461c      	mov	r4, r3
 8003d70:	f04f 0500 	mov.w	r5, #0
 8003d74:	4622      	mov	r2, r4
 8003d76:	462b      	mov	r3, r5
 8003d78:	1891      	adds	r1, r2, r2
 8003d7a:	6439      	str	r1, [r7, #64]	; 0x40
 8003d7c:	415b      	adcs	r3, r3
 8003d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d84:	1912      	adds	r2, r2, r4
 8003d86:	eb45 0303 	adc.w	r3, r5, r3
 8003d8a:	f04f 0000 	mov.w	r0, #0
 8003d8e:	f04f 0100 	mov.w	r1, #0
 8003d92:	00d9      	lsls	r1, r3, #3
 8003d94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d98:	00d0      	lsls	r0, r2, #3
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	1911      	adds	r1, r2, r4
 8003da0:	6639      	str	r1, [r7, #96]	; 0x60
 8003da2:	416b      	adcs	r3, r5
 8003da4:	667b      	str	r3, [r7, #100]	; 0x64
 8003da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	461a      	mov	r2, r3
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	1891      	adds	r1, r2, r2
 8003db2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003db4:	415b      	adcs	r3, r3
 8003db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003db8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003dbc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003dc0:	f7fc ff72 	bl	8000ca8 <__aeabi_uldivmod>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4ba5      	ldr	r3, [pc, #660]	; (8004060 <UART_SetConfig+0x38c>)
 8003dca:	fba3 2302 	umull	r2, r3, r3, r2
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	011e      	lsls	r6, r3, #4
 8003dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dd4:	461c      	mov	r4, r3
 8003dd6:	f04f 0500 	mov.w	r5, #0
 8003dda:	4622      	mov	r2, r4
 8003ddc:	462b      	mov	r3, r5
 8003dde:	1891      	adds	r1, r2, r2
 8003de0:	6339      	str	r1, [r7, #48]	; 0x30
 8003de2:	415b      	adcs	r3, r3
 8003de4:	637b      	str	r3, [r7, #52]	; 0x34
 8003de6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003dea:	1912      	adds	r2, r2, r4
 8003dec:	eb45 0303 	adc.w	r3, r5, r3
 8003df0:	f04f 0000 	mov.w	r0, #0
 8003df4:	f04f 0100 	mov.w	r1, #0
 8003df8:	00d9      	lsls	r1, r3, #3
 8003dfa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dfe:	00d0      	lsls	r0, r2, #3
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	1911      	adds	r1, r2, r4
 8003e06:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e08:	416b      	adcs	r3, r5
 8003e0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	461a      	mov	r2, r3
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	1891      	adds	r1, r2, r2
 8003e18:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e1a:	415b      	adcs	r3, r3
 8003e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e22:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003e26:	f7fc ff3f 	bl	8000ca8 <__aeabi_uldivmod>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4b8c      	ldr	r3, [pc, #560]	; (8004060 <UART_SetConfig+0x38c>)
 8003e30:	fba3 1302 	umull	r1, r3, r3, r2
 8003e34:	095b      	lsrs	r3, r3, #5
 8003e36:	2164      	movs	r1, #100	; 0x64
 8003e38:	fb01 f303 	mul.w	r3, r1, r3
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	3332      	adds	r3, #50	; 0x32
 8003e42:	4a87      	ldr	r2, [pc, #540]	; (8004060 <UART_SetConfig+0x38c>)
 8003e44:	fba2 2303 	umull	r2, r3, r2, r3
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e50:	441e      	add	r6, r3
 8003e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e54:	4618      	mov	r0, r3
 8003e56:	f04f 0100 	mov.w	r1, #0
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	1894      	adds	r4, r2, r2
 8003e60:	623c      	str	r4, [r7, #32]
 8003e62:	415b      	adcs	r3, r3
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
 8003e66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e6a:	1812      	adds	r2, r2, r0
 8003e6c:	eb41 0303 	adc.w	r3, r1, r3
 8003e70:	f04f 0400 	mov.w	r4, #0
 8003e74:	f04f 0500 	mov.w	r5, #0
 8003e78:	00dd      	lsls	r5, r3, #3
 8003e7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e7e:	00d4      	lsls	r4, r2, #3
 8003e80:	4622      	mov	r2, r4
 8003e82:	462b      	mov	r3, r5
 8003e84:	1814      	adds	r4, r2, r0
 8003e86:	653c      	str	r4, [r7, #80]	; 0x50
 8003e88:	414b      	adcs	r3, r1
 8003e8a:	657b      	str	r3, [r7, #84]	; 0x54
 8003e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	461a      	mov	r2, r3
 8003e92:	f04f 0300 	mov.w	r3, #0
 8003e96:	1891      	adds	r1, r2, r2
 8003e98:	61b9      	str	r1, [r7, #24]
 8003e9a:	415b      	adcs	r3, r3
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ea2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003ea6:	f7fc feff 	bl	8000ca8 <__aeabi_uldivmod>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4b6c      	ldr	r3, [pc, #432]	; (8004060 <UART_SetConfig+0x38c>)
 8003eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	2164      	movs	r1, #100	; 0x64
 8003eb8:	fb01 f303 	mul.w	r3, r1, r3
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	3332      	adds	r3, #50	; 0x32
 8003ec2:	4a67      	ldr	r2, [pc, #412]	; (8004060 <UART_SetConfig+0x38c>)
 8003ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	f003 0207 	and.w	r2, r3, #7
 8003ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4432      	add	r2, r6
 8003ed4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ed6:	e0b9      	b.n	800404c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eda:	461c      	mov	r4, r3
 8003edc:	f04f 0500 	mov.w	r5, #0
 8003ee0:	4622      	mov	r2, r4
 8003ee2:	462b      	mov	r3, r5
 8003ee4:	1891      	adds	r1, r2, r2
 8003ee6:	6139      	str	r1, [r7, #16]
 8003ee8:	415b      	adcs	r3, r3
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ef0:	1912      	adds	r2, r2, r4
 8003ef2:	eb45 0303 	adc.w	r3, r5, r3
 8003ef6:	f04f 0000 	mov.w	r0, #0
 8003efa:	f04f 0100 	mov.w	r1, #0
 8003efe:	00d9      	lsls	r1, r3, #3
 8003f00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f04:	00d0      	lsls	r0, r2, #3
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	eb12 0804 	adds.w	r8, r2, r4
 8003f0e:	eb43 0905 	adc.w	r9, r3, r5
 8003f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f04f 0100 	mov.w	r1, #0
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	008b      	lsls	r3, r1, #2
 8003f26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f2a:	0082      	lsls	r2, r0, #2
 8003f2c:	4640      	mov	r0, r8
 8003f2e:	4649      	mov	r1, r9
 8003f30:	f7fc feba 	bl	8000ca8 <__aeabi_uldivmod>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4b49      	ldr	r3, [pc, #292]	; (8004060 <UART_SetConfig+0x38c>)
 8003f3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f3e:	095b      	lsrs	r3, r3, #5
 8003f40:	011e      	lsls	r6, r3, #4
 8003f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f44:	4618      	mov	r0, r3
 8003f46:	f04f 0100 	mov.w	r1, #0
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	1894      	adds	r4, r2, r2
 8003f50:	60bc      	str	r4, [r7, #8]
 8003f52:	415b      	adcs	r3, r3
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f5a:	1812      	adds	r2, r2, r0
 8003f5c:	eb41 0303 	adc.w	r3, r1, r3
 8003f60:	f04f 0400 	mov.w	r4, #0
 8003f64:	f04f 0500 	mov.w	r5, #0
 8003f68:	00dd      	lsls	r5, r3, #3
 8003f6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f6e:	00d4      	lsls	r4, r2, #3
 8003f70:	4622      	mov	r2, r4
 8003f72:	462b      	mov	r3, r5
 8003f74:	1814      	adds	r4, r2, r0
 8003f76:	64bc      	str	r4, [r7, #72]	; 0x48
 8003f78:	414b      	adcs	r3, r1
 8003f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f04f 0100 	mov.w	r1, #0
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	008b      	lsls	r3, r1, #2
 8003f90:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f94:	0082      	lsls	r2, r0, #2
 8003f96:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003f9a:	f7fc fe85 	bl	8000ca8 <__aeabi_uldivmod>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4b2f      	ldr	r3, [pc, #188]	; (8004060 <UART_SetConfig+0x38c>)
 8003fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa8:	095b      	lsrs	r3, r3, #5
 8003faa:	2164      	movs	r1, #100	; 0x64
 8003fac:	fb01 f303 	mul.w	r3, r1, r3
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	3332      	adds	r3, #50	; 0x32
 8003fb6:	4a2a      	ldr	r2, [pc, #168]	; (8004060 <UART_SetConfig+0x38c>)
 8003fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbc:	095b      	lsrs	r3, r3, #5
 8003fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc2:	441e      	add	r6, r3
 8003fc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f04f 0100 	mov.w	r1, #0
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	1894      	adds	r4, r2, r2
 8003fd2:	603c      	str	r4, [r7, #0]
 8003fd4:	415b      	adcs	r3, r3
 8003fd6:	607b      	str	r3, [r7, #4]
 8003fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fdc:	1812      	adds	r2, r2, r0
 8003fde:	eb41 0303 	adc.w	r3, r1, r3
 8003fe2:	f04f 0400 	mov.w	r4, #0
 8003fe6:	f04f 0500 	mov.w	r5, #0
 8003fea:	00dd      	lsls	r5, r3, #3
 8003fec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ff0:	00d4      	lsls	r4, r2, #3
 8003ff2:	4622      	mov	r2, r4
 8003ff4:	462b      	mov	r3, r5
 8003ff6:	eb12 0a00 	adds.w	sl, r2, r0
 8003ffa:	eb43 0b01 	adc.w	fp, r3, r1
 8003ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	4618      	mov	r0, r3
 8004004:	f04f 0100 	mov.w	r1, #0
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	008b      	lsls	r3, r1, #2
 8004012:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004016:	0082      	lsls	r2, r0, #2
 8004018:	4650      	mov	r0, sl
 800401a:	4659      	mov	r1, fp
 800401c:	f7fc fe44 	bl	8000ca8 <__aeabi_uldivmod>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4b0e      	ldr	r3, [pc, #56]	; (8004060 <UART_SetConfig+0x38c>)
 8004026:	fba3 1302 	umull	r1, r3, r3, r2
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	2164      	movs	r1, #100	; 0x64
 800402e:	fb01 f303 	mul.w	r3, r1, r3
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	3332      	adds	r3, #50	; 0x32
 8004038:	4a09      	ldr	r2, [pc, #36]	; (8004060 <UART_SetConfig+0x38c>)
 800403a:	fba2 2303 	umull	r2, r3, r2, r3
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	f003 020f 	and.w	r2, r3, #15
 8004044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4432      	add	r2, r6
 800404a:	609a      	str	r2, [r3, #8]
}
 800404c:	bf00      	nop
 800404e:	377c      	adds	r7, #124	; 0x7c
 8004050:	46bd      	mov	sp, r7
 8004052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004056:	bf00      	nop
 8004058:	40011000 	.word	0x40011000
 800405c:	40011400 	.word	0x40011400
 8004060:	51eb851f 	.word	0x51eb851f

08004064 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
	HAL_Init();
 8004068:	f7fe f8c2 	bl	80021f0 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 800406c:	f000 f80a 	bl	8004084 <SystemClock_Config>
	uartInit(9600) ;
 8004070:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8004074:	f7fd fe8a 	bl	8001d8c <uartInit>
	initFSM()  ;
 8004078:	f7fd fa48 	bl	800150c <initFSM>
	/* Infinite loop */

	while (1)
    {
		FSM_loop()  ;
 800407c:	f7fd fa52 	bl	8001524 <FSM_loop>
 8004080:	e7fc      	b.n	800407c <main+0x18>
	...

08004084 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b094      	sub	sp, #80	; 0x50
 8004088:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800408a:	f107 0320 	add.w	r3, r7, #32
 800408e:	2230      	movs	r2, #48	; 0x30
 8004090:	2100      	movs	r1, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f000 f8ce 	bl	8004234 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004098:	f107 030c 	add.w	r3, r7, #12
 800409c:	2200      	movs	r2, #0
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	605a      	str	r2, [r3, #4]
 80040a2:	609a      	str	r2, [r3, #8]
 80040a4:	60da      	str	r2, [r3, #12]
 80040a6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 80040a8:	2300      	movs	r3, #0
 80040aa:	60bb      	str	r3, [r7, #8]
 80040ac:	4b2d      	ldr	r3, [pc, #180]	; (8004164 <SystemClock_Config+0xe0>)
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	4a2c      	ldr	r2, [pc, #176]	; (8004164 <SystemClock_Config+0xe0>)
 80040b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b6:	6413      	str	r3, [r2, #64]	; 0x40
 80040b8:	4b2a      	ldr	r3, [pc, #168]	; (8004164 <SystemClock_Config+0xe0>)
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040c4:	2300      	movs	r3, #0
 80040c6:	607b      	str	r3, [r7, #4]
 80040c8:	4b27      	ldr	r3, [pc, #156]	; (8004168 <SystemClock_Config+0xe4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a26      	ldr	r2, [pc, #152]	; (8004168 <SystemClock_Config+0xe4>)
 80040ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	4b24      	ldr	r3, [pc, #144]	; (8004168 <SystemClock_Config+0xe4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80040dc:	607b      	str	r3, [r7, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80040e0:	2305      	movs	r3, #5
 80040e2:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80040e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24
	  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80040ea:	2301      	movs	r3, #1
 80040ec:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040ee:	2302      	movs	r3, #2
 80040f0:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80040f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 8;
 80040f8:	2308      	movs	r3, #8
 80040fa:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLN = 360;
 80040fc:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8004100:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004102:	2302      	movs	r3, #2
 8004104:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004106:	2307      	movs	r3, #7
 8004108:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800410a:	f107 0320 	add.w	r3, r7, #32
 800410e:	4618      	mov	r0, r3
 8004110:	f7fe fc9a 	bl	8002a48 <HAL_RCC_OscConfig>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <SystemClock_Config+0x9a>
	  {
	    Error_Handler();
 800411a:	f000 f827 	bl	800416c <Error_Handler>
	  }
	  /** Activate the Over-Drive mode
	  */
	  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800411e:	f7fe fc43 	bl	80029a8 <HAL_PWREx_EnableOverDrive>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <SystemClock_Config+0xa8>
	  {
	    Error_Handler();
 8004128:	f000 f820 	bl	800416c <Error_Handler>
	  }
	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800412c:	230f      	movs	r3, #15
 800412e:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004130:	2302      	movs	r3, #2
 8004132:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004134:	2300      	movs	r3, #0
 8004136:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004138:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800413c:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800413e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004142:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004144:	f107 030c 	add.w	r3, r7, #12
 8004148:	2105      	movs	r1, #5
 800414a:	4618      	mov	r0, r3
 800414c:	f7fe fef4 	bl	8002f38 <HAL_RCC_ClockConfig>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <SystemClock_Config+0xd6>
	  {
	    Error_Handler();
 8004156:	f000 f809 	bl	800416c <Error_Handler>
	  }
}
 800415a:	bf00      	nop
 800415c:	3750      	adds	r7, #80	; 0x50
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40023800 	.word	0x40023800
 8004168:	40007000 	.word	0x40007000

0800416c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_Init(LED2) ;
 8004170:	2001      	movs	r0, #1
 8004172:	f7fd fe8f 	bl	8001e94 <BSP_LED_Init>
  BSP_LED_On(LED2);
 8004176:	2001      	movs	r0, #1
 8004178:	f7fd fedc 	bl	8001f34 <BSP_LED_On>
  while (1)
  {
	  BSP_LED_Toggle(LED2);
 800417c:	2001      	movs	r0, #1
 800417e:	f7fd fef3 	bl	8001f68 <BSP_LED_Toggle>
	  HAL_Delay(100) ;
 8004182:	2064      	movs	r0, #100	; 0x64
 8004184:	f7fe f8a0 	bl	80022c8 <HAL_Delay>
	  BSP_LED_Toggle(LED2);
 8004188:	e7f8      	b.n	800417c <Error_Handler+0x10>
	...

0800418c <Reset_Handler>:

   .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800418c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041c4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004190:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004192:	e003      	b.n	800419c <LoopCopyDataInit>

08004194 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004194:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004196:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004198:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800419a:	3104      	adds	r1, #4

0800419c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800419c:	480b      	ldr	r0, [pc, #44]	; (80041cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800419e:	4b0c      	ldr	r3, [pc, #48]	; (80041d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80041a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80041a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80041a4:	d3f6      	bcc.n	8004194 <CopyDataInit>
  ldr  r2, =_sbss
 80041a6:	4a0b      	ldr	r2, [pc, #44]	; (80041d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80041a8:	e002      	b.n	80041b0 <LoopFillZerobss>

080041aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80041aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80041ac:	f842 3b04 	str.w	r3, [r2], #4

080041b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80041b0:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80041b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80041b4:	d3f9      	bcc.n	80041aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80041b6:	f7fd fef1 	bl	8001f9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041ba:	f000 f817 	bl	80041ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041be:	f7ff ff51 	bl	8004064 <main>
  bx  lr    
 80041c2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80041c4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80041c8:	08008368 	.word	0x08008368
  ldr  r0, =_sdata
 80041cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80041d0:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 80041d4:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 80041d8:	2000029c 	.word	0x2000029c

080041dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041dc:	e7fe      	b.n	80041dc <ADC_IRQHandler>
	...

080041e0 <__errno>:
 80041e0:	4b01      	ldr	r3, [pc, #4]	; (80041e8 <__errno+0x8>)
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	20000018 	.word	0x20000018

080041ec <__libc_init_array>:
 80041ec:	b570      	push	{r4, r5, r6, lr}
 80041ee:	4d0d      	ldr	r5, [pc, #52]	; (8004224 <__libc_init_array+0x38>)
 80041f0:	4c0d      	ldr	r4, [pc, #52]	; (8004228 <__libc_init_array+0x3c>)
 80041f2:	1b64      	subs	r4, r4, r5
 80041f4:	10a4      	asrs	r4, r4, #2
 80041f6:	2600      	movs	r6, #0
 80041f8:	42a6      	cmp	r6, r4
 80041fa:	d109      	bne.n	8004210 <__libc_init_array+0x24>
 80041fc:	4d0b      	ldr	r5, [pc, #44]	; (800422c <__libc_init_array+0x40>)
 80041fe:	4c0c      	ldr	r4, [pc, #48]	; (8004230 <__libc_init_array+0x44>)
 8004200:	f003 fe68 	bl	8007ed4 <_init>
 8004204:	1b64      	subs	r4, r4, r5
 8004206:	10a4      	asrs	r4, r4, #2
 8004208:	2600      	movs	r6, #0
 800420a:	42a6      	cmp	r6, r4
 800420c:	d105      	bne.n	800421a <__libc_init_array+0x2e>
 800420e:	bd70      	pop	{r4, r5, r6, pc}
 8004210:	f855 3b04 	ldr.w	r3, [r5], #4
 8004214:	4798      	blx	r3
 8004216:	3601      	adds	r6, #1
 8004218:	e7ee      	b.n	80041f8 <__libc_init_array+0xc>
 800421a:	f855 3b04 	ldr.w	r3, [r5], #4
 800421e:	4798      	blx	r3
 8004220:	3601      	adds	r6, #1
 8004222:	e7f2      	b.n	800420a <__libc_init_array+0x1e>
 8004224:	08008360 	.word	0x08008360
 8004228:	08008360 	.word	0x08008360
 800422c:	08008360 	.word	0x08008360
 8004230:	08008364 	.word	0x08008364

08004234 <memset>:
 8004234:	4402      	add	r2, r0
 8004236:	4603      	mov	r3, r0
 8004238:	4293      	cmp	r3, r2
 800423a:	d100      	bne.n	800423e <memset+0xa>
 800423c:	4770      	bx	lr
 800423e:	f803 1b01 	strb.w	r1, [r3], #1
 8004242:	e7f9      	b.n	8004238 <memset+0x4>

08004244 <__cvt>:
 8004244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004248:	ec55 4b10 	vmov	r4, r5, d0
 800424c:	2d00      	cmp	r5, #0
 800424e:	460e      	mov	r6, r1
 8004250:	4619      	mov	r1, r3
 8004252:	462b      	mov	r3, r5
 8004254:	bfbb      	ittet	lt
 8004256:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800425a:	461d      	movlt	r5, r3
 800425c:	2300      	movge	r3, #0
 800425e:	232d      	movlt	r3, #45	; 0x2d
 8004260:	700b      	strb	r3, [r1, #0]
 8004262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004264:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004268:	4691      	mov	r9, r2
 800426a:	f023 0820 	bic.w	r8, r3, #32
 800426e:	bfbc      	itt	lt
 8004270:	4622      	movlt	r2, r4
 8004272:	4614      	movlt	r4, r2
 8004274:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004278:	d005      	beq.n	8004286 <__cvt+0x42>
 800427a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800427e:	d100      	bne.n	8004282 <__cvt+0x3e>
 8004280:	3601      	adds	r6, #1
 8004282:	2102      	movs	r1, #2
 8004284:	e000      	b.n	8004288 <__cvt+0x44>
 8004286:	2103      	movs	r1, #3
 8004288:	ab03      	add	r3, sp, #12
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	ab02      	add	r3, sp, #8
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	ec45 4b10 	vmov	d0, r4, r5
 8004294:	4653      	mov	r3, sl
 8004296:	4632      	mov	r2, r6
 8004298:	f000 fcea 	bl	8004c70 <_dtoa_r>
 800429c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80042a0:	4607      	mov	r7, r0
 80042a2:	d102      	bne.n	80042aa <__cvt+0x66>
 80042a4:	f019 0f01 	tst.w	r9, #1
 80042a8:	d022      	beq.n	80042f0 <__cvt+0xac>
 80042aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042ae:	eb07 0906 	add.w	r9, r7, r6
 80042b2:	d110      	bne.n	80042d6 <__cvt+0x92>
 80042b4:	783b      	ldrb	r3, [r7, #0]
 80042b6:	2b30      	cmp	r3, #48	; 0x30
 80042b8:	d10a      	bne.n	80042d0 <__cvt+0x8c>
 80042ba:	2200      	movs	r2, #0
 80042bc:	2300      	movs	r3, #0
 80042be:	4620      	mov	r0, r4
 80042c0:	4629      	mov	r1, r5
 80042c2:	f7fc fc11 	bl	8000ae8 <__aeabi_dcmpeq>
 80042c6:	b918      	cbnz	r0, 80042d0 <__cvt+0x8c>
 80042c8:	f1c6 0601 	rsb	r6, r6, #1
 80042cc:	f8ca 6000 	str.w	r6, [sl]
 80042d0:	f8da 3000 	ldr.w	r3, [sl]
 80042d4:	4499      	add	r9, r3
 80042d6:	2200      	movs	r2, #0
 80042d8:	2300      	movs	r3, #0
 80042da:	4620      	mov	r0, r4
 80042dc:	4629      	mov	r1, r5
 80042de:	f7fc fc03 	bl	8000ae8 <__aeabi_dcmpeq>
 80042e2:	b108      	cbz	r0, 80042e8 <__cvt+0xa4>
 80042e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80042e8:	2230      	movs	r2, #48	; 0x30
 80042ea:	9b03      	ldr	r3, [sp, #12]
 80042ec:	454b      	cmp	r3, r9
 80042ee:	d307      	bcc.n	8004300 <__cvt+0xbc>
 80042f0:	9b03      	ldr	r3, [sp, #12]
 80042f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042f4:	1bdb      	subs	r3, r3, r7
 80042f6:	4638      	mov	r0, r7
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	b004      	add	sp, #16
 80042fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004300:	1c59      	adds	r1, r3, #1
 8004302:	9103      	str	r1, [sp, #12]
 8004304:	701a      	strb	r2, [r3, #0]
 8004306:	e7f0      	b.n	80042ea <__cvt+0xa6>

08004308 <__exponent>:
 8004308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800430a:	4603      	mov	r3, r0
 800430c:	2900      	cmp	r1, #0
 800430e:	bfb8      	it	lt
 8004310:	4249      	neglt	r1, r1
 8004312:	f803 2b02 	strb.w	r2, [r3], #2
 8004316:	bfb4      	ite	lt
 8004318:	222d      	movlt	r2, #45	; 0x2d
 800431a:	222b      	movge	r2, #43	; 0x2b
 800431c:	2909      	cmp	r1, #9
 800431e:	7042      	strb	r2, [r0, #1]
 8004320:	dd2a      	ble.n	8004378 <__exponent+0x70>
 8004322:	f10d 0407 	add.w	r4, sp, #7
 8004326:	46a4      	mov	ip, r4
 8004328:	270a      	movs	r7, #10
 800432a:	46a6      	mov	lr, r4
 800432c:	460a      	mov	r2, r1
 800432e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004332:	fb07 1516 	mls	r5, r7, r6, r1
 8004336:	3530      	adds	r5, #48	; 0x30
 8004338:	2a63      	cmp	r2, #99	; 0x63
 800433a:	f104 34ff 	add.w	r4, r4, #4294967295
 800433e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004342:	4631      	mov	r1, r6
 8004344:	dcf1      	bgt.n	800432a <__exponent+0x22>
 8004346:	3130      	adds	r1, #48	; 0x30
 8004348:	f1ae 0502 	sub.w	r5, lr, #2
 800434c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004350:	1c44      	adds	r4, r0, #1
 8004352:	4629      	mov	r1, r5
 8004354:	4561      	cmp	r1, ip
 8004356:	d30a      	bcc.n	800436e <__exponent+0x66>
 8004358:	f10d 0209 	add.w	r2, sp, #9
 800435c:	eba2 020e 	sub.w	r2, r2, lr
 8004360:	4565      	cmp	r5, ip
 8004362:	bf88      	it	hi
 8004364:	2200      	movhi	r2, #0
 8004366:	4413      	add	r3, r2
 8004368:	1a18      	subs	r0, r3, r0
 800436a:	b003      	add	sp, #12
 800436c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800436e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004372:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004376:	e7ed      	b.n	8004354 <__exponent+0x4c>
 8004378:	2330      	movs	r3, #48	; 0x30
 800437a:	3130      	adds	r1, #48	; 0x30
 800437c:	7083      	strb	r3, [r0, #2]
 800437e:	70c1      	strb	r1, [r0, #3]
 8004380:	1d03      	adds	r3, r0, #4
 8004382:	e7f1      	b.n	8004368 <__exponent+0x60>

08004384 <_printf_float>:
 8004384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004388:	ed2d 8b02 	vpush	{d8}
 800438c:	b08d      	sub	sp, #52	; 0x34
 800438e:	460c      	mov	r4, r1
 8004390:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004394:	4616      	mov	r6, r2
 8004396:	461f      	mov	r7, r3
 8004398:	4605      	mov	r5, r0
 800439a:	f001 fa55 	bl	8005848 <_localeconv_r>
 800439e:	f8d0 a000 	ldr.w	sl, [r0]
 80043a2:	4650      	mov	r0, sl
 80043a4:	f7fb ff24 	bl	80001f0 <strlen>
 80043a8:	2300      	movs	r3, #0
 80043aa:	930a      	str	r3, [sp, #40]	; 0x28
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	9305      	str	r3, [sp, #20]
 80043b0:	f8d8 3000 	ldr.w	r3, [r8]
 80043b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80043b8:	3307      	adds	r3, #7
 80043ba:	f023 0307 	bic.w	r3, r3, #7
 80043be:	f103 0208 	add.w	r2, r3, #8
 80043c2:	f8c8 2000 	str.w	r2, [r8]
 80043c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80043ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80043d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80043d6:	9307      	str	r3, [sp, #28]
 80043d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80043dc:	ee08 0a10 	vmov	s16, r0
 80043e0:	4b9f      	ldr	r3, [pc, #636]	; (8004660 <_printf_float+0x2dc>)
 80043e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043e6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ea:	f7fc fbaf 	bl	8000b4c <__aeabi_dcmpun>
 80043ee:	bb88      	cbnz	r0, 8004454 <_printf_float+0xd0>
 80043f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043f4:	4b9a      	ldr	r3, [pc, #616]	; (8004660 <_printf_float+0x2dc>)
 80043f6:	f04f 32ff 	mov.w	r2, #4294967295
 80043fa:	f7fc fb89 	bl	8000b10 <__aeabi_dcmple>
 80043fe:	bb48      	cbnz	r0, 8004454 <_printf_float+0xd0>
 8004400:	2200      	movs	r2, #0
 8004402:	2300      	movs	r3, #0
 8004404:	4640      	mov	r0, r8
 8004406:	4649      	mov	r1, r9
 8004408:	f7fc fb78 	bl	8000afc <__aeabi_dcmplt>
 800440c:	b110      	cbz	r0, 8004414 <_printf_float+0x90>
 800440e:	232d      	movs	r3, #45	; 0x2d
 8004410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004414:	4b93      	ldr	r3, [pc, #588]	; (8004664 <_printf_float+0x2e0>)
 8004416:	4894      	ldr	r0, [pc, #592]	; (8004668 <_printf_float+0x2e4>)
 8004418:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800441c:	bf94      	ite	ls
 800441e:	4698      	movls	r8, r3
 8004420:	4680      	movhi	r8, r0
 8004422:	2303      	movs	r3, #3
 8004424:	6123      	str	r3, [r4, #16]
 8004426:	9b05      	ldr	r3, [sp, #20]
 8004428:	f023 0204 	bic.w	r2, r3, #4
 800442c:	6022      	str	r2, [r4, #0]
 800442e:	f04f 0900 	mov.w	r9, #0
 8004432:	9700      	str	r7, [sp, #0]
 8004434:	4633      	mov	r3, r6
 8004436:	aa0b      	add	r2, sp, #44	; 0x2c
 8004438:	4621      	mov	r1, r4
 800443a:	4628      	mov	r0, r5
 800443c:	f000 f9d8 	bl	80047f0 <_printf_common>
 8004440:	3001      	adds	r0, #1
 8004442:	f040 8090 	bne.w	8004566 <_printf_float+0x1e2>
 8004446:	f04f 30ff 	mov.w	r0, #4294967295
 800444a:	b00d      	add	sp, #52	; 0x34
 800444c:	ecbd 8b02 	vpop	{d8}
 8004450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004454:	4642      	mov	r2, r8
 8004456:	464b      	mov	r3, r9
 8004458:	4640      	mov	r0, r8
 800445a:	4649      	mov	r1, r9
 800445c:	f7fc fb76 	bl	8000b4c <__aeabi_dcmpun>
 8004460:	b140      	cbz	r0, 8004474 <_printf_float+0xf0>
 8004462:	464b      	mov	r3, r9
 8004464:	2b00      	cmp	r3, #0
 8004466:	bfbc      	itt	lt
 8004468:	232d      	movlt	r3, #45	; 0x2d
 800446a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800446e:	487f      	ldr	r0, [pc, #508]	; (800466c <_printf_float+0x2e8>)
 8004470:	4b7f      	ldr	r3, [pc, #508]	; (8004670 <_printf_float+0x2ec>)
 8004472:	e7d1      	b.n	8004418 <_printf_float+0x94>
 8004474:	6863      	ldr	r3, [r4, #4]
 8004476:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800447a:	9206      	str	r2, [sp, #24]
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	d13f      	bne.n	8004500 <_printf_float+0x17c>
 8004480:	2306      	movs	r3, #6
 8004482:	6063      	str	r3, [r4, #4]
 8004484:	9b05      	ldr	r3, [sp, #20]
 8004486:	6861      	ldr	r1, [r4, #4]
 8004488:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800448c:	2300      	movs	r3, #0
 800448e:	9303      	str	r3, [sp, #12]
 8004490:	ab0a      	add	r3, sp, #40	; 0x28
 8004492:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004496:	ab09      	add	r3, sp, #36	; 0x24
 8004498:	ec49 8b10 	vmov	d0, r8, r9
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	6022      	str	r2, [r4, #0]
 80044a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80044a4:	4628      	mov	r0, r5
 80044a6:	f7ff fecd 	bl	8004244 <__cvt>
 80044aa:	9b06      	ldr	r3, [sp, #24]
 80044ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044ae:	2b47      	cmp	r3, #71	; 0x47
 80044b0:	4680      	mov	r8, r0
 80044b2:	d108      	bne.n	80044c6 <_printf_float+0x142>
 80044b4:	1cc8      	adds	r0, r1, #3
 80044b6:	db02      	blt.n	80044be <_printf_float+0x13a>
 80044b8:	6863      	ldr	r3, [r4, #4]
 80044ba:	4299      	cmp	r1, r3
 80044bc:	dd41      	ble.n	8004542 <_printf_float+0x1be>
 80044be:	f1ab 0b02 	sub.w	fp, fp, #2
 80044c2:	fa5f fb8b 	uxtb.w	fp, fp
 80044c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80044ca:	d820      	bhi.n	800450e <_printf_float+0x18a>
 80044cc:	3901      	subs	r1, #1
 80044ce:	465a      	mov	r2, fp
 80044d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80044d4:	9109      	str	r1, [sp, #36]	; 0x24
 80044d6:	f7ff ff17 	bl	8004308 <__exponent>
 80044da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044dc:	1813      	adds	r3, r2, r0
 80044de:	2a01      	cmp	r2, #1
 80044e0:	4681      	mov	r9, r0
 80044e2:	6123      	str	r3, [r4, #16]
 80044e4:	dc02      	bgt.n	80044ec <_printf_float+0x168>
 80044e6:	6822      	ldr	r2, [r4, #0]
 80044e8:	07d2      	lsls	r2, r2, #31
 80044ea:	d501      	bpl.n	80044f0 <_printf_float+0x16c>
 80044ec:	3301      	adds	r3, #1
 80044ee:	6123      	str	r3, [r4, #16]
 80044f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d09c      	beq.n	8004432 <_printf_float+0xae>
 80044f8:	232d      	movs	r3, #45	; 0x2d
 80044fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044fe:	e798      	b.n	8004432 <_printf_float+0xae>
 8004500:	9a06      	ldr	r2, [sp, #24]
 8004502:	2a47      	cmp	r2, #71	; 0x47
 8004504:	d1be      	bne.n	8004484 <_printf_float+0x100>
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1bc      	bne.n	8004484 <_printf_float+0x100>
 800450a:	2301      	movs	r3, #1
 800450c:	e7b9      	b.n	8004482 <_printf_float+0xfe>
 800450e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004512:	d118      	bne.n	8004546 <_printf_float+0x1c2>
 8004514:	2900      	cmp	r1, #0
 8004516:	6863      	ldr	r3, [r4, #4]
 8004518:	dd0b      	ble.n	8004532 <_printf_float+0x1ae>
 800451a:	6121      	str	r1, [r4, #16]
 800451c:	b913      	cbnz	r3, 8004524 <_printf_float+0x1a0>
 800451e:	6822      	ldr	r2, [r4, #0]
 8004520:	07d0      	lsls	r0, r2, #31
 8004522:	d502      	bpl.n	800452a <_printf_float+0x1a6>
 8004524:	3301      	adds	r3, #1
 8004526:	440b      	add	r3, r1
 8004528:	6123      	str	r3, [r4, #16]
 800452a:	65a1      	str	r1, [r4, #88]	; 0x58
 800452c:	f04f 0900 	mov.w	r9, #0
 8004530:	e7de      	b.n	80044f0 <_printf_float+0x16c>
 8004532:	b913      	cbnz	r3, 800453a <_printf_float+0x1b6>
 8004534:	6822      	ldr	r2, [r4, #0]
 8004536:	07d2      	lsls	r2, r2, #31
 8004538:	d501      	bpl.n	800453e <_printf_float+0x1ba>
 800453a:	3302      	adds	r3, #2
 800453c:	e7f4      	b.n	8004528 <_printf_float+0x1a4>
 800453e:	2301      	movs	r3, #1
 8004540:	e7f2      	b.n	8004528 <_printf_float+0x1a4>
 8004542:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004548:	4299      	cmp	r1, r3
 800454a:	db05      	blt.n	8004558 <_printf_float+0x1d4>
 800454c:	6823      	ldr	r3, [r4, #0]
 800454e:	6121      	str	r1, [r4, #16]
 8004550:	07d8      	lsls	r0, r3, #31
 8004552:	d5ea      	bpl.n	800452a <_printf_float+0x1a6>
 8004554:	1c4b      	adds	r3, r1, #1
 8004556:	e7e7      	b.n	8004528 <_printf_float+0x1a4>
 8004558:	2900      	cmp	r1, #0
 800455a:	bfd4      	ite	le
 800455c:	f1c1 0202 	rsble	r2, r1, #2
 8004560:	2201      	movgt	r2, #1
 8004562:	4413      	add	r3, r2
 8004564:	e7e0      	b.n	8004528 <_printf_float+0x1a4>
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	055a      	lsls	r2, r3, #21
 800456a:	d407      	bmi.n	800457c <_printf_float+0x1f8>
 800456c:	6923      	ldr	r3, [r4, #16]
 800456e:	4642      	mov	r2, r8
 8004570:	4631      	mov	r1, r6
 8004572:	4628      	mov	r0, r5
 8004574:	47b8      	blx	r7
 8004576:	3001      	adds	r0, #1
 8004578:	d12c      	bne.n	80045d4 <_printf_float+0x250>
 800457a:	e764      	b.n	8004446 <_printf_float+0xc2>
 800457c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004580:	f240 80e0 	bls.w	8004744 <_printf_float+0x3c0>
 8004584:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004588:	2200      	movs	r2, #0
 800458a:	2300      	movs	r3, #0
 800458c:	f7fc faac 	bl	8000ae8 <__aeabi_dcmpeq>
 8004590:	2800      	cmp	r0, #0
 8004592:	d034      	beq.n	80045fe <_printf_float+0x27a>
 8004594:	4a37      	ldr	r2, [pc, #220]	; (8004674 <_printf_float+0x2f0>)
 8004596:	2301      	movs	r3, #1
 8004598:	4631      	mov	r1, r6
 800459a:	4628      	mov	r0, r5
 800459c:	47b8      	blx	r7
 800459e:	3001      	adds	r0, #1
 80045a0:	f43f af51 	beq.w	8004446 <_printf_float+0xc2>
 80045a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045a8:	429a      	cmp	r2, r3
 80045aa:	db02      	blt.n	80045b2 <_printf_float+0x22e>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	07d8      	lsls	r0, r3, #31
 80045b0:	d510      	bpl.n	80045d4 <_printf_float+0x250>
 80045b2:	ee18 3a10 	vmov	r3, s16
 80045b6:	4652      	mov	r2, sl
 80045b8:	4631      	mov	r1, r6
 80045ba:	4628      	mov	r0, r5
 80045bc:	47b8      	blx	r7
 80045be:	3001      	adds	r0, #1
 80045c0:	f43f af41 	beq.w	8004446 <_printf_float+0xc2>
 80045c4:	f04f 0800 	mov.w	r8, #0
 80045c8:	f104 091a 	add.w	r9, r4, #26
 80045cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045ce:	3b01      	subs	r3, #1
 80045d0:	4543      	cmp	r3, r8
 80045d2:	dc09      	bgt.n	80045e8 <_printf_float+0x264>
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	079b      	lsls	r3, r3, #30
 80045d8:	f100 8105 	bmi.w	80047e6 <_printf_float+0x462>
 80045dc:	68e0      	ldr	r0, [r4, #12]
 80045de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045e0:	4298      	cmp	r0, r3
 80045e2:	bfb8      	it	lt
 80045e4:	4618      	movlt	r0, r3
 80045e6:	e730      	b.n	800444a <_printf_float+0xc6>
 80045e8:	2301      	movs	r3, #1
 80045ea:	464a      	mov	r2, r9
 80045ec:	4631      	mov	r1, r6
 80045ee:	4628      	mov	r0, r5
 80045f0:	47b8      	blx	r7
 80045f2:	3001      	adds	r0, #1
 80045f4:	f43f af27 	beq.w	8004446 <_printf_float+0xc2>
 80045f8:	f108 0801 	add.w	r8, r8, #1
 80045fc:	e7e6      	b.n	80045cc <_printf_float+0x248>
 80045fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004600:	2b00      	cmp	r3, #0
 8004602:	dc39      	bgt.n	8004678 <_printf_float+0x2f4>
 8004604:	4a1b      	ldr	r2, [pc, #108]	; (8004674 <_printf_float+0x2f0>)
 8004606:	2301      	movs	r3, #1
 8004608:	4631      	mov	r1, r6
 800460a:	4628      	mov	r0, r5
 800460c:	47b8      	blx	r7
 800460e:	3001      	adds	r0, #1
 8004610:	f43f af19 	beq.w	8004446 <_printf_float+0xc2>
 8004614:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004618:	4313      	orrs	r3, r2
 800461a:	d102      	bne.n	8004622 <_printf_float+0x29e>
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	07d9      	lsls	r1, r3, #31
 8004620:	d5d8      	bpl.n	80045d4 <_printf_float+0x250>
 8004622:	ee18 3a10 	vmov	r3, s16
 8004626:	4652      	mov	r2, sl
 8004628:	4631      	mov	r1, r6
 800462a:	4628      	mov	r0, r5
 800462c:	47b8      	blx	r7
 800462e:	3001      	adds	r0, #1
 8004630:	f43f af09 	beq.w	8004446 <_printf_float+0xc2>
 8004634:	f04f 0900 	mov.w	r9, #0
 8004638:	f104 0a1a 	add.w	sl, r4, #26
 800463c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800463e:	425b      	negs	r3, r3
 8004640:	454b      	cmp	r3, r9
 8004642:	dc01      	bgt.n	8004648 <_printf_float+0x2c4>
 8004644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004646:	e792      	b.n	800456e <_printf_float+0x1ea>
 8004648:	2301      	movs	r3, #1
 800464a:	4652      	mov	r2, sl
 800464c:	4631      	mov	r1, r6
 800464e:	4628      	mov	r0, r5
 8004650:	47b8      	blx	r7
 8004652:	3001      	adds	r0, #1
 8004654:	f43f aef7 	beq.w	8004446 <_printf_float+0xc2>
 8004658:	f109 0901 	add.w	r9, r9, #1
 800465c:	e7ee      	b.n	800463c <_printf_float+0x2b8>
 800465e:	bf00      	nop
 8004660:	7fefffff 	.word	0x7fefffff
 8004664:	08007f38 	.word	0x08007f38
 8004668:	08007f3c 	.word	0x08007f3c
 800466c:	08007f44 	.word	0x08007f44
 8004670:	08007f40 	.word	0x08007f40
 8004674:	08007f48 	.word	0x08007f48
 8004678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800467a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800467c:	429a      	cmp	r2, r3
 800467e:	bfa8      	it	ge
 8004680:	461a      	movge	r2, r3
 8004682:	2a00      	cmp	r2, #0
 8004684:	4691      	mov	r9, r2
 8004686:	dc37      	bgt.n	80046f8 <_printf_float+0x374>
 8004688:	f04f 0b00 	mov.w	fp, #0
 800468c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004690:	f104 021a 	add.w	r2, r4, #26
 8004694:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004696:	9305      	str	r3, [sp, #20]
 8004698:	eba3 0309 	sub.w	r3, r3, r9
 800469c:	455b      	cmp	r3, fp
 800469e:	dc33      	bgt.n	8004708 <_printf_float+0x384>
 80046a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046a4:	429a      	cmp	r2, r3
 80046a6:	db3b      	blt.n	8004720 <_printf_float+0x39c>
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	07da      	lsls	r2, r3, #31
 80046ac:	d438      	bmi.n	8004720 <_printf_float+0x39c>
 80046ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046b0:	9b05      	ldr	r3, [sp, #20]
 80046b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	eba2 0901 	sub.w	r9, r2, r1
 80046ba:	4599      	cmp	r9, r3
 80046bc:	bfa8      	it	ge
 80046be:	4699      	movge	r9, r3
 80046c0:	f1b9 0f00 	cmp.w	r9, #0
 80046c4:	dc35      	bgt.n	8004732 <_printf_float+0x3ae>
 80046c6:	f04f 0800 	mov.w	r8, #0
 80046ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046ce:	f104 0a1a 	add.w	sl, r4, #26
 80046d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046d6:	1a9b      	subs	r3, r3, r2
 80046d8:	eba3 0309 	sub.w	r3, r3, r9
 80046dc:	4543      	cmp	r3, r8
 80046de:	f77f af79 	ble.w	80045d4 <_printf_float+0x250>
 80046e2:	2301      	movs	r3, #1
 80046e4:	4652      	mov	r2, sl
 80046e6:	4631      	mov	r1, r6
 80046e8:	4628      	mov	r0, r5
 80046ea:	47b8      	blx	r7
 80046ec:	3001      	adds	r0, #1
 80046ee:	f43f aeaa 	beq.w	8004446 <_printf_float+0xc2>
 80046f2:	f108 0801 	add.w	r8, r8, #1
 80046f6:	e7ec      	b.n	80046d2 <_printf_float+0x34e>
 80046f8:	4613      	mov	r3, r2
 80046fa:	4631      	mov	r1, r6
 80046fc:	4642      	mov	r2, r8
 80046fe:	4628      	mov	r0, r5
 8004700:	47b8      	blx	r7
 8004702:	3001      	adds	r0, #1
 8004704:	d1c0      	bne.n	8004688 <_printf_float+0x304>
 8004706:	e69e      	b.n	8004446 <_printf_float+0xc2>
 8004708:	2301      	movs	r3, #1
 800470a:	4631      	mov	r1, r6
 800470c:	4628      	mov	r0, r5
 800470e:	9205      	str	r2, [sp, #20]
 8004710:	47b8      	blx	r7
 8004712:	3001      	adds	r0, #1
 8004714:	f43f ae97 	beq.w	8004446 <_printf_float+0xc2>
 8004718:	9a05      	ldr	r2, [sp, #20]
 800471a:	f10b 0b01 	add.w	fp, fp, #1
 800471e:	e7b9      	b.n	8004694 <_printf_float+0x310>
 8004720:	ee18 3a10 	vmov	r3, s16
 8004724:	4652      	mov	r2, sl
 8004726:	4631      	mov	r1, r6
 8004728:	4628      	mov	r0, r5
 800472a:	47b8      	blx	r7
 800472c:	3001      	adds	r0, #1
 800472e:	d1be      	bne.n	80046ae <_printf_float+0x32a>
 8004730:	e689      	b.n	8004446 <_printf_float+0xc2>
 8004732:	9a05      	ldr	r2, [sp, #20]
 8004734:	464b      	mov	r3, r9
 8004736:	4442      	add	r2, r8
 8004738:	4631      	mov	r1, r6
 800473a:	4628      	mov	r0, r5
 800473c:	47b8      	blx	r7
 800473e:	3001      	adds	r0, #1
 8004740:	d1c1      	bne.n	80046c6 <_printf_float+0x342>
 8004742:	e680      	b.n	8004446 <_printf_float+0xc2>
 8004744:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004746:	2a01      	cmp	r2, #1
 8004748:	dc01      	bgt.n	800474e <_printf_float+0x3ca>
 800474a:	07db      	lsls	r3, r3, #31
 800474c:	d538      	bpl.n	80047c0 <_printf_float+0x43c>
 800474e:	2301      	movs	r3, #1
 8004750:	4642      	mov	r2, r8
 8004752:	4631      	mov	r1, r6
 8004754:	4628      	mov	r0, r5
 8004756:	47b8      	blx	r7
 8004758:	3001      	adds	r0, #1
 800475a:	f43f ae74 	beq.w	8004446 <_printf_float+0xc2>
 800475e:	ee18 3a10 	vmov	r3, s16
 8004762:	4652      	mov	r2, sl
 8004764:	4631      	mov	r1, r6
 8004766:	4628      	mov	r0, r5
 8004768:	47b8      	blx	r7
 800476a:	3001      	adds	r0, #1
 800476c:	f43f ae6b 	beq.w	8004446 <_printf_float+0xc2>
 8004770:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004774:	2200      	movs	r2, #0
 8004776:	2300      	movs	r3, #0
 8004778:	f7fc f9b6 	bl	8000ae8 <__aeabi_dcmpeq>
 800477c:	b9d8      	cbnz	r0, 80047b6 <_printf_float+0x432>
 800477e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004780:	f108 0201 	add.w	r2, r8, #1
 8004784:	3b01      	subs	r3, #1
 8004786:	4631      	mov	r1, r6
 8004788:	4628      	mov	r0, r5
 800478a:	47b8      	blx	r7
 800478c:	3001      	adds	r0, #1
 800478e:	d10e      	bne.n	80047ae <_printf_float+0x42a>
 8004790:	e659      	b.n	8004446 <_printf_float+0xc2>
 8004792:	2301      	movs	r3, #1
 8004794:	4652      	mov	r2, sl
 8004796:	4631      	mov	r1, r6
 8004798:	4628      	mov	r0, r5
 800479a:	47b8      	blx	r7
 800479c:	3001      	adds	r0, #1
 800479e:	f43f ae52 	beq.w	8004446 <_printf_float+0xc2>
 80047a2:	f108 0801 	add.w	r8, r8, #1
 80047a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047a8:	3b01      	subs	r3, #1
 80047aa:	4543      	cmp	r3, r8
 80047ac:	dcf1      	bgt.n	8004792 <_printf_float+0x40e>
 80047ae:	464b      	mov	r3, r9
 80047b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80047b4:	e6dc      	b.n	8004570 <_printf_float+0x1ec>
 80047b6:	f04f 0800 	mov.w	r8, #0
 80047ba:	f104 0a1a 	add.w	sl, r4, #26
 80047be:	e7f2      	b.n	80047a6 <_printf_float+0x422>
 80047c0:	2301      	movs	r3, #1
 80047c2:	4642      	mov	r2, r8
 80047c4:	e7df      	b.n	8004786 <_printf_float+0x402>
 80047c6:	2301      	movs	r3, #1
 80047c8:	464a      	mov	r2, r9
 80047ca:	4631      	mov	r1, r6
 80047cc:	4628      	mov	r0, r5
 80047ce:	47b8      	blx	r7
 80047d0:	3001      	adds	r0, #1
 80047d2:	f43f ae38 	beq.w	8004446 <_printf_float+0xc2>
 80047d6:	f108 0801 	add.w	r8, r8, #1
 80047da:	68e3      	ldr	r3, [r4, #12]
 80047dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047de:	1a5b      	subs	r3, r3, r1
 80047e0:	4543      	cmp	r3, r8
 80047e2:	dcf0      	bgt.n	80047c6 <_printf_float+0x442>
 80047e4:	e6fa      	b.n	80045dc <_printf_float+0x258>
 80047e6:	f04f 0800 	mov.w	r8, #0
 80047ea:	f104 0919 	add.w	r9, r4, #25
 80047ee:	e7f4      	b.n	80047da <_printf_float+0x456>

080047f0 <_printf_common>:
 80047f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047f4:	4616      	mov	r6, r2
 80047f6:	4699      	mov	r9, r3
 80047f8:	688a      	ldr	r2, [r1, #8]
 80047fa:	690b      	ldr	r3, [r1, #16]
 80047fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004800:	4293      	cmp	r3, r2
 8004802:	bfb8      	it	lt
 8004804:	4613      	movlt	r3, r2
 8004806:	6033      	str	r3, [r6, #0]
 8004808:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800480c:	4607      	mov	r7, r0
 800480e:	460c      	mov	r4, r1
 8004810:	b10a      	cbz	r2, 8004816 <_printf_common+0x26>
 8004812:	3301      	adds	r3, #1
 8004814:	6033      	str	r3, [r6, #0]
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	0699      	lsls	r1, r3, #26
 800481a:	bf42      	ittt	mi
 800481c:	6833      	ldrmi	r3, [r6, #0]
 800481e:	3302      	addmi	r3, #2
 8004820:	6033      	strmi	r3, [r6, #0]
 8004822:	6825      	ldr	r5, [r4, #0]
 8004824:	f015 0506 	ands.w	r5, r5, #6
 8004828:	d106      	bne.n	8004838 <_printf_common+0x48>
 800482a:	f104 0a19 	add.w	sl, r4, #25
 800482e:	68e3      	ldr	r3, [r4, #12]
 8004830:	6832      	ldr	r2, [r6, #0]
 8004832:	1a9b      	subs	r3, r3, r2
 8004834:	42ab      	cmp	r3, r5
 8004836:	dc26      	bgt.n	8004886 <_printf_common+0x96>
 8004838:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800483c:	1e13      	subs	r3, r2, #0
 800483e:	6822      	ldr	r2, [r4, #0]
 8004840:	bf18      	it	ne
 8004842:	2301      	movne	r3, #1
 8004844:	0692      	lsls	r2, r2, #26
 8004846:	d42b      	bmi.n	80048a0 <_printf_common+0xb0>
 8004848:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800484c:	4649      	mov	r1, r9
 800484e:	4638      	mov	r0, r7
 8004850:	47c0      	blx	r8
 8004852:	3001      	adds	r0, #1
 8004854:	d01e      	beq.n	8004894 <_printf_common+0xa4>
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	68e5      	ldr	r5, [r4, #12]
 800485a:	6832      	ldr	r2, [r6, #0]
 800485c:	f003 0306 	and.w	r3, r3, #6
 8004860:	2b04      	cmp	r3, #4
 8004862:	bf08      	it	eq
 8004864:	1aad      	subeq	r5, r5, r2
 8004866:	68a3      	ldr	r3, [r4, #8]
 8004868:	6922      	ldr	r2, [r4, #16]
 800486a:	bf0c      	ite	eq
 800486c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004870:	2500      	movne	r5, #0
 8004872:	4293      	cmp	r3, r2
 8004874:	bfc4      	itt	gt
 8004876:	1a9b      	subgt	r3, r3, r2
 8004878:	18ed      	addgt	r5, r5, r3
 800487a:	2600      	movs	r6, #0
 800487c:	341a      	adds	r4, #26
 800487e:	42b5      	cmp	r5, r6
 8004880:	d11a      	bne.n	80048b8 <_printf_common+0xc8>
 8004882:	2000      	movs	r0, #0
 8004884:	e008      	b.n	8004898 <_printf_common+0xa8>
 8004886:	2301      	movs	r3, #1
 8004888:	4652      	mov	r2, sl
 800488a:	4649      	mov	r1, r9
 800488c:	4638      	mov	r0, r7
 800488e:	47c0      	blx	r8
 8004890:	3001      	adds	r0, #1
 8004892:	d103      	bne.n	800489c <_printf_common+0xac>
 8004894:	f04f 30ff 	mov.w	r0, #4294967295
 8004898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800489c:	3501      	adds	r5, #1
 800489e:	e7c6      	b.n	800482e <_printf_common+0x3e>
 80048a0:	18e1      	adds	r1, r4, r3
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	2030      	movs	r0, #48	; 0x30
 80048a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048aa:	4422      	add	r2, r4
 80048ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048b4:	3302      	adds	r3, #2
 80048b6:	e7c7      	b.n	8004848 <_printf_common+0x58>
 80048b8:	2301      	movs	r3, #1
 80048ba:	4622      	mov	r2, r4
 80048bc:	4649      	mov	r1, r9
 80048be:	4638      	mov	r0, r7
 80048c0:	47c0      	blx	r8
 80048c2:	3001      	adds	r0, #1
 80048c4:	d0e6      	beq.n	8004894 <_printf_common+0xa4>
 80048c6:	3601      	adds	r6, #1
 80048c8:	e7d9      	b.n	800487e <_printf_common+0x8e>
	...

080048cc <_printf_i>:
 80048cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048d0:	460c      	mov	r4, r1
 80048d2:	4691      	mov	r9, r2
 80048d4:	7e27      	ldrb	r7, [r4, #24]
 80048d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048d8:	2f78      	cmp	r7, #120	; 0x78
 80048da:	4680      	mov	r8, r0
 80048dc:	469a      	mov	sl, r3
 80048de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048e2:	d807      	bhi.n	80048f4 <_printf_i+0x28>
 80048e4:	2f62      	cmp	r7, #98	; 0x62
 80048e6:	d80a      	bhi.n	80048fe <_printf_i+0x32>
 80048e8:	2f00      	cmp	r7, #0
 80048ea:	f000 80d8 	beq.w	8004a9e <_printf_i+0x1d2>
 80048ee:	2f58      	cmp	r7, #88	; 0x58
 80048f0:	f000 80a3 	beq.w	8004a3a <_printf_i+0x16e>
 80048f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048fc:	e03a      	b.n	8004974 <_printf_i+0xa8>
 80048fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004902:	2b15      	cmp	r3, #21
 8004904:	d8f6      	bhi.n	80048f4 <_printf_i+0x28>
 8004906:	a001      	add	r0, pc, #4	; (adr r0, 800490c <_printf_i+0x40>)
 8004908:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800490c:	08004965 	.word	0x08004965
 8004910:	08004979 	.word	0x08004979
 8004914:	080048f5 	.word	0x080048f5
 8004918:	080048f5 	.word	0x080048f5
 800491c:	080048f5 	.word	0x080048f5
 8004920:	080048f5 	.word	0x080048f5
 8004924:	08004979 	.word	0x08004979
 8004928:	080048f5 	.word	0x080048f5
 800492c:	080048f5 	.word	0x080048f5
 8004930:	080048f5 	.word	0x080048f5
 8004934:	080048f5 	.word	0x080048f5
 8004938:	08004a85 	.word	0x08004a85
 800493c:	080049a9 	.word	0x080049a9
 8004940:	08004a67 	.word	0x08004a67
 8004944:	080048f5 	.word	0x080048f5
 8004948:	080048f5 	.word	0x080048f5
 800494c:	08004aa7 	.word	0x08004aa7
 8004950:	080048f5 	.word	0x080048f5
 8004954:	080049a9 	.word	0x080049a9
 8004958:	080048f5 	.word	0x080048f5
 800495c:	080048f5 	.word	0x080048f5
 8004960:	08004a6f 	.word	0x08004a6f
 8004964:	680b      	ldr	r3, [r1, #0]
 8004966:	1d1a      	adds	r2, r3, #4
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	600a      	str	r2, [r1, #0]
 800496c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004970:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004974:	2301      	movs	r3, #1
 8004976:	e0a3      	b.n	8004ac0 <_printf_i+0x1f4>
 8004978:	6825      	ldr	r5, [r4, #0]
 800497a:	6808      	ldr	r0, [r1, #0]
 800497c:	062e      	lsls	r6, r5, #24
 800497e:	f100 0304 	add.w	r3, r0, #4
 8004982:	d50a      	bpl.n	800499a <_printf_i+0xce>
 8004984:	6805      	ldr	r5, [r0, #0]
 8004986:	600b      	str	r3, [r1, #0]
 8004988:	2d00      	cmp	r5, #0
 800498a:	da03      	bge.n	8004994 <_printf_i+0xc8>
 800498c:	232d      	movs	r3, #45	; 0x2d
 800498e:	426d      	negs	r5, r5
 8004990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004994:	485e      	ldr	r0, [pc, #376]	; (8004b10 <_printf_i+0x244>)
 8004996:	230a      	movs	r3, #10
 8004998:	e019      	b.n	80049ce <_printf_i+0x102>
 800499a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800499e:	6805      	ldr	r5, [r0, #0]
 80049a0:	600b      	str	r3, [r1, #0]
 80049a2:	bf18      	it	ne
 80049a4:	b22d      	sxthne	r5, r5
 80049a6:	e7ef      	b.n	8004988 <_printf_i+0xbc>
 80049a8:	680b      	ldr	r3, [r1, #0]
 80049aa:	6825      	ldr	r5, [r4, #0]
 80049ac:	1d18      	adds	r0, r3, #4
 80049ae:	6008      	str	r0, [r1, #0]
 80049b0:	0628      	lsls	r0, r5, #24
 80049b2:	d501      	bpl.n	80049b8 <_printf_i+0xec>
 80049b4:	681d      	ldr	r5, [r3, #0]
 80049b6:	e002      	b.n	80049be <_printf_i+0xf2>
 80049b8:	0669      	lsls	r1, r5, #25
 80049ba:	d5fb      	bpl.n	80049b4 <_printf_i+0xe8>
 80049bc:	881d      	ldrh	r5, [r3, #0]
 80049be:	4854      	ldr	r0, [pc, #336]	; (8004b10 <_printf_i+0x244>)
 80049c0:	2f6f      	cmp	r7, #111	; 0x6f
 80049c2:	bf0c      	ite	eq
 80049c4:	2308      	moveq	r3, #8
 80049c6:	230a      	movne	r3, #10
 80049c8:	2100      	movs	r1, #0
 80049ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049ce:	6866      	ldr	r6, [r4, #4]
 80049d0:	60a6      	str	r6, [r4, #8]
 80049d2:	2e00      	cmp	r6, #0
 80049d4:	bfa2      	ittt	ge
 80049d6:	6821      	ldrge	r1, [r4, #0]
 80049d8:	f021 0104 	bicge.w	r1, r1, #4
 80049dc:	6021      	strge	r1, [r4, #0]
 80049de:	b90d      	cbnz	r5, 80049e4 <_printf_i+0x118>
 80049e0:	2e00      	cmp	r6, #0
 80049e2:	d04d      	beq.n	8004a80 <_printf_i+0x1b4>
 80049e4:	4616      	mov	r6, r2
 80049e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80049ea:	fb03 5711 	mls	r7, r3, r1, r5
 80049ee:	5dc7      	ldrb	r7, [r0, r7]
 80049f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049f4:	462f      	mov	r7, r5
 80049f6:	42bb      	cmp	r3, r7
 80049f8:	460d      	mov	r5, r1
 80049fa:	d9f4      	bls.n	80049e6 <_printf_i+0x11a>
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d10b      	bne.n	8004a18 <_printf_i+0x14c>
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	07df      	lsls	r7, r3, #31
 8004a04:	d508      	bpl.n	8004a18 <_printf_i+0x14c>
 8004a06:	6923      	ldr	r3, [r4, #16]
 8004a08:	6861      	ldr	r1, [r4, #4]
 8004a0a:	4299      	cmp	r1, r3
 8004a0c:	bfde      	ittt	le
 8004a0e:	2330      	movle	r3, #48	; 0x30
 8004a10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a14:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a18:	1b92      	subs	r2, r2, r6
 8004a1a:	6122      	str	r2, [r4, #16]
 8004a1c:	f8cd a000 	str.w	sl, [sp]
 8004a20:	464b      	mov	r3, r9
 8004a22:	aa03      	add	r2, sp, #12
 8004a24:	4621      	mov	r1, r4
 8004a26:	4640      	mov	r0, r8
 8004a28:	f7ff fee2 	bl	80047f0 <_printf_common>
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	d14c      	bne.n	8004aca <_printf_i+0x1fe>
 8004a30:	f04f 30ff 	mov.w	r0, #4294967295
 8004a34:	b004      	add	sp, #16
 8004a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a3a:	4835      	ldr	r0, [pc, #212]	; (8004b10 <_printf_i+0x244>)
 8004a3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	680e      	ldr	r6, [r1, #0]
 8004a44:	061f      	lsls	r7, r3, #24
 8004a46:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a4a:	600e      	str	r6, [r1, #0]
 8004a4c:	d514      	bpl.n	8004a78 <_printf_i+0x1ac>
 8004a4e:	07d9      	lsls	r1, r3, #31
 8004a50:	bf44      	itt	mi
 8004a52:	f043 0320 	orrmi.w	r3, r3, #32
 8004a56:	6023      	strmi	r3, [r4, #0]
 8004a58:	b91d      	cbnz	r5, 8004a62 <_printf_i+0x196>
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	f023 0320 	bic.w	r3, r3, #32
 8004a60:	6023      	str	r3, [r4, #0]
 8004a62:	2310      	movs	r3, #16
 8004a64:	e7b0      	b.n	80049c8 <_printf_i+0xfc>
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	f043 0320 	orr.w	r3, r3, #32
 8004a6c:	6023      	str	r3, [r4, #0]
 8004a6e:	2378      	movs	r3, #120	; 0x78
 8004a70:	4828      	ldr	r0, [pc, #160]	; (8004b14 <_printf_i+0x248>)
 8004a72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a76:	e7e3      	b.n	8004a40 <_printf_i+0x174>
 8004a78:	065e      	lsls	r6, r3, #25
 8004a7a:	bf48      	it	mi
 8004a7c:	b2ad      	uxthmi	r5, r5
 8004a7e:	e7e6      	b.n	8004a4e <_printf_i+0x182>
 8004a80:	4616      	mov	r6, r2
 8004a82:	e7bb      	b.n	80049fc <_printf_i+0x130>
 8004a84:	680b      	ldr	r3, [r1, #0]
 8004a86:	6826      	ldr	r6, [r4, #0]
 8004a88:	6960      	ldr	r0, [r4, #20]
 8004a8a:	1d1d      	adds	r5, r3, #4
 8004a8c:	600d      	str	r5, [r1, #0]
 8004a8e:	0635      	lsls	r5, r6, #24
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	d501      	bpl.n	8004a98 <_printf_i+0x1cc>
 8004a94:	6018      	str	r0, [r3, #0]
 8004a96:	e002      	b.n	8004a9e <_printf_i+0x1d2>
 8004a98:	0671      	lsls	r1, r6, #25
 8004a9a:	d5fb      	bpl.n	8004a94 <_printf_i+0x1c8>
 8004a9c:	8018      	strh	r0, [r3, #0]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	6123      	str	r3, [r4, #16]
 8004aa2:	4616      	mov	r6, r2
 8004aa4:	e7ba      	b.n	8004a1c <_printf_i+0x150>
 8004aa6:	680b      	ldr	r3, [r1, #0]
 8004aa8:	1d1a      	adds	r2, r3, #4
 8004aaa:	600a      	str	r2, [r1, #0]
 8004aac:	681e      	ldr	r6, [r3, #0]
 8004aae:	6862      	ldr	r2, [r4, #4]
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	f7fb fba4 	bl	8000200 <memchr>
 8004ab8:	b108      	cbz	r0, 8004abe <_printf_i+0x1f2>
 8004aba:	1b80      	subs	r0, r0, r6
 8004abc:	6060      	str	r0, [r4, #4]
 8004abe:	6863      	ldr	r3, [r4, #4]
 8004ac0:	6123      	str	r3, [r4, #16]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ac8:	e7a8      	b.n	8004a1c <_printf_i+0x150>
 8004aca:	6923      	ldr	r3, [r4, #16]
 8004acc:	4632      	mov	r2, r6
 8004ace:	4649      	mov	r1, r9
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	47d0      	blx	sl
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	d0ab      	beq.n	8004a30 <_printf_i+0x164>
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	079b      	lsls	r3, r3, #30
 8004adc:	d413      	bmi.n	8004b06 <_printf_i+0x23a>
 8004ade:	68e0      	ldr	r0, [r4, #12]
 8004ae0:	9b03      	ldr	r3, [sp, #12]
 8004ae2:	4298      	cmp	r0, r3
 8004ae4:	bfb8      	it	lt
 8004ae6:	4618      	movlt	r0, r3
 8004ae8:	e7a4      	b.n	8004a34 <_printf_i+0x168>
 8004aea:	2301      	movs	r3, #1
 8004aec:	4632      	mov	r2, r6
 8004aee:	4649      	mov	r1, r9
 8004af0:	4640      	mov	r0, r8
 8004af2:	47d0      	blx	sl
 8004af4:	3001      	adds	r0, #1
 8004af6:	d09b      	beq.n	8004a30 <_printf_i+0x164>
 8004af8:	3501      	adds	r5, #1
 8004afa:	68e3      	ldr	r3, [r4, #12]
 8004afc:	9903      	ldr	r1, [sp, #12]
 8004afe:	1a5b      	subs	r3, r3, r1
 8004b00:	42ab      	cmp	r3, r5
 8004b02:	dcf2      	bgt.n	8004aea <_printf_i+0x21e>
 8004b04:	e7eb      	b.n	8004ade <_printf_i+0x212>
 8004b06:	2500      	movs	r5, #0
 8004b08:	f104 0619 	add.w	r6, r4, #25
 8004b0c:	e7f5      	b.n	8004afa <_printf_i+0x22e>
 8004b0e:	bf00      	nop
 8004b10:	08007f4a 	.word	0x08007f4a
 8004b14:	08007f5b 	.word	0x08007f5b

08004b18 <siprintf>:
 8004b18:	b40e      	push	{r1, r2, r3}
 8004b1a:	b500      	push	{lr}
 8004b1c:	b09c      	sub	sp, #112	; 0x70
 8004b1e:	ab1d      	add	r3, sp, #116	; 0x74
 8004b20:	9002      	str	r0, [sp, #8]
 8004b22:	9006      	str	r0, [sp, #24]
 8004b24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b28:	4809      	ldr	r0, [pc, #36]	; (8004b50 <siprintf+0x38>)
 8004b2a:	9107      	str	r1, [sp, #28]
 8004b2c:	9104      	str	r1, [sp, #16]
 8004b2e:	4909      	ldr	r1, [pc, #36]	; (8004b54 <siprintf+0x3c>)
 8004b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b34:	9105      	str	r1, [sp, #20]
 8004b36:	6800      	ldr	r0, [r0, #0]
 8004b38:	9301      	str	r3, [sp, #4]
 8004b3a:	a902      	add	r1, sp, #8
 8004b3c:	f001 fb32 	bl	80061a4 <_svfiprintf_r>
 8004b40:	9b02      	ldr	r3, [sp, #8]
 8004b42:	2200      	movs	r2, #0
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	b01c      	add	sp, #112	; 0x70
 8004b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b4c:	b003      	add	sp, #12
 8004b4e:	4770      	bx	lr
 8004b50:	20000018 	.word	0x20000018
 8004b54:	ffff0208 	.word	0xffff0208

08004b58 <quorem>:
 8004b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b5c:	6903      	ldr	r3, [r0, #16]
 8004b5e:	690c      	ldr	r4, [r1, #16]
 8004b60:	42a3      	cmp	r3, r4
 8004b62:	4607      	mov	r7, r0
 8004b64:	f2c0 8081 	blt.w	8004c6a <quorem+0x112>
 8004b68:	3c01      	subs	r4, #1
 8004b6a:	f101 0814 	add.w	r8, r1, #20
 8004b6e:	f100 0514 	add.w	r5, r0, #20
 8004b72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b76:	9301      	str	r3, [sp, #4]
 8004b78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b80:	3301      	adds	r3, #1
 8004b82:	429a      	cmp	r2, r3
 8004b84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004b88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b90:	d331      	bcc.n	8004bf6 <quorem+0x9e>
 8004b92:	f04f 0e00 	mov.w	lr, #0
 8004b96:	4640      	mov	r0, r8
 8004b98:	46ac      	mov	ip, r5
 8004b9a:	46f2      	mov	sl, lr
 8004b9c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004ba0:	b293      	uxth	r3, r2
 8004ba2:	fb06 e303 	mla	r3, r6, r3, lr
 8004ba6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	ebaa 0303 	sub.w	r3, sl, r3
 8004bb0:	0c12      	lsrs	r2, r2, #16
 8004bb2:	f8dc a000 	ldr.w	sl, [ip]
 8004bb6:	fb06 e202 	mla	r2, r6, r2, lr
 8004bba:	fa13 f38a 	uxtah	r3, r3, sl
 8004bbe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004bc2:	fa1f fa82 	uxth.w	sl, r2
 8004bc6:	f8dc 2000 	ldr.w	r2, [ip]
 8004bca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004bce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bd8:	4581      	cmp	r9, r0
 8004bda:	f84c 3b04 	str.w	r3, [ip], #4
 8004bde:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004be2:	d2db      	bcs.n	8004b9c <quorem+0x44>
 8004be4:	f855 300b 	ldr.w	r3, [r5, fp]
 8004be8:	b92b      	cbnz	r3, 8004bf6 <quorem+0x9e>
 8004bea:	9b01      	ldr	r3, [sp, #4]
 8004bec:	3b04      	subs	r3, #4
 8004bee:	429d      	cmp	r5, r3
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	d32e      	bcc.n	8004c52 <quorem+0xfa>
 8004bf4:	613c      	str	r4, [r7, #16]
 8004bf6:	4638      	mov	r0, r7
 8004bf8:	f001 f8be 	bl	8005d78 <__mcmp>
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	db24      	blt.n	8004c4a <quorem+0xf2>
 8004c00:	3601      	adds	r6, #1
 8004c02:	4628      	mov	r0, r5
 8004c04:	f04f 0c00 	mov.w	ip, #0
 8004c08:	f858 2b04 	ldr.w	r2, [r8], #4
 8004c0c:	f8d0 e000 	ldr.w	lr, [r0]
 8004c10:	b293      	uxth	r3, r2
 8004c12:	ebac 0303 	sub.w	r3, ip, r3
 8004c16:	0c12      	lsrs	r2, r2, #16
 8004c18:	fa13 f38e 	uxtah	r3, r3, lr
 8004c1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c2a:	45c1      	cmp	r9, r8
 8004c2c:	f840 3b04 	str.w	r3, [r0], #4
 8004c30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c34:	d2e8      	bcs.n	8004c08 <quorem+0xb0>
 8004c36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c3e:	b922      	cbnz	r2, 8004c4a <quorem+0xf2>
 8004c40:	3b04      	subs	r3, #4
 8004c42:	429d      	cmp	r5, r3
 8004c44:	461a      	mov	r2, r3
 8004c46:	d30a      	bcc.n	8004c5e <quorem+0x106>
 8004c48:	613c      	str	r4, [r7, #16]
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	b003      	add	sp, #12
 8004c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c52:	6812      	ldr	r2, [r2, #0]
 8004c54:	3b04      	subs	r3, #4
 8004c56:	2a00      	cmp	r2, #0
 8004c58:	d1cc      	bne.n	8004bf4 <quorem+0x9c>
 8004c5a:	3c01      	subs	r4, #1
 8004c5c:	e7c7      	b.n	8004bee <quorem+0x96>
 8004c5e:	6812      	ldr	r2, [r2, #0]
 8004c60:	3b04      	subs	r3, #4
 8004c62:	2a00      	cmp	r2, #0
 8004c64:	d1f0      	bne.n	8004c48 <quorem+0xf0>
 8004c66:	3c01      	subs	r4, #1
 8004c68:	e7eb      	b.n	8004c42 <quorem+0xea>
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	e7ee      	b.n	8004c4c <quorem+0xf4>
	...

08004c70 <_dtoa_r>:
 8004c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c74:	ed2d 8b02 	vpush	{d8}
 8004c78:	ec57 6b10 	vmov	r6, r7, d0
 8004c7c:	b095      	sub	sp, #84	; 0x54
 8004c7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004c84:	9105      	str	r1, [sp, #20]
 8004c86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	9209      	str	r2, [sp, #36]	; 0x24
 8004c8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c90:	b975      	cbnz	r5, 8004cb0 <_dtoa_r+0x40>
 8004c92:	2010      	movs	r0, #16
 8004c94:	f000 fddc 	bl	8005850 <malloc>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	6260      	str	r0, [r4, #36]	; 0x24
 8004c9c:	b920      	cbnz	r0, 8004ca8 <_dtoa_r+0x38>
 8004c9e:	4bb2      	ldr	r3, [pc, #712]	; (8004f68 <_dtoa_r+0x2f8>)
 8004ca0:	21ea      	movs	r1, #234	; 0xea
 8004ca2:	48b2      	ldr	r0, [pc, #712]	; (8004f6c <_dtoa_r+0x2fc>)
 8004ca4:	f001 fb8e 	bl	80063c4 <__assert_func>
 8004ca8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004cac:	6005      	str	r5, [r0, #0]
 8004cae:	60c5      	str	r5, [r0, #12]
 8004cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cb2:	6819      	ldr	r1, [r3, #0]
 8004cb4:	b151      	cbz	r1, 8004ccc <_dtoa_r+0x5c>
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	604a      	str	r2, [r1, #4]
 8004cba:	2301      	movs	r3, #1
 8004cbc:	4093      	lsls	r3, r2
 8004cbe:	608b      	str	r3, [r1, #8]
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	f000 fe1b 	bl	80058fc <_Bfree>
 8004cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	1e3b      	subs	r3, r7, #0
 8004cce:	bfb9      	ittee	lt
 8004cd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004cd4:	9303      	strlt	r3, [sp, #12]
 8004cd6:	2300      	movge	r3, #0
 8004cd8:	f8c8 3000 	strge.w	r3, [r8]
 8004cdc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004ce0:	4ba3      	ldr	r3, [pc, #652]	; (8004f70 <_dtoa_r+0x300>)
 8004ce2:	bfbc      	itt	lt
 8004ce4:	2201      	movlt	r2, #1
 8004ce6:	f8c8 2000 	strlt.w	r2, [r8]
 8004cea:	ea33 0309 	bics.w	r3, r3, r9
 8004cee:	d11b      	bne.n	8004d28 <_dtoa_r+0xb8>
 8004cf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004cf2:	f242 730f 	movw	r3, #9999	; 0x270f
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004cfc:	4333      	orrs	r3, r6
 8004cfe:	f000 857a 	beq.w	80057f6 <_dtoa_r+0xb86>
 8004d02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d04:	b963      	cbnz	r3, 8004d20 <_dtoa_r+0xb0>
 8004d06:	4b9b      	ldr	r3, [pc, #620]	; (8004f74 <_dtoa_r+0x304>)
 8004d08:	e024      	b.n	8004d54 <_dtoa_r+0xe4>
 8004d0a:	4b9b      	ldr	r3, [pc, #620]	; (8004f78 <_dtoa_r+0x308>)
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	3308      	adds	r3, #8
 8004d10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	9800      	ldr	r0, [sp, #0]
 8004d16:	b015      	add	sp, #84	; 0x54
 8004d18:	ecbd 8b02 	vpop	{d8}
 8004d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d20:	4b94      	ldr	r3, [pc, #592]	; (8004f74 <_dtoa_r+0x304>)
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	3303      	adds	r3, #3
 8004d26:	e7f3      	b.n	8004d10 <_dtoa_r+0xa0>
 8004d28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	ec51 0b17 	vmov	r0, r1, d7
 8004d32:	2300      	movs	r3, #0
 8004d34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004d38:	f7fb fed6 	bl	8000ae8 <__aeabi_dcmpeq>
 8004d3c:	4680      	mov	r8, r0
 8004d3e:	b158      	cbz	r0, 8004d58 <_dtoa_r+0xe8>
 8004d40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d42:	2301      	movs	r3, #1
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 8551 	beq.w	80057f0 <_dtoa_r+0xb80>
 8004d4e:	488b      	ldr	r0, [pc, #556]	; (8004f7c <_dtoa_r+0x30c>)
 8004d50:	6018      	str	r0, [r3, #0]
 8004d52:	1e43      	subs	r3, r0, #1
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	e7dd      	b.n	8004d14 <_dtoa_r+0xa4>
 8004d58:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004d5c:	aa12      	add	r2, sp, #72	; 0x48
 8004d5e:	a913      	add	r1, sp, #76	; 0x4c
 8004d60:	4620      	mov	r0, r4
 8004d62:	f001 f8ad 	bl	8005ec0 <__d2b>
 8004d66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004d6a:	4683      	mov	fp, r0
 8004d6c:	2d00      	cmp	r5, #0
 8004d6e:	d07c      	beq.n	8004e6a <_dtoa_r+0x1fa>
 8004d70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d72:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004d76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004d7e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004d82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004d86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d8a:	4b7d      	ldr	r3, [pc, #500]	; (8004f80 <_dtoa_r+0x310>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	4630      	mov	r0, r6
 8004d90:	4639      	mov	r1, r7
 8004d92:	f7fb fa89 	bl	80002a8 <__aeabi_dsub>
 8004d96:	a36e      	add	r3, pc, #440	; (adr r3, 8004f50 <_dtoa_r+0x2e0>)
 8004d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9c:	f7fb fc3c 	bl	8000618 <__aeabi_dmul>
 8004da0:	a36d      	add	r3, pc, #436	; (adr r3, 8004f58 <_dtoa_r+0x2e8>)
 8004da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da6:	f7fb fa81 	bl	80002ac <__adddf3>
 8004daa:	4606      	mov	r6, r0
 8004dac:	4628      	mov	r0, r5
 8004dae:	460f      	mov	r7, r1
 8004db0:	f7fb fbc8 	bl	8000544 <__aeabi_i2d>
 8004db4:	a36a      	add	r3, pc, #424	; (adr r3, 8004f60 <_dtoa_r+0x2f0>)
 8004db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dba:	f7fb fc2d 	bl	8000618 <__aeabi_dmul>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4630      	mov	r0, r6
 8004dc4:	4639      	mov	r1, r7
 8004dc6:	f7fb fa71 	bl	80002ac <__adddf3>
 8004dca:	4606      	mov	r6, r0
 8004dcc:	460f      	mov	r7, r1
 8004dce:	f7fb fed3 	bl	8000b78 <__aeabi_d2iz>
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	4682      	mov	sl, r0
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	4630      	mov	r0, r6
 8004dda:	4639      	mov	r1, r7
 8004ddc:	f7fb fe8e 	bl	8000afc <__aeabi_dcmplt>
 8004de0:	b148      	cbz	r0, 8004df6 <_dtoa_r+0x186>
 8004de2:	4650      	mov	r0, sl
 8004de4:	f7fb fbae 	bl	8000544 <__aeabi_i2d>
 8004de8:	4632      	mov	r2, r6
 8004dea:	463b      	mov	r3, r7
 8004dec:	f7fb fe7c 	bl	8000ae8 <__aeabi_dcmpeq>
 8004df0:	b908      	cbnz	r0, 8004df6 <_dtoa_r+0x186>
 8004df2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004df6:	f1ba 0f16 	cmp.w	sl, #22
 8004dfa:	d854      	bhi.n	8004ea6 <_dtoa_r+0x236>
 8004dfc:	4b61      	ldr	r3, [pc, #388]	; (8004f84 <_dtoa_r+0x314>)
 8004dfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e0a:	f7fb fe77 	bl	8000afc <__aeabi_dcmplt>
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	d04b      	beq.n	8004eaa <_dtoa_r+0x23a>
 8004e12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e16:	2300      	movs	r3, #0
 8004e18:	930e      	str	r3, [sp, #56]	; 0x38
 8004e1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e1c:	1b5d      	subs	r5, r3, r5
 8004e1e:	1e6b      	subs	r3, r5, #1
 8004e20:	9304      	str	r3, [sp, #16]
 8004e22:	bf43      	ittte	mi
 8004e24:	2300      	movmi	r3, #0
 8004e26:	f1c5 0801 	rsbmi	r8, r5, #1
 8004e2a:	9304      	strmi	r3, [sp, #16]
 8004e2c:	f04f 0800 	movpl.w	r8, #0
 8004e30:	f1ba 0f00 	cmp.w	sl, #0
 8004e34:	db3b      	blt.n	8004eae <_dtoa_r+0x23e>
 8004e36:	9b04      	ldr	r3, [sp, #16]
 8004e38:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004e3c:	4453      	add	r3, sl
 8004e3e:	9304      	str	r3, [sp, #16]
 8004e40:	2300      	movs	r3, #0
 8004e42:	9306      	str	r3, [sp, #24]
 8004e44:	9b05      	ldr	r3, [sp, #20]
 8004e46:	2b09      	cmp	r3, #9
 8004e48:	d869      	bhi.n	8004f1e <_dtoa_r+0x2ae>
 8004e4a:	2b05      	cmp	r3, #5
 8004e4c:	bfc4      	itt	gt
 8004e4e:	3b04      	subgt	r3, #4
 8004e50:	9305      	strgt	r3, [sp, #20]
 8004e52:	9b05      	ldr	r3, [sp, #20]
 8004e54:	f1a3 0302 	sub.w	r3, r3, #2
 8004e58:	bfcc      	ite	gt
 8004e5a:	2500      	movgt	r5, #0
 8004e5c:	2501      	movle	r5, #1
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	d869      	bhi.n	8004f36 <_dtoa_r+0x2c6>
 8004e62:	e8df f003 	tbb	[pc, r3]
 8004e66:	4e2c      	.short	0x4e2c
 8004e68:	5a4c      	.short	0x5a4c
 8004e6a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004e6e:	441d      	add	r5, r3
 8004e70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004e74:	2b20      	cmp	r3, #32
 8004e76:	bfc1      	itttt	gt
 8004e78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e7c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004e80:	fa09 f303 	lslgt.w	r3, r9, r3
 8004e84:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004e88:	bfda      	itte	le
 8004e8a:	f1c3 0320 	rsble	r3, r3, #32
 8004e8e:	fa06 f003 	lslle.w	r0, r6, r3
 8004e92:	4318      	orrgt	r0, r3
 8004e94:	f7fb fb46 	bl	8000524 <__aeabi_ui2d>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	4606      	mov	r6, r0
 8004e9c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004ea0:	3d01      	subs	r5, #1
 8004ea2:	9310      	str	r3, [sp, #64]	; 0x40
 8004ea4:	e771      	b.n	8004d8a <_dtoa_r+0x11a>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e7b6      	b.n	8004e18 <_dtoa_r+0x1a8>
 8004eaa:	900e      	str	r0, [sp, #56]	; 0x38
 8004eac:	e7b5      	b.n	8004e1a <_dtoa_r+0x1aa>
 8004eae:	f1ca 0300 	rsb	r3, sl, #0
 8004eb2:	9306      	str	r3, [sp, #24]
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	eba8 080a 	sub.w	r8, r8, sl
 8004eba:	930d      	str	r3, [sp, #52]	; 0x34
 8004ebc:	e7c2      	b.n	8004e44 <_dtoa_r+0x1d4>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	9308      	str	r3, [sp, #32]
 8004ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	dc39      	bgt.n	8004f3c <_dtoa_r+0x2cc>
 8004ec8:	f04f 0901 	mov.w	r9, #1
 8004ecc:	f8cd 9004 	str.w	r9, [sp, #4]
 8004ed0:	464b      	mov	r3, r9
 8004ed2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004ed6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004ed8:	2200      	movs	r2, #0
 8004eda:	6042      	str	r2, [r0, #4]
 8004edc:	2204      	movs	r2, #4
 8004ede:	f102 0614 	add.w	r6, r2, #20
 8004ee2:	429e      	cmp	r6, r3
 8004ee4:	6841      	ldr	r1, [r0, #4]
 8004ee6:	d92f      	bls.n	8004f48 <_dtoa_r+0x2d8>
 8004ee8:	4620      	mov	r0, r4
 8004eea:	f000 fcc7 	bl	800587c <_Balloc>
 8004eee:	9000      	str	r0, [sp, #0]
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	d14b      	bne.n	8004f8c <_dtoa_r+0x31c>
 8004ef4:	4b24      	ldr	r3, [pc, #144]	; (8004f88 <_dtoa_r+0x318>)
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004efc:	e6d1      	b.n	8004ca2 <_dtoa_r+0x32>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e7de      	b.n	8004ec0 <_dtoa_r+0x250>
 8004f02:	2300      	movs	r3, #0
 8004f04:	9308      	str	r3, [sp, #32]
 8004f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f08:	eb0a 0903 	add.w	r9, sl, r3
 8004f0c:	f109 0301 	add.w	r3, r9, #1
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	9301      	str	r3, [sp, #4]
 8004f14:	bfb8      	it	lt
 8004f16:	2301      	movlt	r3, #1
 8004f18:	e7dd      	b.n	8004ed6 <_dtoa_r+0x266>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e7f2      	b.n	8004f04 <_dtoa_r+0x294>
 8004f1e:	2501      	movs	r5, #1
 8004f20:	2300      	movs	r3, #0
 8004f22:	9305      	str	r3, [sp, #20]
 8004f24:	9508      	str	r5, [sp, #32]
 8004f26:	f04f 39ff 	mov.w	r9, #4294967295
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004f30:	2312      	movs	r3, #18
 8004f32:	9209      	str	r2, [sp, #36]	; 0x24
 8004f34:	e7cf      	b.n	8004ed6 <_dtoa_r+0x266>
 8004f36:	2301      	movs	r3, #1
 8004f38:	9308      	str	r3, [sp, #32]
 8004f3a:	e7f4      	b.n	8004f26 <_dtoa_r+0x2b6>
 8004f3c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004f40:	f8cd 9004 	str.w	r9, [sp, #4]
 8004f44:	464b      	mov	r3, r9
 8004f46:	e7c6      	b.n	8004ed6 <_dtoa_r+0x266>
 8004f48:	3101      	adds	r1, #1
 8004f4a:	6041      	str	r1, [r0, #4]
 8004f4c:	0052      	lsls	r2, r2, #1
 8004f4e:	e7c6      	b.n	8004ede <_dtoa_r+0x26e>
 8004f50:	636f4361 	.word	0x636f4361
 8004f54:	3fd287a7 	.word	0x3fd287a7
 8004f58:	8b60c8b3 	.word	0x8b60c8b3
 8004f5c:	3fc68a28 	.word	0x3fc68a28
 8004f60:	509f79fb 	.word	0x509f79fb
 8004f64:	3fd34413 	.word	0x3fd34413
 8004f68:	08007f79 	.word	0x08007f79
 8004f6c:	08007f90 	.word	0x08007f90
 8004f70:	7ff00000 	.word	0x7ff00000
 8004f74:	08007f75 	.word	0x08007f75
 8004f78:	08007f6c 	.word	0x08007f6c
 8004f7c:	08007f49 	.word	0x08007f49
 8004f80:	3ff80000 	.word	0x3ff80000
 8004f84:	08008088 	.word	0x08008088
 8004f88:	08007fef 	.word	0x08007fef
 8004f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f8e:	9a00      	ldr	r2, [sp, #0]
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	9b01      	ldr	r3, [sp, #4]
 8004f94:	2b0e      	cmp	r3, #14
 8004f96:	f200 80ad 	bhi.w	80050f4 <_dtoa_r+0x484>
 8004f9a:	2d00      	cmp	r5, #0
 8004f9c:	f000 80aa 	beq.w	80050f4 <_dtoa_r+0x484>
 8004fa0:	f1ba 0f00 	cmp.w	sl, #0
 8004fa4:	dd36      	ble.n	8005014 <_dtoa_r+0x3a4>
 8004fa6:	4ac3      	ldr	r2, [pc, #780]	; (80052b4 <_dtoa_r+0x644>)
 8004fa8:	f00a 030f 	and.w	r3, sl, #15
 8004fac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004fb0:	ed93 7b00 	vldr	d7, [r3]
 8004fb4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004fb8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004fbc:	eeb0 8a47 	vmov.f32	s16, s14
 8004fc0:	eef0 8a67 	vmov.f32	s17, s15
 8004fc4:	d016      	beq.n	8004ff4 <_dtoa_r+0x384>
 8004fc6:	4bbc      	ldr	r3, [pc, #752]	; (80052b8 <_dtoa_r+0x648>)
 8004fc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004fcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fd0:	f7fb fc4c 	bl	800086c <__aeabi_ddiv>
 8004fd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fd8:	f007 070f 	and.w	r7, r7, #15
 8004fdc:	2503      	movs	r5, #3
 8004fde:	4eb6      	ldr	r6, [pc, #728]	; (80052b8 <_dtoa_r+0x648>)
 8004fe0:	b957      	cbnz	r7, 8004ff8 <_dtoa_r+0x388>
 8004fe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fe6:	ec53 2b18 	vmov	r2, r3, d8
 8004fea:	f7fb fc3f 	bl	800086c <__aeabi_ddiv>
 8004fee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ff2:	e029      	b.n	8005048 <_dtoa_r+0x3d8>
 8004ff4:	2502      	movs	r5, #2
 8004ff6:	e7f2      	b.n	8004fde <_dtoa_r+0x36e>
 8004ff8:	07f9      	lsls	r1, r7, #31
 8004ffa:	d508      	bpl.n	800500e <_dtoa_r+0x39e>
 8004ffc:	ec51 0b18 	vmov	r0, r1, d8
 8005000:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005004:	f7fb fb08 	bl	8000618 <__aeabi_dmul>
 8005008:	ec41 0b18 	vmov	d8, r0, r1
 800500c:	3501      	adds	r5, #1
 800500e:	107f      	asrs	r7, r7, #1
 8005010:	3608      	adds	r6, #8
 8005012:	e7e5      	b.n	8004fe0 <_dtoa_r+0x370>
 8005014:	f000 80a6 	beq.w	8005164 <_dtoa_r+0x4f4>
 8005018:	f1ca 0600 	rsb	r6, sl, #0
 800501c:	4ba5      	ldr	r3, [pc, #660]	; (80052b4 <_dtoa_r+0x644>)
 800501e:	4fa6      	ldr	r7, [pc, #664]	; (80052b8 <_dtoa_r+0x648>)
 8005020:	f006 020f 	and.w	r2, r6, #15
 8005024:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005030:	f7fb faf2 	bl	8000618 <__aeabi_dmul>
 8005034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005038:	1136      	asrs	r6, r6, #4
 800503a:	2300      	movs	r3, #0
 800503c:	2502      	movs	r5, #2
 800503e:	2e00      	cmp	r6, #0
 8005040:	f040 8085 	bne.w	800514e <_dtoa_r+0x4de>
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1d2      	bne.n	8004fee <_dtoa_r+0x37e>
 8005048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 808c 	beq.w	8005168 <_dtoa_r+0x4f8>
 8005050:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005054:	4b99      	ldr	r3, [pc, #612]	; (80052bc <_dtoa_r+0x64c>)
 8005056:	2200      	movs	r2, #0
 8005058:	4630      	mov	r0, r6
 800505a:	4639      	mov	r1, r7
 800505c:	f7fb fd4e 	bl	8000afc <__aeabi_dcmplt>
 8005060:	2800      	cmp	r0, #0
 8005062:	f000 8081 	beq.w	8005168 <_dtoa_r+0x4f8>
 8005066:	9b01      	ldr	r3, [sp, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d07d      	beq.n	8005168 <_dtoa_r+0x4f8>
 800506c:	f1b9 0f00 	cmp.w	r9, #0
 8005070:	dd3c      	ble.n	80050ec <_dtoa_r+0x47c>
 8005072:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005076:	9307      	str	r3, [sp, #28]
 8005078:	2200      	movs	r2, #0
 800507a:	4b91      	ldr	r3, [pc, #580]	; (80052c0 <_dtoa_r+0x650>)
 800507c:	4630      	mov	r0, r6
 800507e:	4639      	mov	r1, r7
 8005080:	f7fb faca 	bl	8000618 <__aeabi_dmul>
 8005084:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005088:	3501      	adds	r5, #1
 800508a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800508e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005092:	4628      	mov	r0, r5
 8005094:	f7fb fa56 	bl	8000544 <__aeabi_i2d>
 8005098:	4632      	mov	r2, r6
 800509a:	463b      	mov	r3, r7
 800509c:	f7fb fabc 	bl	8000618 <__aeabi_dmul>
 80050a0:	4b88      	ldr	r3, [pc, #544]	; (80052c4 <_dtoa_r+0x654>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	f7fb f902 	bl	80002ac <__adddf3>
 80050a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80050ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050b0:	9303      	str	r3, [sp, #12]
 80050b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d15c      	bne.n	8005172 <_dtoa_r+0x502>
 80050b8:	4b83      	ldr	r3, [pc, #524]	; (80052c8 <_dtoa_r+0x658>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	4630      	mov	r0, r6
 80050be:	4639      	mov	r1, r7
 80050c0:	f7fb f8f2 	bl	80002a8 <__aeabi_dsub>
 80050c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050c8:	4606      	mov	r6, r0
 80050ca:	460f      	mov	r7, r1
 80050cc:	f7fb fd34 	bl	8000b38 <__aeabi_dcmpgt>
 80050d0:	2800      	cmp	r0, #0
 80050d2:	f040 8296 	bne.w	8005602 <_dtoa_r+0x992>
 80050d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80050da:	4630      	mov	r0, r6
 80050dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80050e0:	4639      	mov	r1, r7
 80050e2:	f7fb fd0b 	bl	8000afc <__aeabi_dcmplt>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	f040 8288 	bne.w	80055fc <_dtoa_r+0x98c>
 80050ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80050f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f2c0 8158 	blt.w	80053ac <_dtoa_r+0x73c>
 80050fc:	f1ba 0f0e 	cmp.w	sl, #14
 8005100:	f300 8154 	bgt.w	80053ac <_dtoa_r+0x73c>
 8005104:	4b6b      	ldr	r3, [pc, #428]	; (80052b4 <_dtoa_r+0x644>)
 8005106:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800510a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800510e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005110:	2b00      	cmp	r3, #0
 8005112:	f280 80e3 	bge.w	80052dc <_dtoa_r+0x66c>
 8005116:	9b01      	ldr	r3, [sp, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	f300 80df 	bgt.w	80052dc <_dtoa_r+0x66c>
 800511e:	f040 826d 	bne.w	80055fc <_dtoa_r+0x98c>
 8005122:	4b69      	ldr	r3, [pc, #420]	; (80052c8 <_dtoa_r+0x658>)
 8005124:	2200      	movs	r2, #0
 8005126:	4640      	mov	r0, r8
 8005128:	4649      	mov	r1, r9
 800512a:	f7fb fa75 	bl	8000618 <__aeabi_dmul>
 800512e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005132:	f7fb fcf7 	bl	8000b24 <__aeabi_dcmpge>
 8005136:	9e01      	ldr	r6, [sp, #4]
 8005138:	4637      	mov	r7, r6
 800513a:	2800      	cmp	r0, #0
 800513c:	f040 8243 	bne.w	80055c6 <_dtoa_r+0x956>
 8005140:	9d00      	ldr	r5, [sp, #0]
 8005142:	2331      	movs	r3, #49	; 0x31
 8005144:	f805 3b01 	strb.w	r3, [r5], #1
 8005148:	f10a 0a01 	add.w	sl, sl, #1
 800514c:	e23f      	b.n	80055ce <_dtoa_r+0x95e>
 800514e:	07f2      	lsls	r2, r6, #31
 8005150:	d505      	bpl.n	800515e <_dtoa_r+0x4ee>
 8005152:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005156:	f7fb fa5f 	bl	8000618 <__aeabi_dmul>
 800515a:	3501      	adds	r5, #1
 800515c:	2301      	movs	r3, #1
 800515e:	1076      	asrs	r6, r6, #1
 8005160:	3708      	adds	r7, #8
 8005162:	e76c      	b.n	800503e <_dtoa_r+0x3ce>
 8005164:	2502      	movs	r5, #2
 8005166:	e76f      	b.n	8005048 <_dtoa_r+0x3d8>
 8005168:	9b01      	ldr	r3, [sp, #4]
 800516a:	f8cd a01c 	str.w	sl, [sp, #28]
 800516e:	930c      	str	r3, [sp, #48]	; 0x30
 8005170:	e78d      	b.n	800508e <_dtoa_r+0x41e>
 8005172:	9900      	ldr	r1, [sp, #0]
 8005174:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005176:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005178:	4b4e      	ldr	r3, [pc, #312]	; (80052b4 <_dtoa_r+0x644>)
 800517a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800517e:	4401      	add	r1, r0
 8005180:	9102      	str	r1, [sp, #8]
 8005182:	9908      	ldr	r1, [sp, #32]
 8005184:	eeb0 8a47 	vmov.f32	s16, s14
 8005188:	eef0 8a67 	vmov.f32	s17, s15
 800518c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005190:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005194:	2900      	cmp	r1, #0
 8005196:	d045      	beq.n	8005224 <_dtoa_r+0x5b4>
 8005198:	494c      	ldr	r1, [pc, #304]	; (80052cc <_dtoa_r+0x65c>)
 800519a:	2000      	movs	r0, #0
 800519c:	f7fb fb66 	bl	800086c <__aeabi_ddiv>
 80051a0:	ec53 2b18 	vmov	r2, r3, d8
 80051a4:	f7fb f880 	bl	80002a8 <__aeabi_dsub>
 80051a8:	9d00      	ldr	r5, [sp, #0]
 80051aa:	ec41 0b18 	vmov	d8, r0, r1
 80051ae:	4639      	mov	r1, r7
 80051b0:	4630      	mov	r0, r6
 80051b2:	f7fb fce1 	bl	8000b78 <__aeabi_d2iz>
 80051b6:	900c      	str	r0, [sp, #48]	; 0x30
 80051b8:	f7fb f9c4 	bl	8000544 <__aeabi_i2d>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	4630      	mov	r0, r6
 80051c2:	4639      	mov	r1, r7
 80051c4:	f7fb f870 	bl	80002a8 <__aeabi_dsub>
 80051c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051ca:	3330      	adds	r3, #48	; 0x30
 80051cc:	f805 3b01 	strb.w	r3, [r5], #1
 80051d0:	ec53 2b18 	vmov	r2, r3, d8
 80051d4:	4606      	mov	r6, r0
 80051d6:	460f      	mov	r7, r1
 80051d8:	f7fb fc90 	bl	8000afc <__aeabi_dcmplt>
 80051dc:	2800      	cmp	r0, #0
 80051de:	d165      	bne.n	80052ac <_dtoa_r+0x63c>
 80051e0:	4632      	mov	r2, r6
 80051e2:	463b      	mov	r3, r7
 80051e4:	4935      	ldr	r1, [pc, #212]	; (80052bc <_dtoa_r+0x64c>)
 80051e6:	2000      	movs	r0, #0
 80051e8:	f7fb f85e 	bl	80002a8 <__aeabi_dsub>
 80051ec:	ec53 2b18 	vmov	r2, r3, d8
 80051f0:	f7fb fc84 	bl	8000afc <__aeabi_dcmplt>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	f040 80b9 	bne.w	800536c <_dtoa_r+0x6fc>
 80051fa:	9b02      	ldr	r3, [sp, #8]
 80051fc:	429d      	cmp	r5, r3
 80051fe:	f43f af75 	beq.w	80050ec <_dtoa_r+0x47c>
 8005202:	4b2f      	ldr	r3, [pc, #188]	; (80052c0 <_dtoa_r+0x650>)
 8005204:	ec51 0b18 	vmov	r0, r1, d8
 8005208:	2200      	movs	r2, #0
 800520a:	f7fb fa05 	bl	8000618 <__aeabi_dmul>
 800520e:	4b2c      	ldr	r3, [pc, #176]	; (80052c0 <_dtoa_r+0x650>)
 8005210:	ec41 0b18 	vmov	d8, r0, r1
 8005214:	2200      	movs	r2, #0
 8005216:	4630      	mov	r0, r6
 8005218:	4639      	mov	r1, r7
 800521a:	f7fb f9fd 	bl	8000618 <__aeabi_dmul>
 800521e:	4606      	mov	r6, r0
 8005220:	460f      	mov	r7, r1
 8005222:	e7c4      	b.n	80051ae <_dtoa_r+0x53e>
 8005224:	ec51 0b17 	vmov	r0, r1, d7
 8005228:	f7fb f9f6 	bl	8000618 <__aeabi_dmul>
 800522c:	9b02      	ldr	r3, [sp, #8]
 800522e:	9d00      	ldr	r5, [sp, #0]
 8005230:	930c      	str	r3, [sp, #48]	; 0x30
 8005232:	ec41 0b18 	vmov	d8, r0, r1
 8005236:	4639      	mov	r1, r7
 8005238:	4630      	mov	r0, r6
 800523a:	f7fb fc9d 	bl	8000b78 <__aeabi_d2iz>
 800523e:	9011      	str	r0, [sp, #68]	; 0x44
 8005240:	f7fb f980 	bl	8000544 <__aeabi_i2d>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	4630      	mov	r0, r6
 800524a:	4639      	mov	r1, r7
 800524c:	f7fb f82c 	bl	80002a8 <__aeabi_dsub>
 8005250:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005252:	3330      	adds	r3, #48	; 0x30
 8005254:	f805 3b01 	strb.w	r3, [r5], #1
 8005258:	9b02      	ldr	r3, [sp, #8]
 800525a:	429d      	cmp	r5, r3
 800525c:	4606      	mov	r6, r0
 800525e:	460f      	mov	r7, r1
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	d134      	bne.n	80052d0 <_dtoa_r+0x660>
 8005266:	4b19      	ldr	r3, [pc, #100]	; (80052cc <_dtoa_r+0x65c>)
 8005268:	ec51 0b18 	vmov	r0, r1, d8
 800526c:	f7fb f81e 	bl	80002ac <__adddf3>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4630      	mov	r0, r6
 8005276:	4639      	mov	r1, r7
 8005278:	f7fb fc5e 	bl	8000b38 <__aeabi_dcmpgt>
 800527c:	2800      	cmp	r0, #0
 800527e:	d175      	bne.n	800536c <_dtoa_r+0x6fc>
 8005280:	ec53 2b18 	vmov	r2, r3, d8
 8005284:	4911      	ldr	r1, [pc, #68]	; (80052cc <_dtoa_r+0x65c>)
 8005286:	2000      	movs	r0, #0
 8005288:	f7fb f80e 	bl	80002a8 <__aeabi_dsub>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	4630      	mov	r0, r6
 8005292:	4639      	mov	r1, r7
 8005294:	f7fb fc32 	bl	8000afc <__aeabi_dcmplt>
 8005298:	2800      	cmp	r0, #0
 800529a:	f43f af27 	beq.w	80050ec <_dtoa_r+0x47c>
 800529e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052a0:	1e6b      	subs	r3, r5, #1
 80052a2:	930c      	str	r3, [sp, #48]	; 0x30
 80052a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80052a8:	2b30      	cmp	r3, #48	; 0x30
 80052aa:	d0f8      	beq.n	800529e <_dtoa_r+0x62e>
 80052ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80052b0:	e04a      	b.n	8005348 <_dtoa_r+0x6d8>
 80052b2:	bf00      	nop
 80052b4:	08008088 	.word	0x08008088
 80052b8:	08008060 	.word	0x08008060
 80052bc:	3ff00000 	.word	0x3ff00000
 80052c0:	40240000 	.word	0x40240000
 80052c4:	401c0000 	.word	0x401c0000
 80052c8:	40140000 	.word	0x40140000
 80052cc:	3fe00000 	.word	0x3fe00000
 80052d0:	4baf      	ldr	r3, [pc, #700]	; (8005590 <_dtoa_r+0x920>)
 80052d2:	f7fb f9a1 	bl	8000618 <__aeabi_dmul>
 80052d6:	4606      	mov	r6, r0
 80052d8:	460f      	mov	r7, r1
 80052da:	e7ac      	b.n	8005236 <_dtoa_r+0x5c6>
 80052dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80052e0:	9d00      	ldr	r5, [sp, #0]
 80052e2:	4642      	mov	r2, r8
 80052e4:	464b      	mov	r3, r9
 80052e6:	4630      	mov	r0, r6
 80052e8:	4639      	mov	r1, r7
 80052ea:	f7fb fabf 	bl	800086c <__aeabi_ddiv>
 80052ee:	f7fb fc43 	bl	8000b78 <__aeabi_d2iz>
 80052f2:	9002      	str	r0, [sp, #8]
 80052f4:	f7fb f926 	bl	8000544 <__aeabi_i2d>
 80052f8:	4642      	mov	r2, r8
 80052fa:	464b      	mov	r3, r9
 80052fc:	f7fb f98c 	bl	8000618 <__aeabi_dmul>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	4630      	mov	r0, r6
 8005306:	4639      	mov	r1, r7
 8005308:	f7fa ffce 	bl	80002a8 <__aeabi_dsub>
 800530c:	9e02      	ldr	r6, [sp, #8]
 800530e:	9f01      	ldr	r7, [sp, #4]
 8005310:	3630      	adds	r6, #48	; 0x30
 8005312:	f805 6b01 	strb.w	r6, [r5], #1
 8005316:	9e00      	ldr	r6, [sp, #0]
 8005318:	1bae      	subs	r6, r5, r6
 800531a:	42b7      	cmp	r7, r6
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	d137      	bne.n	8005392 <_dtoa_r+0x722>
 8005322:	f7fa ffc3 	bl	80002ac <__adddf3>
 8005326:	4642      	mov	r2, r8
 8005328:	464b      	mov	r3, r9
 800532a:	4606      	mov	r6, r0
 800532c:	460f      	mov	r7, r1
 800532e:	f7fb fc03 	bl	8000b38 <__aeabi_dcmpgt>
 8005332:	b9c8      	cbnz	r0, 8005368 <_dtoa_r+0x6f8>
 8005334:	4642      	mov	r2, r8
 8005336:	464b      	mov	r3, r9
 8005338:	4630      	mov	r0, r6
 800533a:	4639      	mov	r1, r7
 800533c:	f7fb fbd4 	bl	8000ae8 <__aeabi_dcmpeq>
 8005340:	b110      	cbz	r0, 8005348 <_dtoa_r+0x6d8>
 8005342:	9b02      	ldr	r3, [sp, #8]
 8005344:	07d9      	lsls	r1, r3, #31
 8005346:	d40f      	bmi.n	8005368 <_dtoa_r+0x6f8>
 8005348:	4620      	mov	r0, r4
 800534a:	4659      	mov	r1, fp
 800534c:	f000 fad6 	bl	80058fc <_Bfree>
 8005350:	2300      	movs	r3, #0
 8005352:	702b      	strb	r3, [r5, #0]
 8005354:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005356:	f10a 0001 	add.w	r0, sl, #1
 800535a:	6018      	str	r0, [r3, #0]
 800535c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800535e:	2b00      	cmp	r3, #0
 8005360:	f43f acd8 	beq.w	8004d14 <_dtoa_r+0xa4>
 8005364:	601d      	str	r5, [r3, #0]
 8005366:	e4d5      	b.n	8004d14 <_dtoa_r+0xa4>
 8005368:	f8cd a01c 	str.w	sl, [sp, #28]
 800536c:	462b      	mov	r3, r5
 800536e:	461d      	mov	r5, r3
 8005370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005374:	2a39      	cmp	r2, #57	; 0x39
 8005376:	d108      	bne.n	800538a <_dtoa_r+0x71a>
 8005378:	9a00      	ldr	r2, [sp, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d1f7      	bne.n	800536e <_dtoa_r+0x6fe>
 800537e:	9a07      	ldr	r2, [sp, #28]
 8005380:	9900      	ldr	r1, [sp, #0]
 8005382:	3201      	adds	r2, #1
 8005384:	9207      	str	r2, [sp, #28]
 8005386:	2230      	movs	r2, #48	; 0x30
 8005388:	700a      	strb	r2, [r1, #0]
 800538a:	781a      	ldrb	r2, [r3, #0]
 800538c:	3201      	adds	r2, #1
 800538e:	701a      	strb	r2, [r3, #0]
 8005390:	e78c      	b.n	80052ac <_dtoa_r+0x63c>
 8005392:	4b7f      	ldr	r3, [pc, #508]	; (8005590 <_dtoa_r+0x920>)
 8005394:	2200      	movs	r2, #0
 8005396:	f7fb f93f 	bl	8000618 <__aeabi_dmul>
 800539a:	2200      	movs	r2, #0
 800539c:	2300      	movs	r3, #0
 800539e:	4606      	mov	r6, r0
 80053a0:	460f      	mov	r7, r1
 80053a2:	f7fb fba1 	bl	8000ae8 <__aeabi_dcmpeq>
 80053a6:	2800      	cmp	r0, #0
 80053a8:	d09b      	beq.n	80052e2 <_dtoa_r+0x672>
 80053aa:	e7cd      	b.n	8005348 <_dtoa_r+0x6d8>
 80053ac:	9a08      	ldr	r2, [sp, #32]
 80053ae:	2a00      	cmp	r2, #0
 80053b0:	f000 80c4 	beq.w	800553c <_dtoa_r+0x8cc>
 80053b4:	9a05      	ldr	r2, [sp, #20]
 80053b6:	2a01      	cmp	r2, #1
 80053b8:	f300 80a8 	bgt.w	800550c <_dtoa_r+0x89c>
 80053bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80053be:	2a00      	cmp	r2, #0
 80053c0:	f000 80a0 	beq.w	8005504 <_dtoa_r+0x894>
 80053c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80053c8:	9e06      	ldr	r6, [sp, #24]
 80053ca:	4645      	mov	r5, r8
 80053cc:	9a04      	ldr	r2, [sp, #16]
 80053ce:	2101      	movs	r1, #1
 80053d0:	441a      	add	r2, r3
 80053d2:	4620      	mov	r0, r4
 80053d4:	4498      	add	r8, r3
 80053d6:	9204      	str	r2, [sp, #16]
 80053d8:	f000 fb4c 	bl	8005a74 <__i2b>
 80053dc:	4607      	mov	r7, r0
 80053de:	2d00      	cmp	r5, #0
 80053e0:	dd0b      	ble.n	80053fa <_dtoa_r+0x78a>
 80053e2:	9b04      	ldr	r3, [sp, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	dd08      	ble.n	80053fa <_dtoa_r+0x78a>
 80053e8:	42ab      	cmp	r3, r5
 80053ea:	9a04      	ldr	r2, [sp, #16]
 80053ec:	bfa8      	it	ge
 80053ee:	462b      	movge	r3, r5
 80053f0:	eba8 0803 	sub.w	r8, r8, r3
 80053f4:	1aed      	subs	r5, r5, r3
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	9304      	str	r3, [sp, #16]
 80053fa:	9b06      	ldr	r3, [sp, #24]
 80053fc:	b1fb      	cbz	r3, 800543e <_dtoa_r+0x7ce>
 80053fe:	9b08      	ldr	r3, [sp, #32]
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 809f 	beq.w	8005544 <_dtoa_r+0x8d4>
 8005406:	2e00      	cmp	r6, #0
 8005408:	dd11      	ble.n	800542e <_dtoa_r+0x7be>
 800540a:	4639      	mov	r1, r7
 800540c:	4632      	mov	r2, r6
 800540e:	4620      	mov	r0, r4
 8005410:	f000 fbec 	bl	8005bec <__pow5mult>
 8005414:	465a      	mov	r2, fp
 8005416:	4601      	mov	r1, r0
 8005418:	4607      	mov	r7, r0
 800541a:	4620      	mov	r0, r4
 800541c:	f000 fb40 	bl	8005aa0 <__multiply>
 8005420:	4659      	mov	r1, fp
 8005422:	9007      	str	r0, [sp, #28]
 8005424:	4620      	mov	r0, r4
 8005426:	f000 fa69 	bl	80058fc <_Bfree>
 800542a:	9b07      	ldr	r3, [sp, #28]
 800542c:	469b      	mov	fp, r3
 800542e:	9b06      	ldr	r3, [sp, #24]
 8005430:	1b9a      	subs	r2, r3, r6
 8005432:	d004      	beq.n	800543e <_dtoa_r+0x7ce>
 8005434:	4659      	mov	r1, fp
 8005436:	4620      	mov	r0, r4
 8005438:	f000 fbd8 	bl	8005bec <__pow5mult>
 800543c:	4683      	mov	fp, r0
 800543e:	2101      	movs	r1, #1
 8005440:	4620      	mov	r0, r4
 8005442:	f000 fb17 	bl	8005a74 <__i2b>
 8005446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005448:	2b00      	cmp	r3, #0
 800544a:	4606      	mov	r6, r0
 800544c:	dd7c      	ble.n	8005548 <_dtoa_r+0x8d8>
 800544e:	461a      	mov	r2, r3
 8005450:	4601      	mov	r1, r0
 8005452:	4620      	mov	r0, r4
 8005454:	f000 fbca 	bl	8005bec <__pow5mult>
 8005458:	9b05      	ldr	r3, [sp, #20]
 800545a:	2b01      	cmp	r3, #1
 800545c:	4606      	mov	r6, r0
 800545e:	dd76      	ble.n	800554e <_dtoa_r+0x8de>
 8005460:	2300      	movs	r3, #0
 8005462:	9306      	str	r3, [sp, #24]
 8005464:	6933      	ldr	r3, [r6, #16]
 8005466:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800546a:	6918      	ldr	r0, [r3, #16]
 800546c:	f000 fab2 	bl	80059d4 <__hi0bits>
 8005470:	f1c0 0020 	rsb	r0, r0, #32
 8005474:	9b04      	ldr	r3, [sp, #16]
 8005476:	4418      	add	r0, r3
 8005478:	f010 001f 	ands.w	r0, r0, #31
 800547c:	f000 8086 	beq.w	800558c <_dtoa_r+0x91c>
 8005480:	f1c0 0320 	rsb	r3, r0, #32
 8005484:	2b04      	cmp	r3, #4
 8005486:	dd7f      	ble.n	8005588 <_dtoa_r+0x918>
 8005488:	f1c0 001c 	rsb	r0, r0, #28
 800548c:	9b04      	ldr	r3, [sp, #16]
 800548e:	4403      	add	r3, r0
 8005490:	4480      	add	r8, r0
 8005492:	4405      	add	r5, r0
 8005494:	9304      	str	r3, [sp, #16]
 8005496:	f1b8 0f00 	cmp.w	r8, #0
 800549a:	dd05      	ble.n	80054a8 <_dtoa_r+0x838>
 800549c:	4659      	mov	r1, fp
 800549e:	4642      	mov	r2, r8
 80054a0:	4620      	mov	r0, r4
 80054a2:	f000 fbfd 	bl	8005ca0 <__lshift>
 80054a6:	4683      	mov	fp, r0
 80054a8:	9b04      	ldr	r3, [sp, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	dd05      	ble.n	80054ba <_dtoa_r+0x84a>
 80054ae:	4631      	mov	r1, r6
 80054b0:	461a      	mov	r2, r3
 80054b2:	4620      	mov	r0, r4
 80054b4:	f000 fbf4 	bl	8005ca0 <__lshift>
 80054b8:	4606      	mov	r6, r0
 80054ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d069      	beq.n	8005594 <_dtoa_r+0x924>
 80054c0:	4631      	mov	r1, r6
 80054c2:	4658      	mov	r0, fp
 80054c4:	f000 fc58 	bl	8005d78 <__mcmp>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	da63      	bge.n	8005594 <_dtoa_r+0x924>
 80054cc:	2300      	movs	r3, #0
 80054ce:	4659      	mov	r1, fp
 80054d0:	220a      	movs	r2, #10
 80054d2:	4620      	mov	r0, r4
 80054d4:	f000 fa34 	bl	8005940 <__multadd>
 80054d8:	9b08      	ldr	r3, [sp, #32]
 80054da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054de:	4683      	mov	fp, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 818f 	beq.w	8005804 <_dtoa_r+0xb94>
 80054e6:	4639      	mov	r1, r7
 80054e8:	2300      	movs	r3, #0
 80054ea:	220a      	movs	r2, #10
 80054ec:	4620      	mov	r0, r4
 80054ee:	f000 fa27 	bl	8005940 <__multadd>
 80054f2:	f1b9 0f00 	cmp.w	r9, #0
 80054f6:	4607      	mov	r7, r0
 80054f8:	f300 808e 	bgt.w	8005618 <_dtoa_r+0x9a8>
 80054fc:	9b05      	ldr	r3, [sp, #20]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	dc50      	bgt.n	80055a4 <_dtoa_r+0x934>
 8005502:	e089      	b.n	8005618 <_dtoa_r+0x9a8>
 8005504:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005506:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800550a:	e75d      	b.n	80053c8 <_dtoa_r+0x758>
 800550c:	9b01      	ldr	r3, [sp, #4]
 800550e:	1e5e      	subs	r6, r3, #1
 8005510:	9b06      	ldr	r3, [sp, #24]
 8005512:	42b3      	cmp	r3, r6
 8005514:	bfbf      	itttt	lt
 8005516:	9b06      	ldrlt	r3, [sp, #24]
 8005518:	9606      	strlt	r6, [sp, #24]
 800551a:	1af2      	sublt	r2, r6, r3
 800551c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800551e:	bfb6      	itet	lt
 8005520:	189b      	addlt	r3, r3, r2
 8005522:	1b9e      	subge	r6, r3, r6
 8005524:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005526:	9b01      	ldr	r3, [sp, #4]
 8005528:	bfb8      	it	lt
 800552a:	2600      	movlt	r6, #0
 800552c:	2b00      	cmp	r3, #0
 800552e:	bfb5      	itete	lt
 8005530:	eba8 0503 	sublt.w	r5, r8, r3
 8005534:	9b01      	ldrge	r3, [sp, #4]
 8005536:	2300      	movlt	r3, #0
 8005538:	4645      	movge	r5, r8
 800553a:	e747      	b.n	80053cc <_dtoa_r+0x75c>
 800553c:	9e06      	ldr	r6, [sp, #24]
 800553e:	9f08      	ldr	r7, [sp, #32]
 8005540:	4645      	mov	r5, r8
 8005542:	e74c      	b.n	80053de <_dtoa_r+0x76e>
 8005544:	9a06      	ldr	r2, [sp, #24]
 8005546:	e775      	b.n	8005434 <_dtoa_r+0x7c4>
 8005548:	9b05      	ldr	r3, [sp, #20]
 800554a:	2b01      	cmp	r3, #1
 800554c:	dc18      	bgt.n	8005580 <_dtoa_r+0x910>
 800554e:	9b02      	ldr	r3, [sp, #8]
 8005550:	b9b3      	cbnz	r3, 8005580 <_dtoa_r+0x910>
 8005552:	9b03      	ldr	r3, [sp, #12]
 8005554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005558:	b9a3      	cbnz	r3, 8005584 <_dtoa_r+0x914>
 800555a:	9b03      	ldr	r3, [sp, #12]
 800555c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005560:	0d1b      	lsrs	r3, r3, #20
 8005562:	051b      	lsls	r3, r3, #20
 8005564:	b12b      	cbz	r3, 8005572 <_dtoa_r+0x902>
 8005566:	9b04      	ldr	r3, [sp, #16]
 8005568:	3301      	adds	r3, #1
 800556a:	9304      	str	r3, [sp, #16]
 800556c:	f108 0801 	add.w	r8, r8, #1
 8005570:	2301      	movs	r3, #1
 8005572:	9306      	str	r3, [sp, #24]
 8005574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005576:	2b00      	cmp	r3, #0
 8005578:	f47f af74 	bne.w	8005464 <_dtoa_r+0x7f4>
 800557c:	2001      	movs	r0, #1
 800557e:	e779      	b.n	8005474 <_dtoa_r+0x804>
 8005580:	2300      	movs	r3, #0
 8005582:	e7f6      	b.n	8005572 <_dtoa_r+0x902>
 8005584:	9b02      	ldr	r3, [sp, #8]
 8005586:	e7f4      	b.n	8005572 <_dtoa_r+0x902>
 8005588:	d085      	beq.n	8005496 <_dtoa_r+0x826>
 800558a:	4618      	mov	r0, r3
 800558c:	301c      	adds	r0, #28
 800558e:	e77d      	b.n	800548c <_dtoa_r+0x81c>
 8005590:	40240000 	.word	0x40240000
 8005594:	9b01      	ldr	r3, [sp, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	dc38      	bgt.n	800560c <_dtoa_r+0x99c>
 800559a:	9b05      	ldr	r3, [sp, #20]
 800559c:	2b02      	cmp	r3, #2
 800559e:	dd35      	ble.n	800560c <_dtoa_r+0x99c>
 80055a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80055a4:	f1b9 0f00 	cmp.w	r9, #0
 80055a8:	d10d      	bne.n	80055c6 <_dtoa_r+0x956>
 80055aa:	4631      	mov	r1, r6
 80055ac:	464b      	mov	r3, r9
 80055ae:	2205      	movs	r2, #5
 80055b0:	4620      	mov	r0, r4
 80055b2:	f000 f9c5 	bl	8005940 <__multadd>
 80055b6:	4601      	mov	r1, r0
 80055b8:	4606      	mov	r6, r0
 80055ba:	4658      	mov	r0, fp
 80055bc:	f000 fbdc 	bl	8005d78 <__mcmp>
 80055c0:	2800      	cmp	r0, #0
 80055c2:	f73f adbd 	bgt.w	8005140 <_dtoa_r+0x4d0>
 80055c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055c8:	9d00      	ldr	r5, [sp, #0]
 80055ca:	ea6f 0a03 	mvn.w	sl, r3
 80055ce:	f04f 0800 	mov.w	r8, #0
 80055d2:	4631      	mov	r1, r6
 80055d4:	4620      	mov	r0, r4
 80055d6:	f000 f991 	bl	80058fc <_Bfree>
 80055da:	2f00      	cmp	r7, #0
 80055dc:	f43f aeb4 	beq.w	8005348 <_dtoa_r+0x6d8>
 80055e0:	f1b8 0f00 	cmp.w	r8, #0
 80055e4:	d005      	beq.n	80055f2 <_dtoa_r+0x982>
 80055e6:	45b8      	cmp	r8, r7
 80055e8:	d003      	beq.n	80055f2 <_dtoa_r+0x982>
 80055ea:	4641      	mov	r1, r8
 80055ec:	4620      	mov	r0, r4
 80055ee:	f000 f985 	bl	80058fc <_Bfree>
 80055f2:	4639      	mov	r1, r7
 80055f4:	4620      	mov	r0, r4
 80055f6:	f000 f981 	bl	80058fc <_Bfree>
 80055fa:	e6a5      	b.n	8005348 <_dtoa_r+0x6d8>
 80055fc:	2600      	movs	r6, #0
 80055fe:	4637      	mov	r7, r6
 8005600:	e7e1      	b.n	80055c6 <_dtoa_r+0x956>
 8005602:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005604:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005608:	4637      	mov	r7, r6
 800560a:	e599      	b.n	8005140 <_dtoa_r+0x4d0>
 800560c:	9b08      	ldr	r3, [sp, #32]
 800560e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 80fd 	beq.w	8005812 <_dtoa_r+0xba2>
 8005618:	2d00      	cmp	r5, #0
 800561a:	dd05      	ble.n	8005628 <_dtoa_r+0x9b8>
 800561c:	4639      	mov	r1, r7
 800561e:	462a      	mov	r2, r5
 8005620:	4620      	mov	r0, r4
 8005622:	f000 fb3d 	bl	8005ca0 <__lshift>
 8005626:	4607      	mov	r7, r0
 8005628:	9b06      	ldr	r3, [sp, #24]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d05c      	beq.n	80056e8 <_dtoa_r+0xa78>
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	4620      	mov	r0, r4
 8005632:	f000 f923 	bl	800587c <_Balloc>
 8005636:	4605      	mov	r5, r0
 8005638:	b928      	cbnz	r0, 8005646 <_dtoa_r+0x9d6>
 800563a:	4b80      	ldr	r3, [pc, #512]	; (800583c <_dtoa_r+0xbcc>)
 800563c:	4602      	mov	r2, r0
 800563e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005642:	f7ff bb2e 	b.w	8004ca2 <_dtoa_r+0x32>
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	3202      	adds	r2, #2
 800564a:	0092      	lsls	r2, r2, #2
 800564c:	f107 010c 	add.w	r1, r7, #12
 8005650:	300c      	adds	r0, #12
 8005652:	f000 f905 	bl	8005860 <memcpy>
 8005656:	2201      	movs	r2, #1
 8005658:	4629      	mov	r1, r5
 800565a:	4620      	mov	r0, r4
 800565c:	f000 fb20 	bl	8005ca0 <__lshift>
 8005660:	9b00      	ldr	r3, [sp, #0]
 8005662:	3301      	adds	r3, #1
 8005664:	9301      	str	r3, [sp, #4]
 8005666:	9b00      	ldr	r3, [sp, #0]
 8005668:	444b      	add	r3, r9
 800566a:	9307      	str	r3, [sp, #28]
 800566c:	9b02      	ldr	r3, [sp, #8]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	46b8      	mov	r8, r7
 8005674:	9306      	str	r3, [sp, #24]
 8005676:	4607      	mov	r7, r0
 8005678:	9b01      	ldr	r3, [sp, #4]
 800567a:	4631      	mov	r1, r6
 800567c:	3b01      	subs	r3, #1
 800567e:	4658      	mov	r0, fp
 8005680:	9302      	str	r3, [sp, #8]
 8005682:	f7ff fa69 	bl	8004b58 <quorem>
 8005686:	4603      	mov	r3, r0
 8005688:	3330      	adds	r3, #48	; 0x30
 800568a:	9004      	str	r0, [sp, #16]
 800568c:	4641      	mov	r1, r8
 800568e:	4658      	mov	r0, fp
 8005690:	9308      	str	r3, [sp, #32]
 8005692:	f000 fb71 	bl	8005d78 <__mcmp>
 8005696:	463a      	mov	r2, r7
 8005698:	4681      	mov	r9, r0
 800569a:	4631      	mov	r1, r6
 800569c:	4620      	mov	r0, r4
 800569e:	f000 fb87 	bl	8005db0 <__mdiff>
 80056a2:	68c2      	ldr	r2, [r0, #12]
 80056a4:	9b08      	ldr	r3, [sp, #32]
 80056a6:	4605      	mov	r5, r0
 80056a8:	bb02      	cbnz	r2, 80056ec <_dtoa_r+0xa7c>
 80056aa:	4601      	mov	r1, r0
 80056ac:	4658      	mov	r0, fp
 80056ae:	f000 fb63 	bl	8005d78 <__mcmp>
 80056b2:	9b08      	ldr	r3, [sp, #32]
 80056b4:	4602      	mov	r2, r0
 80056b6:	4629      	mov	r1, r5
 80056b8:	4620      	mov	r0, r4
 80056ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80056be:	f000 f91d 	bl	80058fc <_Bfree>
 80056c2:	9b05      	ldr	r3, [sp, #20]
 80056c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056c6:	9d01      	ldr	r5, [sp, #4]
 80056c8:	ea43 0102 	orr.w	r1, r3, r2
 80056cc:	9b06      	ldr	r3, [sp, #24]
 80056ce:	430b      	orrs	r3, r1
 80056d0:	9b08      	ldr	r3, [sp, #32]
 80056d2:	d10d      	bne.n	80056f0 <_dtoa_r+0xa80>
 80056d4:	2b39      	cmp	r3, #57	; 0x39
 80056d6:	d029      	beq.n	800572c <_dtoa_r+0xabc>
 80056d8:	f1b9 0f00 	cmp.w	r9, #0
 80056dc:	dd01      	ble.n	80056e2 <_dtoa_r+0xa72>
 80056de:	9b04      	ldr	r3, [sp, #16]
 80056e0:	3331      	adds	r3, #49	; 0x31
 80056e2:	9a02      	ldr	r2, [sp, #8]
 80056e4:	7013      	strb	r3, [r2, #0]
 80056e6:	e774      	b.n	80055d2 <_dtoa_r+0x962>
 80056e8:	4638      	mov	r0, r7
 80056ea:	e7b9      	b.n	8005660 <_dtoa_r+0x9f0>
 80056ec:	2201      	movs	r2, #1
 80056ee:	e7e2      	b.n	80056b6 <_dtoa_r+0xa46>
 80056f0:	f1b9 0f00 	cmp.w	r9, #0
 80056f4:	db06      	blt.n	8005704 <_dtoa_r+0xa94>
 80056f6:	9905      	ldr	r1, [sp, #20]
 80056f8:	ea41 0909 	orr.w	r9, r1, r9
 80056fc:	9906      	ldr	r1, [sp, #24]
 80056fe:	ea59 0101 	orrs.w	r1, r9, r1
 8005702:	d120      	bne.n	8005746 <_dtoa_r+0xad6>
 8005704:	2a00      	cmp	r2, #0
 8005706:	ddec      	ble.n	80056e2 <_dtoa_r+0xa72>
 8005708:	4659      	mov	r1, fp
 800570a:	2201      	movs	r2, #1
 800570c:	4620      	mov	r0, r4
 800570e:	9301      	str	r3, [sp, #4]
 8005710:	f000 fac6 	bl	8005ca0 <__lshift>
 8005714:	4631      	mov	r1, r6
 8005716:	4683      	mov	fp, r0
 8005718:	f000 fb2e 	bl	8005d78 <__mcmp>
 800571c:	2800      	cmp	r0, #0
 800571e:	9b01      	ldr	r3, [sp, #4]
 8005720:	dc02      	bgt.n	8005728 <_dtoa_r+0xab8>
 8005722:	d1de      	bne.n	80056e2 <_dtoa_r+0xa72>
 8005724:	07da      	lsls	r2, r3, #31
 8005726:	d5dc      	bpl.n	80056e2 <_dtoa_r+0xa72>
 8005728:	2b39      	cmp	r3, #57	; 0x39
 800572a:	d1d8      	bne.n	80056de <_dtoa_r+0xa6e>
 800572c:	9a02      	ldr	r2, [sp, #8]
 800572e:	2339      	movs	r3, #57	; 0x39
 8005730:	7013      	strb	r3, [r2, #0]
 8005732:	462b      	mov	r3, r5
 8005734:	461d      	mov	r5, r3
 8005736:	3b01      	subs	r3, #1
 8005738:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800573c:	2a39      	cmp	r2, #57	; 0x39
 800573e:	d050      	beq.n	80057e2 <_dtoa_r+0xb72>
 8005740:	3201      	adds	r2, #1
 8005742:	701a      	strb	r2, [r3, #0]
 8005744:	e745      	b.n	80055d2 <_dtoa_r+0x962>
 8005746:	2a00      	cmp	r2, #0
 8005748:	dd03      	ble.n	8005752 <_dtoa_r+0xae2>
 800574a:	2b39      	cmp	r3, #57	; 0x39
 800574c:	d0ee      	beq.n	800572c <_dtoa_r+0xabc>
 800574e:	3301      	adds	r3, #1
 8005750:	e7c7      	b.n	80056e2 <_dtoa_r+0xa72>
 8005752:	9a01      	ldr	r2, [sp, #4]
 8005754:	9907      	ldr	r1, [sp, #28]
 8005756:	f802 3c01 	strb.w	r3, [r2, #-1]
 800575a:	428a      	cmp	r2, r1
 800575c:	d02a      	beq.n	80057b4 <_dtoa_r+0xb44>
 800575e:	4659      	mov	r1, fp
 8005760:	2300      	movs	r3, #0
 8005762:	220a      	movs	r2, #10
 8005764:	4620      	mov	r0, r4
 8005766:	f000 f8eb 	bl	8005940 <__multadd>
 800576a:	45b8      	cmp	r8, r7
 800576c:	4683      	mov	fp, r0
 800576e:	f04f 0300 	mov.w	r3, #0
 8005772:	f04f 020a 	mov.w	r2, #10
 8005776:	4641      	mov	r1, r8
 8005778:	4620      	mov	r0, r4
 800577a:	d107      	bne.n	800578c <_dtoa_r+0xb1c>
 800577c:	f000 f8e0 	bl	8005940 <__multadd>
 8005780:	4680      	mov	r8, r0
 8005782:	4607      	mov	r7, r0
 8005784:	9b01      	ldr	r3, [sp, #4]
 8005786:	3301      	adds	r3, #1
 8005788:	9301      	str	r3, [sp, #4]
 800578a:	e775      	b.n	8005678 <_dtoa_r+0xa08>
 800578c:	f000 f8d8 	bl	8005940 <__multadd>
 8005790:	4639      	mov	r1, r7
 8005792:	4680      	mov	r8, r0
 8005794:	2300      	movs	r3, #0
 8005796:	220a      	movs	r2, #10
 8005798:	4620      	mov	r0, r4
 800579a:	f000 f8d1 	bl	8005940 <__multadd>
 800579e:	4607      	mov	r7, r0
 80057a0:	e7f0      	b.n	8005784 <_dtoa_r+0xb14>
 80057a2:	f1b9 0f00 	cmp.w	r9, #0
 80057a6:	9a00      	ldr	r2, [sp, #0]
 80057a8:	bfcc      	ite	gt
 80057aa:	464d      	movgt	r5, r9
 80057ac:	2501      	movle	r5, #1
 80057ae:	4415      	add	r5, r2
 80057b0:	f04f 0800 	mov.w	r8, #0
 80057b4:	4659      	mov	r1, fp
 80057b6:	2201      	movs	r2, #1
 80057b8:	4620      	mov	r0, r4
 80057ba:	9301      	str	r3, [sp, #4]
 80057bc:	f000 fa70 	bl	8005ca0 <__lshift>
 80057c0:	4631      	mov	r1, r6
 80057c2:	4683      	mov	fp, r0
 80057c4:	f000 fad8 	bl	8005d78 <__mcmp>
 80057c8:	2800      	cmp	r0, #0
 80057ca:	dcb2      	bgt.n	8005732 <_dtoa_r+0xac2>
 80057cc:	d102      	bne.n	80057d4 <_dtoa_r+0xb64>
 80057ce:	9b01      	ldr	r3, [sp, #4]
 80057d0:	07db      	lsls	r3, r3, #31
 80057d2:	d4ae      	bmi.n	8005732 <_dtoa_r+0xac2>
 80057d4:	462b      	mov	r3, r5
 80057d6:	461d      	mov	r5, r3
 80057d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057dc:	2a30      	cmp	r2, #48	; 0x30
 80057de:	d0fa      	beq.n	80057d6 <_dtoa_r+0xb66>
 80057e0:	e6f7      	b.n	80055d2 <_dtoa_r+0x962>
 80057e2:	9a00      	ldr	r2, [sp, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d1a5      	bne.n	8005734 <_dtoa_r+0xac4>
 80057e8:	f10a 0a01 	add.w	sl, sl, #1
 80057ec:	2331      	movs	r3, #49	; 0x31
 80057ee:	e779      	b.n	80056e4 <_dtoa_r+0xa74>
 80057f0:	4b13      	ldr	r3, [pc, #76]	; (8005840 <_dtoa_r+0xbd0>)
 80057f2:	f7ff baaf 	b.w	8004d54 <_dtoa_r+0xe4>
 80057f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f47f aa86 	bne.w	8004d0a <_dtoa_r+0x9a>
 80057fe:	4b11      	ldr	r3, [pc, #68]	; (8005844 <_dtoa_r+0xbd4>)
 8005800:	f7ff baa8 	b.w	8004d54 <_dtoa_r+0xe4>
 8005804:	f1b9 0f00 	cmp.w	r9, #0
 8005808:	dc03      	bgt.n	8005812 <_dtoa_r+0xba2>
 800580a:	9b05      	ldr	r3, [sp, #20]
 800580c:	2b02      	cmp	r3, #2
 800580e:	f73f aec9 	bgt.w	80055a4 <_dtoa_r+0x934>
 8005812:	9d00      	ldr	r5, [sp, #0]
 8005814:	4631      	mov	r1, r6
 8005816:	4658      	mov	r0, fp
 8005818:	f7ff f99e 	bl	8004b58 <quorem>
 800581c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005820:	f805 3b01 	strb.w	r3, [r5], #1
 8005824:	9a00      	ldr	r2, [sp, #0]
 8005826:	1aaa      	subs	r2, r5, r2
 8005828:	4591      	cmp	r9, r2
 800582a:	ddba      	ble.n	80057a2 <_dtoa_r+0xb32>
 800582c:	4659      	mov	r1, fp
 800582e:	2300      	movs	r3, #0
 8005830:	220a      	movs	r2, #10
 8005832:	4620      	mov	r0, r4
 8005834:	f000 f884 	bl	8005940 <__multadd>
 8005838:	4683      	mov	fp, r0
 800583a:	e7eb      	b.n	8005814 <_dtoa_r+0xba4>
 800583c:	08007fef 	.word	0x08007fef
 8005840:	08007f48 	.word	0x08007f48
 8005844:	08007f6c 	.word	0x08007f6c

08005848 <_localeconv_r>:
 8005848:	4800      	ldr	r0, [pc, #0]	; (800584c <_localeconv_r+0x4>)
 800584a:	4770      	bx	lr
 800584c:	2000016c 	.word	0x2000016c

08005850 <malloc>:
 8005850:	4b02      	ldr	r3, [pc, #8]	; (800585c <malloc+0xc>)
 8005852:	4601      	mov	r1, r0
 8005854:	6818      	ldr	r0, [r3, #0]
 8005856:	f000 bbef 	b.w	8006038 <_malloc_r>
 800585a:	bf00      	nop
 800585c:	20000018 	.word	0x20000018

08005860 <memcpy>:
 8005860:	440a      	add	r2, r1
 8005862:	4291      	cmp	r1, r2
 8005864:	f100 33ff 	add.w	r3, r0, #4294967295
 8005868:	d100      	bne.n	800586c <memcpy+0xc>
 800586a:	4770      	bx	lr
 800586c:	b510      	push	{r4, lr}
 800586e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005872:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005876:	4291      	cmp	r1, r2
 8005878:	d1f9      	bne.n	800586e <memcpy+0xe>
 800587a:	bd10      	pop	{r4, pc}

0800587c <_Balloc>:
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005880:	4604      	mov	r4, r0
 8005882:	460d      	mov	r5, r1
 8005884:	b976      	cbnz	r6, 80058a4 <_Balloc+0x28>
 8005886:	2010      	movs	r0, #16
 8005888:	f7ff ffe2 	bl	8005850 <malloc>
 800588c:	4602      	mov	r2, r0
 800588e:	6260      	str	r0, [r4, #36]	; 0x24
 8005890:	b920      	cbnz	r0, 800589c <_Balloc+0x20>
 8005892:	4b18      	ldr	r3, [pc, #96]	; (80058f4 <_Balloc+0x78>)
 8005894:	4818      	ldr	r0, [pc, #96]	; (80058f8 <_Balloc+0x7c>)
 8005896:	2166      	movs	r1, #102	; 0x66
 8005898:	f000 fd94 	bl	80063c4 <__assert_func>
 800589c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058a0:	6006      	str	r6, [r0, #0]
 80058a2:	60c6      	str	r6, [r0, #12]
 80058a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80058a6:	68f3      	ldr	r3, [r6, #12]
 80058a8:	b183      	cbz	r3, 80058cc <_Balloc+0x50>
 80058aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058b2:	b9b8      	cbnz	r0, 80058e4 <_Balloc+0x68>
 80058b4:	2101      	movs	r1, #1
 80058b6:	fa01 f605 	lsl.w	r6, r1, r5
 80058ba:	1d72      	adds	r2, r6, #5
 80058bc:	0092      	lsls	r2, r2, #2
 80058be:	4620      	mov	r0, r4
 80058c0:	f000 fb5a 	bl	8005f78 <_calloc_r>
 80058c4:	b160      	cbz	r0, 80058e0 <_Balloc+0x64>
 80058c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80058ca:	e00e      	b.n	80058ea <_Balloc+0x6e>
 80058cc:	2221      	movs	r2, #33	; 0x21
 80058ce:	2104      	movs	r1, #4
 80058d0:	4620      	mov	r0, r4
 80058d2:	f000 fb51 	bl	8005f78 <_calloc_r>
 80058d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058d8:	60f0      	str	r0, [r6, #12]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1e4      	bne.n	80058aa <_Balloc+0x2e>
 80058e0:	2000      	movs	r0, #0
 80058e2:	bd70      	pop	{r4, r5, r6, pc}
 80058e4:	6802      	ldr	r2, [r0, #0]
 80058e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80058ea:	2300      	movs	r3, #0
 80058ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80058f0:	e7f7      	b.n	80058e2 <_Balloc+0x66>
 80058f2:	bf00      	nop
 80058f4:	08007f79 	.word	0x08007f79
 80058f8:	08008000 	.word	0x08008000

080058fc <_Bfree>:
 80058fc:	b570      	push	{r4, r5, r6, lr}
 80058fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005900:	4605      	mov	r5, r0
 8005902:	460c      	mov	r4, r1
 8005904:	b976      	cbnz	r6, 8005924 <_Bfree+0x28>
 8005906:	2010      	movs	r0, #16
 8005908:	f7ff ffa2 	bl	8005850 <malloc>
 800590c:	4602      	mov	r2, r0
 800590e:	6268      	str	r0, [r5, #36]	; 0x24
 8005910:	b920      	cbnz	r0, 800591c <_Bfree+0x20>
 8005912:	4b09      	ldr	r3, [pc, #36]	; (8005938 <_Bfree+0x3c>)
 8005914:	4809      	ldr	r0, [pc, #36]	; (800593c <_Bfree+0x40>)
 8005916:	218a      	movs	r1, #138	; 0x8a
 8005918:	f000 fd54 	bl	80063c4 <__assert_func>
 800591c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005920:	6006      	str	r6, [r0, #0]
 8005922:	60c6      	str	r6, [r0, #12]
 8005924:	b13c      	cbz	r4, 8005936 <_Bfree+0x3a>
 8005926:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005928:	6862      	ldr	r2, [r4, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005930:	6021      	str	r1, [r4, #0]
 8005932:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005936:	bd70      	pop	{r4, r5, r6, pc}
 8005938:	08007f79 	.word	0x08007f79
 800593c:	08008000 	.word	0x08008000

08005940 <__multadd>:
 8005940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005944:	690e      	ldr	r6, [r1, #16]
 8005946:	4607      	mov	r7, r0
 8005948:	4698      	mov	r8, r3
 800594a:	460c      	mov	r4, r1
 800594c:	f101 0014 	add.w	r0, r1, #20
 8005950:	2300      	movs	r3, #0
 8005952:	6805      	ldr	r5, [r0, #0]
 8005954:	b2a9      	uxth	r1, r5
 8005956:	fb02 8101 	mla	r1, r2, r1, r8
 800595a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800595e:	0c2d      	lsrs	r5, r5, #16
 8005960:	fb02 c505 	mla	r5, r2, r5, ip
 8005964:	b289      	uxth	r1, r1
 8005966:	3301      	adds	r3, #1
 8005968:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800596c:	429e      	cmp	r6, r3
 800596e:	f840 1b04 	str.w	r1, [r0], #4
 8005972:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005976:	dcec      	bgt.n	8005952 <__multadd+0x12>
 8005978:	f1b8 0f00 	cmp.w	r8, #0
 800597c:	d022      	beq.n	80059c4 <__multadd+0x84>
 800597e:	68a3      	ldr	r3, [r4, #8]
 8005980:	42b3      	cmp	r3, r6
 8005982:	dc19      	bgt.n	80059b8 <__multadd+0x78>
 8005984:	6861      	ldr	r1, [r4, #4]
 8005986:	4638      	mov	r0, r7
 8005988:	3101      	adds	r1, #1
 800598a:	f7ff ff77 	bl	800587c <_Balloc>
 800598e:	4605      	mov	r5, r0
 8005990:	b928      	cbnz	r0, 800599e <__multadd+0x5e>
 8005992:	4602      	mov	r2, r0
 8005994:	4b0d      	ldr	r3, [pc, #52]	; (80059cc <__multadd+0x8c>)
 8005996:	480e      	ldr	r0, [pc, #56]	; (80059d0 <__multadd+0x90>)
 8005998:	21b5      	movs	r1, #181	; 0xb5
 800599a:	f000 fd13 	bl	80063c4 <__assert_func>
 800599e:	6922      	ldr	r2, [r4, #16]
 80059a0:	3202      	adds	r2, #2
 80059a2:	f104 010c 	add.w	r1, r4, #12
 80059a6:	0092      	lsls	r2, r2, #2
 80059a8:	300c      	adds	r0, #12
 80059aa:	f7ff ff59 	bl	8005860 <memcpy>
 80059ae:	4621      	mov	r1, r4
 80059b0:	4638      	mov	r0, r7
 80059b2:	f7ff ffa3 	bl	80058fc <_Bfree>
 80059b6:	462c      	mov	r4, r5
 80059b8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80059bc:	3601      	adds	r6, #1
 80059be:	f8c3 8014 	str.w	r8, [r3, #20]
 80059c2:	6126      	str	r6, [r4, #16]
 80059c4:	4620      	mov	r0, r4
 80059c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059ca:	bf00      	nop
 80059cc:	08007fef 	.word	0x08007fef
 80059d0:	08008000 	.word	0x08008000

080059d4 <__hi0bits>:
 80059d4:	0c03      	lsrs	r3, r0, #16
 80059d6:	041b      	lsls	r3, r3, #16
 80059d8:	b9d3      	cbnz	r3, 8005a10 <__hi0bits+0x3c>
 80059da:	0400      	lsls	r0, r0, #16
 80059dc:	2310      	movs	r3, #16
 80059de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80059e2:	bf04      	itt	eq
 80059e4:	0200      	lsleq	r0, r0, #8
 80059e6:	3308      	addeq	r3, #8
 80059e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80059ec:	bf04      	itt	eq
 80059ee:	0100      	lsleq	r0, r0, #4
 80059f0:	3304      	addeq	r3, #4
 80059f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80059f6:	bf04      	itt	eq
 80059f8:	0080      	lsleq	r0, r0, #2
 80059fa:	3302      	addeq	r3, #2
 80059fc:	2800      	cmp	r0, #0
 80059fe:	db05      	blt.n	8005a0c <__hi0bits+0x38>
 8005a00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005a04:	f103 0301 	add.w	r3, r3, #1
 8005a08:	bf08      	it	eq
 8005a0a:	2320      	moveq	r3, #32
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	4770      	bx	lr
 8005a10:	2300      	movs	r3, #0
 8005a12:	e7e4      	b.n	80059de <__hi0bits+0xa>

08005a14 <__lo0bits>:
 8005a14:	6803      	ldr	r3, [r0, #0]
 8005a16:	f013 0207 	ands.w	r2, r3, #7
 8005a1a:	4601      	mov	r1, r0
 8005a1c:	d00b      	beq.n	8005a36 <__lo0bits+0x22>
 8005a1e:	07da      	lsls	r2, r3, #31
 8005a20:	d424      	bmi.n	8005a6c <__lo0bits+0x58>
 8005a22:	0798      	lsls	r0, r3, #30
 8005a24:	bf49      	itett	mi
 8005a26:	085b      	lsrmi	r3, r3, #1
 8005a28:	089b      	lsrpl	r3, r3, #2
 8005a2a:	2001      	movmi	r0, #1
 8005a2c:	600b      	strmi	r3, [r1, #0]
 8005a2e:	bf5c      	itt	pl
 8005a30:	600b      	strpl	r3, [r1, #0]
 8005a32:	2002      	movpl	r0, #2
 8005a34:	4770      	bx	lr
 8005a36:	b298      	uxth	r0, r3
 8005a38:	b9b0      	cbnz	r0, 8005a68 <__lo0bits+0x54>
 8005a3a:	0c1b      	lsrs	r3, r3, #16
 8005a3c:	2010      	movs	r0, #16
 8005a3e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005a42:	bf04      	itt	eq
 8005a44:	0a1b      	lsreq	r3, r3, #8
 8005a46:	3008      	addeq	r0, #8
 8005a48:	071a      	lsls	r2, r3, #28
 8005a4a:	bf04      	itt	eq
 8005a4c:	091b      	lsreq	r3, r3, #4
 8005a4e:	3004      	addeq	r0, #4
 8005a50:	079a      	lsls	r2, r3, #30
 8005a52:	bf04      	itt	eq
 8005a54:	089b      	lsreq	r3, r3, #2
 8005a56:	3002      	addeq	r0, #2
 8005a58:	07da      	lsls	r2, r3, #31
 8005a5a:	d403      	bmi.n	8005a64 <__lo0bits+0x50>
 8005a5c:	085b      	lsrs	r3, r3, #1
 8005a5e:	f100 0001 	add.w	r0, r0, #1
 8005a62:	d005      	beq.n	8005a70 <__lo0bits+0x5c>
 8005a64:	600b      	str	r3, [r1, #0]
 8005a66:	4770      	bx	lr
 8005a68:	4610      	mov	r0, r2
 8005a6a:	e7e8      	b.n	8005a3e <__lo0bits+0x2a>
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	4770      	bx	lr
 8005a70:	2020      	movs	r0, #32
 8005a72:	4770      	bx	lr

08005a74 <__i2b>:
 8005a74:	b510      	push	{r4, lr}
 8005a76:	460c      	mov	r4, r1
 8005a78:	2101      	movs	r1, #1
 8005a7a:	f7ff feff 	bl	800587c <_Balloc>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	b928      	cbnz	r0, 8005a8e <__i2b+0x1a>
 8005a82:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <__i2b+0x24>)
 8005a84:	4805      	ldr	r0, [pc, #20]	; (8005a9c <__i2b+0x28>)
 8005a86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005a8a:	f000 fc9b 	bl	80063c4 <__assert_func>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	6144      	str	r4, [r0, #20]
 8005a92:	6103      	str	r3, [r0, #16]
 8005a94:	bd10      	pop	{r4, pc}
 8005a96:	bf00      	nop
 8005a98:	08007fef 	.word	0x08007fef
 8005a9c:	08008000 	.word	0x08008000

08005aa0 <__multiply>:
 8005aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa4:	4614      	mov	r4, r2
 8005aa6:	690a      	ldr	r2, [r1, #16]
 8005aa8:	6923      	ldr	r3, [r4, #16]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	bfb8      	it	lt
 8005aae:	460b      	movlt	r3, r1
 8005ab0:	460d      	mov	r5, r1
 8005ab2:	bfbc      	itt	lt
 8005ab4:	4625      	movlt	r5, r4
 8005ab6:	461c      	movlt	r4, r3
 8005ab8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005abc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005ac0:	68ab      	ldr	r3, [r5, #8]
 8005ac2:	6869      	ldr	r1, [r5, #4]
 8005ac4:	eb0a 0709 	add.w	r7, sl, r9
 8005ac8:	42bb      	cmp	r3, r7
 8005aca:	b085      	sub	sp, #20
 8005acc:	bfb8      	it	lt
 8005ace:	3101      	addlt	r1, #1
 8005ad0:	f7ff fed4 	bl	800587c <_Balloc>
 8005ad4:	b930      	cbnz	r0, 8005ae4 <__multiply+0x44>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	4b42      	ldr	r3, [pc, #264]	; (8005be4 <__multiply+0x144>)
 8005ada:	4843      	ldr	r0, [pc, #268]	; (8005be8 <__multiply+0x148>)
 8005adc:	f240 115d 	movw	r1, #349	; 0x15d
 8005ae0:	f000 fc70 	bl	80063c4 <__assert_func>
 8005ae4:	f100 0614 	add.w	r6, r0, #20
 8005ae8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005aec:	4633      	mov	r3, r6
 8005aee:	2200      	movs	r2, #0
 8005af0:	4543      	cmp	r3, r8
 8005af2:	d31e      	bcc.n	8005b32 <__multiply+0x92>
 8005af4:	f105 0c14 	add.w	ip, r5, #20
 8005af8:	f104 0314 	add.w	r3, r4, #20
 8005afc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005b00:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005b04:	9202      	str	r2, [sp, #8]
 8005b06:	ebac 0205 	sub.w	r2, ip, r5
 8005b0a:	3a15      	subs	r2, #21
 8005b0c:	f022 0203 	bic.w	r2, r2, #3
 8005b10:	3204      	adds	r2, #4
 8005b12:	f105 0115 	add.w	r1, r5, #21
 8005b16:	458c      	cmp	ip, r1
 8005b18:	bf38      	it	cc
 8005b1a:	2204      	movcc	r2, #4
 8005b1c:	9201      	str	r2, [sp, #4]
 8005b1e:	9a02      	ldr	r2, [sp, #8]
 8005b20:	9303      	str	r3, [sp, #12]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d808      	bhi.n	8005b38 <__multiply+0x98>
 8005b26:	2f00      	cmp	r7, #0
 8005b28:	dc55      	bgt.n	8005bd6 <__multiply+0x136>
 8005b2a:	6107      	str	r7, [r0, #16]
 8005b2c:	b005      	add	sp, #20
 8005b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b32:	f843 2b04 	str.w	r2, [r3], #4
 8005b36:	e7db      	b.n	8005af0 <__multiply+0x50>
 8005b38:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b3c:	f1ba 0f00 	cmp.w	sl, #0
 8005b40:	d020      	beq.n	8005b84 <__multiply+0xe4>
 8005b42:	f105 0e14 	add.w	lr, r5, #20
 8005b46:	46b1      	mov	r9, r6
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005b4e:	f8d9 b000 	ldr.w	fp, [r9]
 8005b52:	b2a1      	uxth	r1, r4
 8005b54:	fa1f fb8b 	uxth.w	fp, fp
 8005b58:	fb0a b101 	mla	r1, sl, r1, fp
 8005b5c:	4411      	add	r1, r2
 8005b5e:	f8d9 2000 	ldr.w	r2, [r9]
 8005b62:	0c24      	lsrs	r4, r4, #16
 8005b64:	0c12      	lsrs	r2, r2, #16
 8005b66:	fb0a 2404 	mla	r4, sl, r4, r2
 8005b6a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005b6e:	b289      	uxth	r1, r1
 8005b70:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005b74:	45f4      	cmp	ip, lr
 8005b76:	f849 1b04 	str.w	r1, [r9], #4
 8005b7a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005b7e:	d8e4      	bhi.n	8005b4a <__multiply+0xaa>
 8005b80:	9901      	ldr	r1, [sp, #4]
 8005b82:	5072      	str	r2, [r6, r1]
 8005b84:	9a03      	ldr	r2, [sp, #12]
 8005b86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	f1b9 0f00 	cmp.w	r9, #0
 8005b90:	d01f      	beq.n	8005bd2 <__multiply+0x132>
 8005b92:	6834      	ldr	r4, [r6, #0]
 8005b94:	f105 0114 	add.w	r1, r5, #20
 8005b98:	46b6      	mov	lr, r6
 8005b9a:	f04f 0a00 	mov.w	sl, #0
 8005b9e:	880a      	ldrh	r2, [r1, #0]
 8005ba0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005ba4:	fb09 b202 	mla	r2, r9, r2, fp
 8005ba8:	4492      	add	sl, r2
 8005baa:	b2a4      	uxth	r4, r4
 8005bac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005bb0:	f84e 4b04 	str.w	r4, [lr], #4
 8005bb4:	f851 4b04 	ldr.w	r4, [r1], #4
 8005bb8:	f8be 2000 	ldrh.w	r2, [lr]
 8005bbc:	0c24      	lsrs	r4, r4, #16
 8005bbe:	fb09 2404 	mla	r4, r9, r4, r2
 8005bc2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005bc6:	458c      	cmp	ip, r1
 8005bc8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005bcc:	d8e7      	bhi.n	8005b9e <__multiply+0xfe>
 8005bce:	9a01      	ldr	r2, [sp, #4]
 8005bd0:	50b4      	str	r4, [r6, r2]
 8005bd2:	3604      	adds	r6, #4
 8005bd4:	e7a3      	b.n	8005b1e <__multiply+0x7e>
 8005bd6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1a5      	bne.n	8005b2a <__multiply+0x8a>
 8005bde:	3f01      	subs	r7, #1
 8005be0:	e7a1      	b.n	8005b26 <__multiply+0x86>
 8005be2:	bf00      	nop
 8005be4:	08007fef 	.word	0x08007fef
 8005be8:	08008000 	.word	0x08008000

08005bec <__pow5mult>:
 8005bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bf0:	4615      	mov	r5, r2
 8005bf2:	f012 0203 	ands.w	r2, r2, #3
 8005bf6:	4606      	mov	r6, r0
 8005bf8:	460f      	mov	r7, r1
 8005bfa:	d007      	beq.n	8005c0c <__pow5mult+0x20>
 8005bfc:	4c25      	ldr	r4, [pc, #148]	; (8005c94 <__pow5mult+0xa8>)
 8005bfe:	3a01      	subs	r2, #1
 8005c00:	2300      	movs	r3, #0
 8005c02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c06:	f7ff fe9b 	bl	8005940 <__multadd>
 8005c0a:	4607      	mov	r7, r0
 8005c0c:	10ad      	asrs	r5, r5, #2
 8005c0e:	d03d      	beq.n	8005c8c <__pow5mult+0xa0>
 8005c10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005c12:	b97c      	cbnz	r4, 8005c34 <__pow5mult+0x48>
 8005c14:	2010      	movs	r0, #16
 8005c16:	f7ff fe1b 	bl	8005850 <malloc>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	6270      	str	r0, [r6, #36]	; 0x24
 8005c1e:	b928      	cbnz	r0, 8005c2c <__pow5mult+0x40>
 8005c20:	4b1d      	ldr	r3, [pc, #116]	; (8005c98 <__pow5mult+0xac>)
 8005c22:	481e      	ldr	r0, [pc, #120]	; (8005c9c <__pow5mult+0xb0>)
 8005c24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005c28:	f000 fbcc 	bl	80063c4 <__assert_func>
 8005c2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c30:	6004      	str	r4, [r0, #0]
 8005c32:	60c4      	str	r4, [r0, #12]
 8005c34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c3c:	b94c      	cbnz	r4, 8005c52 <__pow5mult+0x66>
 8005c3e:	f240 2171 	movw	r1, #625	; 0x271
 8005c42:	4630      	mov	r0, r6
 8005c44:	f7ff ff16 	bl	8005a74 <__i2b>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c4e:	4604      	mov	r4, r0
 8005c50:	6003      	str	r3, [r0, #0]
 8005c52:	f04f 0900 	mov.w	r9, #0
 8005c56:	07eb      	lsls	r3, r5, #31
 8005c58:	d50a      	bpl.n	8005c70 <__pow5mult+0x84>
 8005c5a:	4639      	mov	r1, r7
 8005c5c:	4622      	mov	r2, r4
 8005c5e:	4630      	mov	r0, r6
 8005c60:	f7ff ff1e 	bl	8005aa0 <__multiply>
 8005c64:	4639      	mov	r1, r7
 8005c66:	4680      	mov	r8, r0
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f7ff fe47 	bl	80058fc <_Bfree>
 8005c6e:	4647      	mov	r7, r8
 8005c70:	106d      	asrs	r5, r5, #1
 8005c72:	d00b      	beq.n	8005c8c <__pow5mult+0xa0>
 8005c74:	6820      	ldr	r0, [r4, #0]
 8005c76:	b938      	cbnz	r0, 8005c88 <__pow5mult+0x9c>
 8005c78:	4622      	mov	r2, r4
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	f7ff ff0f 	bl	8005aa0 <__multiply>
 8005c82:	6020      	str	r0, [r4, #0]
 8005c84:	f8c0 9000 	str.w	r9, [r0]
 8005c88:	4604      	mov	r4, r0
 8005c8a:	e7e4      	b.n	8005c56 <__pow5mult+0x6a>
 8005c8c:	4638      	mov	r0, r7
 8005c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c92:	bf00      	nop
 8005c94:	08008150 	.word	0x08008150
 8005c98:	08007f79 	.word	0x08007f79
 8005c9c:	08008000 	.word	0x08008000

08005ca0 <__lshift>:
 8005ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca4:	460c      	mov	r4, r1
 8005ca6:	6849      	ldr	r1, [r1, #4]
 8005ca8:	6923      	ldr	r3, [r4, #16]
 8005caa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005cae:	68a3      	ldr	r3, [r4, #8]
 8005cb0:	4607      	mov	r7, r0
 8005cb2:	4691      	mov	r9, r2
 8005cb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005cb8:	f108 0601 	add.w	r6, r8, #1
 8005cbc:	42b3      	cmp	r3, r6
 8005cbe:	db0b      	blt.n	8005cd8 <__lshift+0x38>
 8005cc0:	4638      	mov	r0, r7
 8005cc2:	f7ff fddb 	bl	800587c <_Balloc>
 8005cc6:	4605      	mov	r5, r0
 8005cc8:	b948      	cbnz	r0, 8005cde <__lshift+0x3e>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	4b28      	ldr	r3, [pc, #160]	; (8005d70 <__lshift+0xd0>)
 8005cce:	4829      	ldr	r0, [pc, #164]	; (8005d74 <__lshift+0xd4>)
 8005cd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005cd4:	f000 fb76 	bl	80063c4 <__assert_func>
 8005cd8:	3101      	adds	r1, #1
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	e7ee      	b.n	8005cbc <__lshift+0x1c>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	f100 0114 	add.w	r1, r0, #20
 8005ce4:	f100 0210 	add.w	r2, r0, #16
 8005ce8:	4618      	mov	r0, r3
 8005cea:	4553      	cmp	r3, sl
 8005cec:	db33      	blt.n	8005d56 <__lshift+0xb6>
 8005cee:	6920      	ldr	r0, [r4, #16]
 8005cf0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005cf4:	f104 0314 	add.w	r3, r4, #20
 8005cf8:	f019 091f 	ands.w	r9, r9, #31
 8005cfc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005d04:	d02b      	beq.n	8005d5e <__lshift+0xbe>
 8005d06:	f1c9 0e20 	rsb	lr, r9, #32
 8005d0a:	468a      	mov	sl, r1
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	6818      	ldr	r0, [r3, #0]
 8005d10:	fa00 f009 	lsl.w	r0, r0, r9
 8005d14:	4302      	orrs	r2, r0
 8005d16:	f84a 2b04 	str.w	r2, [sl], #4
 8005d1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d1e:	459c      	cmp	ip, r3
 8005d20:	fa22 f20e 	lsr.w	r2, r2, lr
 8005d24:	d8f3      	bhi.n	8005d0e <__lshift+0x6e>
 8005d26:	ebac 0304 	sub.w	r3, ip, r4
 8005d2a:	3b15      	subs	r3, #21
 8005d2c:	f023 0303 	bic.w	r3, r3, #3
 8005d30:	3304      	adds	r3, #4
 8005d32:	f104 0015 	add.w	r0, r4, #21
 8005d36:	4584      	cmp	ip, r0
 8005d38:	bf38      	it	cc
 8005d3a:	2304      	movcc	r3, #4
 8005d3c:	50ca      	str	r2, [r1, r3]
 8005d3e:	b10a      	cbz	r2, 8005d44 <__lshift+0xa4>
 8005d40:	f108 0602 	add.w	r6, r8, #2
 8005d44:	3e01      	subs	r6, #1
 8005d46:	4638      	mov	r0, r7
 8005d48:	612e      	str	r6, [r5, #16]
 8005d4a:	4621      	mov	r1, r4
 8005d4c:	f7ff fdd6 	bl	80058fc <_Bfree>
 8005d50:	4628      	mov	r0, r5
 8005d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d56:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	e7c5      	b.n	8005cea <__lshift+0x4a>
 8005d5e:	3904      	subs	r1, #4
 8005d60:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d64:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d68:	459c      	cmp	ip, r3
 8005d6a:	d8f9      	bhi.n	8005d60 <__lshift+0xc0>
 8005d6c:	e7ea      	b.n	8005d44 <__lshift+0xa4>
 8005d6e:	bf00      	nop
 8005d70:	08007fef 	.word	0x08007fef
 8005d74:	08008000 	.word	0x08008000

08005d78 <__mcmp>:
 8005d78:	b530      	push	{r4, r5, lr}
 8005d7a:	6902      	ldr	r2, [r0, #16]
 8005d7c:	690c      	ldr	r4, [r1, #16]
 8005d7e:	1b12      	subs	r2, r2, r4
 8005d80:	d10e      	bne.n	8005da0 <__mcmp+0x28>
 8005d82:	f100 0314 	add.w	r3, r0, #20
 8005d86:	3114      	adds	r1, #20
 8005d88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005d8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005d90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005d94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005d98:	42a5      	cmp	r5, r4
 8005d9a:	d003      	beq.n	8005da4 <__mcmp+0x2c>
 8005d9c:	d305      	bcc.n	8005daa <__mcmp+0x32>
 8005d9e:	2201      	movs	r2, #1
 8005da0:	4610      	mov	r0, r2
 8005da2:	bd30      	pop	{r4, r5, pc}
 8005da4:	4283      	cmp	r3, r0
 8005da6:	d3f3      	bcc.n	8005d90 <__mcmp+0x18>
 8005da8:	e7fa      	b.n	8005da0 <__mcmp+0x28>
 8005daa:	f04f 32ff 	mov.w	r2, #4294967295
 8005dae:	e7f7      	b.n	8005da0 <__mcmp+0x28>

08005db0 <__mdiff>:
 8005db0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db4:	460c      	mov	r4, r1
 8005db6:	4606      	mov	r6, r0
 8005db8:	4611      	mov	r1, r2
 8005dba:	4620      	mov	r0, r4
 8005dbc:	4617      	mov	r7, r2
 8005dbe:	f7ff ffdb 	bl	8005d78 <__mcmp>
 8005dc2:	1e05      	subs	r5, r0, #0
 8005dc4:	d110      	bne.n	8005de8 <__mdiff+0x38>
 8005dc6:	4629      	mov	r1, r5
 8005dc8:	4630      	mov	r0, r6
 8005dca:	f7ff fd57 	bl	800587c <_Balloc>
 8005dce:	b930      	cbnz	r0, 8005dde <__mdiff+0x2e>
 8005dd0:	4b39      	ldr	r3, [pc, #228]	; (8005eb8 <__mdiff+0x108>)
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	f240 2132 	movw	r1, #562	; 0x232
 8005dd8:	4838      	ldr	r0, [pc, #224]	; (8005ebc <__mdiff+0x10c>)
 8005dda:	f000 faf3 	bl	80063c4 <__assert_func>
 8005dde:	2301      	movs	r3, #1
 8005de0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005de4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de8:	bfa4      	itt	ge
 8005dea:	463b      	movge	r3, r7
 8005dec:	4627      	movge	r7, r4
 8005dee:	4630      	mov	r0, r6
 8005df0:	6879      	ldr	r1, [r7, #4]
 8005df2:	bfa6      	itte	ge
 8005df4:	461c      	movge	r4, r3
 8005df6:	2500      	movge	r5, #0
 8005df8:	2501      	movlt	r5, #1
 8005dfa:	f7ff fd3f 	bl	800587c <_Balloc>
 8005dfe:	b920      	cbnz	r0, 8005e0a <__mdiff+0x5a>
 8005e00:	4b2d      	ldr	r3, [pc, #180]	; (8005eb8 <__mdiff+0x108>)
 8005e02:	4602      	mov	r2, r0
 8005e04:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005e08:	e7e6      	b.n	8005dd8 <__mdiff+0x28>
 8005e0a:	693e      	ldr	r6, [r7, #16]
 8005e0c:	60c5      	str	r5, [r0, #12]
 8005e0e:	6925      	ldr	r5, [r4, #16]
 8005e10:	f107 0114 	add.w	r1, r7, #20
 8005e14:	f104 0914 	add.w	r9, r4, #20
 8005e18:	f100 0e14 	add.w	lr, r0, #20
 8005e1c:	f107 0210 	add.w	r2, r7, #16
 8005e20:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005e24:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005e28:	46f2      	mov	sl, lr
 8005e2a:	2700      	movs	r7, #0
 8005e2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005e34:	fa1f f883 	uxth.w	r8, r3
 8005e38:	fa17 f78b 	uxtah	r7, r7, fp
 8005e3c:	0c1b      	lsrs	r3, r3, #16
 8005e3e:	eba7 0808 	sub.w	r8, r7, r8
 8005e42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005e4a:	fa1f f888 	uxth.w	r8, r8
 8005e4e:	141f      	asrs	r7, r3, #16
 8005e50:	454d      	cmp	r5, r9
 8005e52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005e56:	f84a 3b04 	str.w	r3, [sl], #4
 8005e5a:	d8e7      	bhi.n	8005e2c <__mdiff+0x7c>
 8005e5c:	1b2b      	subs	r3, r5, r4
 8005e5e:	3b15      	subs	r3, #21
 8005e60:	f023 0303 	bic.w	r3, r3, #3
 8005e64:	3304      	adds	r3, #4
 8005e66:	3415      	adds	r4, #21
 8005e68:	42a5      	cmp	r5, r4
 8005e6a:	bf38      	it	cc
 8005e6c:	2304      	movcc	r3, #4
 8005e6e:	4419      	add	r1, r3
 8005e70:	4473      	add	r3, lr
 8005e72:	469e      	mov	lr, r3
 8005e74:	460d      	mov	r5, r1
 8005e76:	4565      	cmp	r5, ip
 8005e78:	d30e      	bcc.n	8005e98 <__mdiff+0xe8>
 8005e7a:	f10c 0203 	add.w	r2, ip, #3
 8005e7e:	1a52      	subs	r2, r2, r1
 8005e80:	f022 0203 	bic.w	r2, r2, #3
 8005e84:	3903      	subs	r1, #3
 8005e86:	458c      	cmp	ip, r1
 8005e88:	bf38      	it	cc
 8005e8a:	2200      	movcc	r2, #0
 8005e8c:	441a      	add	r2, r3
 8005e8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005e92:	b17b      	cbz	r3, 8005eb4 <__mdiff+0x104>
 8005e94:	6106      	str	r6, [r0, #16]
 8005e96:	e7a5      	b.n	8005de4 <__mdiff+0x34>
 8005e98:	f855 8b04 	ldr.w	r8, [r5], #4
 8005e9c:	fa17 f488 	uxtah	r4, r7, r8
 8005ea0:	1422      	asrs	r2, r4, #16
 8005ea2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005ea6:	b2a4      	uxth	r4, r4
 8005ea8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005eac:	f84e 4b04 	str.w	r4, [lr], #4
 8005eb0:	1417      	asrs	r7, r2, #16
 8005eb2:	e7e0      	b.n	8005e76 <__mdiff+0xc6>
 8005eb4:	3e01      	subs	r6, #1
 8005eb6:	e7ea      	b.n	8005e8e <__mdiff+0xde>
 8005eb8:	08007fef 	.word	0x08007fef
 8005ebc:	08008000 	.word	0x08008000

08005ec0 <__d2b>:
 8005ec0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ec4:	4689      	mov	r9, r1
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	ec57 6b10 	vmov	r6, r7, d0
 8005ecc:	4690      	mov	r8, r2
 8005ece:	f7ff fcd5 	bl	800587c <_Balloc>
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	b930      	cbnz	r0, 8005ee4 <__d2b+0x24>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	4b25      	ldr	r3, [pc, #148]	; (8005f70 <__d2b+0xb0>)
 8005eda:	4826      	ldr	r0, [pc, #152]	; (8005f74 <__d2b+0xb4>)
 8005edc:	f240 310a 	movw	r1, #778	; 0x30a
 8005ee0:	f000 fa70 	bl	80063c4 <__assert_func>
 8005ee4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005ee8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005eec:	bb35      	cbnz	r5, 8005f3c <__d2b+0x7c>
 8005eee:	2e00      	cmp	r6, #0
 8005ef0:	9301      	str	r3, [sp, #4]
 8005ef2:	d028      	beq.n	8005f46 <__d2b+0x86>
 8005ef4:	4668      	mov	r0, sp
 8005ef6:	9600      	str	r6, [sp, #0]
 8005ef8:	f7ff fd8c 	bl	8005a14 <__lo0bits>
 8005efc:	9900      	ldr	r1, [sp, #0]
 8005efe:	b300      	cbz	r0, 8005f42 <__d2b+0x82>
 8005f00:	9a01      	ldr	r2, [sp, #4]
 8005f02:	f1c0 0320 	rsb	r3, r0, #32
 8005f06:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0a:	430b      	orrs	r3, r1
 8005f0c:	40c2      	lsrs	r2, r0
 8005f0e:	6163      	str	r3, [r4, #20]
 8005f10:	9201      	str	r2, [sp, #4]
 8005f12:	9b01      	ldr	r3, [sp, #4]
 8005f14:	61a3      	str	r3, [r4, #24]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	bf14      	ite	ne
 8005f1a:	2202      	movne	r2, #2
 8005f1c:	2201      	moveq	r2, #1
 8005f1e:	6122      	str	r2, [r4, #16]
 8005f20:	b1d5      	cbz	r5, 8005f58 <__d2b+0x98>
 8005f22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005f26:	4405      	add	r5, r0
 8005f28:	f8c9 5000 	str.w	r5, [r9]
 8005f2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f30:	f8c8 0000 	str.w	r0, [r8]
 8005f34:	4620      	mov	r0, r4
 8005f36:	b003      	add	sp, #12
 8005f38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f40:	e7d5      	b.n	8005eee <__d2b+0x2e>
 8005f42:	6161      	str	r1, [r4, #20]
 8005f44:	e7e5      	b.n	8005f12 <__d2b+0x52>
 8005f46:	a801      	add	r0, sp, #4
 8005f48:	f7ff fd64 	bl	8005a14 <__lo0bits>
 8005f4c:	9b01      	ldr	r3, [sp, #4]
 8005f4e:	6163      	str	r3, [r4, #20]
 8005f50:	2201      	movs	r2, #1
 8005f52:	6122      	str	r2, [r4, #16]
 8005f54:	3020      	adds	r0, #32
 8005f56:	e7e3      	b.n	8005f20 <__d2b+0x60>
 8005f58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f60:	f8c9 0000 	str.w	r0, [r9]
 8005f64:	6918      	ldr	r0, [r3, #16]
 8005f66:	f7ff fd35 	bl	80059d4 <__hi0bits>
 8005f6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f6e:	e7df      	b.n	8005f30 <__d2b+0x70>
 8005f70:	08007fef 	.word	0x08007fef
 8005f74:	08008000 	.word	0x08008000

08005f78 <_calloc_r>:
 8005f78:	b513      	push	{r0, r1, r4, lr}
 8005f7a:	434a      	muls	r2, r1
 8005f7c:	4611      	mov	r1, r2
 8005f7e:	9201      	str	r2, [sp, #4]
 8005f80:	f000 f85a 	bl	8006038 <_malloc_r>
 8005f84:	4604      	mov	r4, r0
 8005f86:	b118      	cbz	r0, 8005f90 <_calloc_r+0x18>
 8005f88:	9a01      	ldr	r2, [sp, #4]
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	f7fe f952 	bl	8004234 <memset>
 8005f90:	4620      	mov	r0, r4
 8005f92:	b002      	add	sp, #8
 8005f94:	bd10      	pop	{r4, pc}
	...

08005f98 <_free_r>:
 8005f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f9a:	2900      	cmp	r1, #0
 8005f9c:	d048      	beq.n	8006030 <_free_r+0x98>
 8005f9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fa2:	9001      	str	r0, [sp, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f1a1 0404 	sub.w	r4, r1, #4
 8005faa:	bfb8      	it	lt
 8005fac:	18e4      	addlt	r4, r4, r3
 8005fae:	f000 fa65 	bl	800647c <__malloc_lock>
 8005fb2:	4a20      	ldr	r2, [pc, #128]	; (8006034 <_free_r+0x9c>)
 8005fb4:	9801      	ldr	r0, [sp, #4]
 8005fb6:	6813      	ldr	r3, [r2, #0]
 8005fb8:	4615      	mov	r5, r2
 8005fba:	b933      	cbnz	r3, 8005fca <_free_r+0x32>
 8005fbc:	6063      	str	r3, [r4, #4]
 8005fbe:	6014      	str	r4, [r2, #0]
 8005fc0:	b003      	add	sp, #12
 8005fc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fc6:	f000 ba5f 	b.w	8006488 <__malloc_unlock>
 8005fca:	42a3      	cmp	r3, r4
 8005fcc:	d90b      	bls.n	8005fe6 <_free_r+0x4e>
 8005fce:	6821      	ldr	r1, [r4, #0]
 8005fd0:	1862      	adds	r2, r4, r1
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	bf04      	itt	eq
 8005fd6:	681a      	ldreq	r2, [r3, #0]
 8005fd8:	685b      	ldreq	r3, [r3, #4]
 8005fda:	6063      	str	r3, [r4, #4]
 8005fdc:	bf04      	itt	eq
 8005fde:	1852      	addeq	r2, r2, r1
 8005fe0:	6022      	streq	r2, [r4, #0]
 8005fe2:	602c      	str	r4, [r5, #0]
 8005fe4:	e7ec      	b.n	8005fc0 <_free_r+0x28>
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	b10b      	cbz	r3, 8005ff0 <_free_r+0x58>
 8005fec:	42a3      	cmp	r3, r4
 8005fee:	d9fa      	bls.n	8005fe6 <_free_r+0x4e>
 8005ff0:	6811      	ldr	r1, [r2, #0]
 8005ff2:	1855      	adds	r5, r2, r1
 8005ff4:	42a5      	cmp	r5, r4
 8005ff6:	d10b      	bne.n	8006010 <_free_r+0x78>
 8005ff8:	6824      	ldr	r4, [r4, #0]
 8005ffa:	4421      	add	r1, r4
 8005ffc:	1854      	adds	r4, r2, r1
 8005ffe:	42a3      	cmp	r3, r4
 8006000:	6011      	str	r1, [r2, #0]
 8006002:	d1dd      	bne.n	8005fc0 <_free_r+0x28>
 8006004:	681c      	ldr	r4, [r3, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	6053      	str	r3, [r2, #4]
 800600a:	4421      	add	r1, r4
 800600c:	6011      	str	r1, [r2, #0]
 800600e:	e7d7      	b.n	8005fc0 <_free_r+0x28>
 8006010:	d902      	bls.n	8006018 <_free_r+0x80>
 8006012:	230c      	movs	r3, #12
 8006014:	6003      	str	r3, [r0, #0]
 8006016:	e7d3      	b.n	8005fc0 <_free_r+0x28>
 8006018:	6825      	ldr	r5, [r4, #0]
 800601a:	1961      	adds	r1, r4, r5
 800601c:	428b      	cmp	r3, r1
 800601e:	bf04      	itt	eq
 8006020:	6819      	ldreq	r1, [r3, #0]
 8006022:	685b      	ldreq	r3, [r3, #4]
 8006024:	6063      	str	r3, [r4, #4]
 8006026:	bf04      	itt	eq
 8006028:	1949      	addeq	r1, r1, r5
 800602a:	6021      	streq	r1, [r4, #0]
 800602c:	6054      	str	r4, [r2, #4]
 800602e:	e7c7      	b.n	8005fc0 <_free_r+0x28>
 8006030:	b003      	add	sp, #12
 8006032:	bd30      	pop	{r4, r5, pc}
 8006034:	2000023c 	.word	0x2000023c

08006038 <_malloc_r>:
 8006038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603a:	1ccd      	adds	r5, r1, #3
 800603c:	f025 0503 	bic.w	r5, r5, #3
 8006040:	3508      	adds	r5, #8
 8006042:	2d0c      	cmp	r5, #12
 8006044:	bf38      	it	cc
 8006046:	250c      	movcc	r5, #12
 8006048:	2d00      	cmp	r5, #0
 800604a:	4606      	mov	r6, r0
 800604c:	db01      	blt.n	8006052 <_malloc_r+0x1a>
 800604e:	42a9      	cmp	r1, r5
 8006050:	d903      	bls.n	800605a <_malloc_r+0x22>
 8006052:	230c      	movs	r3, #12
 8006054:	6033      	str	r3, [r6, #0]
 8006056:	2000      	movs	r0, #0
 8006058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800605a:	f000 fa0f 	bl	800647c <__malloc_lock>
 800605e:	4921      	ldr	r1, [pc, #132]	; (80060e4 <_malloc_r+0xac>)
 8006060:	680a      	ldr	r2, [r1, #0]
 8006062:	4614      	mov	r4, r2
 8006064:	b99c      	cbnz	r4, 800608e <_malloc_r+0x56>
 8006066:	4f20      	ldr	r7, [pc, #128]	; (80060e8 <_malloc_r+0xb0>)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	b923      	cbnz	r3, 8006076 <_malloc_r+0x3e>
 800606c:	4621      	mov	r1, r4
 800606e:	4630      	mov	r0, r6
 8006070:	f000 f998 	bl	80063a4 <_sbrk_r>
 8006074:	6038      	str	r0, [r7, #0]
 8006076:	4629      	mov	r1, r5
 8006078:	4630      	mov	r0, r6
 800607a:	f000 f993 	bl	80063a4 <_sbrk_r>
 800607e:	1c43      	adds	r3, r0, #1
 8006080:	d123      	bne.n	80060ca <_malloc_r+0x92>
 8006082:	230c      	movs	r3, #12
 8006084:	6033      	str	r3, [r6, #0]
 8006086:	4630      	mov	r0, r6
 8006088:	f000 f9fe 	bl	8006488 <__malloc_unlock>
 800608c:	e7e3      	b.n	8006056 <_malloc_r+0x1e>
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	1b5b      	subs	r3, r3, r5
 8006092:	d417      	bmi.n	80060c4 <_malloc_r+0x8c>
 8006094:	2b0b      	cmp	r3, #11
 8006096:	d903      	bls.n	80060a0 <_malloc_r+0x68>
 8006098:	6023      	str	r3, [r4, #0]
 800609a:	441c      	add	r4, r3
 800609c:	6025      	str	r5, [r4, #0]
 800609e:	e004      	b.n	80060aa <_malloc_r+0x72>
 80060a0:	6863      	ldr	r3, [r4, #4]
 80060a2:	42a2      	cmp	r2, r4
 80060a4:	bf0c      	ite	eq
 80060a6:	600b      	streq	r3, [r1, #0]
 80060a8:	6053      	strne	r3, [r2, #4]
 80060aa:	4630      	mov	r0, r6
 80060ac:	f000 f9ec 	bl	8006488 <__malloc_unlock>
 80060b0:	f104 000b 	add.w	r0, r4, #11
 80060b4:	1d23      	adds	r3, r4, #4
 80060b6:	f020 0007 	bic.w	r0, r0, #7
 80060ba:	1ac2      	subs	r2, r0, r3
 80060bc:	d0cc      	beq.n	8006058 <_malloc_r+0x20>
 80060be:	1a1b      	subs	r3, r3, r0
 80060c0:	50a3      	str	r3, [r4, r2]
 80060c2:	e7c9      	b.n	8006058 <_malloc_r+0x20>
 80060c4:	4622      	mov	r2, r4
 80060c6:	6864      	ldr	r4, [r4, #4]
 80060c8:	e7cc      	b.n	8006064 <_malloc_r+0x2c>
 80060ca:	1cc4      	adds	r4, r0, #3
 80060cc:	f024 0403 	bic.w	r4, r4, #3
 80060d0:	42a0      	cmp	r0, r4
 80060d2:	d0e3      	beq.n	800609c <_malloc_r+0x64>
 80060d4:	1a21      	subs	r1, r4, r0
 80060d6:	4630      	mov	r0, r6
 80060d8:	f000 f964 	bl	80063a4 <_sbrk_r>
 80060dc:	3001      	adds	r0, #1
 80060de:	d1dd      	bne.n	800609c <_malloc_r+0x64>
 80060e0:	e7cf      	b.n	8006082 <_malloc_r+0x4a>
 80060e2:	bf00      	nop
 80060e4:	2000023c 	.word	0x2000023c
 80060e8:	20000240 	.word	0x20000240

080060ec <__ssputs_r>:
 80060ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060f0:	688e      	ldr	r6, [r1, #8]
 80060f2:	429e      	cmp	r6, r3
 80060f4:	4682      	mov	sl, r0
 80060f6:	460c      	mov	r4, r1
 80060f8:	4690      	mov	r8, r2
 80060fa:	461f      	mov	r7, r3
 80060fc:	d838      	bhi.n	8006170 <__ssputs_r+0x84>
 80060fe:	898a      	ldrh	r2, [r1, #12]
 8006100:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006104:	d032      	beq.n	800616c <__ssputs_r+0x80>
 8006106:	6825      	ldr	r5, [r4, #0]
 8006108:	6909      	ldr	r1, [r1, #16]
 800610a:	eba5 0901 	sub.w	r9, r5, r1
 800610e:	6965      	ldr	r5, [r4, #20]
 8006110:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006114:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006118:	3301      	adds	r3, #1
 800611a:	444b      	add	r3, r9
 800611c:	106d      	asrs	r5, r5, #1
 800611e:	429d      	cmp	r5, r3
 8006120:	bf38      	it	cc
 8006122:	461d      	movcc	r5, r3
 8006124:	0553      	lsls	r3, r2, #21
 8006126:	d531      	bpl.n	800618c <__ssputs_r+0xa0>
 8006128:	4629      	mov	r1, r5
 800612a:	f7ff ff85 	bl	8006038 <_malloc_r>
 800612e:	4606      	mov	r6, r0
 8006130:	b950      	cbnz	r0, 8006148 <__ssputs_r+0x5c>
 8006132:	230c      	movs	r3, #12
 8006134:	f8ca 3000 	str.w	r3, [sl]
 8006138:	89a3      	ldrh	r3, [r4, #12]
 800613a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800613e:	81a3      	strh	r3, [r4, #12]
 8006140:	f04f 30ff 	mov.w	r0, #4294967295
 8006144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006148:	6921      	ldr	r1, [r4, #16]
 800614a:	464a      	mov	r2, r9
 800614c:	f7ff fb88 	bl	8005860 <memcpy>
 8006150:	89a3      	ldrh	r3, [r4, #12]
 8006152:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615a:	81a3      	strh	r3, [r4, #12]
 800615c:	6126      	str	r6, [r4, #16]
 800615e:	6165      	str	r5, [r4, #20]
 8006160:	444e      	add	r6, r9
 8006162:	eba5 0509 	sub.w	r5, r5, r9
 8006166:	6026      	str	r6, [r4, #0]
 8006168:	60a5      	str	r5, [r4, #8]
 800616a:	463e      	mov	r6, r7
 800616c:	42be      	cmp	r6, r7
 800616e:	d900      	bls.n	8006172 <__ssputs_r+0x86>
 8006170:	463e      	mov	r6, r7
 8006172:	4632      	mov	r2, r6
 8006174:	6820      	ldr	r0, [r4, #0]
 8006176:	4641      	mov	r1, r8
 8006178:	f000 f966 	bl	8006448 <memmove>
 800617c:	68a3      	ldr	r3, [r4, #8]
 800617e:	6822      	ldr	r2, [r4, #0]
 8006180:	1b9b      	subs	r3, r3, r6
 8006182:	4432      	add	r2, r6
 8006184:	60a3      	str	r3, [r4, #8]
 8006186:	6022      	str	r2, [r4, #0]
 8006188:	2000      	movs	r0, #0
 800618a:	e7db      	b.n	8006144 <__ssputs_r+0x58>
 800618c:	462a      	mov	r2, r5
 800618e:	f000 f981 	bl	8006494 <_realloc_r>
 8006192:	4606      	mov	r6, r0
 8006194:	2800      	cmp	r0, #0
 8006196:	d1e1      	bne.n	800615c <__ssputs_r+0x70>
 8006198:	6921      	ldr	r1, [r4, #16]
 800619a:	4650      	mov	r0, sl
 800619c:	f7ff fefc 	bl	8005f98 <_free_r>
 80061a0:	e7c7      	b.n	8006132 <__ssputs_r+0x46>
	...

080061a4 <_svfiprintf_r>:
 80061a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a8:	4698      	mov	r8, r3
 80061aa:	898b      	ldrh	r3, [r1, #12]
 80061ac:	061b      	lsls	r3, r3, #24
 80061ae:	b09d      	sub	sp, #116	; 0x74
 80061b0:	4607      	mov	r7, r0
 80061b2:	460d      	mov	r5, r1
 80061b4:	4614      	mov	r4, r2
 80061b6:	d50e      	bpl.n	80061d6 <_svfiprintf_r+0x32>
 80061b8:	690b      	ldr	r3, [r1, #16]
 80061ba:	b963      	cbnz	r3, 80061d6 <_svfiprintf_r+0x32>
 80061bc:	2140      	movs	r1, #64	; 0x40
 80061be:	f7ff ff3b 	bl	8006038 <_malloc_r>
 80061c2:	6028      	str	r0, [r5, #0]
 80061c4:	6128      	str	r0, [r5, #16]
 80061c6:	b920      	cbnz	r0, 80061d2 <_svfiprintf_r+0x2e>
 80061c8:	230c      	movs	r3, #12
 80061ca:	603b      	str	r3, [r7, #0]
 80061cc:	f04f 30ff 	mov.w	r0, #4294967295
 80061d0:	e0d1      	b.n	8006376 <_svfiprintf_r+0x1d2>
 80061d2:	2340      	movs	r3, #64	; 0x40
 80061d4:	616b      	str	r3, [r5, #20]
 80061d6:	2300      	movs	r3, #0
 80061d8:	9309      	str	r3, [sp, #36]	; 0x24
 80061da:	2320      	movs	r3, #32
 80061dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80061e4:	2330      	movs	r3, #48	; 0x30
 80061e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006390 <_svfiprintf_r+0x1ec>
 80061ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061ee:	f04f 0901 	mov.w	r9, #1
 80061f2:	4623      	mov	r3, r4
 80061f4:	469a      	mov	sl, r3
 80061f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061fa:	b10a      	cbz	r2, 8006200 <_svfiprintf_r+0x5c>
 80061fc:	2a25      	cmp	r2, #37	; 0x25
 80061fe:	d1f9      	bne.n	80061f4 <_svfiprintf_r+0x50>
 8006200:	ebba 0b04 	subs.w	fp, sl, r4
 8006204:	d00b      	beq.n	800621e <_svfiprintf_r+0x7a>
 8006206:	465b      	mov	r3, fp
 8006208:	4622      	mov	r2, r4
 800620a:	4629      	mov	r1, r5
 800620c:	4638      	mov	r0, r7
 800620e:	f7ff ff6d 	bl	80060ec <__ssputs_r>
 8006212:	3001      	adds	r0, #1
 8006214:	f000 80aa 	beq.w	800636c <_svfiprintf_r+0x1c8>
 8006218:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800621a:	445a      	add	r2, fp
 800621c:	9209      	str	r2, [sp, #36]	; 0x24
 800621e:	f89a 3000 	ldrb.w	r3, [sl]
 8006222:	2b00      	cmp	r3, #0
 8006224:	f000 80a2 	beq.w	800636c <_svfiprintf_r+0x1c8>
 8006228:	2300      	movs	r3, #0
 800622a:	f04f 32ff 	mov.w	r2, #4294967295
 800622e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006232:	f10a 0a01 	add.w	sl, sl, #1
 8006236:	9304      	str	r3, [sp, #16]
 8006238:	9307      	str	r3, [sp, #28]
 800623a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800623e:	931a      	str	r3, [sp, #104]	; 0x68
 8006240:	4654      	mov	r4, sl
 8006242:	2205      	movs	r2, #5
 8006244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006248:	4851      	ldr	r0, [pc, #324]	; (8006390 <_svfiprintf_r+0x1ec>)
 800624a:	f7f9 ffd9 	bl	8000200 <memchr>
 800624e:	9a04      	ldr	r2, [sp, #16]
 8006250:	b9d8      	cbnz	r0, 800628a <_svfiprintf_r+0xe6>
 8006252:	06d0      	lsls	r0, r2, #27
 8006254:	bf44      	itt	mi
 8006256:	2320      	movmi	r3, #32
 8006258:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800625c:	0711      	lsls	r1, r2, #28
 800625e:	bf44      	itt	mi
 8006260:	232b      	movmi	r3, #43	; 0x2b
 8006262:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006266:	f89a 3000 	ldrb.w	r3, [sl]
 800626a:	2b2a      	cmp	r3, #42	; 0x2a
 800626c:	d015      	beq.n	800629a <_svfiprintf_r+0xf6>
 800626e:	9a07      	ldr	r2, [sp, #28]
 8006270:	4654      	mov	r4, sl
 8006272:	2000      	movs	r0, #0
 8006274:	f04f 0c0a 	mov.w	ip, #10
 8006278:	4621      	mov	r1, r4
 800627a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800627e:	3b30      	subs	r3, #48	; 0x30
 8006280:	2b09      	cmp	r3, #9
 8006282:	d94e      	bls.n	8006322 <_svfiprintf_r+0x17e>
 8006284:	b1b0      	cbz	r0, 80062b4 <_svfiprintf_r+0x110>
 8006286:	9207      	str	r2, [sp, #28]
 8006288:	e014      	b.n	80062b4 <_svfiprintf_r+0x110>
 800628a:	eba0 0308 	sub.w	r3, r0, r8
 800628e:	fa09 f303 	lsl.w	r3, r9, r3
 8006292:	4313      	orrs	r3, r2
 8006294:	9304      	str	r3, [sp, #16]
 8006296:	46a2      	mov	sl, r4
 8006298:	e7d2      	b.n	8006240 <_svfiprintf_r+0x9c>
 800629a:	9b03      	ldr	r3, [sp, #12]
 800629c:	1d19      	adds	r1, r3, #4
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	9103      	str	r1, [sp, #12]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	bfbb      	ittet	lt
 80062a6:	425b      	neglt	r3, r3
 80062a8:	f042 0202 	orrlt.w	r2, r2, #2
 80062ac:	9307      	strge	r3, [sp, #28]
 80062ae:	9307      	strlt	r3, [sp, #28]
 80062b0:	bfb8      	it	lt
 80062b2:	9204      	strlt	r2, [sp, #16]
 80062b4:	7823      	ldrb	r3, [r4, #0]
 80062b6:	2b2e      	cmp	r3, #46	; 0x2e
 80062b8:	d10c      	bne.n	80062d4 <_svfiprintf_r+0x130>
 80062ba:	7863      	ldrb	r3, [r4, #1]
 80062bc:	2b2a      	cmp	r3, #42	; 0x2a
 80062be:	d135      	bne.n	800632c <_svfiprintf_r+0x188>
 80062c0:	9b03      	ldr	r3, [sp, #12]
 80062c2:	1d1a      	adds	r2, r3, #4
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	9203      	str	r2, [sp, #12]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	bfb8      	it	lt
 80062cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80062d0:	3402      	adds	r4, #2
 80062d2:	9305      	str	r3, [sp, #20]
 80062d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80063a0 <_svfiprintf_r+0x1fc>
 80062d8:	7821      	ldrb	r1, [r4, #0]
 80062da:	2203      	movs	r2, #3
 80062dc:	4650      	mov	r0, sl
 80062de:	f7f9 ff8f 	bl	8000200 <memchr>
 80062e2:	b140      	cbz	r0, 80062f6 <_svfiprintf_r+0x152>
 80062e4:	2340      	movs	r3, #64	; 0x40
 80062e6:	eba0 000a 	sub.w	r0, r0, sl
 80062ea:	fa03 f000 	lsl.w	r0, r3, r0
 80062ee:	9b04      	ldr	r3, [sp, #16]
 80062f0:	4303      	orrs	r3, r0
 80062f2:	3401      	adds	r4, #1
 80062f4:	9304      	str	r3, [sp, #16]
 80062f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062fa:	4826      	ldr	r0, [pc, #152]	; (8006394 <_svfiprintf_r+0x1f0>)
 80062fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006300:	2206      	movs	r2, #6
 8006302:	f7f9 ff7d 	bl	8000200 <memchr>
 8006306:	2800      	cmp	r0, #0
 8006308:	d038      	beq.n	800637c <_svfiprintf_r+0x1d8>
 800630a:	4b23      	ldr	r3, [pc, #140]	; (8006398 <_svfiprintf_r+0x1f4>)
 800630c:	bb1b      	cbnz	r3, 8006356 <_svfiprintf_r+0x1b2>
 800630e:	9b03      	ldr	r3, [sp, #12]
 8006310:	3307      	adds	r3, #7
 8006312:	f023 0307 	bic.w	r3, r3, #7
 8006316:	3308      	adds	r3, #8
 8006318:	9303      	str	r3, [sp, #12]
 800631a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800631c:	4433      	add	r3, r6
 800631e:	9309      	str	r3, [sp, #36]	; 0x24
 8006320:	e767      	b.n	80061f2 <_svfiprintf_r+0x4e>
 8006322:	fb0c 3202 	mla	r2, ip, r2, r3
 8006326:	460c      	mov	r4, r1
 8006328:	2001      	movs	r0, #1
 800632a:	e7a5      	b.n	8006278 <_svfiprintf_r+0xd4>
 800632c:	2300      	movs	r3, #0
 800632e:	3401      	adds	r4, #1
 8006330:	9305      	str	r3, [sp, #20]
 8006332:	4619      	mov	r1, r3
 8006334:	f04f 0c0a 	mov.w	ip, #10
 8006338:	4620      	mov	r0, r4
 800633a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800633e:	3a30      	subs	r2, #48	; 0x30
 8006340:	2a09      	cmp	r2, #9
 8006342:	d903      	bls.n	800634c <_svfiprintf_r+0x1a8>
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0c5      	beq.n	80062d4 <_svfiprintf_r+0x130>
 8006348:	9105      	str	r1, [sp, #20]
 800634a:	e7c3      	b.n	80062d4 <_svfiprintf_r+0x130>
 800634c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006350:	4604      	mov	r4, r0
 8006352:	2301      	movs	r3, #1
 8006354:	e7f0      	b.n	8006338 <_svfiprintf_r+0x194>
 8006356:	ab03      	add	r3, sp, #12
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	462a      	mov	r2, r5
 800635c:	4b0f      	ldr	r3, [pc, #60]	; (800639c <_svfiprintf_r+0x1f8>)
 800635e:	a904      	add	r1, sp, #16
 8006360:	4638      	mov	r0, r7
 8006362:	f7fe f80f 	bl	8004384 <_printf_float>
 8006366:	1c42      	adds	r2, r0, #1
 8006368:	4606      	mov	r6, r0
 800636a:	d1d6      	bne.n	800631a <_svfiprintf_r+0x176>
 800636c:	89ab      	ldrh	r3, [r5, #12]
 800636e:	065b      	lsls	r3, r3, #25
 8006370:	f53f af2c 	bmi.w	80061cc <_svfiprintf_r+0x28>
 8006374:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006376:	b01d      	add	sp, #116	; 0x74
 8006378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800637c:	ab03      	add	r3, sp, #12
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	462a      	mov	r2, r5
 8006382:	4b06      	ldr	r3, [pc, #24]	; (800639c <_svfiprintf_r+0x1f8>)
 8006384:	a904      	add	r1, sp, #16
 8006386:	4638      	mov	r0, r7
 8006388:	f7fe faa0 	bl	80048cc <_printf_i>
 800638c:	e7eb      	b.n	8006366 <_svfiprintf_r+0x1c2>
 800638e:	bf00      	nop
 8006390:	0800815c 	.word	0x0800815c
 8006394:	08008166 	.word	0x08008166
 8006398:	08004385 	.word	0x08004385
 800639c:	080060ed 	.word	0x080060ed
 80063a0:	08008162 	.word	0x08008162

080063a4 <_sbrk_r>:
 80063a4:	b538      	push	{r3, r4, r5, lr}
 80063a6:	4d06      	ldr	r5, [pc, #24]	; (80063c0 <_sbrk_r+0x1c>)
 80063a8:	2300      	movs	r3, #0
 80063aa:	4604      	mov	r4, r0
 80063ac:	4608      	mov	r0, r1
 80063ae:	602b      	str	r3, [r5, #0]
 80063b0:	f7fb fee8 	bl	8002184 <_sbrk>
 80063b4:	1c43      	adds	r3, r0, #1
 80063b6:	d102      	bne.n	80063be <_sbrk_r+0x1a>
 80063b8:	682b      	ldr	r3, [r5, #0]
 80063ba:	b103      	cbz	r3, 80063be <_sbrk_r+0x1a>
 80063bc:	6023      	str	r3, [r4, #0]
 80063be:	bd38      	pop	{r3, r4, r5, pc}
 80063c0:	2000028c 	.word	0x2000028c

080063c4 <__assert_func>:
 80063c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063c6:	4614      	mov	r4, r2
 80063c8:	461a      	mov	r2, r3
 80063ca:	4b09      	ldr	r3, [pc, #36]	; (80063f0 <__assert_func+0x2c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4605      	mov	r5, r0
 80063d0:	68d8      	ldr	r0, [r3, #12]
 80063d2:	b14c      	cbz	r4, 80063e8 <__assert_func+0x24>
 80063d4:	4b07      	ldr	r3, [pc, #28]	; (80063f4 <__assert_func+0x30>)
 80063d6:	9100      	str	r1, [sp, #0]
 80063d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80063dc:	4906      	ldr	r1, [pc, #24]	; (80063f8 <__assert_func+0x34>)
 80063de:	462b      	mov	r3, r5
 80063e0:	f000 f80e 	bl	8006400 <fiprintf>
 80063e4:	f000 faa4 	bl	8006930 <abort>
 80063e8:	4b04      	ldr	r3, [pc, #16]	; (80063fc <__assert_func+0x38>)
 80063ea:	461c      	mov	r4, r3
 80063ec:	e7f3      	b.n	80063d6 <__assert_func+0x12>
 80063ee:	bf00      	nop
 80063f0:	20000018 	.word	0x20000018
 80063f4:	0800816d 	.word	0x0800816d
 80063f8:	0800817a 	.word	0x0800817a
 80063fc:	080081a8 	.word	0x080081a8

08006400 <fiprintf>:
 8006400:	b40e      	push	{r1, r2, r3}
 8006402:	b503      	push	{r0, r1, lr}
 8006404:	4601      	mov	r1, r0
 8006406:	ab03      	add	r3, sp, #12
 8006408:	4805      	ldr	r0, [pc, #20]	; (8006420 <fiprintf+0x20>)
 800640a:	f853 2b04 	ldr.w	r2, [r3], #4
 800640e:	6800      	ldr	r0, [r0, #0]
 8006410:	9301      	str	r3, [sp, #4]
 8006412:	f000 f88f 	bl	8006534 <_vfiprintf_r>
 8006416:	b002      	add	sp, #8
 8006418:	f85d eb04 	ldr.w	lr, [sp], #4
 800641c:	b003      	add	sp, #12
 800641e:	4770      	bx	lr
 8006420:	20000018 	.word	0x20000018

08006424 <__ascii_mbtowc>:
 8006424:	b082      	sub	sp, #8
 8006426:	b901      	cbnz	r1, 800642a <__ascii_mbtowc+0x6>
 8006428:	a901      	add	r1, sp, #4
 800642a:	b142      	cbz	r2, 800643e <__ascii_mbtowc+0x1a>
 800642c:	b14b      	cbz	r3, 8006442 <__ascii_mbtowc+0x1e>
 800642e:	7813      	ldrb	r3, [r2, #0]
 8006430:	600b      	str	r3, [r1, #0]
 8006432:	7812      	ldrb	r2, [r2, #0]
 8006434:	1e10      	subs	r0, r2, #0
 8006436:	bf18      	it	ne
 8006438:	2001      	movne	r0, #1
 800643a:	b002      	add	sp, #8
 800643c:	4770      	bx	lr
 800643e:	4610      	mov	r0, r2
 8006440:	e7fb      	b.n	800643a <__ascii_mbtowc+0x16>
 8006442:	f06f 0001 	mvn.w	r0, #1
 8006446:	e7f8      	b.n	800643a <__ascii_mbtowc+0x16>

08006448 <memmove>:
 8006448:	4288      	cmp	r0, r1
 800644a:	b510      	push	{r4, lr}
 800644c:	eb01 0402 	add.w	r4, r1, r2
 8006450:	d902      	bls.n	8006458 <memmove+0x10>
 8006452:	4284      	cmp	r4, r0
 8006454:	4623      	mov	r3, r4
 8006456:	d807      	bhi.n	8006468 <memmove+0x20>
 8006458:	1e43      	subs	r3, r0, #1
 800645a:	42a1      	cmp	r1, r4
 800645c:	d008      	beq.n	8006470 <memmove+0x28>
 800645e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006462:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006466:	e7f8      	b.n	800645a <memmove+0x12>
 8006468:	4402      	add	r2, r0
 800646a:	4601      	mov	r1, r0
 800646c:	428a      	cmp	r2, r1
 800646e:	d100      	bne.n	8006472 <memmove+0x2a>
 8006470:	bd10      	pop	{r4, pc}
 8006472:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006476:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800647a:	e7f7      	b.n	800646c <memmove+0x24>

0800647c <__malloc_lock>:
 800647c:	4801      	ldr	r0, [pc, #4]	; (8006484 <__malloc_lock+0x8>)
 800647e:	f000 bc17 	b.w	8006cb0 <__retarget_lock_acquire_recursive>
 8006482:	bf00      	nop
 8006484:	20000294 	.word	0x20000294

08006488 <__malloc_unlock>:
 8006488:	4801      	ldr	r0, [pc, #4]	; (8006490 <__malloc_unlock+0x8>)
 800648a:	f000 bc12 	b.w	8006cb2 <__retarget_lock_release_recursive>
 800648e:	bf00      	nop
 8006490:	20000294 	.word	0x20000294

08006494 <_realloc_r>:
 8006494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006496:	4607      	mov	r7, r0
 8006498:	4614      	mov	r4, r2
 800649a:	460e      	mov	r6, r1
 800649c:	b921      	cbnz	r1, 80064a8 <_realloc_r+0x14>
 800649e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80064a2:	4611      	mov	r1, r2
 80064a4:	f7ff bdc8 	b.w	8006038 <_malloc_r>
 80064a8:	b922      	cbnz	r2, 80064b4 <_realloc_r+0x20>
 80064aa:	f7ff fd75 	bl	8005f98 <_free_r>
 80064ae:	4625      	mov	r5, r4
 80064b0:	4628      	mov	r0, r5
 80064b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064b4:	f000 fc62 	bl	8006d7c <_malloc_usable_size_r>
 80064b8:	42a0      	cmp	r0, r4
 80064ba:	d20f      	bcs.n	80064dc <_realloc_r+0x48>
 80064bc:	4621      	mov	r1, r4
 80064be:	4638      	mov	r0, r7
 80064c0:	f7ff fdba 	bl	8006038 <_malloc_r>
 80064c4:	4605      	mov	r5, r0
 80064c6:	2800      	cmp	r0, #0
 80064c8:	d0f2      	beq.n	80064b0 <_realloc_r+0x1c>
 80064ca:	4631      	mov	r1, r6
 80064cc:	4622      	mov	r2, r4
 80064ce:	f7ff f9c7 	bl	8005860 <memcpy>
 80064d2:	4631      	mov	r1, r6
 80064d4:	4638      	mov	r0, r7
 80064d6:	f7ff fd5f 	bl	8005f98 <_free_r>
 80064da:	e7e9      	b.n	80064b0 <_realloc_r+0x1c>
 80064dc:	4635      	mov	r5, r6
 80064de:	e7e7      	b.n	80064b0 <_realloc_r+0x1c>

080064e0 <__sfputc_r>:
 80064e0:	6893      	ldr	r3, [r2, #8]
 80064e2:	3b01      	subs	r3, #1
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	b410      	push	{r4}
 80064e8:	6093      	str	r3, [r2, #8]
 80064ea:	da08      	bge.n	80064fe <__sfputc_r+0x1e>
 80064ec:	6994      	ldr	r4, [r2, #24]
 80064ee:	42a3      	cmp	r3, r4
 80064f0:	db01      	blt.n	80064f6 <__sfputc_r+0x16>
 80064f2:	290a      	cmp	r1, #10
 80064f4:	d103      	bne.n	80064fe <__sfputc_r+0x1e>
 80064f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064fa:	f000 b94b 	b.w	8006794 <__swbuf_r>
 80064fe:	6813      	ldr	r3, [r2, #0]
 8006500:	1c58      	adds	r0, r3, #1
 8006502:	6010      	str	r0, [r2, #0]
 8006504:	7019      	strb	r1, [r3, #0]
 8006506:	4608      	mov	r0, r1
 8006508:	f85d 4b04 	ldr.w	r4, [sp], #4
 800650c:	4770      	bx	lr

0800650e <__sfputs_r>:
 800650e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006510:	4606      	mov	r6, r0
 8006512:	460f      	mov	r7, r1
 8006514:	4614      	mov	r4, r2
 8006516:	18d5      	adds	r5, r2, r3
 8006518:	42ac      	cmp	r4, r5
 800651a:	d101      	bne.n	8006520 <__sfputs_r+0x12>
 800651c:	2000      	movs	r0, #0
 800651e:	e007      	b.n	8006530 <__sfputs_r+0x22>
 8006520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006524:	463a      	mov	r2, r7
 8006526:	4630      	mov	r0, r6
 8006528:	f7ff ffda 	bl	80064e0 <__sfputc_r>
 800652c:	1c43      	adds	r3, r0, #1
 800652e:	d1f3      	bne.n	8006518 <__sfputs_r+0xa>
 8006530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006534 <_vfiprintf_r>:
 8006534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006538:	460d      	mov	r5, r1
 800653a:	b09d      	sub	sp, #116	; 0x74
 800653c:	4614      	mov	r4, r2
 800653e:	4698      	mov	r8, r3
 8006540:	4606      	mov	r6, r0
 8006542:	b118      	cbz	r0, 800654c <_vfiprintf_r+0x18>
 8006544:	6983      	ldr	r3, [r0, #24]
 8006546:	b90b      	cbnz	r3, 800654c <_vfiprintf_r+0x18>
 8006548:	f000 fb14 	bl	8006b74 <__sinit>
 800654c:	4b89      	ldr	r3, [pc, #548]	; (8006774 <_vfiprintf_r+0x240>)
 800654e:	429d      	cmp	r5, r3
 8006550:	d11b      	bne.n	800658a <_vfiprintf_r+0x56>
 8006552:	6875      	ldr	r5, [r6, #4]
 8006554:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006556:	07d9      	lsls	r1, r3, #31
 8006558:	d405      	bmi.n	8006566 <_vfiprintf_r+0x32>
 800655a:	89ab      	ldrh	r3, [r5, #12]
 800655c:	059a      	lsls	r2, r3, #22
 800655e:	d402      	bmi.n	8006566 <_vfiprintf_r+0x32>
 8006560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006562:	f000 fba5 	bl	8006cb0 <__retarget_lock_acquire_recursive>
 8006566:	89ab      	ldrh	r3, [r5, #12]
 8006568:	071b      	lsls	r3, r3, #28
 800656a:	d501      	bpl.n	8006570 <_vfiprintf_r+0x3c>
 800656c:	692b      	ldr	r3, [r5, #16]
 800656e:	b9eb      	cbnz	r3, 80065ac <_vfiprintf_r+0x78>
 8006570:	4629      	mov	r1, r5
 8006572:	4630      	mov	r0, r6
 8006574:	f000 f96e 	bl	8006854 <__swsetup_r>
 8006578:	b1c0      	cbz	r0, 80065ac <_vfiprintf_r+0x78>
 800657a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800657c:	07dc      	lsls	r4, r3, #31
 800657e:	d50e      	bpl.n	800659e <_vfiprintf_r+0x6a>
 8006580:	f04f 30ff 	mov.w	r0, #4294967295
 8006584:	b01d      	add	sp, #116	; 0x74
 8006586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800658a:	4b7b      	ldr	r3, [pc, #492]	; (8006778 <_vfiprintf_r+0x244>)
 800658c:	429d      	cmp	r5, r3
 800658e:	d101      	bne.n	8006594 <_vfiprintf_r+0x60>
 8006590:	68b5      	ldr	r5, [r6, #8]
 8006592:	e7df      	b.n	8006554 <_vfiprintf_r+0x20>
 8006594:	4b79      	ldr	r3, [pc, #484]	; (800677c <_vfiprintf_r+0x248>)
 8006596:	429d      	cmp	r5, r3
 8006598:	bf08      	it	eq
 800659a:	68f5      	ldreq	r5, [r6, #12]
 800659c:	e7da      	b.n	8006554 <_vfiprintf_r+0x20>
 800659e:	89ab      	ldrh	r3, [r5, #12]
 80065a0:	0598      	lsls	r0, r3, #22
 80065a2:	d4ed      	bmi.n	8006580 <_vfiprintf_r+0x4c>
 80065a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065a6:	f000 fb84 	bl	8006cb2 <__retarget_lock_release_recursive>
 80065aa:	e7e9      	b.n	8006580 <_vfiprintf_r+0x4c>
 80065ac:	2300      	movs	r3, #0
 80065ae:	9309      	str	r3, [sp, #36]	; 0x24
 80065b0:	2320      	movs	r3, #32
 80065b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80065ba:	2330      	movs	r3, #48	; 0x30
 80065bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006780 <_vfiprintf_r+0x24c>
 80065c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065c4:	f04f 0901 	mov.w	r9, #1
 80065c8:	4623      	mov	r3, r4
 80065ca:	469a      	mov	sl, r3
 80065cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065d0:	b10a      	cbz	r2, 80065d6 <_vfiprintf_r+0xa2>
 80065d2:	2a25      	cmp	r2, #37	; 0x25
 80065d4:	d1f9      	bne.n	80065ca <_vfiprintf_r+0x96>
 80065d6:	ebba 0b04 	subs.w	fp, sl, r4
 80065da:	d00b      	beq.n	80065f4 <_vfiprintf_r+0xc0>
 80065dc:	465b      	mov	r3, fp
 80065de:	4622      	mov	r2, r4
 80065e0:	4629      	mov	r1, r5
 80065e2:	4630      	mov	r0, r6
 80065e4:	f7ff ff93 	bl	800650e <__sfputs_r>
 80065e8:	3001      	adds	r0, #1
 80065ea:	f000 80aa 	beq.w	8006742 <_vfiprintf_r+0x20e>
 80065ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065f0:	445a      	add	r2, fp
 80065f2:	9209      	str	r2, [sp, #36]	; 0x24
 80065f4:	f89a 3000 	ldrb.w	r3, [sl]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 80a2 	beq.w	8006742 <_vfiprintf_r+0x20e>
 80065fe:	2300      	movs	r3, #0
 8006600:	f04f 32ff 	mov.w	r2, #4294967295
 8006604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006608:	f10a 0a01 	add.w	sl, sl, #1
 800660c:	9304      	str	r3, [sp, #16]
 800660e:	9307      	str	r3, [sp, #28]
 8006610:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006614:	931a      	str	r3, [sp, #104]	; 0x68
 8006616:	4654      	mov	r4, sl
 8006618:	2205      	movs	r2, #5
 800661a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800661e:	4858      	ldr	r0, [pc, #352]	; (8006780 <_vfiprintf_r+0x24c>)
 8006620:	f7f9 fdee 	bl	8000200 <memchr>
 8006624:	9a04      	ldr	r2, [sp, #16]
 8006626:	b9d8      	cbnz	r0, 8006660 <_vfiprintf_r+0x12c>
 8006628:	06d1      	lsls	r1, r2, #27
 800662a:	bf44      	itt	mi
 800662c:	2320      	movmi	r3, #32
 800662e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006632:	0713      	lsls	r3, r2, #28
 8006634:	bf44      	itt	mi
 8006636:	232b      	movmi	r3, #43	; 0x2b
 8006638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800663c:	f89a 3000 	ldrb.w	r3, [sl]
 8006640:	2b2a      	cmp	r3, #42	; 0x2a
 8006642:	d015      	beq.n	8006670 <_vfiprintf_r+0x13c>
 8006644:	9a07      	ldr	r2, [sp, #28]
 8006646:	4654      	mov	r4, sl
 8006648:	2000      	movs	r0, #0
 800664a:	f04f 0c0a 	mov.w	ip, #10
 800664e:	4621      	mov	r1, r4
 8006650:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006654:	3b30      	subs	r3, #48	; 0x30
 8006656:	2b09      	cmp	r3, #9
 8006658:	d94e      	bls.n	80066f8 <_vfiprintf_r+0x1c4>
 800665a:	b1b0      	cbz	r0, 800668a <_vfiprintf_r+0x156>
 800665c:	9207      	str	r2, [sp, #28]
 800665e:	e014      	b.n	800668a <_vfiprintf_r+0x156>
 8006660:	eba0 0308 	sub.w	r3, r0, r8
 8006664:	fa09 f303 	lsl.w	r3, r9, r3
 8006668:	4313      	orrs	r3, r2
 800666a:	9304      	str	r3, [sp, #16]
 800666c:	46a2      	mov	sl, r4
 800666e:	e7d2      	b.n	8006616 <_vfiprintf_r+0xe2>
 8006670:	9b03      	ldr	r3, [sp, #12]
 8006672:	1d19      	adds	r1, r3, #4
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	9103      	str	r1, [sp, #12]
 8006678:	2b00      	cmp	r3, #0
 800667a:	bfbb      	ittet	lt
 800667c:	425b      	neglt	r3, r3
 800667e:	f042 0202 	orrlt.w	r2, r2, #2
 8006682:	9307      	strge	r3, [sp, #28]
 8006684:	9307      	strlt	r3, [sp, #28]
 8006686:	bfb8      	it	lt
 8006688:	9204      	strlt	r2, [sp, #16]
 800668a:	7823      	ldrb	r3, [r4, #0]
 800668c:	2b2e      	cmp	r3, #46	; 0x2e
 800668e:	d10c      	bne.n	80066aa <_vfiprintf_r+0x176>
 8006690:	7863      	ldrb	r3, [r4, #1]
 8006692:	2b2a      	cmp	r3, #42	; 0x2a
 8006694:	d135      	bne.n	8006702 <_vfiprintf_r+0x1ce>
 8006696:	9b03      	ldr	r3, [sp, #12]
 8006698:	1d1a      	adds	r2, r3, #4
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	9203      	str	r2, [sp, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	bfb8      	it	lt
 80066a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80066a6:	3402      	adds	r4, #2
 80066a8:	9305      	str	r3, [sp, #20]
 80066aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006790 <_vfiprintf_r+0x25c>
 80066ae:	7821      	ldrb	r1, [r4, #0]
 80066b0:	2203      	movs	r2, #3
 80066b2:	4650      	mov	r0, sl
 80066b4:	f7f9 fda4 	bl	8000200 <memchr>
 80066b8:	b140      	cbz	r0, 80066cc <_vfiprintf_r+0x198>
 80066ba:	2340      	movs	r3, #64	; 0x40
 80066bc:	eba0 000a 	sub.w	r0, r0, sl
 80066c0:	fa03 f000 	lsl.w	r0, r3, r0
 80066c4:	9b04      	ldr	r3, [sp, #16]
 80066c6:	4303      	orrs	r3, r0
 80066c8:	3401      	adds	r4, #1
 80066ca:	9304      	str	r3, [sp, #16]
 80066cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066d0:	482c      	ldr	r0, [pc, #176]	; (8006784 <_vfiprintf_r+0x250>)
 80066d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066d6:	2206      	movs	r2, #6
 80066d8:	f7f9 fd92 	bl	8000200 <memchr>
 80066dc:	2800      	cmp	r0, #0
 80066de:	d03f      	beq.n	8006760 <_vfiprintf_r+0x22c>
 80066e0:	4b29      	ldr	r3, [pc, #164]	; (8006788 <_vfiprintf_r+0x254>)
 80066e2:	bb1b      	cbnz	r3, 800672c <_vfiprintf_r+0x1f8>
 80066e4:	9b03      	ldr	r3, [sp, #12]
 80066e6:	3307      	adds	r3, #7
 80066e8:	f023 0307 	bic.w	r3, r3, #7
 80066ec:	3308      	adds	r3, #8
 80066ee:	9303      	str	r3, [sp, #12]
 80066f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066f2:	443b      	add	r3, r7
 80066f4:	9309      	str	r3, [sp, #36]	; 0x24
 80066f6:	e767      	b.n	80065c8 <_vfiprintf_r+0x94>
 80066f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80066fc:	460c      	mov	r4, r1
 80066fe:	2001      	movs	r0, #1
 8006700:	e7a5      	b.n	800664e <_vfiprintf_r+0x11a>
 8006702:	2300      	movs	r3, #0
 8006704:	3401      	adds	r4, #1
 8006706:	9305      	str	r3, [sp, #20]
 8006708:	4619      	mov	r1, r3
 800670a:	f04f 0c0a 	mov.w	ip, #10
 800670e:	4620      	mov	r0, r4
 8006710:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006714:	3a30      	subs	r2, #48	; 0x30
 8006716:	2a09      	cmp	r2, #9
 8006718:	d903      	bls.n	8006722 <_vfiprintf_r+0x1ee>
 800671a:	2b00      	cmp	r3, #0
 800671c:	d0c5      	beq.n	80066aa <_vfiprintf_r+0x176>
 800671e:	9105      	str	r1, [sp, #20]
 8006720:	e7c3      	b.n	80066aa <_vfiprintf_r+0x176>
 8006722:	fb0c 2101 	mla	r1, ip, r1, r2
 8006726:	4604      	mov	r4, r0
 8006728:	2301      	movs	r3, #1
 800672a:	e7f0      	b.n	800670e <_vfiprintf_r+0x1da>
 800672c:	ab03      	add	r3, sp, #12
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	462a      	mov	r2, r5
 8006732:	4b16      	ldr	r3, [pc, #88]	; (800678c <_vfiprintf_r+0x258>)
 8006734:	a904      	add	r1, sp, #16
 8006736:	4630      	mov	r0, r6
 8006738:	f7fd fe24 	bl	8004384 <_printf_float>
 800673c:	4607      	mov	r7, r0
 800673e:	1c78      	adds	r0, r7, #1
 8006740:	d1d6      	bne.n	80066f0 <_vfiprintf_r+0x1bc>
 8006742:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006744:	07d9      	lsls	r1, r3, #31
 8006746:	d405      	bmi.n	8006754 <_vfiprintf_r+0x220>
 8006748:	89ab      	ldrh	r3, [r5, #12]
 800674a:	059a      	lsls	r2, r3, #22
 800674c:	d402      	bmi.n	8006754 <_vfiprintf_r+0x220>
 800674e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006750:	f000 faaf 	bl	8006cb2 <__retarget_lock_release_recursive>
 8006754:	89ab      	ldrh	r3, [r5, #12]
 8006756:	065b      	lsls	r3, r3, #25
 8006758:	f53f af12 	bmi.w	8006580 <_vfiprintf_r+0x4c>
 800675c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800675e:	e711      	b.n	8006584 <_vfiprintf_r+0x50>
 8006760:	ab03      	add	r3, sp, #12
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	462a      	mov	r2, r5
 8006766:	4b09      	ldr	r3, [pc, #36]	; (800678c <_vfiprintf_r+0x258>)
 8006768:	a904      	add	r1, sp, #16
 800676a:	4630      	mov	r0, r6
 800676c:	f7fe f8ae 	bl	80048cc <_printf_i>
 8006770:	e7e4      	b.n	800673c <_vfiprintf_r+0x208>
 8006772:	bf00      	nop
 8006774:	080082d4 	.word	0x080082d4
 8006778:	080082f4 	.word	0x080082f4
 800677c:	080082b4 	.word	0x080082b4
 8006780:	0800815c 	.word	0x0800815c
 8006784:	08008166 	.word	0x08008166
 8006788:	08004385 	.word	0x08004385
 800678c:	0800650f 	.word	0x0800650f
 8006790:	08008162 	.word	0x08008162

08006794 <__swbuf_r>:
 8006794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006796:	460e      	mov	r6, r1
 8006798:	4614      	mov	r4, r2
 800679a:	4605      	mov	r5, r0
 800679c:	b118      	cbz	r0, 80067a6 <__swbuf_r+0x12>
 800679e:	6983      	ldr	r3, [r0, #24]
 80067a0:	b90b      	cbnz	r3, 80067a6 <__swbuf_r+0x12>
 80067a2:	f000 f9e7 	bl	8006b74 <__sinit>
 80067a6:	4b21      	ldr	r3, [pc, #132]	; (800682c <__swbuf_r+0x98>)
 80067a8:	429c      	cmp	r4, r3
 80067aa:	d12b      	bne.n	8006804 <__swbuf_r+0x70>
 80067ac:	686c      	ldr	r4, [r5, #4]
 80067ae:	69a3      	ldr	r3, [r4, #24]
 80067b0:	60a3      	str	r3, [r4, #8]
 80067b2:	89a3      	ldrh	r3, [r4, #12]
 80067b4:	071a      	lsls	r2, r3, #28
 80067b6:	d52f      	bpl.n	8006818 <__swbuf_r+0x84>
 80067b8:	6923      	ldr	r3, [r4, #16]
 80067ba:	b36b      	cbz	r3, 8006818 <__swbuf_r+0x84>
 80067bc:	6923      	ldr	r3, [r4, #16]
 80067be:	6820      	ldr	r0, [r4, #0]
 80067c0:	1ac0      	subs	r0, r0, r3
 80067c2:	6963      	ldr	r3, [r4, #20]
 80067c4:	b2f6      	uxtb	r6, r6
 80067c6:	4283      	cmp	r3, r0
 80067c8:	4637      	mov	r7, r6
 80067ca:	dc04      	bgt.n	80067d6 <__swbuf_r+0x42>
 80067cc:	4621      	mov	r1, r4
 80067ce:	4628      	mov	r0, r5
 80067d0:	f000 f93c 	bl	8006a4c <_fflush_r>
 80067d4:	bb30      	cbnz	r0, 8006824 <__swbuf_r+0x90>
 80067d6:	68a3      	ldr	r3, [r4, #8]
 80067d8:	3b01      	subs	r3, #1
 80067da:	60a3      	str	r3, [r4, #8]
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	6022      	str	r2, [r4, #0]
 80067e2:	701e      	strb	r6, [r3, #0]
 80067e4:	6963      	ldr	r3, [r4, #20]
 80067e6:	3001      	adds	r0, #1
 80067e8:	4283      	cmp	r3, r0
 80067ea:	d004      	beq.n	80067f6 <__swbuf_r+0x62>
 80067ec:	89a3      	ldrh	r3, [r4, #12]
 80067ee:	07db      	lsls	r3, r3, #31
 80067f0:	d506      	bpl.n	8006800 <__swbuf_r+0x6c>
 80067f2:	2e0a      	cmp	r6, #10
 80067f4:	d104      	bne.n	8006800 <__swbuf_r+0x6c>
 80067f6:	4621      	mov	r1, r4
 80067f8:	4628      	mov	r0, r5
 80067fa:	f000 f927 	bl	8006a4c <_fflush_r>
 80067fe:	b988      	cbnz	r0, 8006824 <__swbuf_r+0x90>
 8006800:	4638      	mov	r0, r7
 8006802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006804:	4b0a      	ldr	r3, [pc, #40]	; (8006830 <__swbuf_r+0x9c>)
 8006806:	429c      	cmp	r4, r3
 8006808:	d101      	bne.n	800680e <__swbuf_r+0x7a>
 800680a:	68ac      	ldr	r4, [r5, #8]
 800680c:	e7cf      	b.n	80067ae <__swbuf_r+0x1a>
 800680e:	4b09      	ldr	r3, [pc, #36]	; (8006834 <__swbuf_r+0xa0>)
 8006810:	429c      	cmp	r4, r3
 8006812:	bf08      	it	eq
 8006814:	68ec      	ldreq	r4, [r5, #12]
 8006816:	e7ca      	b.n	80067ae <__swbuf_r+0x1a>
 8006818:	4621      	mov	r1, r4
 800681a:	4628      	mov	r0, r5
 800681c:	f000 f81a 	bl	8006854 <__swsetup_r>
 8006820:	2800      	cmp	r0, #0
 8006822:	d0cb      	beq.n	80067bc <__swbuf_r+0x28>
 8006824:	f04f 37ff 	mov.w	r7, #4294967295
 8006828:	e7ea      	b.n	8006800 <__swbuf_r+0x6c>
 800682a:	bf00      	nop
 800682c:	080082d4 	.word	0x080082d4
 8006830:	080082f4 	.word	0x080082f4
 8006834:	080082b4 	.word	0x080082b4

08006838 <__ascii_wctomb>:
 8006838:	b149      	cbz	r1, 800684e <__ascii_wctomb+0x16>
 800683a:	2aff      	cmp	r2, #255	; 0xff
 800683c:	bf85      	ittet	hi
 800683e:	238a      	movhi	r3, #138	; 0x8a
 8006840:	6003      	strhi	r3, [r0, #0]
 8006842:	700a      	strbls	r2, [r1, #0]
 8006844:	f04f 30ff 	movhi.w	r0, #4294967295
 8006848:	bf98      	it	ls
 800684a:	2001      	movls	r0, #1
 800684c:	4770      	bx	lr
 800684e:	4608      	mov	r0, r1
 8006850:	4770      	bx	lr
	...

08006854 <__swsetup_r>:
 8006854:	4b32      	ldr	r3, [pc, #200]	; (8006920 <__swsetup_r+0xcc>)
 8006856:	b570      	push	{r4, r5, r6, lr}
 8006858:	681d      	ldr	r5, [r3, #0]
 800685a:	4606      	mov	r6, r0
 800685c:	460c      	mov	r4, r1
 800685e:	b125      	cbz	r5, 800686a <__swsetup_r+0x16>
 8006860:	69ab      	ldr	r3, [r5, #24]
 8006862:	b913      	cbnz	r3, 800686a <__swsetup_r+0x16>
 8006864:	4628      	mov	r0, r5
 8006866:	f000 f985 	bl	8006b74 <__sinit>
 800686a:	4b2e      	ldr	r3, [pc, #184]	; (8006924 <__swsetup_r+0xd0>)
 800686c:	429c      	cmp	r4, r3
 800686e:	d10f      	bne.n	8006890 <__swsetup_r+0x3c>
 8006870:	686c      	ldr	r4, [r5, #4]
 8006872:	89a3      	ldrh	r3, [r4, #12]
 8006874:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006878:	0719      	lsls	r1, r3, #28
 800687a:	d42c      	bmi.n	80068d6 <__swsetup_r+0x82>
 800687c:	06dd      	lsls	r5, r3, #27
 800687e:	d411      	bmi.n	80068a4 <__swsetup_r+0x50>
 8006880:	2309      	movs	r3, #9
 8006882:	6033      	str	r3, [r6, #0]
 8006884:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006888:	81a3      	strh	r3, [r4, #12]
 800688a:	f04f 30ff 	mov.w	r0, #4294967295
 800688e:	e03e      	b.n	800690e <__swsetup_r+0xba>
 8006890:	4b25      	ldr	r3, [pc, #148]	; (8006928 <__swsetup_r+0xd4>)
 8006892:	429c      	cmp	r4, r3
 8006894:	d101      	bne.n	800689a <__swsetup_r+0x46>
 8006896:	68ac      	ldr	r4, [r5, #8]
 8006898:	e7eb      	b.n	8006872 <__swsetup_r+0x1e>
 800689a:	4b24      	ldr	r3, [pc, #144]	; (800692c <__swsetup_r+0xd8>)
 800689c:	429c      	cmp	r4, r3
 800689e:	bf08      	it	eq
 80068a0:	68ec      	ldreq	r4, [r5, #12]
 80068a2:	e7e6      	b.n	8006872 <__swsetup_r+0x1e>
 80068a4:	0758      	lsls	r0, r3, #29
 80068a6:	d512      	bpl.n	80068ce <__swsetup_r+0x7a>
 80068a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068aa:	b141      	cbz	r1, 80068be <__swsetup_r+0x6a>
 80068ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068b0:	4299      	cmp	r1, r3
 80068b2:	d002      	beq.n	80068ba <__swsetup_r+0x66>
 80068b4:	4630      	mov	r0, r6
 80068b6:	f7ff fb6f 	bl	8005f98 <_free_r>
 80068ba:	2300      	movs	r3, #0
 80068bc:	6363      	str	r3, [r4, #52]	; 0x34
 80068be:	89a3      	ldrh	r3, [r4, #12]
 80068c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068c4:	81a3      	strh	r3, [r4, #12]
 80068c6:	2300      	movs	r3, #0
 80068c8:	6063      	str	r3, [r4, #4]
 80068ca:	6923      	ldr	r3, [r4, #16]
 80068cc:	6023      	str	r3, [r4, #0]
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	f043 0308 	orr.w	r3, r3, #8
 80068d4:	81a3      	strh	r3, [r4, #12]
 80068d6:	6923      	ldr	r3, [r4, #16]
 80068d8:	b94b      	cbnz	r3, 80068ee <__swsetup_r+0x9a>
 80068da:	89a3      	ldrh	r3, [r4, #12]
 80068dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068e4:	d003      	beq.n	80068ee <__swsetup_r+0x9a>
 80068e6:	4621      	mov	r1, r4
 80068e8:	4630      	mov	r0, r6
 80068ea:	f000 fa07 	bl	8006cfc <__smakebuf_r>
 80068ee:	89a0      	ldrh	r0, [r4, #12]
 80068f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068f4:	f010 0301 	ands.w	r3, r0, #1
 80068f8:	d00a      	beq.n	8006910 <__swsetup_r+0xbc>
 80068fa:	2300      	movs	r3, #0
 80068fc:	60a3      	str	r3, [r4, #8]
 80068fe:	6963      	ldr	r3, [r4, #20]
 8006900:	425b      	negs	r3, r3
 8006902:	61a3      	str	r3, [r4, #24]
 8006904:	6923      	ldr	r3, [r4, #16]
 8006906:	b943      	cbnz	r3, 800691a <__swsetup_r+0xc6>
 8006908:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800690c:	d1ba      	bne.n	8006884 <__swsetup_r+0x30>
 800690e:	bd70      	pop	{r4, r5, r6, pc}
 8006910:	0781      	lsls	r1, r0, #30
 8006912:	bf58      	it	pl
 8006914:	6963      	ldrpl	r3, [r4, #20]
 8006916:	60a3      	str	r3, [r4, #8]
 8006918:	e7f4      	b.n	8006904 <__swsetup_r+0xb0>
 800691a:	2000      	movs	r0, #0
 800691c:	e7f7      	b.n	800690e <__swsetup_r+0xba>
 800691e:	bf00      	nop
 8006920:	20000018 	.word	0x20000018
 8006924:	080082d4 	.word	0x080082d4
 8006928:	080082f4 	.word	0x080082f4
 800692c:	080082b4 	.word	0x080082b4

08006930 <abort>:
 8006930:	b508      	push	{r3, lr}
 8006932:	2006      	movs	r0, #6
 8006934:	f000 fa52 	bl	8006ddc <raise>
 8006938:	2001      	movs	r0, #1
 800693a:	f7fb fbab 	bl	8002094 <_exit>
	...

08006940 <__sflush_r>:
 8006940:	898a      	ldrh	r2, [r1, #12]
 8006942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006946:	4605      	mov	r5, r0
 8006948:	0710      	lsls	r0, r2, #28
 800694a:	460c      	mov	r4, r1
 800694c:	d458      	bmi.n	8006a00 <__sflush_r+0xc0>
 800694e:	684b      	ldr	r3, [r1, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	dc05      	bgt.n	8006960 <__sflush_r+0x20>
 8006954:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006956:	2b00      	cmp	r3, #0
 8006958:	dc02      	bgt.n	8006960 <__sflush_r+0x20>
 800695a:	2000      	movs	r0, #0
 800695c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006962:	2e00      	cmp	r6, #0
 8006964:	d0f9      	beq.n	800695a <__sflush_r+0x1a>
 8006966:	2300      	movs	r3, #0
 8006968:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800696c:	682f      	ldr	r7, [r5, #0]
 800696e:	602b      	str	r3, [r5, #0]
 8006970:	d032      	beq.n	80069d8 <__sflush_r+0x98>
 8006972:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	075a      	lsls	r2, r3, #29
 8006978:	d505      	bpl.n	8006986 <__sflush_r+0x46>
 800697a:	6863      	ldr	r3, [r4, #4]
 800697c:	1ac0      	subs	r0, r0, r3
 800697e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006980:	b10b      	cbz	r3, 8006986 <__sflush_r+0x46>
 8006982:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006984:	1ac0      	subs	r0, r0, r3
 8006986:	2300      	movs	r3, #0
 8006988:	4602      	mov	r2, r0
 800698a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800698c:	6a21      	ldr	r1, [r4, #32]
 800698e:	4628      	mov	r0, r5
 8006990:	47b0      	blx	r6
 8006992:	1c43      	adds	r3, r0, #1
 8006994:	89a3      	ldrh	r3, [r4, #12]
 8006996:	d106      	bne.n	80069a6 <__sflush_r+0x66>
 8006998:	6829      	ldr	r1, [r5, #0]
 800699a:	291d      	cmp	r1, #29
 800699c:	d82c      	bhi.n	80069f8 <__sflush_r+0xb8>
 800699e:	4a2a      	ldr	r2, [pc, #168]	; (8006a48 <__sflush_r+0x108>)
 80069a0:	40ca      	lsrs	r2, r1
 80069a2:	07d6      	lsls	r6, r2, #31
 80069a4:	d528      	bpl.n	80069f8 <__sflush_r+0xb8>
 80069a6:	2200      	movs	r2, #0
 80069a8:	6062      	str	r2, [r4, #4]
 80069aa:	04d9      	lsls	r1, r3, #19
 80069ac:	6922      	ldr	r2, [r4, #16]
 80069ae:	6022      	str	r2, [r4, #0]
 80069b0:	d504      	bpl.n	80069bc <__sflush_r+0x7c>
 80069b2:	1c42      	adds	r2, r0, #1
 80069b4:	d101      	bne.n	80069ba <__sflush_r+0x7a>
 80069b6:	682b      	ldr	r3, [r5, #0]
 80069b8:	b903      	cbnz	r3, 80069bc <__sflush_r+0x7c>
 80069ba:	6560      	str	r0, [r4, #84]	; 0x54
 80069bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069be:	602f      	str	r7, [r5, #0]
 80069c0:	2900      	cmp	r1, #0
 80069c2:	d0ca      	beq.n	800695a <__sflush_r+0x1a>
 80069c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069c8:	4299      	cmp	r1, r3
 80069ca:	d002      	beq.n	80069d2 <__sflush_r+0x92>
 80069cc:	4628      	mov	r0, r5
 80069ce:	f7ff fae3 	bl	8005f98 <_free_r>
 80069d2:	2000      	movs	r0, #0
 80069d4:	6360      	str	r0, [r4, #52]	; 0x34
 80069d6:	e7c1      	b.n	800695c <__sflush_r+0x1c>
 80069d8:	6a21      	ldr	r1, [r4, #32]
 80069da:	2301      	movs	r3, #1
 80069dc:	4628      	mov	r0, r5
 80069de:	47b0      	blx	r6
 80069e0:	1c41      	adds	r1, r0, #1
 80069e2:	d1c7      	bne.n	8006974 <__sflush_r+0x34>
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d0c4      	beq.n	8006974 <__sflush_r+0x34>
 80069ea:	2b1d      	cmp	r3, #29
 80069ec:	d001      	beq.n	80069f2 <__sflush_r+0xb2>
 80069ee:	2b16      	cmp	r3, #22
 80069f0:	d101      	bne.n	80069f6 <__sflush_r+0xb6>
 80069f2:	602f      	str	r7, [r5, #0]
 80069f4:	e7b1      	b.n	800695a <__sflush_r+0x1a>
 80069f6:	89a3      	ldrh	r3, [r4, #12]
 80069f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069fc:	81a3      	strh	r3, [r4, #12]
 80069fe:	e7ad      	b.n	800695c <__sflush_r+0x1c>
 8006a00:	690f      	ldr	r7, [r1, #16]
 8006a02:	2f00      	cmp	r7, #0
 8006a04:	d0a9      	beq.n	800695a <__sflush_r+0x1a>
 8006a06:	0793      	lsls	r3, r2, #30
 8006a08:	680e      	ldr	r6, [r1, #0]
 8006a0a:	bf08      	it	eq
 8006a0c:	694b      	ldreq	r3, [r1, #20]
 8006a0e:	600f      	str	r7, [r1, #0]
 8006a10:	bf18      	it	ne
 8006a12:	2300      	movne	r3, #0
 8006a14:	eba6 0807 	sub.w	r8, r6, r7
 8006a18:	608b      	str	r3, [r1, #8]
 8006a1a:	f1b8 0f00 	cmp.w	r8, #0
 8006a1e:	dd9c      	ble.n	800695a <__sflush_r+0x1a>
 8006a20:	6a21      	ldr	r1, [r4, #32]
 8006a22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a24:	4643      	mov	r3, r8
 8006a26:	463a      	mov	r2, r7
 8006a28:	4628      	mov	r0, r5
 8006a2a:	47b0      	blx	r6
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	dc06      	bgt.n	8006a3e <__sflush_r+0xfe>
 8006a30:	89a3      	ldrh	r3, [r4, #12]
 8006a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a36:	81a3      	strh	r3, [r4, #12]
 8006a38:	f04f 30ff 	mov.w	r0, #4294967295
 8006a3c:	e78e      	b.n	800695c <__sflush_r+0x1c>
 8006a3e:	4407      	add	r7, r0
 8006a40:	eba8 0800 	sub.w	r8, r8, r0
 8006a44:	e7e9      	b.n	8006a1a <__sflush_r+0xda>
 8006a46:	bf00      	nop
 8006a48:	20400001 	.word	0x20400001

08006a4c <_fflush_r>:
 8006a4c:	b538      	push	{r3, r4, r5, lr}
 8006a4e:	690b      	ldr	r3, [r1, #16]
 8006a50:	4605      	mov	r5, r0
 8006a52:	460c      	mov	r4, r1
 8006a54:	b913      	cbnz	r3, 8006a5c <_fflush_r+0x10>
 8006a56:	2500      	movs	r5, #0
 8006a58:	4628      	mov	r0, r5
 8006a5a:	bd38      	pop	{r3, r4, r5, pc}
 8006a5c:	b118      	cbz	r0, 8006a66 <_fflush_r+0x1a>
 8006a5e:	6983      	ldr	r3, [r0, #24]
 8006a60:	b90b      	cbnz	r3, 8006a66 <_fflush_r+0x1a>
 8006a62:	f000 f887 	bl	8006b74 <__sinit>
 8006a66:	4b14      	ldr	r3, [pc, #80]	; (8006ab8 <_fflush_r+0x6c>)
 8006a68:	429c      	cmp	r4, r3
 8006a6a:	d11b      	bne.n	8006aa4 <_fflush_r+0x58>
 8006a6c:	686c      	ldr	r4, [r5, #4]
 8006a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d0ef      	beq.n	8006a56 <_fflush_r+0xa>
 8006a76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a78:	07d0      	lsls	r0, r2, #31
 8006a7a:	d404      	bmi.n	8006a86 <_fflush_r+0x3a>
 8006a7c:	0599      	lsls	r1, r3, #22
 8006a7e:	d402      	bmi.n	8006a86 <_fflush_r+0x3a>
 8006a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a82:	f000 f915 	bl	8006cb0 <__retarget_lock_acquire_recursive>
 8006a86:	4628      	mov	r0, r5
 8006a88:	4621      	mov	r1, r4
 8006a8a:	f7ff ff59 	bl	8006940 <__sflush_r>
 8006a8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a90:	07da      	lsls	r2, r3, #31
 8006a92:	4605      	mov	r5, r0
 8006a94:	d4e0      	bmi.n	8006a58 <_fflush_r+0xc>
 8006a96:	89a3      	ldrh	r3, [r4, #12]
 8006a98:	059b      	lsls	r3, r3, #22
 8006a9a:	d4dd      	bmi.n	8006a58 <_fflush_r+0xc>
 8006a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a9e:	f000 f908 	bl	8006cb2 <__retarget_lock_release_recursive>
 8006aa2:	e7d9      	b.n	8006a58 <_fflush_r+0xc>
 8006aa4:	4b05      	ldr	r3, [pc, #20]	; (8006abc <_fflush_r+0x70>)
 8006aa6:	429c      	cmp	r4, r3
 8006aa8:	d101      	bne.n	8006aae <_fflush_r+0x62>
 8006aaa:	68ac      	ldr	r4, [r5, #8]
 8006aac:	e7df      	b.n	8006a6e <_fflush_r+0x22>
 8006aae:	4b04      	ldr	r3, [pc, #16]	; (8006ac0 <_fflush_r+0x74>)
 8006ab0:	429c      	cmp	r4, r3
 8006ab2:	bf08      	it	eq
 8006ab4:	68ec      	ldreq	r4, [r5, #12]
 8006ab6:	e7da      	b.n	8006a6e <_fflush_r+0x22>
 8006ab8:	080082d4 	.word	0x080082d4
 8006abc:	080082f4 	.word	0x080082f4
 8006ac0:	080082b4 	.word	0x080082b4

08006ac4 <std>:
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	b510      	push	{r4, lr}
 8006ac8:	4604      	mov	r4, r0
 8006aca:	e9c0 3300 	strd	r3, r3, [r0]
 8006ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ad2:	6083      	str	r3, [r0, #8]
 8006ad4:	8181      	strh	r1, [r0, #12]
 8006ad6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ad8:	81c2      	strh	r2, [r0, #14]
 8006ada:	6183      	str	r3, [r0, #24]
 8006adc:	4619      	mov	r1, r3
 8006ade:	2208      	movs	r2, #8
 8006ae0:	305c      	adds	r0, #92	; 0x5c
 8006ae2:	f7fd fba7 	bl	8004234 <memset>
 8006ae6:	4b05      	ldr	r3, [pc, #20]	; (8006afc <std+0x38>)
 8006ae8:	6263      	str	r3, [r4, #36]	; 0x24
 8006aea:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <std+0x3c>)
 8006aec:	62a3      	str	r3, [r4, #40]	; 0x28
 8006aee:	4b05      	ldr	r3, [pc, #20]	; (8006b04 <std+0x40>)
 8006af0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006af2:	4b05      	ldr	r3, [pc, #20]	; (8006b08 <std+0x44>)
 8006af4:	6224      	str	r4, [r4, #32]
 8006af6:	6323      	str	r3, [r4, #48]	; 0x30
 8006af8:	bd10      	pop	{r4, pc}
 8006afa:	bf00      	nop
 8006afc:	08006e15 	.word	0x08006e15
 8006b00:	08006e37 	.word	0x08006e37
 8006b04:	08006e6f 	.word	0x08006e6f
 8006b08:	08006e93 	.word	0x08006e93

08006b0c <_cleanup_r>:
 8006b0c:	4901      	ldr	r1, [pc, #4]	; (8006b14 <_cleanup_r+0x8>)
 8006b0e:	f000 b8af 	b.w	8006c70 <_fwalk_reent>
 8006b12:	bf00      	nop
 8006b14:	08006a4d 	.word	0x08006a4d

08006b18 <__sfmoreglue>:
 8006b18:	b570      	push	{r4, r5, r6, lr}
 8006b1a:	1e4a      	subs	r2, r1, #1
 8006b1c:	2568      	movs	r5, #104	; 0x68
 8006b1e:	4355      	muls	r5, r2
 8006b20:	460e      	mov	r6, r1
 8006b22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b26:	f7ff fa87 	bl	8006038 <_malloc_r>
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	b140      	cbz	r0, 8006b40 <__sfmoreglue+0x28>
 8006b2e:	2100      	movs	r1, #0
 8006b30:	e9c0 1600 	strd	r1, r6, [r0]
 8006b34:	300c      	adds	r0, #12
 8006b36:	60a0      	str	r0, [r4, #8]
 8006b38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b3c:	f7fd fb7a 	bl	8004234 <memset>
 8006b40:	4620      	mov	r0, r4
 8006b42:	bd70      	pop	{r4, r5, r6, pc}

08006b44 <__sfp_lock_acquire>:
 8006b44:	4801      	ldr	r0, [pc, #4]	; (8006b4c <__sfp_lock_acquire+0x8>)
 8006b46:	f000 b8b3 	b.w	8006cb0 <__retarget_lock_acquire_recursive>
 8006b4a:	bf00      	nop
 8006b4c:	20000298 	.word	0x20000298

08006b50 <__sfp_lock_release>:
 8006b50:	4801      	ldr	r0, [pc, #4]	; (8006b58 <__sfp_lock_release+0x8>)
 8006b52:	f000 b8ae 	b.w	8006cb2 <__retarget_lock_release_recursive>
 8006b56:	bf00      	nop
 8006b58:	20000298 	.word	0x20000298

08006b5c <__sinit_lock_acquire>:
 8006b5c:	4801      	ldr	r0, [pc, #4]	; (8006b64 <__sinit_lock_acquire+0x8>)
 8006b5e:	f000 b8a7 	b.w	8006cb0 <__retarget_lock_acquire_recursive>
 8006b62:	bf00      	nop
 8006b64:	20000293 	.word	0x20000293

08006b68 <__sinit_lock_release>:
 8006b68:	4801      	ldr	r0, [pc, #4]	; (8006b70 <__sinit_lock_release+0x8>)
 8006b6a:	f000 b8a2 	b.w	8006cb2 <__retarget_lock_release_recursive>
 8006b6e:	bf00      	nop
 8006b70:	20000293 	.word	0x20000293

08006b74 <__sinit>:
 8006b74:	b510      	push	{r4, lr}
 8006b76:	4604      	mov	r4, r0
 8006b78:	f7ff fff0 	bl	8006b5c <__sinit_lock_acquire>
 8006b7c:	69a3      	ldr	r3, [r4, #24]
 8006b7e:	b11b      	cbz	r3, 8006b88 <__sinit+0x14>
 8006b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b84:	f7ff bff0 	b.w	8006b68 <__sinit_lock_release>
 8006b88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b8c:	6523      	str	r3, [r4, #80]	; 0x50
 8006b8e:	4b13      	ldr	r3, [pc, #76]	; (8006bdc <__sinit+0x68>)
 8006b90:	4a13      	ldr	r2, [pc, #76]	; (8006be0 <__sinit+0x6c>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b96:	42a3      	cmp	r3, r4
 8006b98:	bf04      	itt	eq
 8006b9a:	2301      	moveq	r3, #1
 8006b9c:	61a3      	streq	r3, [r4, #24]
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f000 f820 	bl	8006be4 <__sfp>
 8006ba4:	6060      	str	r0, [r4, #4]
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f000 f81c 	bl	8006be4 <__sfp>
 8006bac:	60a0      	str	r0, [r4, #8]
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f000 f818 	bl	8006be4 <__sfp>
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	60e0      	str	r0, [r4, #12]
 8006bb8:	2104      	movs	r1, #4
 8006bba:	6860      	ldr	r0, [r4, #4]
 8006bbc:	f7ff ff82 	bl	8006ac4 <std>
 8006bc0:	68a0      	ldr	r0, [r4, #8]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	2109      	movs	r1, #9
 8006bc6:	f7ff ff7d 	bl	8006ac4 <std>
 8006bca:	68e0      	ldr	r0, [r4, #12]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	2112      	movs	r1, #18
 8006bd0:	f7ff ff78 	bl	8006ac4 <std>
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	61a3      	str	r3, [r4, #24]
 8006bd8:	e7d2      	b.n	8006b80 <__sinit+0xc>
 8006bda:	bf00      	nop
 8006bdc:	08007f34 	.word	0x08007f34
 8006be0:	08006b0d 	.word	0x08006b0d

08006be4 <__sfp>:
 8006be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be6:	4607      	mov	r7, r0
 8006be8:	f7ff ffac 	bl	8006b44 <__sfp_lock_acquire>
 8006bec:	4b1e      	ldr	r3, [pc, #120]	; (8006c68 <__sfp+0x84>)
 8006bee:	681e      	ldr	r6, [r3, #0]
 8006bf0:	69b3      	ldr	r3, [r6, #24]
 8006bf2:	b913      	cbnz	r3, 8006bfa <__sfp+0x16>
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	f7ff ffbd 	bl	8006b74 <__sinit>
 8006bfa:	3648      	adds	r6, #72	; 0x48
 8006bfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	d503      	bpl.n	8006c0c <__sfp+0x28>
 8006c04:	6833      	ldr	r3, [r6, #0]
 8006c06:	b30b      	cbz	r3, 8006c4c <__sfp+0x68>
 8006c08:	6836      	ldr	r6, [r6, #0]
 8006c0a:	e7f7      	b.n	8006bfc <__sfp+0x18>
 8006c0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c10:	b9d5      	cbnz	r5, 8006c48 <__sfp+0x64>
 8006c12:	4b16      	ldr	r3, [pc, #88]	; (8006c6c <__sfp+0x88>)
 8006c14:	60e3      	str	r3, [r4, #12]
 8006c16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c1a:	6665      	str	r5, [r4, #100]	; 0x64
 8006c1c:	f000 f847 	bl	8006cae <__retarget_lock_init_recursive>
 8006c20:	f7ff ff96 	bl	8006b50 <__sfp_lock_release>
 8006c24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c2c:	6025      	str	r5, [r4, #0]
 8006c2e:	61a5      	str	r5, [r4, #24]
 8006c30:	2208      	movs	r2, #8
 8006c32:	4629      	mov	r1, r5
 8006c34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c38:	f7fd fafc 	bl	8004234 <memset>
 8006c3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c44:	4620      	mov	r0, r4
 8006c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c48:	3468      	adds	r4, #104	; 0x68
 8006c4a:	e7d9      	b.n	8006c00 <__sfp+0x1c>
 8006c4c:	2104      	movs	r1, #4
 8006c4e:	4638      	mov	r0, r7
 8006c50:	f7ff ff62 	bl	8006b18 <__sfmoreglue>
 8006c54:	4604      	mov	r4, r0
 8006c56:	6030      	str	r0, [r6, #0]
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	d1d5      	bne.n	8006c08 <__sfp+0x24>
 8006c5c:	f7ff ff78 	bl	8006b50 <__sfp_lock_release>
 8006c60:	230c      	movs	r3, #12
 8006c62:	603b      	str	r3, [r7, #0]
 8006c64:	e7ee      	b.n	8006c44 <__sfp+0x60>
 8006c66:	bf00      	nop
 8006c68:	08007f34 	.word	0x08007f34
 8006c6c:	ffff0001 	.word	0xffff0001

08006c70 <_fwalk_reent>:
 8006c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c74:	4606      	mov	r6, r0
 8006c76:	4688      	mov	r8, r1
 8006c78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c7c:	2700      	movs	r7, #0
 8006c7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c82:	f1b9 0901 	subs.w	r9, r9, #1
 8006c86:	d505      	bpl.n	8006c94 <_fwalk_reent+0x24>
 8006c88:	6824      	ldr	r4, [r4, #0]
 8006c8a:	2c00      	cmp	r4, #0
 8006c8c:	d1f7      	bne.n	8006c7e <_fwalk_reent+0xe>
 8006c8e:	4638      	mov	r0, r7
 8006c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c94:	89ab      	ldrh	r3, [r5, #12]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d907      	bls.n	8006caa <_fwalk_reent+0x3a>
 8006c9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	d003      	beq.n	8006caa <_fwalk_reent+0x3a>
 8006ca2:	4629      	mov	r1, r5
 8006ca4:	4630      	mov	r0, r6
 8006ca6:	47c0      	blx	r8
 8006ca8:	4307      	orrs	r7, r0
 8006caa:	3568      	adds	r5, #104	; 0x68
 8006cac:	e7e9      	b.n	8006c82 <_fwalk_reent+0x12>

08006cae <__retarget_lock_init_recursive>:
 8006cae:	4770      	bx	lr

08006cb0 <__retarget_lock_acquire_recursive>:
 8006cb0:	4770      	bx	lr

08006cb2 <__retarget_lock_release_recursive>:
 8006cb2:	4770      	bx	lr

08006cb4 <__swhatbuf_r>:
 8006cb4:	b570      	push	{r4, r5, r6, lr}
 8006cb6:	460e      	mov	r6, r1
 8006cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cbc:	2900      	cmp	r1, #0
 8006cbe:	b096      	sub	sp, #88	; 0x58
 8006cc0:	4614      	mov	r4, r2
 8006cc2:	461d      	mov	r5, r3
 8006cc4:	da07      	bge.n	8006cd6 <__swhatbuf_r+0x22>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	602b      	str	r3, [r5, #0]
 8006cca:	89b3      	ldrh	r3, [r6, #12]
 8006ccc:	061a      	lsls	r2, r3, #24
 8006cce:	d410      	bmi.n	8006cf2 <__swhatbuf_r+0x3e>
 8006cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cd4:	e00e      	b.n	8006cf4 <__swhatbuf_r+0x40>
 8006cd6:	466a      	mov	r2, sp
 8006cd8:	f000 f902 	bl	8006ee0 <_fstat_r>
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	dbf2      	blt.n	8006cc6 <__swhatbuf_r+0x12>
 8006ce0:	9a01      	ldr	r2, [sp, #4]
 8006ce2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ce6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006cea:	425a      	negs	r2, r3
 8006cec:	415a      	adcs	r2, r3
 8006cee:	602a      	str	r2, [r5, #0]
 8006cf0:	e7ee      	b.n	8006cd0 <__swhatbuf_r+0x1c>
 8006cf2:	2340      	movs	r3, #64	; 0x40
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	6023      	str	r3, [r4, #0]
 8006cf8:	b016      	add	sp, #88	; 0x58
 8006cfa:	bd70      	pop	{r4, r5, r6, pc}

08006cfc <__smakebuf_r>:
 8006cfc:	898b      	ldrh	r3, [r1, #12]
 8006cfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d00:	079d      	lsls	r5, r3, #30
 8006d02:	4606      	mov	r6, r0
 8006d04:	460c      	mov	r4, r1
 8006d06:	d507      	bpl.n	8006d18 <__smakebuf_r+0x1c>
 8006d08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	6123      	str	r3, [r4, #16]
 8006d10:	2301      	movs	r3, #1
 8006d12:	6163      	str	r3, [r4, #20]
 8006d14:	b002      	add	sp, #8
 8006d16:	bd70      	pop	{r4, r5, r6, pc}
 8006d18:	ab01      	add	r3, sp, #4
 8006d1a:	466a      	mov	r2, sp
 8006d1c:	f7ff ffca 	bl	8006cb4 <__swhatbuf_r>
 8006d20:	9900      	ldr	r1, [sp, #0]
 8006d22:	4605      	mov	r5, r0
 8006d24:	4630      	mov	r0, r6
 8006d26:	f7ff f987 	bl	8006038 <_malloc_r>
 8006d2a:	b948      	cbnz	r0, 8006d40 <__smakebuf_r+0x44>
 8006d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d30:	059a      	lsls	r2, r3, #22
 8006d32:	d4ef      	bmi.n	8006d14 <__smakebuf_r+0x18>
 8006d34:	f023 0303 	bic.w	r3, r3, #3
 8006d38:	f043 0302 	orr.w	r3, r3, #2
 8006d3c:	81a3      	strh	r3, [r4, #12]
 8006d3e:	e7e3      	b.n	8006d08 <__smakebuf_r+0xc>
 8006d40:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <__smakebuf_r+0x7c>)
 8006d42:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d44:	89a3      	ldrh	r3, [r4, #12]
 8006d46:	6020      	str	r0, [r4, #0]
 8006d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d4c:	81a3      	strh	r3, [r4, #12]
 8006d4e:	9b00      	ldr	r3, [sp, #0]
 8006d50:	6163      	str	r3, [r4, #20]
 8006d52:	9b01      	ldr	r3, [sp, #4]
 8006d54:	6120      	str	r0, [r4, #16]
 8006d56:	b15b      	cbz	r3, 8006d70 <__smakebuf_r+0x74>
 8006d58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	f000 f8d1 	bl	8006f04 <_isatty_r>
 8006d62:	b128      	cbz	r0, 8006d70 <__smakebuf_r+0x74>
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	f023 0303 	bic.w	r3, r3, #3
 8006d6a:	f043 0301 	orr.w	r3, r3, #1
 8006d6e:	81a3      	strh	r3, [r4, #12]
 8006d70:	89a0      	ldrh	r0, [r4, #12]
 8006d72:	4305      	orrs	r5, r0
 8006d74:	81a5      	strh	r5, [r4, #12]
 8006d76:	e7cd      	b.n	8006d14 <__smakebuf_r+0x18>
 8006d78:	08006b0d 	.word	0x08006b0d

08006d7c <_malloc_usable_size_r>:
 8006d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d80:	1f18      	subs	r0, r3, #4
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	bfbc      	itt	lt
 8006d86:	580b      	ldrlt	r3, [r1, r0]
 8006d88:	18c0      	addlt	r0, r0, r3
 8006d8a:	4770      	bx	lr

08006d8c <_raise_r>:
 8006d8c:	291f      	cmp	r1, #31
 8006d8e:	b538      	push	{r3, r4, r5, lr}
 8006d90:	4604      	mov	r4, r0
 8006d92:	460d      	mov	r5, r1
 8006d94:	d904      	bls.n	8006da0 <_raise_r+0x14>
 8006d96:	2316      	movs	r3, #22
 8006d98:	6003      	str	r3, [r0, #0]
 8006d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d9e:	bd38      	pop	{r3, r4, r5, pc}
 8006da0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006da2:	b112      	cbz	r2, 8006daa <_raise_r+0x1e>
 8006da4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006da8:	b94b      	cbnz	r3, 8006dbe <_raise_r+0x32>
 8006daa:	4620      	mov	r0, r4
 8006dac:	f000 f830 	bl	8006e10 <_getpid_r>
 8006db0:	462a      	mov	r2, r5
 8006db2:	4601      	mov	r1, r0
 8006db4:	4620      	mov	r0, r4
 8006db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dba:	f000 b817 	b.w	8006dec <_kill_r>
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d00a      	beq.n	8006dd8 <_raise_r+0x4c>
 8006dc2:	1c59      	adds	r1, r3, #1
 8006dc4:	d103      	bne.n	8006dce <_raise_r+0x42>
 8006dc6:	2316      	movs	r3, #22
 8006dc8:	6003      	str	r3, [r0, #0]
 8006dca:	2001      	movs	r0, #1
 8006dcc:	e7e7      	b.n	8006d9e <_raise_r+0x12>
 8006dce:	2400      	movs	r4, #0
 8006dd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	4798      	blx	r3
 8006dd8:	2000      	movs	r0, #0
 8006dda:	e7e0      	b.n	8006d9e <_raise_r+0x12>

08006ddc <raise>:
 8006ddc:	4b02      	ldr	r3, [pc, #8]	; (8006de8 <raise+0xc>)
 8006dde:	4601      	mov	r1, r0
 8006de0:	6818      	ldr	r0, [r3, #0]
 8006de2:	f7ff bfd3 	b.w	8006d8c <_raise_r>
 8006de6:	bf00      	nop
 8006de8:	20000018 	.word	0x20000018

08006dec <_kill_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	4d07      	ldr	r5, [pc, #28]	; (8006e0c <_kill_r+0x20>)
 8006df0:	2300      	movs	r3, #0
 8006df2:	4604      	mov	r4, r0
 8006df4:	4608      	mov	r0, r1
 8006df6:	4611      	mov	r1, r2
 8006df8:	602b      	str	r3, [r5, #0]
 8006dfa:	f7fb f93b 	bl	8002074 <_kill>
 8006dfe:	1c43      	adds	r3, r0, #1
 8006e00:	d102      	bne.n	8006e08 <_kill_r+0x1c>
 8006e02:	682b      	ldr	r3, [r5, #0]
 8006e04:	b103      	cbz	r3, 8006e08 <_kill_r+0x1c>
 8006e06:	6023      	str	r3, [r4, #0]
 8006e08:	bd38      	pop	{r3, r4, r5, pc}
 8006e0a:	bf00      	nop
 8006e0c:	2000028c 	.word	0x2000028c

08006e10 <_getpid_r>:
 8006e10:	f7fb b928 	b.w	8002064 <_getpid>

08006e14 <__sread>:
 8006e14:	b510      	push	{r4, lr}
 8006e16:	460c      	mov	r4, r1
 8006e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e1c:	f000 f894 	bl	8006f48 <_read_r>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	bfab      	itete	ge
 8006e24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e26:	89a3      	ldrhlt	r3, [r4, #12]
 8006e28:	181b      	addge	r3, r3, r0
 8006e2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e2e:	bfac      	ite	ge
 8006e30:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e32:	81a3      	strhlt	r3, [r4, #12]
 8006e34:	bd10      	pop	{r4, pc}

08006e36 <__swrite>:
 8006e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e3a:	461f      	mov	r7, r3
 8006e3c:	898b      	ldrh	r3, [r1, #12]
 8006e3e:	05db      	lsls	r3, r3, #23
 8006e40:	4605      	mov	r5, r0
 8006e42:	460c      	mov	r4, r1
 8006e44:	4616      	mov	r6, r2
 8006e46:	d505      	bpl.n	8006e54 <__swrite+0x1e>
 8006e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f000 f868 	bl	8006f24 <_lseek_r>
 8006e54:	89a3      	ldrh	r3, [r4, #12]
 8006e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e5e:	81a3      	strh	r3, [r4, #12]
 8006e60:	4632      	mov	r2, r6
 8006e62:	463b      	mov	r3, r7
 8006e64:	4628      	mov	r0, r5
 8006e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e6a:	f000 b817 	b.w	8006e9c <_write_r>

08006e6e <__sseek>:
 8006e6e:	b510      	push	{r4, lr}
 8006e70:	460c      	mov	r4, r1
 8006e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e76:	f000 f855 	bl	8006f24 <_lseek_r>
 8006e7a:	1c43      	adds	r3, r0, #1
 8006e7c:	89a3      	ldrh	r3, [r4, #12]
 8006e7e:	bf15      	itete	ne
 8006e80:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e8a:	81a3      	strheq	r3, [r4, #12]
 8006e8c:	bf18      	it	ne
 8006e8e:	81a3      	strhne	r3, [r4, #12]
 8006e90:	bd10      	pop	{r4, pc}

08006e92 <__sclose>:
 8006e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e96:	f000 b813 	b.w	8006ec0 <_close_r>
	...

08006e9c <_write_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4d07      	ldr	r5, [pc, #28]	; (8006ebc <_write_r+0x20>)
 8006ea0:	4604      	mov	r4, r0
 8006ea2:	4608      	mov	r0, r1
 8006ea4:	4611      	mov	r1, r2
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	602a      	str	r2, [r5, #0]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	f7fb f919 	bl	80020e2 <_write>
 8006eb0:	1c43      	adds	r3, r0, #1
 8006eb2:	d102      	bne.n	8006eba <_write_r+0x1e>
 8006eb4:	682b      	ldr	r3, [r5, #0]
 8006eb6:	b103      	cbz	r3, 8006eba <_write_r+0x1e>
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	bd38      	pop	{r3, r4, r5, pc}
 8006ebc:	2000028c 	.word	0x2000028c

08006ec0 <_close_r>:
 8006ec0:	b538      	push	{r3, r4, r5, lr}
 8006ec2:	4d06      	ldr	r5, [pc, #24]	; (8006edc <_close_r+0x1c>)
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	4608      	mov	r0, r1
 8006eca:	602b      	str	r3, [r5, #0]
 8006ecc:	f7fb f925 	bl	800211a <_close>
 8006ed0:	1c43      	adds	r3, r0, #1
 8006ed2:	d102      	bne.n	8006eda <_close_r+0x1a>
 8006ed4:	682b      	ldr	r3, [r5, #0]
 8006ed6:	b103      	cbz	r3, 8006eda <_close_r+0x1a>
 8006ed8:	6023      	str	r3, [r4, #0]
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	2000028c 	.word	0x2000028c

08006ee0 <_fstat_r>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	4d07      	ldr	r5, [pc, #28]	; (8006f00 <_fstat_r+0x20>)
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	4608      	mov	r0, r1
 8006eea:	4611      	mov	r1, r2
 8006eec:	602b      	str	r3, [r5, #0]
 8006eee:	f7fb f920 	bl	8002132 <_fstat>
 8006ef2:	1c43      	adds	r3, r0, #1
 8006ef4:	d102      	bne.n	8006efc <_fstat_r+0x1c>
 8006ef6:	682b      	ldr	r3, [r5, #0]
 8006ef8:	b103      	cbz	r3, 8006efc <_fstat_r+0x1c>
 8006efa:	6023      	str	r3, [r4, #0]
 8006efc:	bd38      	pop	{r3, r4, r5, pc}
 8006efe:	bf00      	nop
 8006f00:	2000028c 	.word	0x2000028c

08006f04 <_isatty_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	4d06      	ldr	r5, [pc, #24]	; (8006f20 <_isatty_r+0x1c>)
 8006f08:	2300      	movs	r3, #0
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	4608      	mov	r0, r1
 8006f0e:	602b      	str	r3, [r5, #0]
 8006f10:	f7fb f91f 	bl	8002152 <_isatty>
 8006f14:	1c43      	adds	r3, r0, #1
 8006f16:	d102      	bne.n	8006f1e <_isatty_r+0x1a>
 8006f18:	682b      	ldr	r3, [r5, #0]
 8006f1a:	b103      	cbz	r3, 8006f1e <_isatty_r+0x1a>
 8006f1c:	6023      	str	r3, [r4, #0]
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}
 8006f20:	2000028c 	.word	0x2000028c

08006f24 <_lseek_r>:
 8006f24:	b538      	push	{r3, r4, r5, lr}
 8006f26:	4d07      	ldr	r5, [pc, #28]	; (8006f44 <_lseek_r+0x20>)
 8006f28:	4604      	mov	r4, r0
 8006f2a:	4608      	mov	r0, r1
 8006f2c:	4611      	mov	r1, r2
 8006f2e:	2200      	movs	r2, #0
 8006f30:	602a      	str	r2, [r5, #0]
 8006f32:	461a      	mov	r2, r3
 8006f34:	f7fb f918 	bl	8002168 <_lseek>
 8006f38:	1c43      	adds	r3, r0, #1
 8006f3a:	d102      	bne.n	8006f42 <_lseek_r+0x1e>
 8006f3c:	682b      	ldr	r3, [r5, #0]
 8006f3e:	b103      	cbz	r3, 8006f42 <_lseek_r+0x1e>
 8006f40:	6023      	str	r3, [r4, #0]
 8006f42:	bd38      	pop	{r3, r4, r5, pc}
 8006f44:	2000028c 	.word	0x2000028c

08006f48 <_read_r>:
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	4d07      	ldr	r5, [pc, #28]	; (8006f68 <_read_r+0x20>)
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	4608      	mov	r0, r1
 8006f50:	4611      	mov	r1, r2
 8006f52:	2200      	movs	r2, #0
 8006f54:	602a      	str	r2, [r5, #0]
 8006f56:	461a      	mov	r2, r3
 8006f58:	f7fb f8a6 	bl	80020a8 <_read>
 8006f5c:	1c43      	adds	r3, r0, #1
 8006f5e:	d102      	bne.n	8006f66 <_read_r+0x1e>
 8006f60:	682b      	ldr	r3, [r5, #0]
 8006f62:	b103      	cbz	r3, 8006f66 <_read_r+0x1e>
 8006f64:	6023      	str	r3, [r4, #0]
 8006f66:	bd38      	pop	{r3, r4, r5, pc}
 8006f68:	2000028c 	.word	0x2000028c

08006f6c <pow>:
 8006f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f70:	ec59 8b10 	vmov	r8, r9, d0
 8006f74:	ec57 6b11 	vmov	r6, r7, d1
 8006f78:	f000 f8a6 	bl	80070c8 <__ieee754_pow>
 8006f7c:	4b4e      	ldr	r3, [pc, #312]	; (80070b8 <pow+0x14c>)
 8006f7e:	f993 3000 	ldrsb.w	r3, [r3]
 8006f82:	3301      	adds	r3, #1
 8006f84:	ec55 4b10 	vmov	r4, r5, d0
 8006f88:	d015      	beq.n	8006fb6 <pow+0x4a>
 8006f8a:	4632      	mov	r2, r6
 8006f8c:	463b      	mov	r3, r7
 8006f8e:	4630      	mov	r0, r6
 8006f90:	4639      	mov	r1, r7
 8006f92:	f7f9 fddb 	bl	8000b4c <__aeabi_dcmpun>
 8006f96:	b970      	cbnz	r0, 8006fb6 <pow+0x4a>
 8006f98:	4642      	mov	r2, r8
 8006f9a:	464b      	mov	r3, r9
 8006f9c:	4640      	mov	r0, r8
 8006f9e:	4649      	mov	r1, r9
 8006fa0:	f7f9 fdd4 	bl	8000b4c <__aeabi_dcmpun>
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	b148      	cbz	r0, 8006fbe <pow+0x52>
 8006faa:	4630      	mov	r0, r6
 8006fac:	4639      	mov	r1, r7
 8006fae:	f7f9 fd9b 	bl	8000ae8 <__aeabi_dcmpeq>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	d17d      	bne.n	80070b2 <pow+0x146>
 8006fb6:	ec45 4b10 	vmov	d0, r4, r5
 8006fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fbe:	4640      	mov	r0, r8
 8006fc0:	4649      	mov	r1, r9
 8006fc2:	f7f9 fd91 	bl	8000ae8 <__aeabi_dcmpeq>
 8006fc6:	b1e0      	cbz	r0, 8007002 <pow+0x96>
 8006fc8:	2200      	movs	r2, #0
 8006fca:	2300      	movs	r3, #0
 8006fcc:	4630      	mov	r0, r6
 8006fce:	4639      	mov	r1, r7
 8006fd0:	f7f9 fd8a 	bl	8000ae8 <__aeabi_dcmpeq>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d16c      	bne.n	80070b2 <pow+0x146>
 8006fd8:	ec47 6b10 	vmov	d0, r6, r7
 8006fdc:	f000 fe53 	bl	8007c86 <finite>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	d0e8      	beq.n	8006fb6 <pow+0x4a>
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	4630      	mov	r0, r6
 8006fea:	4639      	mov	r1, r7
 8006fec:	f7f9 fd86 	bl	8000afc <__aeabi_dcmplt>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	d0e0      	beq.n	8006fb6 <pow+0x4a>
 8006ff4:	f7fd f8f4 	bl	80041e0 <__errno>
 8006ff8:	2321      	movs	r3, #33	; 0x21
 8006ffa:	6003      	str	r3, [r0, #0]
 8006ffc:	2400      	movs	r4, #0
 8006ffe:	4d2f      	ldr	r5, [pc, #188]	; (80070bc <pow+0x150>)
 8007000:	e7d9      	b.n	8006fb6 <pow+0x4a>
 8007002:	ec45 4b10 	vmov	d0, r4, r5
 8007006:	f000 fe3e 	bl	8007c86 <finite>
 800700a:	bbb8      	cbnz	r0, 800707c <pow+0x110>
 800700c:	ec49 8b10 	vmov	d0, r8, r9
 8007010:	f000 fe39 	bl	8007c86 <finite>
 8007014:	b390      	cbz	r0, 800707c <pow+0x110>
 8007016:	ec47 6b10 	vmov	d0, r6, r7
 800701a:	f000 fe34 	bl	8007c86 <finite>
 800701e:	b368      	cbz	r0, 800707c <pow+0x110>
 8007020:	4622      	mov	r2, r4
 8007022:	462b      	mov	r3, r5
 8007024:	4620      	mov	r0, r4
 8007026:	4629      	mov	r1, r5
 8007028:	f7f9 fd90 	bl	8000b4c <__aeabi_dcmpun>
 800702c:	b160      	cbz	r0, 8007048 <pow+0xdc>
 800702e:	f7fd f8d7 	bl	80041e0 <__errno>
 8007032:	2321      	movs	r3, #33	; 0x21
 8007034:	6003      	str	r3, [r0, #0]
 8007036:	2200      	movs	r2, #0
 8007038:	2300      	movs	r3, #0
 800703a:	4610      	mov	r0, r2
 800703c:	4619      	mov	r1, r3
 800703e:	f7f9 fc15 	bl	800086c <__aeabi_ddiv>
 8007042:	4604      	mov	r4, r0
 8007044:	460d      	mov	r5, r1
 8007046:	e7b6      	b.n	8006fb6 <pow+0x4a>
 8007048:	f7fd f8ca 	bl	80041e0 <__errno>
 800704c:	2322      	movs	r3, #34	; 0x22
 800704e:	6003      	str	r3, [r0, #0]
 8007050:	2200      	movs	r2, #0
 8007052:	2300      	movs	r3, #0
 8007054:	4640      	mov	r0, r8
 8007056:	4649      	mov	r1, r9
 8007058:	f7f9 fd50 	bl	8000afc <__aeabi_dcmplt>
 800705c:	2400      	movs	r4, #0
 800705e:	b158      	cbz	r0, 8007078 <pow+0x10c>
 8007060:	ec47 6b10 	vmov	d0, r6, r7
 8007064:	f000 fe24 	bl	8007cb0 <rint>
 8007068:	4632      	mov	r2, r6
 800706a:	ec51 0b10 	vmov	r0, r1, d0
 800706e:	463b      	mov	r3, r7
 8007070:	f7f9 fd3a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007074:	2800      	cmp	r0, #0
 8007076:	d0c2      	beq.n	8006ffe <pow+0x92>
 8007078:	4d11      	ldr	r5, [pc, #68]	; (80070c0 <pow+0x154>)
 800707a:	e79c      	b.n	8006fb6 <pow+0x4a>
 800707c:	2200      	movs	r2, #0
 800707e:	2300      	movs	r3, #0
 8007080:	4620      	mov	r0, r4
 8007082:	4629      	mov	r1, r5
 8007084:	f7f9 fd30 	bl	8000ae8 <__aeabi_dcmpeq>
 8007088:	2800      	cmp	r0, #0
 800708a:	d094      	beq.n	8006fb6 <pow+0x4a>
 800708c:	ec49 8b10 	vmov	d0, r8, r9
 8007090:	f000 fdf9 	bl	8007c86 <finite>
 8007094:	2800      	cmp	r0, #0
 8007096:	d08e      	beq.n	8006fb6 <pow+0x4a>
 8007098:	ec47 6b10 	vmov	d0, r6, r7
 800709c:	f000 fdf3 	bl	8007c86 <finite>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	d088      	beq.n	8006fb6 <pow+0x4a>
 80070a4:	f7fd f89c 	bl	80041e0 <__errno>
 80070a8:	2322      	movs	r3, #34	; 0x22
 80070aa:	6003      	str	r3, [r0, #0]
 80070ac:	2400      	movs	r4, #0
 80070ae:	2500      	movs	r5, #0
 80070b0:	e781      	b.n	8006fb6 <pow+0x4a>
 80070b2:	4d04      	ldr	r5, [pc, #16]	; (80070c4 <pow+0x158>)
 80070b4:	2400      	movs	r4, #0
 80070b6:	e77e      	b.n	8006fb6 <pow+0x4a>
 80070b8:	200001e8 	.word	0x200001e8
 80070bc:	fff00000 	.word	0xfff00000
 80070c0:	7ff00000 	.word	0x7ff00000
 80070c4:	3ff00000 	.word	0x3ff00000

080070c8 <__ieee754_pow>:
 80070c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070cc:	ed2d 8b06 	vpush	{d8-d10}
 80070d0:	b08d      	sub	sp, #52	; 0x34
 80070d2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80070d6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80070da:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80070de:	ea56 0100 	orrs.w	r1, r6, r0
 80070e2:	ec53 2b10 	vmov	r2, r3, d0
 80070e6:	f000 84d1 	beq.w	8007a8c <__ieee754_pow+0x9c4>
 80070ea:	497f      	ldr	r1, [pc, #508]	; (80072e8 <__ieee754_pow+0x220>)
 80070ec:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80070f0:	428c      	cmp	r4, r1
 80070f2:	ee10 8a10 	vmov	r8, s0
 80070f6:	4699      	mov	r9, r3
 80070f8:	dc09      	bgt.n	800710e <__ieee754_pow+0x46>
 80070fa:	d103      	bne.n	8007104 <__ieee754_pow+0x3c>
 80070fc:	b97a      	cbnz	r2, 800711e <__ieee754_pow+0x56>
 80070fe:	42a6      	cmp	r6, r4
 8007100:	dd02      	ble.n	8007108 <__ieee754_pow+0x40>
 8007102:	e00c      	b.n	800711e <__ieee754_pow+0x56>
 8007104:	428e      	cmp	r6, r1
 8007106:	dc02      	bgt.n	800710e <__ieee754_pow+0x46>
 8007108:	428e      	cmp	r6, r1
 800710a:	d110      	bne.n	800712e <__ieee754_pow+0x66>
 800710c:	b178      	cbz	r0, 800712e <__ieee754_pow+0x66>
 800710e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007112:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007116:	ea54 0308 	orrs.w	r3, r4, r8
 800711a:	f000 84b7 	beq.w	8007a8c <__ieee754_pow+0x9c4>
 800711e:	4873      	ldr	r0, [pc, #460]	; (80072ec <__ieee754_pow+0x224>)
 8007120:	b00d      	add	sp, #52	; 0x34
 8007122:	ecbd 8b06 	vpop	{d8-d10}
 8007126:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712a:	f000 bdb9 	b.w	8007ca0 <nan>
 800712e:	f1b9 0f00 	cmp.w	r9, #0
 8007132:	da36      	bge.n	80071a2 <__ieee754_pow+0xda>
 8007134:	496e      	ldr	r1, [pc, #440]	; (80072f0 <__ieee754_pow+0x228>)
 8007136:	428e      	cmp	r6, r1
 8007138:	dc51      	bgt.n	80071de <__ieee754_pow+0x116>
 800713a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800713e:	428e      	cmp	r6, r1
 8007140:	f340 84af 	ble.w	8007aa2 <__ieee754_pow+0x9da>
 8007144:	1531      	asrs	r1, r6, #20
 8007146:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800714a:	2914      	cmp	r1, #20
 800714c:	dd0f      	ble.n	800716e <__ieee754_pow+0xa6>
 800714e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8007152:	fa20 fc01 	lsr.w	ip, r0, r1
 8007156:	fa0c f101 	lsl.w	r1, ip, r1
 800715a:	4281      	cmp	r1, r0
 800715c:	f040 84a1 	bne.w	8007aa2 <__ieee754_pow+0x9da>
 8007160:	f00c 0c01 	and.w	ip, ip, #1
 8007164:	f1cc 0102 	rsb	r1, ip, #2
 8007168:	9100      	str	r1, [sp, #0]
 800716a:	b180      	cbz	r0, 800718e <__ieee754_pow+0xc6>
 800716c:	e059      	b.n	8007222 <__ieee754_pow+0x15a>
 800716e:	2800      	cmp	r0, #0
 8007170:	d155      	bne.n	800721e <__ieee754_pow+0x156>
 8007172:	f1c1 0114 	rsb	r1, r1, #20
 8007176:	fa46 fc01 	asr.w	ip, r6, r1
 800717a:	fa0c f101 	lsl.w	r1, ip, r1
 800717e:	42b1      	cmp	r1, r6
 8007180:	f040 848c 	bne.w	8007a9c <__ieee754_pow+0x9d4>
 8007184:	f00c 0c01 	and.w	ip, ip, #1
 8007188:	f1cc 0102 	rsb	r1, ip, #2
 800718c:	9100      	str	r1, [sp, #0]
 800718e:	4959      	ldr	r1, [pc, #356]	; (80072f4 <__ieee754_pow+0x22c>)
 8007190:	428e      	cmp	r6, r1
 8007192:	d12d      	bne.n	80071f0 <__ieee754_pow+0x128>
 8007194:	2f00      	cmp	r7, #0
 8007196:	da79      	bge.n	800728c <__ieee754_pow+0x1c4>
 8007198:	4956      	ldr	r1, [pc, #344]	; (80072f4 <__ieee754_pow+0x22c>)
 800719a:	2000      	movs	r0, #0
 800719c:	f7f9 fb66 	bl	800086c <__aeabi_ddiv>
 80071a0:	e016      	b.n	80071d0 <__ieee754_pow+0x108>
 80071a2:	2100      	movs	r1, #0
 80071a4:	9100      	str	r1, [sp, #0]
 80071a6:	2800      	cmp	r0, #0
 80071a8:	d13b      	bne.n	8007222 <__ieee754_pow+0x15a>
 80071aa:	494f      	ldr	r1, [pc, #316]	; (80072e8 <__ieee754_pow+0x220>)
 80071ac:	428e      	cmp	r6, r1
 80071ae:	d1ee      	bne.n	800718e <__ieee754_pow+0xc6>
 80071b0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80071b4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80071b8:	ea53 0308 	orrs.w	r3, r3, r8
 80071bc:	f000 8466 	beq.w	8007a8c <__ieee754_pow+0x9c4>
 80071c0:	4b4d      	ldr	r3, [pc, #308]	; (80072f8 <__ieee754_pow+0x230>)
 80071c2:	429c      	cmp	r4, r3
 80071c4:	dd0d      	ble.n	80071e2 <__ieee754_pow+0x11a>
 80071c6:	2f00      	cmp	r7, #0
 80071c8:	f280 8464 	bge.w	8007a94 <__ieee754_pow+0x9cc>
 80071cc:	2000      	movs	r0, #0
 80071ce:	2100      	movs	r1, #0
 80071d0:	ec41 0b10 	vmov	d0, r0, r1
 80071d4:	b00d      	add	sp, #52	; 0x34
 80071d6:	ecbd 8b06 	vpop	{d8-d10}
 80071da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071de:	2102      	movs	r1, #2
 80071e0:	e7e0      	b.n	80071a4 <__ieee754_pow+0xdc>
 80071e2:	2f00      	cmp	r7, #0
 80071e4:	daf2      	bge.n	80071cc <__ieee754_pow+0x104>
 80071e6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80071ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80071ee:	e7ef      	b.n	80071d0 <__ieee754_pow+0x108>
 80071f0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80071f4:	d104      	bne.n	8007200 <__ieee754_pow+0x138>
 80071f6:	4610      	mov	r0, r2
 80071f8:	4619      	mov	r1, r3
 80071fa:	f7f9 fa0d 	bl	8000618 <__aeabi_dmul>
 80071fe:	e7e7      	b.n	80071d0 <__ieee754_pow+0x108>
 8007200:	493e      	ldr	r1, [pc, #248]	; (80072fc <__ieee754_pow+0x234>)
 8007202:	428f      	cmp	r7, r1
 8007204:	d10d      	bne.n	8007222 <__ieee754_pow+0x15a>
 8007206:	f1b9 0f00 	cmp.w	r9, #0
 800720a:	db0a      	blt.n	8007222 <__ieee754_pow+0x15a>
 800720c:	ec43 2b10 	vmov	d0, r2, r3
 8007210:	b00d      	add	sp, #52	; 0x34
 8007212:	ecbd 8b06 	vpop	{d8-d10}
 8007216:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721a:	f000 bc77 	b.w	8007b0c <__ieee754_sqrt>
 800721e:	2100      	movs	r1, #0
 8007220:	9100      	str	r1, [sp, #0]
 8007222:	ec43 2b10 	vmov	d0, r2, r3
 8007226:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800722a:	f000 fd23 	bl	8007c74 <fabs>
 800722e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007232:	ec51 0b10 	vmov	r0, r1, d0
 8007236:	f1b8 0f00 	cmp.w	r8, #0
 800723a:	d12a      	bne.n	8007292 <__ieee754_pow+0x1ca>
 800723c:	b12c      	cbz	r4, 800724a <__ieee754_pow+0x182>
 800723e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80072f4 <__ieee754_pow+0x22c>
 8007242:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8007246:	45e6      	cmp	lr, ip
 8007248:	d123      	bne.n	8007292 <__ieee754_pow+0x1ca>
 800724a:	2f00      	cmp	r7, #0
 800724c:	da05      	bge.n	800725a <__ieee754_pow+0x192>
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	2000      	movs	r0, #0
 8007254:	4927      	ldr	r1, [pc, #156]	; (80072f4 <__ieee754_pow+0x22c>)
 8007256:	f7f9 fb09 	bl	800086c <__aeabi_ddiv>
 800725a:	f1b9 0f00 	cmp.w	r9, #0
 800725e:	dab7      	bge.n	80071d0 <__ieee754_pow+0x108>
 8007260:	9b00      	ldr	r3, [sp, #0]
 8007262:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007266:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800726a:	4323      	orrs	r3, r4
 800726c:	d108      	bne.n	8007280 <__ieee754_pow+0x1b8>
 800726e:	4602      	mov	r2, r0
 8007270:	460b      	mov	r3, r1
 8007272:	4610      	mov	r0, r2
 8007274:	4619      	mov	r1, r3
 8007276:	f7f9 f817 	bl	80002a8 <__aeabi_dsub>
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	e78d      	b.n	800719c <__ieee754_pow+0xd4>
 8007280:	9b00      	ldr	r3, [sp, #0]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d1a4      	bne.n	80071d0 <__ieee754_pow+0x108>
 8007286:	4602      	mov	r2, r0
 8007288:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800728c:	4610      	mov	r0, r2
 800728e:	4619      	mov	r1, r3
 8007290:	e79e      	b.n	80071d0 <__ieee754_pow+0x108>
 8007292:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8007296:	f10c 35ff 	add.w	r5, ip, #4294967295
 800729a:	950a      	str	r5, [sp, #40]	; 0x28
 800729c:	9d00      	ldr	r5, [sp, #0]
 800729e:	46ac      	mov	ip, r5
 80072a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80072a2:	ea5c 0505 	orrs.w	r5, ip, r5
 80072a6:	d0e4      	beq.n	8007272 <__ieee754_pow+0x1aa>
 80072a8:	4b15      	ldr	r3, [pc, #84]	; (8007300 <__ieee754_pow+0x238>)
 80072aa:	429e      	cmp	r6, r3
 80072ac:	f340 80fc 	ble.w	80074a8 <__ieee754_pow+0x3e0>
 80072b0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80072b4:	429e      	cmp	r6, r3
 80072b6:	4b10      	ldr	r3, [pc, #64]	; (80072f8 <__ieee754_pow+0x230>)
 80072b8:	dd07      	ble.n	80072ca <__ieee754_pow+0x202>
 80072ba:	429c      	cmp	r4, r3
 80072bc:	dc0a      	bgt.n	80072d4 <__ieee754_pow+0x20c>
 80072be:	2f00      	cmp	r7, #0
 80072c0:	da84      	bge.n	80071cc <__ieee754_pow+0x104>
 80072c2:	a307      	add	r3, pc, #28	; (adr r3, 80072e0 <__ieee754_pow+0x218>)
 80072c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c8:	e795      	b.n	80071f6 <__ieee754_pow+0x12e>
 80072ca:	429c      	cmp	r4, r3
 80072cc:	dbf7      	blt.n	80072be <__ieee754_pow+0x1f6>
 80072ce:	4b09      	ldr	r3, [pc, #36]	; (80072f4 <__ieee754_pow+0x22c>)
 80072d0:	429c      	cmp	r4, r3
 80072d2:	dd17      	ble.n	8007304 <__ieee754_pow+0x23c>
 80072d4:	2f00      	cmp	r7, #0
 80072d6:	dcf4      	bgt.n	80072c2 <__ieee754_pow+0x1fa>
 80072d8:	e778      	b.n	80071cc <__ieee754_pow+0x104>
 80072da:	bf00      	nop
 80072dc:	f3af 8000 	nop.w
 80072e0:	8800759c 	.word	0x8800759c
 80072e4:	7e37e43c 	.word	0x7e37e43c
 80072e8:	7ff00000 	.word	0x7ff00000
 80072ec:	080081a8 	.word	0x080081a8
 80072f0:	433fffff 	.word	0x433fffff
 80072f4:	3ff00000 	.word	0x3ff00000
 80072f8:	3fefffff 	.word	0x3fefffff
 80072fc:	3fe00000 	.word	0x3fe00000
 8007300:	41e00000 	.word	0x41e00000
 8007304:	4b64      	ldr	r3, [pc, #400]	; (8007498 <__ieee754_pow+0x3d0>)
 8007306:	2200      	movs	r2, #0
 8007308:	f7f8 ffce 	bl	80002a8 <__aeabi_dsub>
 800730c:	a356      	add	r3, pc, #344	; (adr r3, 8007468 <__ieee754_pow+0x3a0>)
 800730e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007312:	4604      	mov	r4, r0
 8007314:	460d      	mov	r5, r1
 8007316:	f7f9 f97f 	bl	8000618 <__aeabi_dmul>
 800731a:	a355      	add	r3, pc, #340	; (adr r3, 8007470 <__ieee754_pow+0x3a8>)
 800731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007320:	4606      	mov	r6, r0
 8007322:	460f      	mov	r7, r1
 8007324:	4620      	mov	r0, r4
 8007326:	4629      	mov	r1, r5
 8007328:	f7f9 f976 	bl	8000618 <__aeabi_dmul>
 800732c:	4b5b      	ldr	r3, [pc, #364]	; (800749c <__ieee754_pow+0x3d4>)
 800732e:	4682      	mov	sl, r0
 8007330:	468b      	mov	fp, r1
 8007332:	2200      	movs	r2, #0
 8007334:	4620      	mov	r0, r4
 8007336:	4629      	mov	r1, r5
 8007338:	f7f9 f96e 	bl	8000618 <__aeabi_dmul>
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	a14d      	add	r1, pc, #308	; (adr r1, 8007478 <__ieee754_pow+0x3b0>)
 8007342:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007346:	f7f8 ffaf 	bl	80002a8 <__aeabi_dsub>
 800734a:	4622      	mov	r2, r4
 800734c:	462b      	mov	r3, r5
 800734e:	f7f9 f963 	bl	8000618 <__aeabi_dmul>
 8007352:	4602      	mov	r2, r0
 8007354:	460b      	mov	r3, r1
 8007356:	2000      	movs	r0, #0
 8007358:	4951      	ldr	r1, [pc, #324]	; (80074a0 <__ieee754_pow+0x3d8>)
 800735a:	f7f8 ffa5 	bl	80002a8 <__aeabi_dsub>
 800735e:	4622      	mov	r2, r4
 8007360:	4680      	mov	r8, r0
 8007362:	4689      	mov	r9, r1
 8007364:	462b      	mov	r3, r5
 8007366:	4620      	mov	r0, r4
 8007368:	4629      	mov	r1, r5
 800736a:	f7f9 f955 	bl	8000618 <__aeabi_dmul>
 800736e:	4602      	mov	r2, r0
 8007370:	460b      	mov	r3, r1
 8007372:	4640      	mov	r0, r8
 8007374:	4649      	mov	r1, r9
 8007376:	f7f9 f94f 	bl	8000618 <__aeabi_dmul>
 800737a:	a341      	add	r3, pc, #260	; (adr r3, 8007480 <__ieee754_pow+0x3b8>)
 800737c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007380:	f7f9 f94a 	bl	8000618 <__aeabi_dmul>
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	4650      	mov	r0, sl
 800738a:	4659      	mov	r1, fp
 800738c:	f7f8 ff8c 	bl	80002a8 <__aeabi_dsub>
 8007390:	4602      	mov	r2, r0
 8007392:	460b      	mov	r3, r1
 8007394:	4680      	mov	r8, r0
 8007396:	4689      	mov	r9, r1
 8007398:	4630      	mov	r0, r6
 800739a:	4639      	mov	r1, r7
 800739c:	f7f8 ff86 	bl	80002ac <__adddf3>
 80073a0:	2400      	movs	r4, #0
 80073a2:	4632      	mov	r2, r6
 80073a4:	463b      	mov	r3, r7
 80073a6:	4620      	mov	r0, r4
 80073a8:	460d      	mov	r5, r1
 80073aa:	f7f8 ff7d 	bl	80002a8 <__aeabi_dsub>
 80073ae:	4602      	mov	r2, r0
 80073b0:	460b      	mov	r3, r1
 80073b2:	4640      	mov	r0, r8
 80073b4:	4649      	mov	r1, r9
 80073b6:	f7f8 ff77 	bl	80002a8 <__aeabi_dsub>
 80073ba:	9b00      	ldr	r3, [sp, #0]
 80073bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073be:	3b01      	subs	r3, #1
 80073c0:	4313      	orrs	r3, r2
 80073c2:	4682      	mov	sl, r0
 80073c4:	468b      	mov	fp, r1
 80073c6:	f040 81f1 	bne.w	80077ac <__ieee754_pow+0x6e4>
 80073ca:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007488 <__ieee754_pow+0x3c0>
 80073ce:	eeb0 8a47 	vmov.f32	s16, s14
 80073d2:	eef0 8a67 	vmov.f32	s17, s15
 80073d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80073da:	2600      	movs	r6, #0
 80073dc:	4632      	mov	r2, r6
 80073de:	463b      	mov	r3, r7
 80073e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073e4:	f7f8 ff60 	bl	80002a8 <__aeabi_dsub>
 80073e8:	4622      	mov	r2, r4
 80073ea:	462b      	mov	r3, r5
 80073ec:	f7f9 f914 	bl	8000618 <__aeabi_dmul>
 80073f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073f4:	4680      	mov	r8, r0
 80073f6:	4689      	mov	r9, r1
 80073f8:	4650      	mov	r0, sl
 80073fa:	4659      	mov	r1, fp
 80073fc:	f7f9 f90c 	bl	8000618 <__aeabi_dmul>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4640      	mov	r0, r8
 8007406:	4649      	mov	r1, r9
 8007408:	f7f8 ff50 	bl	80002ac <__adddf3>
 800740c:	4632      	mov	r2, r6
 800740e:	463b      	mov	r3, r7
 8007410:	4680      	mov	r8, r0
 8007412:	4689      	mov	r9, r1
 8007414:	4620      	mov	r0, r4
 8007416:	4629      	mov	r1, r5
 8007418:	f7f9 f8fe 	bl	8000618 <__aeabi_dmul>
 800741c:	460b      	mov	r3, r1
 800741e:	4604      	mov	r4, r0
 8007420:	460d      	mov	r5, r1
 8007422:	4602      	mov	r2, r0
 8007424:	4649      	mov	r1, r9
 8007426:	4640      	mov	r0, r8
 8007428:	f7f8 ff40 	bl	80002ac <__adddf3>
 800742c:	4b1d      	ldr	r3, [pc, #116]	; (80074a4 <__ieee754_pow+0x3dc>)
 800742e:	4299      	cmp	r1, r3
 8007430:	ec45 4b19 	vmov	d9, r4, r5
 8007434:	4606      	mov	r6, r0
 8007436:	460f      	mov	r7, r1
 8007438:	468b      	mov	fp, r1
 800743a:	f340 82fe 	ble.w	8007a3a <__ieee754_pow+0x972>
 800743e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007442:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007446:	4303      	orrs	r3, r0
 8007448:	f000 81f0 	beq.w	800782c <__ieee754_pow+0x764>
 800744c:	a310      	add	r3, pc, #64	; (adr r3, 8007490 <__ieee754_pow+0x3c8>)
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	ec51 0b18 	vmov	r0, r1, d8
 8007456:	f7f9 f8df 	bl	8000618 <__aeabi_dmul>
 800745a:	a30d      	add	r3, pc, #52	; (adr r3, 8007490 <__ieee754_pow+0x3c8>)
 800745c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007460:	e6cb      	b.n	80071fa <__ieee754_pow+0x132>
 8007462:	bf00      	nop
 8007464:	f3af 8000 	nop.w
 8007468:	60000000 	.word	0x60000000
 800746c:	3ff71547 	.word	0x3ff71547
 8007470:	f85ddf44 	.word	0xf85ddf44
 8007474:	3e54ae0b 	.word	0x3e54ae0b
 8007478:	55555555 	.word	0x55555555
 800747c:	3fd55555 	.word	0x3fd55555
 8007480:	652b82fe 	.word	0x652b82fe
 8007484:	3ff71547 	.word	0x3ff71547
 8007488:	00000000 	.word	0x00000000
 800748c:	bff00000 	.word	0xbff00000
 8007490:	8800759c 	.word	0x8800759c
 8007494:	7e37e43c 	.word	0x7e37e43c
 8007498:	3ff00000 	.word	0x3ff00000
 800749c:	3fd00000 	.word	0x3fd00000
 80074a0:	3fe00000 	.word	0x3fe00000
 80074a4:	408fffff 	.word	0x408fffff
 80074a8:	4bd7      	ldr	r3, [pc, #860]	; (8007808 <__ieee754_pow+0x740>)
 80074aa:	ea03 0309 	and.w	r3, r3, r9
 80074ae:	2200      	movs	r2, #0
 80074b0:	b92b      	cbnz	r3, 80074be <__ieee754_pow+0x3f6>
 80074b2:	4bd6      	ldr	r3, [pc, #856]	; (800780c <__ieee754_pow+0x744>)
 80074b4:	f7f9 f8b0 	bl	8000618 <__aeabi_dmul>
 80074b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80074bc:	460c      	mov	r4, r1
 80074be:	1523      	asrs	r3, r4, #20
 80074c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80074c4:	4413      	add	r3, r2
 80074c6:	9309      	str	r3, [sp, #36]	; 0x24
 80074c8:	4bd1      	ldr	r3, [pc, #836]	; (8007810 <__ieee754_pow+0x748>)
 80074ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80074ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80074d2:	429c      	cmp	r4, r3
 80074d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80074d8:	dd08      	ble.n	80074ec <__ieee754_pow+0x424>
 80074da:	4bce      	ldr	r3, [pc, #824]	; (8007814 <__ieee754_pow+0x74c>)
 80074dc:	429c      	cmp	r4, r3
 80074de:	f340 8163 	ble.w	80077a8 <__ieee754_pow+0x6e0>
 80074e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074e4:	3301      	adds	r3, #1
 80074e6:	9309      	str	r3, [sp, #36]	; 0x24
 80074e8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80074ec:	2400      	movs	r4, #0
 80074ee:	00e3      	lsls	r3, r4, #3
 80074f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80074f2:	4bc9      	ldr	r3, [pc, #804]	; (8007818 <__ieee754_pow+0x750>)
 80074f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80074f8:	ed93 7b00 	vldr	d7, [r3]
 80074fc:	4629      	mov	r1, r5
 80074fe:	ec53 2b17 	vmov	r2, r3, d7
 8007502:	eeb0 8a47 	vmov.f32	s16, s14
 8007506:	eef0 8a67 	vmov.f32	s17, s15
 800750a:	4682      	mov	sl, r0
 800750c:	f7f8 fecc 	bl	80002a8 <__aeabi_dsub>
 8007510:	4652      	mov	r2, sl
 8007512:	4606      	mov	r6, r0
 8007514:	460f      	mov	r7, r1
 8007516:	462b      	mov	r3, r5
 8007518:	ec51 0b18 	vmov	r0, r1, d8
 800751c:	f7f8 fec6 	bl	80002ac <__adddf3>
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	2000      	movs	r0, #0
 8007526:	49bd      	ldr	r1, [pc, #756]	; (800781c <__ieee754_pow+0x754>)
 8007528:	f7f9 f9a0 	bl	800086c <__aeabi_ddiv>
 800752c:	ec41 0b19 	vmov	d9, r0, r1
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	4630      	mov	r0, r6
 8007536:	4639      	mov	r1, r7
 8007538:	f7f9 f86e 	bl	8000618 <__aeabi_dmul>
 800753c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007540:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007544:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007548:	2300      	movs	r3, #0
 800754a:	9304      	str	r3, [sp, #16]
 800754c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007550:	46ab      	mov	fp, r5
 8007552:	106d      	asrs	r5, r5, #1
 8007554:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007558:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800755c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007560:	2200      	movs	r2, #0
 8007562:	4640      	mov	r0, r8
 8007564:	4649      	mov	r1, r9
 8007566:	4614      	mov	r4, r2
 8007568:	461d      	mov	r5, r3
 800756a:	f7f9 f855 	bl	8000618 <__aeabi_dmul>
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	4630      	mov	r0, r6
 8007574:	4639      	mov	r1, r7
 8007576:	f7f8 fe97 	bl	80002a8 <__aeabi_dsub>
 800757a:	ec53 2b18 	vmov	r2, r3, d8
 800757e:	4606      	mov	r6, r0
 8007580:	460f      	mov	r7, r1
 8007582:	4620      	mov	r0, r4
 8007584:	4629      	mov	r1, r5
 8007586:	f7f8 fe8f 	bl	80002a8 <__aeabi_dsub>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	4650      	mov	r0, sl
 8007590:	4659      	mov	r1, fp
 8007592:	f7f8 fe89 	bl	80002a8 <__aeabi_dsub>
 8007596:	4642      	mov	r2, r8
 8007598:	464b      	mov	r3, r9
 800759a:	f7f9 f83d 	bl	8000618 <__aeabi_dmul>
 800759e:	4602      	mov	r2, r0
 80075a0:	460b      	mov	r3, r1
 80075a2:	4630      	mov	r0, r6
 80075a4:	4639      	mov	r1, r7
 80075a6:	f7f8 fe7f 	bl	80002a8 <__aeabi_dsub>
 80075aa:	ec53 2b19 	vmov	r2, r3, d9
 80075ae:	f7f9 f833 	bl	8000618 <__aeabi_dmul>
 80075b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80075b6:	ec41 0b18 	vmov	d8, r0, r1
 80075ba:	4610      	mov	r0, r2
 80075bc:	4619      	mov	r1, r3
 80075be:	f7f9 f82b 	bl	8000618 <__aeabi_dmul>
 80075c2:	a37d      	add	r3, pc, #500	; (adr r3, 80077b8 <__ieee754_pow+0x6f0>)
 80075c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c8:	4604      	mov	r4, r0
 80075ca:	460d      	mov	r5, r1
 80075cc:	f7f9 f824 	bl	8000618 <__aeabi_dmul>
 80075d0:	a37b      	add	r3, pc, #492	; (adr r3, 80077c0 <__ieee754_pow+0x6f8>)
 80075d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d6:	f7f8 fe69 	bl	80002ac <__adddf3>
 80075da:	4622      	mov	r2, r4
 80075dc:	462b      	mov	r3, r5
 80075de:	f7f9 f81b 	bl	8000618 <__aeabi_dmul>
 80075e2:	a379      	add	r3, pc, #484	; (adr r3, 80077c8 <__ieee754_pow+0x700>)
 80075e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e8:	f7f8 fe60 	bl	80002ac <__adddf3>
 80075ec:	4622      	mov	r2, r4
 80075ee:	462b      	mov	r3, r5
 80075f0:	f7f9 f812 	bl	8000618 <__aeabi_dmul>
 80075f4:	a376      	add	r3, pc, #472	; (adr r3, 80077d0 <__ieee754_pow+0x708>)
 80075f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fa:	f7f8 fe57 	bl	80002ac <__adddf3>
 80075fe:	4622      	mov	r2, r4
 8007600:	462b      	mov	r3, r5
 8007602:	f7f9 f809 	bl	8000618 <__aeabi_dmul>
 8007606:	a374      	add	r3, pc, #464	; (adr r3, 80077d8 <__ieee754_pow+0x710>)
 8007608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760c:	f7f8 fe4e 	bl	80002ac <__adddf3>
 8007610:	4622      	mov	r2, r4
 8007612:	462b      	mov	r3, r5
 8007614:	f7f9 f800 	bl	8000618 <__aeabi_dmul>
 8007618:	a371      	add	r3, pc, #452	; (adr r3, 80077e0 <__ieee754_pow+0x718>)
 800761a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761e:	f7f8 fe45 	bl	80002ac <__adddf3>
 8007622:	4622      	mov	r2, r4
 8007624:	4606      	mov	r6, r0
 8007626:	460f      	mov	r7, r1
 8007628:	462b      	mov	r3, r5
 800762a:	4620      	mov	r0, r4
 800762c:	4629      	mov	r1, r5
 800762e:	f7f8 fff3 	bl	8000618 <__aeabi_dmul>
 8007632:	4602      	mov	r2, r0
 8007634:	460b      	mov	r3, r1
 8007636:	4630      	mov	r0, r6
 8007638:	4639      	mov	r1, r7
 800763a:	f7f8 ffed 	bl	8000618 <__aeabi_dmul>
 800763e:	4642      	mov	r2, r8
 8007640:	4604      	mov	r4, r0
 8007642:	460d      	mov	r5, r1
 8007644:	464b      	mov	r3, r9
 8007646:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800764a:	f7f8 fe2f 	bl	80002ac <__adddf3>
 800764e:	ec53 2b18 	vmov	r2, r3, d8
 8007652:	f7f8 ffe1 	bl	8000618 <__aeabi_dmul>
 8007656:	4622      	mov	r2, r4
 8007658:	462b      	mov	r3, r5
 800765a:	f7f8 fe27 	bl	80002ac <__adddf3>
 800765e:	4642      	mov	r2, r8
 8007660:	4682      	mov	sl, r0
 8007662:	468b      	mov	fp, r1
 8007664:	464b      	mov	r3, r9
 8007666:	4640      	mov	r0, r8
 8007668:	4649      	mov	r1, r9
 800766a:	f7f8 ffd5 	bl	8000618 <__aeabi_dmul>
 800766e:	4b6c      	ldr	r3, [pc, #432]	; (8007820 <__ieee754_pow+0x758>)
 8007670:	2200      	movs	r2, #0
 8007672:	4606      	mov	r6, r0
 8007674:	460f      	mov	r7, r1
 8007676:	f7f8 fe19 	bl	80002ac <__adddf3>
 800767a:	4652      	mov	r2, sl
 800767c:	465b      	mov	r3, fp
 800767e:	f7f8 fe15 	bl	80002ac <__adddf3>
 8007682:	9c04      	ldr	r4, [sp, #16]
 8007684:	460d      	mov	r5, r1
 8007686:	4622      	mov	r2, r4
 8007688:	460b      	mov	r3, r1
 800768a:	4640      	mov	r0, r8
 800768c:	4649      	mov	r1, r9
 800768e:	f7f8 ffc3 	bl	8000618 <__aeabi_dmul>
 8007692:	4b63      	ldr	r3, [pc, #396]	; (8007820 <__ieee754_pow+0x758>)
 8007694:	4680      	mov	r8, r0
 8007696:	4689      	mov	r9, r1
 8007698:	2200      	movs	r2, #0
 800769a:	4620      	mov	r0, r4
 800769c:	4629      	mov	r1, r5
 800769e:	f7f8 fe03 	bl	80002a8 <__aeabi_dsub>
 80076a2:	4632      	mov	r2, r6
 80076a4:	463b      	mov	r3, r7
 80076a6:	f7f8 fdff 	bl	80002a8 <__aeabi_dsub>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4650      	mov	r0, sl
 80076b0:	4659      	mov	r1, fp
 80076b2:	f7f8 fdf9 	bl	80002a8 <__aeabi_dsub>
 80076b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076ba:	f7f8 ffad 	bl	8000618 <__aeabi_dmul>
 80076be:	4622      	mov	r2, r4
 80076c0:	4606      	mov	r6, r0
 80076c2:	460f      	mov	r7, r1
 80076c4:	462b      	mov	r3, r5
 80076c6:	ec51 0b18 	vmov	r0, r1, d8
 80076ca:	f7f8 ffa5 	bl	8000618 <__aeabi_dmul>
 80076ce:	4602      	mov	r2, r0
 80076d0:	460b      	mov	r3, r1
 80076d2:	4630      	mov	r0, r6
 80076d4:	4639      	mov	r1, r7
 80076d6:	f7f8 fde9 	bl	80002ac <__adddf3>
 80076da:	4606      	mov	r6, r0
 80076dc:	460f      	mov	r7, r1
 80076de:	4602      	mov	r2, r0
 80076e0:	460b      	mov	r3, r1
 80076e2:	4640      	mov	r0, r8
 80076e4:	4649      	mov	r1, r9
 80076e6:	f7f8 fde1 	bl	80002ac <__adddf3>
 80076ea:	9c04      	ldr	r4, [sp, #16]
 80076ec:	a33e      	add	r3, pc, #248	; (adr r3, 80077e8 <__ieee754_pow+0x720>)
 80076ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f2:	4620      	mov	r0, r4
 80076f4:	460d      	mov	r5, r1
 80076f6:	f7f8 ff8f 	bl	8000618 <__aeabi_dmul>
 80076fa:	4642      	mov	r2, r8
 80076fc:	ec41 0b18 	vmov	d8, r0, r1
 8007700:	464b      	mov	r3, r9
 8007702:	4620      	mov	r0, r4
 8007704:	4629      	mov	r1, r5
 8007706:	f7f8 fdcf 	bl	80002a8 <__aeabi_dsub>
 800770a:	4602      	mov	r2, r0
 800770c:	460b      	mov	r3, r1
 800770e:	4630      	mov	r0, r6
 8007710:	4639      	mov	r1, r7
 8007712:	f7f8 fdc9 	bl	80002a8 <__aeabi_dsub>
 8007716:	a336      	add	r3, pc, #216	; (adr r3, 80077f0 <__ieee754_pow+0x728>)
 8007718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771c:	f7f8 ff7c 	bl	8000618 <__aeabi_dmul>
 8007720:	a335      	add	r3, pc, #212	; (adr r3, 80077f8 <__ieee754_pow+0x730>)
 8007722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007726:	4606      	mov	r6, r0
 8007728:	460f      	mov	r7, r1
 800772a:	4620      	mov	r0, r4
 800772c:	4629      	mov	r1, r5
 800772e:	f7f8 ff73 	bl	8000618 <__aeabi_dmul>
 8007732:	4602      	mov	r2, r0
 8007734:	460b      	mov	r3, r1
 8007736:	4630      	mov	r0, r6
 8007738:	4639      	mov	r1, r7
 800773a:	f7f8 fdb7 	bl	80002ac <__adddf3>
 800773e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007740:	4b38      	ldr	r3, [pc, #224]	; (8007824 <__ieee754_pow+0x75c>)
 8007742:	4413      	add	r3, r2
 8007744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007748:	f7f8 fdb0 	bl	80002ac <__adddf3>
 800774c:	4682      	mov	sl, r0
 800774e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007750:	468b      	mov	fp, r1
 8007752:	f7f8 fef7 	bl	8000544 <__aeabi_i2d>
 8007756:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007758:	4b33      	ldr	r3, [pc, #204]	; (8007828 <__ieee754_pow+0x760>)
 800775a:	4413      	add	r3, r2
 800775c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007760:	4606      	mov	r6, r0
 8007762:	460f      	mov	r7, r1
 8007764:	4652      	mov	r2, sl
 8007766:	465b      	mov	r3, fp
 8007768:	ec51 0b18 	vmov	r0, r1, d8
 800776c:	f7f8 fd9e 	bl	80002ac <__adddf3>
 8007770:	4642      	mov	r2, r8
 8007772:	464b      	mov	r3, r9
 8007774:	f7f8 fd9a 	bl	80002ac <__adddf3>
 8007778:	4632      	mov	r2, r6
 800777a:	463b      	mov	r3, r7
 800777c:	f7f8 fd96 	bl	80002ac <__adddf3>
 8007780:	9c04      	ldr	r4, [sp, #16]
 8007782:	4632      	mov	r2, r6
 8007784:	463b      	mov	r3, r7
 8007786:	4620      	mov	r0, r4
 8007788:	460d      	mov	r5, r1
 800778a:	f7f8 fd8d 	bl	80002a8 <__aeabi_dsub>
 800778e:	4642      	mov	r2, r8
 8007790:	464b      	mov	r3, r9
 8007792:	f7f8 fd89 	bl	80002a8 <__aeabi_dsub>
 8007796:	ec53 2b18 	vmov	r2, r3, d8
 800779a:	f7f8 fd85 	bl	80002a8 <__aeabi_dsub>
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	4650      	mov	r0, sl
 80077a4:	4659      	mov	r1, fp
 80077a6:	e606      	b.n	80073b6 <__ieee754_pow+0x2ee>
 80077a8:	2401      	movs	r4, #1
 80077aa:	e6a0      	b.n	80074ee <__ieee754_pow+0x426>
 80077ac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007800 <__ieee754_pow+0x738>
 80077b0:	e60d      	b.n	80073ce <__ieee754_pow+0x306>
 80077b2:	bf00      	nop
 80077b4:	f3af 8000 	nop.w
 80077b8:	4a454eef 	.word	0x4a454eef
 80077bc:	3fca7e28 	.word	0x3fca7e28
 80077c0:	93c9db65 	.word	0x93c9db65
 80077c4:	3fcd864a 	.word	0x3fcd864a
 80077c8:	a91d4101 	.word	0xa91d4101
 80077cc:	3fd17460 	.word	0x3fd17460
 80077d0:	518f264d 	.word	0x518f264d
 80077d4:	3fd55555 	.word	0x3fd55555
 80077d8:	db6fabff 	.word	0xdb6fabff
 80077dc:	3fdb6db6 	.word	0x3fdb6db6
 80077e0:	33333303 	.word	0x33333303
 80077e4:	3fe33333 	.word	0x3fe33333
 80077e8:	e0000000 	.word	0xe0000000
 80077ec:	3feec709 	.word	0x3feec709
 80077f0:	dc3a03fd 	.word	0xdc3a03fd
 80077f4:	3feec709 	.word	0x3feec709
 80077f8:	145b01f5 	.word	0x145b01f5
 80077fc:	be3e2fe0 	.word	0xbe3e2fe0
 8007800:	00000000 	.word	0x00000000
 8007804:	3ff00000 	.word	0x3ff00000
 8007808:	7ff00000 	.word	0x7ff00000
 800780c:	43400000 	.word	0x43400000
 8007810:	0003988e 	.word	0x0003988e
 8007814:	000bb679 	.word	0x000bb679
 8007818:	08008318 	.word	0x08008318
 800781c:	3ff00000 	.word	0x3ff00000
 8007820:	40080000 	.word	0x40080000
 8007824:	08008338 	.word	0x08008338
 8007828:	08008328 	.word	0x08008328
 800782c:	a3b5      	add	r3, pc, #724	; (adr r3, 8007b04 <__ieee754_pow+0xa3c>)
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	4640      	mov	r0, r8
 8007834:	4649      	mov	r1, r9
 8007836:	f7f8 fd39 	bl	80002ac <__adddf3>
 800783a:	4622      	mov	r2, r4
 800783c:	ec41 0b1a 	vmov	d10, r0, r1
 8007840:	462b      	mov	r3, r5
 8007842:	4630      	mov	r0, r6
 8007844:	4639      	mov	r1, r7
 8007846:	f7f8 fd2f 	bl	80002a8 <__aeabi_dsub>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	ec51 0b1a 	vmov	r0, r1, d10
 8007852:	f7f9 f971 	bl	8000b38 <__aeabi_dcmpgt>
 8007856:	2800      	cmp	r0, #0
 8007858:	f47f adf8 	bne.w	800744c <__ieee754_pow+0x384>
 800785c:	4aa4      	ldr	r2, [pc, #656]	; (8007af0 <__ieee754_pow+0xa28>)
 800785e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007862:	4293      	cmp	r3, r2
 8007864:	f340 810b 	ble.w	8007a7e <__ieee754_pow+0x9b6>
 8007868:	151b      	asrs	r3, r3, #20
 800786a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800786e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007872:	fa4a f303 	asr.w	r3, sl, r3
 8007876:	445b      	add	r3, fp
 8007878:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800787c:	4e9d      	ldr	r6, [pc, #628]	; (8007af4 <__ieee754_pow+0xa2c>)
 800787e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007882:	4116      	asrs	r6, r2
 8007884:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007888:	2000      	movs	r0, #0
 800788a:	ea23 0106 	bic.w	r1, r3, r6
 800788e:	f1c2 0214 	rsb	r2, r2, #20
 8007892:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007896:	fa4a fa02 	asr.w	sl, sl, r2
 800789a:	f1bb 0f00 	cmp.w	fp, #0
 800789e:	4602      	mov	r2, r0
 80078a0:	460b      	mov	r3, r1
 80078a2:	4620      	mov	r0, r4
 80078a4:	4629      	mov	r1, r5
 80078a6:	bfb8      	it	lt
 80078a8:	f1ca 0a00 	rsblt	sl, sl, #0
 80078ac:	f7f8 fcfc 	bl	80002a8 <__aeabi_dsub>
 80078b0:	ec41 0b19 	vmov	d9, r0, r1
 80078b4:	4642      	mov	r2, r8
 80078b6:	464b      	mov	r3, r9
 80078b8:	ec51 0b19 	vmov	r0, r1, d9
 80078bc:	f7f8 fcf6 	bl	80002ac <__adddf3>
 80078c0:	2400      	movs	r4, #0
 80078c2:	a379      	add	r3, pc, #484	; (adr r3, 8007aa8 <__ieee754_pow+0x9e0>)
 80078c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c8:	4620      	mov	r0, r4
 80078ca:	460d      	mov	r5, r1
 80078cc:	f7f8 fea4 	bl	8000618 <__aeabi_dmul>
 80078d0:	ec53 2b19 	vmov	r2, r3, d9
 80078d4:	4606      	mov	r6, r0
 80078d6:	460f      	mov	r7, r1
 80078d8:	4620      	mov	r0, r4
 80078da:	4629      	mov	r1, r5
 80078dc:	f7f8 fce4 	bl	80002a8 <__aeabi_dsub>
 80078e0:	4602      	mov	r2, r0
 80078e2:	460b      	mov	r3, r1
 80078e4:	4640      	mov	r0, r8
 80078e6:	4649      	mov	r1, r9
 80078e8:	f7f8 fcde 	bl	80002a8 <__aeabi_dsub>
 80078ec:	a370      	add	r3, pc, #448	; (adr r3, 8007ab0 <__ieee754_pow+0x9e8>)
 80078ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f2:	f7f8 fe91 	bl	8000618 <__aeabi_dmul>
 80078f6:	a370      	add	r3, pc, #448	; (adr r3, 8007ab8 <__ieee754_pow+0x9f0>)
 80078f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fc:	4680      	mov	r8, r0
 80078fe:	4689      	mov	r9, r1
 8007900:	4620      	mov	r0, r4
 8007902:	4629      	mov	r1, r5
 8007904:	f7f8 fe88 	bl	8000618 <__aeabi_dmul>
 8007908:	4602      	mov	r2, r0
 800790a:	460b      	mov	r3, r1
 800790c:	4640      	mov	r0, r8
 800790e:	4649      	mov	r1, r9
 8007910:	f7f8 fccc 	bl	80002ac <__adddf3>
 8007914:	4604      	mov	r4, r0
 8007916:	460d      	mov	r5, r1
 8007918:	4602      	mov	r2, r0
 800791a:	460b      	mov	r3, r1
 800791c:	4630      	mov	r0, r6
 800791e:	4639      	mov	r1, r7
 8007920:	f7f8 fcc4 	bl	80002ac <__adddf3>
 8007924:	4632      	mov	r2, r6
 8007926:	463b      	mov	r3, r7
 8007928:	4680      	mov	r8, r0
 800792a:	4689      	mov	r9, r1
 800792c:	f7f8 fcbc 	bl	80002a8 <__aeabi_dsub>
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	4620      	mov	r0, r4
 8007936:	4629      	mov	r1, r5
 8007938:	f7f8 fcb6 	bl	80002a8 <__aeabi_dsub>
 800793c:	4642      	mov	r2, r8
 800793e:	4606      	mov	r6, r0
 8007940:	460f      	mov	r7, r1
 8007942:	464b      	mov	r3, r9
 8007944:	4640      	mov	r0, r8
 8007946:	4649      	mov	r1, r9
 8007948:	f7f8 fe66 	bl	8000618 <__aeabi_dmul>
 800794c:	a35c      	add	r3, pc, #368	; (adr r3, 8007ac0 <__ieee754_pow+0x9f8>)
 800794e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007952:	4604      	mov	r4, r0
 8007954:	460d      	mov	r5, r1
 8007956:	f7f8 fe5f 	bl	8000618 <__aeabi_dmul>
 800795a:	a35b      	add	r3, pc, #364	; (adr r3, 8007ac8 <__ieee754_pow+0xa00>)
 800795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007960:	f7f8 fca2 	bl	80002a8 <__aeabi_dsub>
 8007964:	4622      	mov	r2, r4
 8007966:	462b      	mov	r3, r5
 8007968:	f7f8 fe56 	bl	8000618 <__aeabi_dmul>
 800796c:	a358      	add	r3, pc, #352	; (adr r3, 8007ad0 <__ieee754_pow+0xa08>)
 800796e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007972:	f7f8 fc9b 	bl	80002ac <__adddf3>
 8007976:	4622      	mov	r2, r4
 8007978:	462b      	mov	r3, r5
 800797a:	f7f8 fe4d 	bl	8000618 <__aeabi_dmul>
 800797e:	a356      	add	r3, pc, #344	; (adr r3, 8007ad8 <__ieee754_pow+0xa10>)
 8007980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007984:	f7f8 fc90 	bl	80002a8 <__aeabi_dsub>
 8007988:	4622      	mov	r2, r4
 800798a:	462b      	mov	r3, r5
 800798c:	f7f8 fe44 	bl	8000618 <__aeabi_dmul>
 8007990:	a353      	add	r3, pc, #332	; (adr r3, 8007ae0 <__ieee754_pow+0xa18>)
 8007992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007996:	f7f8 fc89 	bl	80002ac <__adddf3>
 800799a:	4622      	mov	r2, r4
 800799c:	462b      	mov	r3, r5
 800799e:	f7f8 fe3b 	bl	8000618 <__aeabi_dmul>
 80079a2:	4602      	mov	r2, r0
 80079a4:	460b      	mov	r3, r1
 80079a6:	4640      	mov	r0, r8
 80079a8:	4649      	mov	r1, r9
 80079aa:	f7f8 fc7d 	bl	80002a8 <__aeabi_dsub>
 80079ae:	4604      	mov	r4, r0
 80079b0:	460d      	mov	r5, r1
 80079b2:	4602      	mov	r2, r0
 80079b4:	460b      	mov	r3, r1
 80079b6:	4640      	mov	r0, r8
 80079b8:	4649      	mov	r1, r9
 80079ba:	f7f8 fe2d 	bl	8000618 <__aeabi_dmul>
 80079be:	2200      	movs	r2, #0
 80079c0:	ec41 0b19 	vmov	d9, r0, r1
 80079c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80079c8:	4620      	mov	r0, r4
 80079ca:	4629      	mov	r1, r5
 80079cc:	f7f8 fc6c 	bl	80002a8 <__aeabi_dsub>
 80079d0:	4602      	mov	r2, r0
 80079d2:	460b      	mov	r3, r1
 80079d4:	ec51 0b19 	vmov	r0, r1, d9
 80079d8:	f7f8 ff48 	bl	800086c <__aeabi_ddiv>
 80079dc:	4632      	mov	r2, r6
 80079de:	4604      	mov	r4, r0
 80079e0:	460d      	mov	r5, r1
 80079e2:	463b      	mov	r3, r7
 80079e4:	4640      	mov	r0, r8
 80079e6:	4649      	mov	r1, r9
 80079e8:	f7f8 fe16 	bl	8000618 <__aeabi_dmul>
 80079ec:	4632      	mov	r2, r6
 80079ee:	463b      	mov	r3, r7
 80079f0:	f7f8 fc5c 	bl	80002ac <__adddf3>
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	4620      	mov	r0, r4
 80079fa:	4629      	mov	r1, r5
 80079fc:	f7f8 fc54 	bl	80002a8 <__aeabi_dsub>
 8007a00:	4642      	mov	r2, r8
 8007a02:	464b      	mov	r3, r9
 8007a04:	f7f8 fc50 	bl	80002a8 <__aeabi_dsub>
 8007a08:	460b      	mov	r3, r1
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	493a      	ldr	r1, [pc, #232]	; (8007af8 <__ieee754_pow+0xa30>)
 8007a0e:	2000      	movs	r0, #0
 8007a10:	f7f8 fc4a 	bl	80002a8 <__aeabi_dsub>
 8007a14:	e9cd 0100 	strd	r0, r1, [sp]
 8007a18:	9b01      	ldr	r3, [sp, #4]
 8007a1a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a22:	da2f      	bge.n	8007a84 <__ieee754_pow+0x9bc>
 8007a24:	4650      	mov	r0, sl
 8007a26:	ed9d 0b00 	vldr	d0, [sp]
 8007a2a:	f000 f9cd 	bl	8007dc8 <scalbn>
 8007a2e:	ec51 0b10 	vmov	r0, r1, d0
 8007a32:	ec53 2b18 	vmov	r2, r3, d8
 8007a36:	f7ff bbe0 	b.w	80071fa <__ieee754_pow+0x132>
 8007a3a:	4b30      	ldr	r3, [pc, #192]	; (8007afc <__ieee754_pow+0xa34>)
 8007a3c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007a40:	429e      	cmp	r6, r3
 8007a42:	f77f af0b 	ble.w	800785c <__ieee754_pow+0x794>
 8007a46:	4b2e      	ldr	r3, [pc, #184]	; (8007b00 <__ieee754_pow+0xa38>)
 8007a48:	440b      	add	r3, r1
 8007a4a:	4303      	orrs	r3, r0
 8007a4c:	d00b      	beq.n	8007a66 <__ieee754_pow+0x99e>
 8007a4e:	a326      	add	r3, pc, #152	; (adr r3, 8007ae8 <__ieee754_pow+0xa20>)
 8007a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a54:	ec51 0b18 	vmov	r0, r1, d8
 8007a58:	f7f8 fdde 	bl	8000618 <__aeabi_dmul>
 8007a5c:	a322      	add	r3, pc, #136	; (adr r3, 8007ae8 <__ieee754_pow+0xa20>)
 8007a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a62:	f7ff bbca 	b.w	80071fa <__ieee754_pow+0x132>
 8007a66:	4622      	mov	r2, r4
 8007a68:	462b      	mov	r3, r5
 8007a6a:	f7f8 fc1d 	bl	80002a8 <__aeabi_dsub>
 8007a6e:	4642      	mov	r2, r8
 8007a70:	464b      	mov	r3, r9
 8007a72:	f7f9 f857 	bl	8000b24 <__aeabi_dcmpge>
 8007a76:	2800      	cmp	r0, #0
 8007a78:	f43f aef0 	beq.w	800785c <__ieee754_pow+0x794>
 8007a7c:	e7e7      	b.n	8007a4e <__ieee754_pow+0x986>
 8007a7e:	f04f 0a00 	mov.w	sl, #0
 8007a82:	e717      	b.n	80078b4 <__ieee754_pow+0x7ec>
 8007a84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	e7d2      	b.n	8007a32 <__ieee754_pow+0x96a>
 8007a8c:	491a      	ldr	r1, [pc, #104]	; (8007af8 <__ieee754_pow+0xa30>)
 8007a8e:	2000      	movs	r0, #0
 8007a90:	f7ff bb9e 	b.w	80071d0 <__ieee754_pow+0x108>
 8007a94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a98:	f7ff bb9a 	b.w	80071d0 <__ieee754_pow+0x108>
 8007a9c:	9000      	str	r0, [sp, #0]
 8007a9e:	f7ff bb76 	b.w	800718e <__ieee754_pow+0xc6>
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	f7ff bb60 	b.w	8007168 <__ieee754_pow+0xa0>
 8007aa8:	00000000 	.word	0x00000000
 8007aac:	3fe62e43 	.word	0x3fe62e43
 8007ab0:	fefa39ef 	.word	0xfefa39ef
 8007ab4:	3fe62e42 	.word	0x3fe62e42
 8007ab8:	0ca86c39 	.word	0x0ca86c39
 8007abc:	be205c61 	.word	0xbe205c61
 8007ac0:	72bea4d0 	.word	0x72bea4d0
 8007ac4:	3e663769 	.word	0x3e663769
 8007ac8:	c5d26bf1 	.word	0xc5d26bf1
 8007acc:	3ebbbd41 	.word	0x3ebbbd41
 8007ad0:	af25de2c 	.word	0xaf25de2c
 8007ad4:	3f11566a 	.word	0x3f11566a
 8007ad8:	16bebd93 	.word	0x16bebd93
 8007adc:	3f66c16c 	.word	0x3f66c16c
 8007ae0:	5555553e 	.word	0x5555553e
 8007ae4:	3fc55555 	.word	0x3fc55555
 8007ae8:	c2f8f359 	.word	0xc2f8f359
 8007aec:	01a56e1f 	.word	0x01a56e1f
 8007af0:	3fe00000 	.word	0x3fe00000
 8007af4:	000fffff 	.word	0x000fffff
 8007af8:	3ff00000 	.word	0x3ff00000
 8007afc:	4090cbff 	.word	0x4090cbff
 8007b00:	3f6f3400 	.word	0x3f6f3400
 8007b04:	652b82fe 	.word	0x652b82fe
 8007b08:	3c971547 	.word	0x3c971547

08007b0c <__ieee754_sqrt>:
 8007b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b10:	ec55 4b10 	vmov	r4, r5, d0
 8007b14:	4e56      	ldr	r6, [pc, #344]	; (8007c70 <__ieee754_sqrt+0x164>)
 8007b16:	43ae      	bics	r6, r5
 8007b18:	ee10 0a10 	vmov	r0, s0
 8007b1c:	ee10 3a10 	vmov	r3, s0
 8007b20:	4629      	mov	r1, r5
 8007b22:	462a      	mov	r2, r5
 8007b24:	d110      	bne.n	8007b48 <__ieee754_sqrt+0x3c>
 8007b26:	ee10 2a10 	vmov	r2, s0
 8007b2a:	462b      	mov	r3, r5
 8007b2c:	f7f8 fd74 	bl	8000618 <__aeabi_dmul>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	4620      	mov	r0, r4
 8007b36:	4629      	mov	r1, r5
 8007b38:	f7f8 fbb8 	bl	80002ac <__adddf3>
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	460d      	mov	r5, r1
 8007b40:	ec45 4b10 	vmov	d0, r4, r5
 8007b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b48:	2d00      	cmp	r5, #0
 8007b4a:	dc10      	bgt.n	8007b6e <__ieee754_sqrt+0x62>
 8007b4c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007b50:	4330      	orrs	r0, r6
 8007b52:	d0f5      	beq.n	8007b40 <__ieee754_sqrt+0x34>
 8007b54:	b15d      	cbz	r5, 8007b6e <__ieee754_sqrt+0x62>
 8007b56:	ee10 2a10 	vmov	r2, s0
 8007b5a:	462b      	mov	r3, r5
 8007b5c:	ee10 0a10 	vmov	r0, s0
 8007b60:	f7f8 fba2 	bl	80002a8 <__aeabi_dsub>
 8007b64:	4602      	mov	r2, r0
 8007b66:	460b      	mov	r3, r1
 8007b68:	f7f8 fe80 	bl	800086c <__aeabi_ddiv>
 8007b6c:	e7e6      	b.n	8007b3c <__ieee754_sqrt+0x30>
 8007b6e:	1509      	asrs	r1, r1, #20
 8007b70:	d076      	beq.n	8007c60 <__ieee754_sqrt+0x154>
 8007b72:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007b76:	07ce      	lsls	r6, r1, #31
 8007b78:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007b7c:	bf5e      	ittt	pl
 8007b7e:	0fda      	lsrpl	r2, r3, #31
 8007b80:	005b      	lslpl	r3, r3, #1
 8007b82:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007b86:	0fda      	lsrs	r2, r3, #31
 8007b88:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007b8c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007b90:	2000      	movs	r0, #0
 8007b92:	106d      	asrs	r5, r5, #1
 8007b94:	005b      	lsls	r3, r3, #1
 8007b96:	f04f 0e16 	mov.w	lr, #22
 8007b9a:	4684      	mov	ip, r0
 8007b9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ba0:	eb0c 0401 	add.w	r4, ip, r1
 8007ba4:	4294      	cmp	r4, r2
 8007ba6:	bfde      	ittt	le
 8007ba8:	1b12      	suble	r2, r2, r4
 8007baa:	eb04 0c01 	addle.w	ip, r4, r1
 8007bae:	1840      	addle	r0, r0, r1
 8007bb0:	0052      	lsls	r2, r2, #1
 8007bb2:	f1be 0e01 	subs.w	lr, lr, #1
 8007bb6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007bba:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007bbe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007bc2:	d1ed      	bne.n	8007ba0 <__ieee754_sqrt+0x94>
 8007bc4:	4671      	mov	r1, lr
 8007bc6:	2720      	movs	r7, #32
 8007bc8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007bcc:	4562      	cmp	r2, ip
 8007bce:	eb04 060e 	add.w	r6, r4, lr
 8007bd2:	dc02      	bgt.n	8007bda <__ieee754_sqrt+0xce>
 8007bd4:	d113      	bne.n	8007bfe <__ieee754_sqrt+0xf2>
 8007bd6:	429e      	cmp	r6, r3
 8007bd8:	d811      	bhi.n	8007bfe <__ieee754_sqrt+0xf2>
 8007bda:	2e00      	cmp	r6, #0
 8007bdc:	eb06 0e04 	add.w	lr, r6, r4
 8007be0:	da43      	bge.n	8007c6a <__ieee754_sqrt+0x15e>
 8007be2:	f1be 0f00 	cmp.w	lr, #0
 8007be6:	db40      	blt.n	8007c6a <__ieee754_sqrt+0x15e>
 8007be8:	f10c 0801 	add.w	r8, ip, #1
 8007bec:	eba2 020c 	sub.w	r2, r2, ip
 8007bf0:	429e      	cmp	r6, r3
 8007bf2:	bf88      	it	hi
 8007bf4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007bf8:	1b9b      	subs	r3, r3, r6
 8007bfa:	4421      	add	r1, r4
 8007bfc:	46c4      	mov	ip, r8
 8007bfe:	0052      	lsls	r2, r2, #1
 8007c00:	3f01      	subs	r7, #1
 8007c02:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007c06:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007c0a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007c0e:	d1dd      	bne.n	8007bcc <__ieee754_sqrt+0xc0>
 8007c10:	4313      	orrs	r3, r2
 8007c12:	d006      	beq.n	8007c22 <__ieee754_sqrt+0x116>
 8007c14:	1c4c      	adds	r4, r1, #1
 8007c16:	bf13      	iteet	ne
 8007c18:	3101      	addne	r1, #1
 8007c1a:	3001      	addeq	r0, #1
 8007c1c:	4639      	moveq	r1, r7
 8007c1e:	f021 0101 	bicne.w	r1, r1, #1
 8007c22:	1043      	asrs	r3, r0, #1
 8007c24:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007c28:	0849      	lsrs	r1, r1, #1
 8007c2a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007c2e:	07c2      	lsls	r2, r0, #31
 8007c30:	bf48      	it	mi
 8007c32:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007c36:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	463d      	mov	r5, r7
 8007c3e:	e77f      	b.n	8007b40 <__ieee754_sqrt+0x34>
 8007c40:	0ada      	lsrs	r2, r3, #11
 8007c42:	3815      	subs	r0, #21
 8007c44:	055b      	lsls	r3, r3, #21
 8007c46:	2a00      	cmp	r2, #0
 8007c48:	d0fa      	beq.n	8007c40 <__ieee754_sqrt+0x134>
 8007c4a:	02d7      	lsls	r7, r2, #11
 8007c4c:	d50a      	bpl.n	8007c64 <__ieee754_sqrt+0x158>
 8007c4e:	f1c1 0420 	rsb	r4, r1, #32
 8007c52:	fa23 f404 	lsr.w	r4, r3, r4
 8007c56:	1e4d      	subs	r5, r1, #1
 8007c58:	408b      	lsls	r3, r1
 8007c5a:	4322      	orrs	r2, r4
 8007c5c:	1b41      	subs	r1, r0, r5
 8007c5e:	e788      	b.n	8007b72 <__ieee754_sqrt+0x66>
 8007c60:	4608      	mov	r0, r1
 8007c62:	e7f0      	b.n	8007c46 <__ieee754_sqrt+0x13a>
 8007c64:	0052      	lsls	r2, r2, #1
 8007c66:	3101      	adds	r1, #1
 8007c68:	e7ef      	b.n	8007c4a <__ieee754_sqrt+0x13e>
 8007c6a:	46e0      	mov	r8, ip
 8007c6c:	e7be      	b.n	8007bec <__ieee754_sqrt+0xe0>
 8007c6e:	bf00      	nop
 8007c70:	7ff00000 	.word	0x7ff00000

08007c74 <fabs>:
 8007c74:	ec51 0b10 	vmov	r0, r1, d0
 8007c78:	ee10 2a10 	vmov	r2, s0
 8007c7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007c80:	ec43 2b10 	vmov	d0, r2, r3
 8007c84:	4770      	bx	lr

08007c86 <finite>:
 8007c86:	b082      	sub	sp, #8
 8007c88:	ed8d 0b00 	vstr	d0, [sp]
 8007c8c:	9801      	ldr	r0, [sp, #4]
 8007c8e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007c92:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007c96:	0fc0      	lsrs	r0, r0, #31
 8007c98:	b002      	add	sp, #8
 8007c9a:	4770      	bx	lr
 8007c9c:	0000      	movs	r0, r0
	...

08007ca0 <nan>:
 8007ca0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007ca8 <nan+0x8>
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	00000000 	.word	0x00000000
 8007cac:	7ff80000 	.word	0x7ff80000

08007cb0 <rint>:
 8007cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cb2:	ec51 0b10 	vmov	r0, r1, d0
 8007cb6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007cba:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007cbe:	2e13      	cmp	r6, #19
 8007cc0:	ee10 4a10 	vmov	r4, s0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007cca:	dc58      	bgt.n	8007d7e <rint+0xce>
 8007ccc:	2e00      	cmp	r6, #0
 8007cce:	da2b      	bge.n	8007d28 <rint+0x78>
 8007cd0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007cd4:	4302      	orrs	r2, r0
 8007cd6:	d023      	beq.n	8007d20 <rint+0x70>
 8007cd8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007cdc:	4302      	orrs	r2, r0
 8007cde:	4254      	negs	r4, r2
 8007ce0:	4314      	orrs	r4, r2
 8007ce2:	0c4b      	lsrs	r3, r1, #17
 8007ce4:	0b24      	lsrs	r4, r4, #12
 8007ce6:	045b      	lsls	r3, r3, #17
 8007ce8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007cec:	ea44 0103 	orr.w	r1, r4, r3
 8007cf0:	4b32      	ldr	r3, [pc, #200]	; (8007dbc <rint+0x10c>)
 8007cf2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007cf6:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4630      	mov	r0, r6
 8007d00:	4639      	mov	r1, r7
 8007d02:	f7f8 fad3 	bl	80002ac <__adddf3>
 8007d06:	e9cd 0100 	strd	r0, r1, [sp]
 8007d0a:	463b      	mov	r3, r7
 8007d0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d10:	4632      	mov	r2, r6
 8007d12:	f7f8 fac9 	bl	80002a8 <__aeabi_dsub>
 8007d16:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007d1a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007d1e:	4639      	mov	r1, r7
 8007d20:	ec41 0b10 	vmov	d0, r0, r1
 8007d24:	b003      	add	sp, #12
 8007d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d28:	4a25      	ldr	r2, [pc, #148]	; (8007dc0 <rint+0x110>)
 8007d2a:	4132      	asrs	r2, r6
 8007d2c:	ea01 0702 	and.w	r7, r1, r2
 8007d30:	4307      	orrs	r7, r0
 8007d32:	d0f5      	beq.n	8007d20 <rint+0x70>
 8007d34:	0851      	lsrs	r1, r2, #1
 8007d36:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8007d3a:	4314      	orrs	r4, r2
 8007d3c:	d00c      	beq.n	8007d58 <rint+0xa8>
 8007d3e:	ea23 0201 	bic.w	r2, r3, r1
 8007d42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007d46:	2e13      	cmp	r6, #19
 8007d48:	fa43 f606 	asr.w	r6, r3, r6
 8007d4c:	bf0c      	ite	eq
 8007d4e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007d52:	2400      	movne	r4, #0
 8007d54:	ea42 0306 	orr.w	r3, r2, r6
 8007d58:	4918      	ldr	r1, [pc, #96]	; (8007dbc <rint+0x10c>)
 8007d5a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007d5e:	4622      	mov	r2, r4
 8007d60:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007d64:	4620      	mov	r0, r4
 8007d66:	4629      	mov	r1, r5
 8007d68:	f7f8 faa0 	bl	80002ac <__adddf3>
 8007d6c:	e9cd 0100 	strd	r0, r1, [sp]
 8007d70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d74:	4622      	mov	r2, r4
 8007d76:	462b      	mov	r3, r5
 8007d78:	f7f8 fa96 	bl	80002a8 <__aeabi_dsub>
 8007d7c:	e7d0      	b.n	8007d20 <rint+0x70>
 8007d7e:	2e33      	cmp	r6, #51	; 0x33
 8007d80:	dd07      	ble.n	8007d92 <rint+0xe2>
 8007d82:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007d86:	d1cb      	bne.n	8007d20 <rint+0x70>
 8007d88:	ee10 2a10 	vmov	r2, s0
 8007d8c:	f7f8 fa8e 	bl	80002ac <__adddf3>
 8007d90:	e7c6      	b.n	8007d20 <rint+0x70>
 8007d92:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007d96:	f04f 36ff 	mov.w	r6, #4294967295
 8007d9a:	40d6      	lsrs	r6, r2
 8007d9c:	4230      	tst	r0, r6
 8007d9e:	d0bf      	beq.n	8007d20 <rint+0x70>
 8007da0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8007da4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8007da8:	bf1f      	itttt	ne
 8007daa:	ea24 0101 	bicne.w	r1, r4, r1
 8007dae:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8007db2:	fa44 f202 	asrne.w	r2, r4, r2
 8007db6:	ea41 0402 	orrne.w	r4, r1, r2
 8007dba:	e7cd      	b.n	8007d58 <rint+0xa8>
 8007dbc:	08008348 	.word	0x08008348
 8007dc0:	000fffff 	.word	0x000fffff
 8007dc4:	00000000 	.word	0x00000000

08007dc8 <scalbn>:
 8007dc8:	b570      	push	{r4, r5, r6, lr}
 8007dca:	ec55 4b10 	vmov	r4, r5, d0
 8007dce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007dd2:	4606      	mov	r6, r0
 8007dd4:	462b      	mov	r3, r5
 8007dd6:	b99a      	cbnz	r2, 8007e00 <scalbn+0x38>
 8007dd8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007ddc:	4323      	orrs	r3, r4
 8007dde:	d036      	beq.n	8007e4e <scalbn+0x86>
 8007de0:	4b39      	ldr	r3, [pc, #228]	; (8007ec8 <scalbn+0x100>)
 8007de2:	4629      	mov	r1, r5
 8007de4:	ee10 0a10 	vmov	r0, s0
 8007de8:	2200      	movs	r2, #0
 8007dea:	f7f8 fc15 	bl	8000618 <__aeabi_dmul>
 8007dee:	4b37      	ldr	r3, [pc, #220]	; (8007ecc <scalbn+0x104>)
 8007df0:	429e      	cmp	r6, r3
 8007df2:	4604      	mov	r4, r0
 8007df4:	460d      	mov	r5, r1
 8007df6:	da10      	bge.n	8007e1a <scalbn+0x52>
 8007df8:	a32b      	add	r3, pc, #172	; (adr r3, 8007ea8 <scalbn+0xe0>)
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	e03a      	b.n	8007e76 <scalbn+0xae>
 8007e00:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007e04:	428a      	cmp	r2, r1
 8007e06:	d10c      	bne.n	8007e22 <scalbn+0x5a>
 8007e08:	ee10 2a10 	vmov	r2, s0
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	4629      	mov	r1, r5
 8007e10:	f7f8 fa4c 	bl	80002ac <__adddf3>
 8007e14:	4604      	mov	r4, r0
 8007e16:	460d      	mov	r5, r1
 8007e18:	e019      	b.n	8007e4e <scalbn+0x86>
 8007e1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007e1e:	460b      	mov	r3, r1
 8007e20:	3a36      	subs	r2, #54	; 0x36
 8007e22:	4432      	add	r2, r6
 8007e24:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007e28:	428a      	cmp	r2, r1
 8007e2a:	dd08      	ble.n	8007e3e <scalbn+0x76>
 8007e2c:	2d00      	cmp	r5, #0
 8007e2e:	a120      	add	r1, pc, #128	; (adr r1, 8007eb0 <scalbn+0xe8>)
 8007e30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e34:	da1c      	bge.n	8007e70 <scalbn+0xa8>
 8007e36:	a120      	add	r1, pc, #128	; (adr r1, 8007eb8 <scalbn+0xf0>)
 8007e38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e3c:	e018      	b.n	8007e70 <scalbn+0xa8>
 8007e3e:	2a00      	cmp	r2, #0
 8007e40:	dd08      	ble.n	8007e54 <scalbn+0x8c>
 8007e42:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007e46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007e4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007e4e:	ec45 4b10 	vmov	d0, r4, r5
 8007e52:	bd70      	pop	{r4, r5, r6, pc}
 8007e54:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007e58:	da19      	bge.n	8007e8e <scalbn+0xc6>
 8007e5a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007e5e:	429e      	cmp	r6, r3
 8007e60:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007e64:	dd0a      	ble.n	8007e7c <scalbn+0xb4>
 8007e66:	a112      	add	r1, pc, #72	; (adr r1, 8007eb0 <scalbn+0xe8>)
 8007e68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1e2      	bne.n	8007e36 <scalbn+0x6e>
 8007e70:	a30f      	add	r3, pc, #60	; (adr r3, 8007eb0 <scalbn+0xe8>)
 8007e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e76:	f7f8 fbcf 	bl	8000618 <__aeabi_dmul>
 8007e7a:	e7cb      	b.n	8007e14 <scalbn+0x4c>
 8007e7c:	a10a      	add	r1, pc, #40	; (adr r1, 8007ea8 <scalbn+0xe0>)
 8007e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d0b8      	beq.n	8007df8 <scalbn+0x30>
 8007e86:	a10e      	add	r1, pc, #56	; (adr r1, 8007ec0 <scalbn+0xf8>)
 8007e88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e8c:	e7b4      	b.n	8007df8 <scalbn+0x30>
 8007e8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007e92:	3236      	adds	r2, #54	; 0x36
 8007e94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007e98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	4b0c      	ldr	r3, [pc, #48]	; (8007ed0 <scalbn+0x108>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	e7e8      	b.n	8007e76 <scalbn+0xae>
 8007ea4:	f3af 8000 	nop.w
 8007ea8:	c2f8f359 	.word	0xc2f8f359
 8007eac:	01a56e1f 	.word	0x01a56e1f
 8007eb0:	8800759c 	.word	0x8800759c
 8007eb4:	7e37e43c 	.word	0x7e37e43c
 8007eb8:	8800759c 	.word	0x8800759c
 8007ebc:	fe37e43c 	.word	0xfe37e43c
 8007ec0:	c2f8f359 	.word	0xc2f8f359
 8007ec4:	81a56e1f 	.word	0x81a56e1f
 8007ec8:	43500000 	.word	0x43500000
 8007ecc:	ffff3cb0 	.word	0xffff3cb0
 8007ed0:	3c900000 	.word	0x3c900000

08007ed4 <_init>:
 8007ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed6:	bf00      	nop
 8007ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eda:	bc08      	pop	{r3}
 8007edc:	469e      	mov	lr, r3
 8007ede:	4770      	bx	lr

08007ee0 <_fini>:
 8007ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee2:	bf00      	nop
 8007ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ee6:	bc08      	pop	{r3}
 8007ee8:	469e      	mov	lr, r3
 8007eea:	4770      	bx	lr
