
TPFinalPDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004080  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08004230  08004230  00014230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004320  08004320  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08004320  08004320  00014320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004328  08004328  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004328  08004328  00014328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800432c  0800432c  0001432c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          000000bc  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000138  20000138  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001007e  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002763  00000000  00000000  0003012a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  00032890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009e8  00000000  00000000  00033380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004370  00000000  00000000  00033d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011346  00000000  00000000  000380d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9d9b  00000000  00000000  0004941e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001331b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ea0  00000000  00000000  0013320c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004218 	.word	0x08004218

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08004218 	.word	0x08004218

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <uartinit>:
#define BAUD_RATE 9600

UART_HandleTypeDef uart_handle ;
uint8_t data_rx[2] ;
volatile bool rx_flag ;
bool uartinit(){
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	rx_flag = false ;
 800059e:	4b19      	ldr	r3, [pc, #100]	; (8000604 <uartinit+0x6c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
	uint16_t size = 2 ;
 80005a4:	2302      	movs	r3, #2
 80005a6:	80fb      	strh	r3, [r7, #6]

	uart_handle.Instance 		  = USART3;
 80005a8:	4b17      	ldr	r3, [pc, #92]	; (8000608 <uartinit+0x70>)
 80005aa:	4a18      	ldr	r2, [pc, #96]	; (800060c <uartinit+0x74>)
 80005ac:	601a      	str	r2, [r3, #0]
	uart_handle.Init.BaudRate     = BAUD_RATE;
 80005ae:	4b16      	ldr	r3, [pc, #88]	; (8000608 <uartinit+0x70>)
 80005b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005b4:	605a      	str	r2, [r3, #4]
	uart_handle.Init.WordLength   = UART_WORDLENGTH_8B;
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <uartinit+0x70>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
	uart_handle.Init.StopBits     = UART_STOPBITS_1;
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <uartinit+0x70>)
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
	uart_handle.Init.Parity       = UART_PARITY_NONE ;
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <uartinit+0x70>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
	uart_handle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <uartinit+0x70>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	619a      	str	r2, [r3, #24]
	uart_handle.Init.Mode         = UART_MODE_TX_RX;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <uartinit+0x70>)
 80005d0:	220c      	movs	r2, #12
 80005d2:	615a      	str	r2, [r3, #20]
	uart_handle.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <uartinit+0x70>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&uart_handle)){
 80005da:	480b      	ldr	r0, [pc, #44]	; (8000608 <uartinit+0x70>)
 80005dc:	f001 ff39 	bl	8002452 <HAL_UART_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <uartinit+0x52>
		return false ;
 80005e6:	2300      	movs	r3, #0
 80005e8:	e007      	b.n	80005fa <uartinit+0x62>
	}
	HAL_UART_Transmit(&uart_handle, "inicio correcto", 30, 500) ;
 80005ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005ee:	221e      	movs	r2, #30
 80005f0:	4907      	ldr	r1, [pc, #28]	; (8000610 <uartinit+0x78>)
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <uartinit+0x70>)
 80005f4:	f001 ff7a 	bl	80024ec <HAL_UART_Transmit>
	//(&uart_handle, &data_rx, 2) ;
	//HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(USART3_IRQn);


	return true ;
 80005f8:	2301      	movs	r3, #1
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200000de 	.word	0x200000de
 8000608:	200000e0 	.word	0x200000e0
 800060c:	40004800 	.word	0x40004800
 8000610:	08004230 	.word	0x08004230

08000614 <USART3_IRQHandler>:


void USART3_IRQHandler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&uart_handle);
 8000618:	4802      	ldr	r0, [pc, #8]	; (8000624 <USART3_IRQHandler+0x10>)
 800061a:	f002 f829 	bl	8002670 <HAL_UART_IRQHandler>
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000e0 	.word	0x200000e0

08000628 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]

	rx_flag = true ;
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <HAL_UART_RxCpltCallback+0x20>)
 8000632:	2201      	movs	r2, #1
 8000634:	701a      	strb	r2, [r3, #0]
	//HAL_UART_Transmit(&uart_handle, "si", 2, 200) ;
	//HAL_NVIC_EnableIRQ(USART3_IRQn);
	HAL_UART_Receive_IT(&uart_handle, data_rx, 2) ;
 8000636:	2202      	movs	r2, #2
 8000638:	4904      	ldr	r1, [pc, #16]	; (800064c <HAL_UART_RxCpltCallback+0x24>)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <HAL_UART_RxCpltCallback+0x28>)
 800063c:	f001 ffe8 	bl	8002610 <HAL_UART_Receive_IT>

}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000de 	.word	0x200000de
 800064c:	200000dc 	.word	0x200000dc
 8000650:	200000e0 	.word	0x200000e0

08000654 <uartsendString>:

	return rx_flag ;

}

void uartsendString(uint8_t * pstring){
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&uart_handle,pstring, strlen((char *)pstring), 500) ;
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f7ff fdc7 	bl	80001f0 <strlen>
 8000662:	4603      	mov	r3, r0
 8000664:	b29a      	uxth	r2, r3
 8000666:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	4803      	ldr	r0, [pc, #12]	; (800067c <uartsendString+0x28>)
 800066e:	f001 ff3d 	bl	80024ec <HAL_UART_Transmit>

}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200000e0 	.word	0x200000e0

08000680 <rtcInit>:


static void setDayAndHour(void) ;

void rtcInit()
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
	__HAL_RCC_PWR_CLK_ENABLE() ;
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4b21      	ldr	r3, [pc, #132]	; (8000710 <rtcInit+0x90>)
 800068c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068e:	4a20      	ldr	r2, [pc, #128]	; (8000710 <rtcInit+0x90>)
 8000690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000694:	6413      	str	r3, [r2, #64]	; 0x40
 8000696:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <rtcInit+0x90>)
 8000698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
	HAL_PWR_EnableBkUpAccess() ;
 80006a2:	f000 fe65 	bl	8001370 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE) ;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <rtcInit+0x90>)
 80006a8:	689b      	ldr	r3, [r3, #8]
 80006aa:	4a19      	ldr	r2, [pc, #100]	; (8000710 <rtcInit+0x90>)
 80006ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80006b0:	6093      	str	r3, [r2, #8]
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <rtcInit+0x90>)
 80006b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006b6:	4a16      	ldr	r2, [pc, #88]	; (8000710 <rtcInit+0x90>)
 80006b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006bc:	6713      	str	r3, [r2, #112]	; 0x70
	__HAL_RCC_RTC_ENABLE();
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <rtcInit+0x94>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	601a      	str	r2, [r3, #0]
	//HAL_PWR_EnableBkUpAccess() ;

	rtc.Instance = RTC;
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <rtcInit+0x98>)
 80006c6:	4a15      	ldr	r2, [pc, #84]	; (800071c <rtcInit+0x9c>)
 80006c8:	601a      	str	r2, [r3, #0]
	rtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <rtcInit+0x98>)
 80006cc:	2240      	movs	r2, #64	; 0x40
 80006ce:	605a      	str	r2, [r3, #4]
	rtc.Init.AsynchPrediv = 127;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <rtcInit+0x98>)
 80006d2:	227f      	movs	r2, #127	; 0x7f
 80006d4:	609a      	str	r2, [r3, #8]
	rtc.Init.SynchPrediv = 255;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <rtcInit+0x98>)
 80006d8:	22ff      	movs	r2, #255	; 0xff
 80006da:	60da      	str	r2, [r3, #12]
	rtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006dc:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <rtcInit+0x98>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
	rtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <rtcInit+0x98>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
	rtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006e8:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <rtcInit+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]

	if (HAL_RTC_Init(&rtc) != HAL_OK)
 80006ee:	480a      	ldr	r0, [pc, #40]	; (8000718 <rtcInit+0x98>)
 80006f0:	f001 fb2a 	bl	8001d48 <HAL_RTC_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d002      	beq.n	8000700 <rtcInit+0x80>
	{
	    uartsendString("\r\nerrorRTCInit\r\n") ;
 80006fa:	4809      	ldr	r0, [pc, #36]	; (8000720 <rtcInit+0xa0>)
 80006fc:	f7ff ffaa 	bl	8000654 <uartsendString>

	}
	setDayAndHour() ;
 8000700:	f000 f810 	bl	8000724 <setDayAndHour>
	HAL_PWR_DisableBkUpAccess() ;
 8000704:	f000 fe48 	bl	8001398 <HAL_PWR_DisableBkUpAccess>

}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40023800 	.word	0x40023800
 8000714:	42470e3c 	.word	0x42470e3c
 8000718:	20000098 	.word	0x20000098
 800071c:	40002800 	.word	0x40002800
 8000720:	08004240 	.word	0x08004240

08000724 <setDayAndHour>:


static void setDayAndHour(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0

	  RTC_TimeTypeDef sTime = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 8000738:	2300      	movs	r3, #0
 800073a:	603b      	str	r3, [r7, #0]
	  sTime.Hours = 10;
 800073c:	230a      	movs	r3, #10
 800073e:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = 10;
 8000740:	230a      	movs	r3, #10
 8000742:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 10;
 8000744:	230a      	movs	r3, #10
 8000746:	71bb      	strb	r3, [r7, #6]
	  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000748:	2300      	movs	r3, #0
 800074a:	71fb      	strb	r3, [r7, #7]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_SET;
 8000750:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000754:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&rtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2200      	movs	r2, #0
 800075a:	4619      	mov	r1, r3
 800075c:	4814      	ldr	r0, [pc, #80]	; (80007b0 <setDayAndHour+0x8c>)
 800075e:	f001 fb8e 	bl	8001e7e <HAL_RTC_SetTime>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d002      	beq.n	800076e <setDayAndHour+0x4a>
	  {
	     uartsendString("\r\nerror set Time\r\n") ;
 8000768:	4812      	ldr	r0, [pc, #72]	; (80007b4 <setDayAndHour+0x90>)
 800076a:	f7ff ff73 	bl	8000654 <uartsendString>
	   }
	   sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800076e:	2301      	movs	r3, #1
 8000770:	703b      	strb	r3, [r7, #0]
	   sDate.Month = RTC_MONTH_JANUARY;
 8000772:	2301      	movs	r3, #1
 8000774:	707b      	strb	r3, [r7, #1]
	   sDate.Date = 1;
 8000776:	2301      	movs	r3, #1
 8000778:	70bb      	strb	r3, [r7, #2]
	   sDate.Year = 50;
 800077a:	2332      	movs	r3, #50	; 0x32
 800077c:	70fb      	strb	r3, [r7, #3]

	   if (HAL_RTC_SetDate(&rtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	4619      	mov	r1, r3
 8000784:	480a      	ldr	r0, [pc, #40]	; (80007b0 <setDayAndHour+0x8c>)
 8000786:	f001 fc95 	bl	80020b4 <HAL_RTC_SetDate>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d002      	beq.n	8000796 <setDayAndHour+0x72>
	   {
		 uartsendString("error set Date\r\n") ;
 8000790:	4809      	ldr	r0, [pc, #36]	; (80007b8 <setDayAndHour+0x94>)
 8000792:	f7ff ff5f 	bl	8000654 <uartsendString>
	   }
	   /** Enable the reference Clock input
	   */
	   if (HAL_RTCEx_SetRefClock(&rtc) != HAL_OK)
 8000796:	4806      	ldr	r0, [pc, #24]	; (80007b0 <setDayAndHour+0x8c>)
 8000798:	f001 fe12 	bl	80023c0 <HAL_RTCEx_SetRefClock>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d002      	beq.n	80007a8 <setDayAndHour+0x84>
	   {
		   uartsendString("SET REF ERROR\r\n") ;
 80007a2:	4806      	ldr	r0, [pc, #24]	; (80007bc <setDayAndHour+0x98>)
 80007a4:	f7ff ff56 	bl	8000654 <uartsendString>
	   }
	   /* USER CODE BEGIN RTC_Init 2 */
	  // HAL_RTCEx_BKUPWrite(&rtc,  RTC_BKP_DR1, 0x32F2);
	   /* USER CODE END RTC_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000098 	.word	0x20000098
 80007b4:	08004254 	.word	0x08004254
 80007b8:	08004268 	.word	0x08004268
 80007bc:	0800427c 	.word	0x0800427c

080007c0 <printRTCParameters>:


//uint8_t aShowTime[50] = {0};
//uint8_t aShowDate[50] = {0};
void printRTCParameters(){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b09c      	sub	sp, #112	; 0x70
 80007c4:	af02      	add	r7, sp, #8
	uint8_t aShowTime[50] = {0};
 80007c6:	2300      	movs	r3, #0
 80007c8:	637b      	str	r3, [r7, #52]	; 0x34
 80007ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007ce:	222e      	movs	r2, #46	; 0x2e
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f003 f8ea 	bl	80039ac <memset>
	uint8_t aShowDate[50] = {0};
 80007d8:	2300      	movs	r3, #0
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	222e      	movs	r2, #46	; 0x2e
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f003 f8e2 	bl	80039ac <memset>
	static RTC_DateTypeDef 	sdatestructureget ;;
	static RTC_TimeTypeDef stimestructureget ;
	/* USER CODE END WHILE */
	if (HAL_RTC_GetTime(&rtc, &stimestructureget, RTC_FORMAT_BIN) != HAL_OK)
 80007e8:	2200      	movs	r2, #0
 80007ea:	491f      	ldr	r1, [pc, #124]	; (8000868 <printRTCParameters+0xa8>)
 80007ec:	481f      	ldr	r0, [pc, #124]	; (800086c <printRTCParameters+0xac>)
 80007ee:	f001 fc03 	bl	8001ff8 <HAL_RTC_GetTime>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d003      	beq.n	8000800 <printRTCParameters+0x40>
	{
		uartsendString("error get time \r\n") ;
 80007f8:	481d      	ldr	r0, [pc, #116]	; (8000870 <printRTCParameters+0xb0>)
 80007fa:	f7ff ff2b 	bl	8000654 <uartsendString>
	    	//HAL_UART_Transmit(&huart3, aShowTime, 51, 500);;
	    	uartsendString(aShowDate) ;
	    	uartsendString(aShowTime) ;
	    }
	}
}
 80007fe:	e02f      	b.n	8000860 <printRTCParameters+0xa0>
		if(HAL_RTC_GetDate(&rtc, &sdatestructureget, RTC_FORMAT_BIN) == HAL_OK)
 8000800:	2200      	movs	r2, #0
 8000802:	491c      	ldr	r1, [pc, #112]	; (8000874 <printRTCParameters+0xb4>)
 8000804:	4819      	ldr	r0, [pc, #100]	; (800086c <printRTCParameters+0xac>)
 8000806:	f001 fcfc 	bl	8002202 <HAL_RTC_GetDate>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d127      	bne.n	8000860 <printRTCParameters+0xa0>
			sprintf((char *)aShowDate, "lh: %2d:%2d:%2d  ", stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <printRTCParameters+0xa8>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <printRTCParameters+0xa8>)
 8000818:	785b      	ldrb	r3, [r3, #1]
 800081a:	4619      	mov	r1, r3
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <printRTCParameters+0xa8>)
 800081e:	789b      	ldrb	r3, [r3, #2]
 8000820:	4638      	mov	r0, r7
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	460b      	mov	r3, r1
 8000826:	4914      	ldr	r1, [pc, #80]	; (8000878 <printRTCParameters+0xb8>)
 8000828:	f003 f8c8 	bl	80039bc <siprintf>
	    	sprintf((char *)aShowTime, "fecha: %2d-%2d-%2d\r\n", sdatestructureget.Month, sdatestructureget.Date, 2000 + sdatestructureget.Year);
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <printRTCParameters+0xb4>)
 800082e:	785b      	ldrb	r3, [r3, #1]
 8000830:	461a      	mov	r2, r3
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <printRTCParameters+0xb4>)
 8000834:	789b      	ldrb	r3, [r3, #2]
 8000836:	4619      	mov	r1, r3
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <printRTCParameters+0xb4>)
 800083a:	78db      	ldrb	r3, [r3, #3]
 800083c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000840:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	460b      	mov	r3, r1
 8000848:	490c      	ldr	r1, [pc, #48]	; (800087c <printRTCParameters+0xbc>)
 800084a:	f003 f8b7 	bl	80039bc <siprintf>
	    	uartsendString(aShowDate) ;
 800084e:	463b      	mov	r3, r7
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff feff 	bl	8000654 <uartsendString>
	    	uartsendString(aShowTime) ;
 8000856:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fefa 	bl	8000654 <uartsendString>
}
 8000860:	bf00      	nop
 8000862:	3768      	adds	r7, #104	; 0x68
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200000b8 	.word	0x200000b8
 800086c:	20000098 	.word	0x20000098
 8000870:	0800428c 	.word	0x0800428c
 8000874:	200000cc 	.word	0x200000cc
 8000878:	080042a0 	.word	0x080042a0
 800087c:	080042b4 	.word	0x080042b4

08000880 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d10e      	bne.n	80008ae <BSP_LED_Init+0x2e>
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <BSP_LED_Init+0x94>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	4a1e      	ldr	r2, [pc, #120]	; (8000914 <BSP_LED_Init+0x94>)
 800089a:	f043 0302 	orr.w	r3, r3, #2
 800089e:	6313      	str	r3, [r2, #48]	; 0x30
 80008a0:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <BSP_LED_Init+0x94>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a4:	f003 0302 	and.w	r3, r3, #2
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	e00d      	b.n	80008ca <BSP_LED_Init+0x4a>
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <BSP_LED_Init+0x94>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a17      	ldr	r2, [pc, #92]	; (8000914 <BSP_LED_Init+0x94>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <BSP_LED_Init+0x94>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	4a12      	ldr	r2, [pc, #72]	; (8000918 <BSP_LED_Init+0x98>)
 80008ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80008dc:	2302      	movs	r3, #2
 80008de:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	4a0e      	ldr	r2, [pc, #56]	; (800091c <BSP_LED_Init+0x9c>)
 80008e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008e8:	f107 0214 	add.w	r2, r7, #20
 80008ec:	4611      	mov	r1, r2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 faec 	bl	8000ecc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4a09      	ldr	r2, [pc, #36]	; (800091c <BSP_LED_Init+0x9c>)
 80008f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	4a06      	ldr	r2, [pc, #24]	; (8000918 <BSP_LED_Init+0x98>)
 8000900:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000904:	2200      	movs	r2, #0
 8000906:	4619      	mov	r1, r3
 8000908:	f000 fca4 	bl	8001254 <HAL_GPIO_WritePin>
}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	; 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	080042cc 	.word	0x080042cc
 800091c:	20000000 	.word	0x20000000

08000920 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	4a07      	ldr	r2, [pc, #28]	; (800094c <BSP_LED_On+0x2c>)
 800092e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	4a06      	ldr	r2, [pc, #24]	; (8000950 <BSP_LED_On+0x30>)
 8000936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800093a:	2201      	movs	r2, #1
 800093c:	4619      	mov	r1, r3
 800093e:	f000 fc89 	bl	8001254 <HAL_GPIO_WritePin>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000000 	.word	0x20000000
 8000950:	080042cc 	.word	0x080042cc

08000954 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	4a07      	ldr	r2, [pc, #28]	; (8000980 <BSP_LED_Toggle+0x2c>)
 8000962:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	4906      	ldr	r1, [pc, #24]	; (8000984 <BSP_LED_Toggle+0x30>)
 800096a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800096e:	4619      	mov	r1, r3
 8000970:	4610      	mov	r0, r2
 8000972:	f000 fc88 	bl	8001286 <HAL_GPIO_TogglePin>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000000 	.word	0x20000000
 8000984:	080042cc 	.word	0x080042cc

08000988 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <SystemInit+0x60>)
 800098e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000992:	4a15      	ldr	r2, [pc, #84]	; (80009e8 <SystemInit+0x60>)
 8000994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <SystemInit+0x64>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a12      	ldr	r2, [pc, #72]	; (80009ec <SystemInit+0x64>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009a8:	4b10      	ldr	r3, [pc, #64]	; (80009ec <SystemInit+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <SystemInit+0x64>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <SystemInit+0x64>)
 80009b4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80009b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <SystemInit+0x64>)
 80009c0:	4a0b      	ldr	r2, [pc, #44]	; (80009f0 <SystemInit+0x68>)
 80009c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <SystemInit+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a08      	ldr	r2, [pc, #32]	; (80009ec <SystemInit+0x64>)
 80009ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <SystemInit+0x64>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009d6:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <SystemInit+0x60>)
 80009d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009dc:	609a      	str	r2, [r3, #8]
#endif
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00
 80009ec:	40023800 	.word	0x40023800
 80009f0:	24003010 	.word	0x24003010

080009f4 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000a48:	f000 f884 	bl	8000b54 <HAL_IncTick>
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a58:	4a14      	ldr	r2, [pc, #80]	; (8000aac <_sbrk+0x5c>)
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <_sbrk+0x60>)
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d102      	bne.n	8000a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <_sbrk+0x64>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <_sbrk+0x68>)
 8000a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <_sbrk+0x64>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d207      	bcs.n	8000a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a80:	f002 ff6a 	bl	8003958 <__errno>
 8000a84:	4603      	mov	r3, r0
 8000a86:	220c      	movs	r2, #12
 8000a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	e009      	b.n	8000aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <_sbrk+0x64>)
 8000aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3718      	adds	r7, #24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20030000 	.word	0x20030000
 8000ab0:	00000400 	.word	0x00000400
 8000ab4:	200000d0 	.word	0x200000d0
 8000ab8:	20000138 	.word	0x20000138

08000abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <HAL_Init+0x34>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <HAL_Init+0x34>)
 8000ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aca:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <HAL_Init+0x34>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <HAL_Init+0x34>)
 8000ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f000 f931 	bl	8000d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ade:	200f      	movs	r0, #15
 8000ae0:	f000 f808 	bl	8000af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae4:	f000 fc3c 	bl	8001360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023c00 	.word	0x40023c00

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_InitTick+0x54>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_InitTick+0x58>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4619      	mov	r1, r3
 8000b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f93b 	bl	8000d8e <HAL_SYSTICK_Config>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00e      	b.n	8000b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	d80a      	bhi.n	8000b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f000 f911 	bl	8000d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b34:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <HAL_InitTick+0x5c>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e000      	b.n	8000b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000000c 	.word	0x2000000c
 8000b4c:	20000014 	.word	0x20000014
 8000b50:	20000010 	.word	0x20000010

08000b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x20>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x24>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <HAL_IncTick+0x24>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000014 	.word	0x20000014
 8000b78:	20000124 	.word	0x20000124

08000b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <HAL_GetTick+0x14>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000124 	.word	0x20000124

08000b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b9c:	f7ff ffee 	bl	8000b7c <HAL_GetTick>
 8000ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bac:	d005      	beq.n	8000bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <HAL_Delay+0x44>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bba:	bf00      	nop
 8000bbc:	f7ff ffde 	bl	8000b7c <HAL_GetTick>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d8f7      	bhi.n	8000bbc <HAL_Delay+0x28>
  {
  }
}
 8000bcc:	bf00      	nop
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000014 	.word	0x20000014

08000bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	60d3      	str	r3, [r2, #12]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <__NVIC_GetPriorityGrouping+0x18>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	f003 0307 	and.w	r3, r3, #7
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	; (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	; (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	; 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 0307 	rsb	r3, r3, #7
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	bf28      	it	cs
 8000cb2:	2304      	movcs	r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d902      	bls.n	8000cc4 <NVIC_EncodePriority+0x30>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3b03      	subs	r3, #3
 8000cc2:	e000      	b.n	8000cc6 <NVIC_EncodePriority+0x32>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43d9      	mvns	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	4313      	orrs	r3, r2
         );
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	; 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d0c:	d301      	bcc.n	8000d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00f      	b.n	8000d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <SysTick_Config+0x40>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f7ff ff8e 	bl	8000c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <SysTick_Config+0x40>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <SysTick_Config+0x40>)
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	e000e010 	.word	0xe000e010

08000d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ff47 	bl	8000bdc <__NVIC_SetPriorityGrouping>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d68:	f7ff ff5c 	bl	8000c24 <__NVIC_GetPriorityGrouping>
 8000d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	68b9      	ldr	r1, [r7, #8]
 8000d72:	6978      	ldr	r0, [r7, #20]
 8000d74:	f7ff ff8e 	bl	8000c94 <NVIC_EncodePriority>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff5d 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d86:	bf00      	nop
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ffb0 	bl	8000cfc <SysTick_Config>
 8000d9c:	4603      	mov	r3, r0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b084      	sub	sp, #16
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000db4:	f7ff fee2 	bl	8000b7c <HAL_GetTick>
 8000db8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d008      	beq.n	8000dd8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2280      	movs	r2, #128	; 0x80
 8000dca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e052      	b.n	8000e7e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f022 0216 	bic.w	r2, r2, #22
 8000de6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	695a      	ldr	r2, [r3, #20]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000df6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d103      	bne.n	8000e08 <HAL_DMA_Abort+0x62>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d007      	beq.n	8000e18 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f022 0208 	bic.w	r2, r2, #8
 8000e16:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f022 0201 	bic.w	r2, r2, #1
 8000e26:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e28:	e013      	b.n	8000e52 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e2a:	f7ff fea7 	bl	8000b7c <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	2b05      	cmp	r3, #5
 8000e36:	d90c      	bls.n	8000e52 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2220      	movs	r2, #32
 8000e3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2203      	movs	r2, #3
 8000e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e015      	b.n	8000e7e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1e4      	bne.n	8000e2a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e64:	223f      	movs	r2, #63	; 0x3f
 8000e66:	409a      	lsls	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d004      	beq.n	8000ea4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2280      	movs	r2, #128	; 0x80
 8000e9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e00c      	b.n	8000ebe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2205      	movs	r2, #5
 8000ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 0201 	bic.w	r2, r2, #1
 8000eba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
 8000ee6:	e177      	b.n	80011d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	f040 8166 	bne.w	80011d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d005      	beq.n	8000f1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d130      	bne.n	8000f80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f54:	2201      	movs	r2, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	091b      	lsrs	r3, r3, #4
 8000f6a:	f003 0201 	and.w	r2, r3, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d017      	beq.n	8000fbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d123      	bne.n	8001010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	08da      	lsrs	r2, r3, #3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3208      	adds	r2, #8
 8000fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	220f      	movs	r2, #15
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	691a      	ldr	r2, [r3, #16]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	08da      	lsrs	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3208      	adds	r2, #8
 800100a:	69b9      	ldr	r1, [r7, #24]
 800100c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0203 	and.w	r2, r3, #3
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 80c0 	beq.w	80011d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b66      	ldr	r3, [pc, #408]	; (80011f0 <HAL_GPIO_Init+0x324>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	4a65      	ldr	r2, [pc, #404]	; (80011f0 <HAL_GPIO_Init+0x324>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001060:	6453      	str	r3, [r2, #68]	; 0x44
 8001062:	4b63      	ldr	r3, [pc, #396]	; (80011f0 <HAL_GPIO_Init+0x324>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800106e:	4a61      	ldr	r2, [pc, #388]	; (80011f4 <HAL_GPIO_Init+0x328>)
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	220f      	movs	r2, #15
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a58      	ldr	r2, [pc, #352]	; (80011f8 <HAL_GPIO_Init+0x32c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d037      	beq.n	800110a <HAL_GPIO_Init+0x23e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a57      	ldr	r2, [pc, #348]	; (80011fc <HAL_GPIO_Init+0x330>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d031      	beq.n	8001106 <HAL_GPIO_Init+0x23a>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a56      	ldr	r2, [pc, #344]	; (8001200 <HAL_GPIO_Init+0x334>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d02b      	beq.n	8001102 <HAL_GPIO_Init+0x236>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a55      	ldr	r2, [pc, #340]	; (8001204 <HAL_GPIO_Init+0x338>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d025      	beq.n	80010fe <HAL_GPIO_Init+0x232>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a54      	ldr	r2, [pc, #336]	; (8001208 <HAL_GPIO_Init+0x33c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d01f      	beq.n	80010fa <HAL_GPIO_Init+0x22e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a53      	ldr	r2, [pc, #332]	; (800120c <HAL_GPIO_Init+0x340>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d019      	beq.n	80010f6 <HAL_GPIO_Init+0x22a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a52      	ldr	r2, [pc, #328]	; (8001210 <HAL_GPIO_Init+0x344>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d013      	beq.n	80010f2 <HAL_GPIO_Init+0x226>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a51      	ldr	r2, [pc, #324]	; (8001214 <HAL_GPIO_Init+0x348>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d00d      	beq.n	80010ee <HAL_GPIO_Init+0x222>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a50      	ldr	r2, [pc, #320]	; (8001218 <HAL_GPIO_Init+0x34c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d007      	beq.n	80010ea <HAL_GPIO_Init+0x21e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4f      	ldr	r2, [pc, #316]	; (800121c <HAL_GPIO_Init+0x350>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d101      	bne.n	80010e6 <HAL_GPIO_Init+0x21a>
 80010e2:	2309      	movs	r3, #9
 80010e4:	e012      	b.n	800110c <HAL_GPIO_Init+0x240>
 80010e6:	230a      	movs	r3, #10
 80010e8:	e010      	b.n	800110c <HAL_GPIO_Init+0x240>
 80010ea:	2308      	movs	r3, #8
 80010ec:	e00e      	b.n	800110c <HAL_GPIO_Init+0x240>
 80010ee:	2307      	movs	r3, #7
 80010f0:	e00c      	b.n	800110c <HAL_GPIO_Init+0x240>
 80010f2:	2306      	movs	r3, #6
 80010f4:	e00a      	b.n	800110c <HAL_GPIO_Init+0x240>
 80010f6:	2305      	movs	r3, #5
 80010f8:	e008      	b.n	800110c <HAL_GPIO_Init+0x240>
 80010fa:	2304      	movs	r3, #4
 80010fc:	e006      	b.n	800110c <HAL_GPIO_Init+0x240>
 80010fe:	2303      	movs	r3, #3
 8001100:	e004      	b.n	800110c <HAL_GPIO_Init+0x240>
 8001102:	2302      	movs	r3, #2
 8001104:	e002      	b.n	800110c <HAL_GPIO_Init+0x240>
 8001106:	2301      	movs	r3, #1
 8001108:	e000      	b.n	800110c <HAL_GPIO_Init+0x240>
 800110a:	2300      	movs	r3, #0
 800110c:	69fa      	ldr	r2, [r7, #28]
 800110e:	f002 0203 	and.w	r2, r2, #3
 8001112:	0092      	lsls	r2, r2, #2
 8001114:	4093      	lsls	r3, r2
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800111c:	4935      	ldr	r1, [pc, #212]	; (80011f4 <HAL_GPIO_Init+0x328>)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	3302      	adds	r3, #2
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800112a:	4b3d      	ldr	r3, [pc, #244]	; (8001220 <HAL_GPIO_Init+0x354>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800114e:	4a34      	ldr	r2, [pc, #208]	; (8001220 <HAL_GPIO_Init+0x354>)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001154:	4b32      	ldr	r3, [pc, #200]	; (8001220 <HAL_GPIO_Init+0x354>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001178:	4a29      	ldr	r2, [pc, #164]	; (8001220 <HAL_GPIO_Init+0x354>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117e:	4b28      	ldr	r3, [pc, #160]	; (8001220 <HAL_GPIO_Init+0x354>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011a2:	4a1f      	ldr	r2, [pc, #124]	; (8001220 <HAL_GPIO_Init+0x354>)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a8:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <HAL_GPIO_Init+0x354>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011cc:	4a14      	ldr	r2, [pc, #80]	; (8001220 <HAL_GPIO_Init+0x354>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3301      	adds	r3, #1
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	2b0f      	cmp	r3, #15
 80011dc:	f67f ae84 	bls.w	8000ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40013800 	.word	0x40013800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40020400 	.word	0x40020400
 8001200:	40020800 	.word	0x40020800
 8001204:	40020c00 	.word	0x40020c00
 8001208:	40021000 	.word	0x40021000
 800120c:	40021400 	.word	0x40021400
 8001210:	40021800 	.word	0x40021800
 8001214:	40021c00 	.word	0x40021c00
 8001218:	40022000 	.word	0x40022000
 800121c:	40022400 	.word	0x40022400
 8001220:	40013c00 	.word	0x40013c00

08001224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	4013      	ands	r3, r2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800123c:	2301      	movs	r3, #1
 800123e:	73fb      	strb	r3, [r7, #15]
 8001240:	e001      	b.n	8001246 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001246:	7bfb      	ldrb	r3, [r7, #15]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
 8001260:	4613      	mov	r3, r2
 8001262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001264:	787b      	ldrb	r3, [r7, #1]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001270:	e003      	b.n	800127a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	041a      	lsls	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	619a      	str	r2, [r3, #24]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001286:	b480      	push	{r7}
 8001288:	b085      	sub	sp, #20
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	460b      	mov	r3, r1
 8001290:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001298:	887a      	ldrh	r2, [r7, #2]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4013      	ands	r3, r2
 800129e:	041a      	lsls	r2, r3, #16
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	400b      	ands	r3, r1
 80012a8:	431a      	orrs	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	619a      	str	r2, [r3, #24]
}
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	4b23      	ldr	r3, [pc, #140]	; (8001358 <HAL_UART_MspInit+0x9c>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	4a22      	ldr	r2, [pc, #136]	; (8001358 <HAL_UART_MspInit+0x9c>)
 80012ce:	f043 0308 	orr.w	r3, r3, #8
 80012d2:	6313      	str	r3, [r2, #48]	; 0x30
 80012d4:	4b20      	ldr	r3, [pc, #128]	; (8001358 <HAL_UART_MspInit+0x9c>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <HAL_UART_MspInit+0x9c>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	4a1b      	ldr	r2, [pc, #108]	; (8001358 <HAL_UART_MspInit+0x9c>)
 80012ea:	f043 0308 	orr.w	r3, r3, #8
 80012ee:	6313      	str	r3, [r2, #48]	; 0x30
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <HAL_UART_MspInit+0x9c>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	f003 0308 	and.w	r3, r3, #8
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_UART_MspInit+0x9c>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	4a14      	ldr	r2, [pc, #80]	; (8001358 <HAL_UART_MspInit+0x9c>)
 8001306:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800130a:	6413      	str	r3, [r2, #64]	; 0x40
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_UART_MspInit+0x9c>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8001318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800131c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001322:	2301      	movs	r3, #1
 8001324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800132a:	2307      	movs	r3, #7
 800132c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	4809      	ldr	r0, [pc, #36]	; (800135c <HAL_UART_MspInit+0xa0>)
 8001336:	f7ff fdc9 	bl	8000ecc <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800133a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800133e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8001340:	2307      	movs	r3, #7
 8001342:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	4619      	mov	r1, r3
 800134a:	4804      	ldr	r0, [pc, #16]	; (800135c <HAL_UART_MspInit+0xa0>)
 800134c:	f7ff fdbe 	bl	8000ecc <HAL_GPIO_Init>
}
 8001350:	bf00      	nop
 8001352:	3728      	adds	r7, #40	; 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40023800 	.word	0x40023800
 800135c:	40020c00 	.word	0x40020c00

08001360 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0

}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_PWR_EnableBkUpAccess+0x20>)
 8001378:	2201      	movs	r2, #1
 800137a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_PWR_EnableBkUpAccess+0x24>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8001382:	687b      	ldr	r3, [r7, #4]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	420e0020 	.word	0x420e0020
 8001394:	40007000 	.word	0x40007000

08001398 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_PWR_DisableBkUpAccess+0x20>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <HAL_PWR_DisableBkUpAccess+0x24>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80013aa:	687b      	ldr	r3, [r7, #4]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	420e0020 	.word	0x420e0020
 80013bc:	40007000 	.word	0x40007000

080013c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <HAL_PWREx_EnableOverDrive+0x90>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a1f      	ldr	r2, [pc, #124]	; (8001450 <HAL_PWREx_EnableOverDrive+0x90>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <HAL_PWREx_EnableOverDrive+0x90>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_PWREx_EnableOverDrive+0x94>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013ec:	f7ff fbc6 	bl	8000b7c <HAL_GetTick>
 80013f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013f2:	e009      	b.n	8001408 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013f4:	f7ff fbc2 	bl	8000b7c <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001402:	d901      	bls.n	8001408 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e01f      	b.n	8001448 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <HAL_PWREx_EnableOverDrive+0x98>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001414:	d1ee      	bne.n	80013f4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001418:	2201      	movs	r2, #1
 800141a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800141c:	f7ff fbae 	bl	8000b7c <HAL_GetTick>
 8001420:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001422:	e009      	b.n	8001438 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001424:	f7ff fbaa 	bl	8000b7c <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001432:	d901      	bls.n	8001438 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e007      	b.n	8001448 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <HAL_PWREx_EnableOverDrive+0x98>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001440:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001444:	d1ee      	bne.n	8001424 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40023800 	.word	0x40023800
 8001454:	420e0040 	.word	0x420e0040
 8001458:	40007000 	.word	0x40007000
 800145c:	420e0044 	.word	0x420e0044

08001460 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e264      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d075      	beq.n	800156a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800147e:	4ba3      	ldr	r3, [pc, #652]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b04      	cmp	r3, #4
 8001488:	d00c      	beq.n	80014a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800148a:	4ba0      	ldr	r3, [pc, #640]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001492:	2b08      	cmp	r3, #8
 8001494:	d112      	bne.n	80014bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001496:	4b9d      	ldr	r3, [pc, #628]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014a2:	d10b      	bne.n	80014bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a4:	4b99      	ldr	r3, [pc, #612]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d05b      	beq.n	8001568 <HAL_RCC_OscConfig+0x108>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d157      	bne.n	8001568 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e23f      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c4:	d106      	bne.n	80014d4 <HAL_RCC_OscConfig+0x74>
 80014c6:	4b91      	ldr	r3, [pc, #580]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a90      	ldr	r2, [pc, #576]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e01d      	b.n	8001510 <HAL_RCC_OscConfig+0xb0>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014dc:	d10c      	bne.n	80014f8 <HAL_RCC_OscConfig+0x98>
 80014de:	4b8b      	ldr	r3, [pc, #556]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a8a      	ldr	r2, [pc, #552]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4b88      	ldr	r3, [pc, #544]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a87      	ldr	r2, [pc, #540]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e00b      	b.n	8001510 <HAL_RCC_OscConfig+0xb0>
 80014f8:	4b84      	ldr	r3, [pc, #528]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a83      	ldr	r2, [pc, #524]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80014fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b81      	ldr	r3, [pc, #516]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a80      	ldr	r2, [pc, #512]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 800150a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800150e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d013      	beq.n	8001540 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff fb30 	bl	8000b7c <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff fb2c 	bl	8000b7c <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	; 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e204      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	4b76      	ldr	r3, [pc, #472]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0xc0>
 800153e:	e014      	b.n	800156a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fb1c 	bl	8000b7c <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff fb18 	bl	8000b7c <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	; 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e1f0      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155a:	4b6c      	ldr	r3, [pc, #432]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0xe8>
 8001566:	e000      	b.n	800156a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d063      	beq.n	800163e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001576:	4b65      	ldr	r3, [pc, #404]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00b      	beq.n	800159a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001582:	4b62      	ldr	r3, [pc, #392]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800158a:	2b08      	cmp	r3, #8
 800158c:	d11c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800158e:	4b5f      	ldr	r3, [pc, #380]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d116      	bne.n	80015c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159a:	4b5c      	ldr	r3, [pc, #368]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d005      	beq.n	80015b2 <HAL_RCC_OscConfig+0x152>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d001      	beq.n	80015b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e1c4      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b2:	4b56      	ldr	r3, [pc, #344]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4952      	ldr	r1, [pc, #328]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c6:	e03a      	b.n	800163e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d020      	beq.n	8001612 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d0:	4b4f      	ldr	r3, [pc, #316]	; (8001710 <HAL_RCC_OscConfig+0x2b0>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d6:	f7ff fad1 	bl	8000b7c <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015de:	f7ff facd 	bl	8000b7c <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e1a5      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	4b46      	ldr	r3, [pc, #280]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fc:	4b43      	ldr	r3, [pc, #268]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	4940      	ldr	r1, [pc, #256]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 800160c:	4313      	orrs	r3, r2
 800160e:	600b      	str	r3, [r1, #0]
 8001610:	e015      	b.n	800163e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001612:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <HAL_RCC_OscConfig+0x2b0>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff fab0 	bl	8000b7c <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001620:	f7ff faac 	bl	8000b7c <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e184      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001632:	4b36      	ldr	r3, [pc, #216]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d030      	beq.n	80016ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d016      	beq.n	8001680 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001652:	4b30      	ldr	r3, [pc, #192]	; (8001714 <HAL_RCC_OscConfig+0x2b4>)
 8001654:	2201      	movs	r2, #1
 8001656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001658:	f7ff fa90 	bl	8000b7c <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001660:	f7ff fa8c 	bl	8000b7c <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e164      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001672:	4b26      	ldr	r3, [pc, #152]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 8001674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x200>
 800167e:	e015      	b.n	80016ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001680:	4b24      	ldr	r3, [pc, #144]	; (8001714 <HAL_RCC_OscConfig+0x2b4>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001686:	f7ff fa79 	bl	8000b7c <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800168e:	f7ff fa75 	bl	8000b7c <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e14d      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a0:	4b1a      	ldr	r3, [pc, #104]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80016a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f0      	bne.n	800168e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 80a0 	beq.w	80017fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10f      	bne.n	80016ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	4a0e      	ldr	r2, [pc, #56]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d8:	6413      	str	r3, [r2, #64]	; 0x40
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016e6:	2301      	movs	r3, #1
 80016e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_RCC_OscConfig+0x2b8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d121      	bne.n	800173a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <HAL_RCC_OscConfig+0x2b8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a07      	ldr	r2, [pc, #28]	; (8001718 <HAL_RCC_OscConfig+0x2b8>)
 80016fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001702:	f7ff fa3b 	bl	8000b7c <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001708:	e011      	b.n	800172e <HAL_RCC_OscConfig+0x2ce>
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	42470000 	.word	0x42470000
 8001714:	42470e80 	.word	0x42470e80
 8001718:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171c:	f7ff fa2e 	bl	8000b7c <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e106      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172e:	4b85      	ldr	r3, [pc, #532]	; (8001944 <HAL_RCC_OscConfig+0x4e4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d106      	bne.n	8001750 <HAL_RCC_OscConfig+0x2f0>
 8001742:	4b81      	ldr	r3, [pc, #516]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001746:	4a80      	ldr	r2, [pc, #512]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6713      	str	r3, [r2, #112]	; 0x70
 800174e:	e01c      	b.n	800178a <HAL_RCC_OscConfig+0x32a>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b05      	cmp	r3, #5
 8001756:	d10c      	bne.n	8001772 <HAL_RCC_OscConfig+0x312>
 8001758:	4b7b      	ldr	r3, [pc, #492]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 800175a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175c:	4a7a      	ldr	r2, [pc, #488]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 800175e:	f043 0304 	orr.w	r3, r3, #4
 8001762:	6713      	str	r3, [r2, #112]	; 0x70
 8001764:	4b78      	ldr	r3, [pc, #480]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001768:	4a77      	ldr	r2, [pc, #476]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6713      	str	r3, [r2, #112]	; 0x70
 8001770:	e00b      	b.n	800178a <HAL_RCC_OscConfig+0x32a>
 8001772:	4b75      	ldr	r3, [pc, #468]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001776:	4a74      	ldr	r2, [pc, #464]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	6713      	str	r3, [r2, #112]	; 0x70
 800177e:	4b72      	ldr	r3, [pc, #456]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001782:	4a71      	ldr	r2, [pc, #452]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001784:	f023 0304 	bic.w	r3, r3, #4
 8001788:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d015      	beq.n	80017be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001792:	f7ff f9f3 	bl	8000b7c <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001798:	e00a      	b.n	80017b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800179a:	f7ff f9ef 	bl	8000b7c <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e0c5      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b0:	4b65      	ldr	r3, [pc, #404]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 80017b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0ee      	beq.n	800179a <HAL_RCC_OscConfig+0x33a>
 80017bc:	e014      	b.n	80017e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017be:	f7ff f9dd 	bl	8000b7c <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c4:	e00a      	b.n	80017dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017c6:	f7ff f9d9 	bl	8000b7c <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e0af      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017dc:	4b5a      	ldr	r3, [pc, #360]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 80017de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1ee      	bne.n	80017c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017e8:	7dfb      	ldrb	r3, [r7, #23]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d105      	bne.n	80017fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ee:	4b56      	ldr	r3, [pc, #344]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	4a55      	ldr	r2, [pc, #340]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 80017f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 809b 	beq.w	800193a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001804:	4b50      	ldr	r3, [pc, #320]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 030c 	and.w	r3, r3, #12
 800180c:	2b08      	cmp	r3, #8
 800180e:	d05c      	beq.n	80018ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d141      	bne.n	800189c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001818:	4b4c      	ldr	r3, [pc, #304]	; (800194c <HAL_RCC_OscConfig+0x4ec>)
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff f9ad 	bl	8000b7c <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001826:	f7ff f9a9 	bl	8000b7c <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e081      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001838:	4b43      	ldr	r3, [pc, #268]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f0      	bne.n	8001826 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69da      	ldr	r2, [r3, #28]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	431a      	orrs	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	019b      	lsls	r3, r3, #6
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185a:	085b      	lsrs	r3, r3, #1
 800185c:	3b01      	subs	r3, #1
 800185e:	041b      	lsls	r3, r3, #16
 8001860:	431a      	orrs	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	061b      	lsls	r3, r3, #24
 8001868:	4937      	ldr	r1, [pc, #220]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 800186a:	4313      	orrs	r3, r2
 800186c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800186e:	4b37      	ldr	r3, [pc, #220]	; (800194c <HAL_RCC_OscConfig+0x4ec>)
 8001870:	2201      	movs	r2, #1
 8001872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001874:	f7ff f982 	bl	8000b7c <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800187c:	f7ff f97e 	bl	8000b7c <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e056      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188e:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0x41c>
 800189a:	e04e      	b.n	800193a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189c:	4b2b      	ldr	r3, [pc, #172]	; (800194c <HAL_RCC_OscConfig+0x4ec>)
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a2:	f7ff f96b 	bl	8000b7c <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018aa:	f7ff f967 	bl	8000b7c <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e03f      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018bc:	4b22      	ldr	r3, [pc, #136]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f0      	bne.n	80018aa <HAL_RCC_OscConfig+0x44a>
 80018c8:	e037      	b.n	800193a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e032      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018d6:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <HAL_RCC_OscConfig+0x4e8>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d028      	beq.n	8001936 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d121      	bne.n	8001936 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d11a      	bne.n	8001936 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001906:	4013      	ands	r3, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800190c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800190e:	4293      	cmp	r3, r2
 8001910:	d111      	bne.n	8001936 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	085b      	lsrs	r3, r3, #1
 800191e:	3b01      	subs	r3, #1
 8001920:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d107      	bne.n	8001936 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001930:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001932:	429a      	cmp	r2, r3
 8001934:	d001      	beq.n	800193a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40007000 	.word	0x40007000
 8001948:	40023800 	.word	0x40023800
 800194c:	42470060 	.word	0x42470060

08001950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0cc      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001964:	4b68      	ldr	r3, [pc, #416]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 030f 	and.w	r3, r3, #15
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d90c      	bls.n	800198c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001972:	4b65      	ldr	r3, [pc, #404]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800197a:	4b63      	ldr	r3, [pc, #396]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0b8      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d020      	beq.n	80019da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a4:	4b59      	ldr	r3, [pc, #356]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4a58      	ldr	r2, [pc, #352]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019bc:	4b53      	ldr	r3, [pc, #332]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	4a52      	ldr	r2, [pc, #328]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c8:	4b50      	ldr	r3, [pc, #320]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	494d      	ldr	r1, [pc, #308]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d044      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d107      	bne.n	80019fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ee:	4b47      	ldr	r3, [pc, #284]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d119      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e07f      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d003      	beq.n	8001a0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d107      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0e:	4b3f      	ldr	r3, [pc, #252]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d109      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e06f      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1e:	4b3b      	ldr	r3, [pc, #236]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e067      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a2e:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f023 0203 	bic.w	r2, r3, #3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4934      	ldr	r1, [pc, #208]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a40:	f7ff f89c 	bl	8000b7c <HAL_GetTick>
 8001a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a46:	e00a      	b.n	8001a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a48:	f7ff f898 	bl	8000b7c <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e04f      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5e:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 020c 	and.w	r2, r3, #12
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d1eb      	bne.n	8001a48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a70:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 030f 	and.w	r3, r3, #15
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d20c      	bcs.n	8001a98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7e:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a86:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d001      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e032      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	4916      	ldr	r1, [pc, #88]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d009      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	490e      	ldr	r1, [pc, #56]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ad6:	f000 f821 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 8001ada:	4602      	mov	r2, r0
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	091b      	lsrs	r3, r3, #4
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	490a      	ldr	r1, [pc, #40]	; (8001b10 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	5ccb      	ldrb	r3, [r1, r3]
 8001aea:	fa22 f303 	lsr.w	r3, r2, r3
 8001aee:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_RCC_ClockConfig+0x1c8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fffc 	bl	8000af4 <HAL_InitTick>

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023c00 	.word	0x40023c00
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	080042d4 	.word	0x080042d4
 8001b14:	2000000c 	.word	0x2000000c
 8001b18:	20000010 	.word	0x20000010

08001b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b34:	4b67      	ldr	r3, [pc, #412]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d00d      	beq.n	8001b5c <HAL_RCC_GetSysClockFreq+0x40>
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	f200 80bd 	bhi.w	8001cc0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d002      	beq.n	8001b50 <HAL_RCC_GetSysClockFreq+0x34>
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d003      	beq.n	8001b56 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b4e:	e0b7      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b50:	4b61      	ldr	r3, [pc, #388]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b52:	60bb      	str	r3, [r7, #8]
       break;
 8001b54:	e0b7      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b56:	4b61      	ldr	r3, [pc, #388]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001b58:	60bb      	str	r3, [r7, #8]
      break;
 8001b5a:	e0b4      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b5c:	4b5d      	ldr	r3, [pc, #372]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b66:	4b5b      	ldr	r3, [pc, #364]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d04d      	beq.n	8001c0e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b72:	4b58      	ldr	r3, [pc, #352]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	099b      	lsrs	r3, r3, #6
 8001b78:	461a      	mov	r2, r3
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b82:	f04f 0100 	mov.w	r1, #0
 8001b86:	ea02 0800 	and.w	r8, r2, r0
 8001b8a:	ea03 0901 	and.w	r9, r3, r1
 8001b8e:	4640      	mov	r0, r8
 8001b90:	4649      	mov	r1, r9
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	014b      	lsls	r3, r1, #5
 8001b9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ba0:	0142      	lsls	r2, r0, #5
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	ebb0 0008 	subs.w	r0, r0, r8
 8001baa:	eb61 0109 	sbc.w	r1, r1, r9
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	018b      	lsls	r3, r1, #6
 8001bb8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bbc:	0182      	lsls	r2, r0, #6
 8001bbe:	1a12      	subs	r2, r2, r0
 8001bc0:	eb63 0301 	sbc.w	r3, r3, r1
 8001bc4:	f04f 0000 	mov.w	r0, #0
 8001bc8:	f04f 0100 	mov.w	r1, #0
 8001bcc:	00d9      	lsls	r1, r3, #3
 8001bce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bd2:	00d0      	lsls	r0, r2, #3
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	eb12 0208 	adds.w	r2, r2, r8
 8001bdc:	eb43 0309 	adc.w	r3, r3, r9
 8001be0:	f04f 0000 	mov.w	r0, #0
 8001be4:	f04f 0100 	mov.w	r1, #0
 8001be8:	0259      	lsls	r1, r3, #9
 8001bea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001bee:	0250      	lsls	r0, r2, #9
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	f7fe fb4e 	bl	80002a0 <__aeabi_uldivmod>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4613      	mov	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	e04a      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0e:	4b31      	ldr	r3, [pc, #196]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	099b      	lsrs	r3, r3, #6
 8001c14:	461a      	mov	r2, r3
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c1e:	f04f 0100 	mov.w	r1, #0
 8001c22:	ea02 0400 	and.w	r4, r2, r0
 8001c26:	ea03 0501 	and.w	r5, r3, r1
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	014b      	lsls	r3, r1, #5
 8001c38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c3c:	0142      	lsls	r2, r0, #5
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	1b00      	subs	r0, r0, r4
 8001c44:	eb61 0105 	sbc.w	r1, r1, r5
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	018b      	lsls	r3, r1, #6
 8001c52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c56:	0182      	lsls	r2, r0, #6
 8001c58:	1a12      	subs	r2, r2, r0
 8001c5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c5e:	f04f 0000 	mov.w	r0, #0
 8001c62:	f04f 0100 	mov.w	r1, #0
 8001c66:	00d9      	lsls	r1, r3, #3
 8001c68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c6c:	00d0      	lsls	r0, r2, #3
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	1912      	adds	r2, r2, r4
 8001c74:	eb45 0303 	adc.w	r3, r5, r3
 8001c78:	f04f 0000 	mov.w	r0, #0
 8001c7c:	f04f 0100 	mov.w	r1, #0
 8001c80:	0299      	lsls	r1, r3, #10
 8001c82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c86:	0290      	lsls	r0, r2, #10
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	461a      	mov	r2, r3
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	f7fe fb02 	bl	80002a0 <__aeabi_uldivmod>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	0c1b      	lsrs	r3, r3, #16
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbc:	60bb      	str	r3, [r7, #8]
      break;
 8001cbe:	e002      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001cc2:	60bb      	str	r3, [r7, #8]
      break;
 8001cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc6:	68bb      	ldr	r3, [r7, #8]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	00f42400 	.word	0x00f42400
 8001cdc:	007a1200 	.word	0x007a1200

08001ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	2000000c 	.word	0x2000000c

08001cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cfc:	f7ff fff0 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001d00:	4602      	mov	r2, r0
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	0a9b      	lsrs	r3, r3, #10
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	4903      	ldr	r1, [pc, #12]	; (8001d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d0e:	5ccb      	ldrb	r3, [r1, r3]
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	080042e4 	.word	0x080042e4

08001d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d24:	f7ff ffdc 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	0b5b      	lsrs	r3, r3, #13
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	4903      	ldr	r1, [pc, #12]	; (8001d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d36:	5ccb      	ldrb	r3, [r1, r3]
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40023800 	.word	0x40023800
 8001d44:	080042e4 	.word	0x080042e4

08001d48 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e083      	b.n	8001e62 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	7f5b      	ldrb	r3, [r3, #29]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d105      	bne.n	8001d70 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f87d 	bl	8001e6a <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2202      	movs	r2, #2
 8001d74:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	22ca      	movs	r2, #202	; 0xca
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2253      	movs	r2, #83	; 0x53
 8001d84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 fab2 	bl	80022f0 <RTC_EnterInitMode>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d008      	beq.n	8001da4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	22ff      	movs	r2, #255	; 0xff
 8001d98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e05e      	b.n	8001e62 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001db6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6899      	ldr	r1, [r3, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68d2      	ldr	r2, [r2, #12]
 8001dde:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6919      	ldr	r1, [r3, #16]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	041a      	lsls	r2, r3, #16
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e02:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 0320 	and.w	r3, r3, #32
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10e      	bne.n	8001e30 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 fa44 	bl	80022a0 <HAL_RTC_WaitForSynchro>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d008      	beq.n	8001e30 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	22ff      	movs	r2, #255	; 0xff
 8001e24:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2204      	movs	r2, #4
 8001e2a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e018      	b.n	8001e62 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e3e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699a      	ldr	r2, [r3, #24]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	22ff      	movs	r2, #255	; 0xff
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8001e60:	2300      	movs	r3, #0
  }
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_RTC_MspInit>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001e7e:	b590      	push	{r4, r7, lr}
 8001e80:	b087      	sub	sp, #28
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	60f8      	str	r0, [r7, #12]
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	7f1b      	ldrb	r3, [r3, #28]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d101      	bne.n	8001e9a <HAL_RTC_SetTime+0x1c>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e0aa      	b.n	8001ff0 <HAL_RTC_SetTime+0x172>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d126      	bne.n	8001efa <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d102      	bne.n	8001ec0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 fa3f 	bl	8002348 <RTC_ByteToBcd2>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	785b      	ldrb	r3, [r3, #1]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 fa38 	bl	8002348 <RTC_ByteToBcd2>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001edc:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	789b      	ldrb	r3, [r3, #2]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 fa30 	bl	8002348 <RTC_ByteToBcd2>
 8001ee8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001eea:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	78db      	ldrb	r3, [r3, #3]
 8001ef2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	e018      	b.n	8001f2c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d102      	bne.n	8001f0e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	785b      	ldrb	r3, [r3, #1]
 8001f18:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001f1a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001f20:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	78db      	ldrb	r3, [r3, #3]
 8001f26:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	22ca      	movs	r2, #202	; 0xca
 8001f32:	625a      	str	r2, [r3, #36]	; 0x24
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2253      	movs	r2, #83	; 0x53
 8001f3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 f9d7 	bl	80022f0 <RTC_EnterInitMode>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00b      	beq.n	8001f60 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	22ff      	movs	r2, #255	; 0xff
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2204      	movs	r2, #4
 8001f54:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e047      	b.n	8001ff0 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001f6a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001f6e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f7e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6899      	ldr	r1, [r3, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fa6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d111      	bne.n	8001fda <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 f972 	bl	80022a0 <HAL_RTC_WaitForSynchro>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00b      	beq.n	8001fda <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	22ff      	movs	r2, #255	; 0xff
 8001fc8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2204      	movs	r2, #4
 8001fce:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e00a      	b.n	8001ff0 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	22ff      	movs	r2, #255	; 0xff
 8001fe0:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8001fee:	2300      	movs	r3, #0
  }
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	371c      	adds	r7, #28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd90      	pop	{r4, r7, pc}

08001ff8 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800202a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800202e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	0c1b      	lsrs	r3, r3, #16
 8002034:	b2db      	uxtb	r3, r3
 8002036:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800203a:	b2da      	uxtb	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	0a1b      	lsrs	r3, r3, #8
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800204a:	b2da      	uxtb	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002058:	b2da      	uxtb	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	0c1b      	lsrs	r3, r3, #16
 8002062:	b2db      	uxtb	r3, r3
 8002064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002068:	b2da      	uxtb	r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d11a      	bne.n	80020aa <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f000 f983 	bl	8002384 <RTC_Bcd2ToByte>
 800207e:	4603      	mov	r3, r0
 8002080:	461a      	mov	r2, r3
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	785b      	ldrb	r3, [r3, #1]
 800208a:	4618      	mov	r0, r3
 800208c:	f000 f97a 	bl	8002384 <RTC_Bcd2ToByte>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	789b      	ldrb	r3, [r3, #2]
 800209c:	4618      	mov	r0, r3
 800209e:	f000 f971 	bl	8002384 <RTC_Bcd2ToByte>
 80020a2:	4603      	mov	r3, r0
 80020a4:	461a      	mov	r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	7f1b      	ldrb	r3, [r3, #28]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_RTC_SetDate+0x1c>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e094      	b.n	80021fa <HAL_RTC_SetDate+0x146>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2201      	movs	r2, #1
 80020d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2202      	movs	r2, #2
 80020da:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10e      	bne.n	8002100 <HAL_RTC_SetDate+0x4c>
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	785b      	ldrb	r3, [r3, #1]
 80020e6:	f003 0310 	and.w	r3, r3, #16
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d008      	beq.n	8002100 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	785b      	ldrb	r3, [r3, #1]
 80020f2:	f023 0310 	bic.w	r3, r3, #16
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	330a      	adds	r3, #10
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d11c      	bne.n	8002140 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	78db      	ldrb	r3, [r3, #3]
 800210a:	4618      	mov	r0, r3
 800210c:	f000 f91c 	bl	8002348 <RTC_ByteToBcd2>
 8002110:	4603      	mov	r3, r0
 8002112:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	785b      	ldrb	r3, [r3, #1]
 8002118:	4618      	mov	r0, r3
 800211a:	f000 f915 	bl	8002348 <RTC_ByteToBcd2>
 800211e:	4603      	mov	r3, r0
 8002120:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002122:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	789b      	ldrb	r3, [r3, #2]
 8002128:	4618      	mov	r0, r3
 800212a:	f000 f90d 	bl	8002348 <RTC_ByteToBcd2>
 800212e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002130:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800213a:	4313      	orrs	r3, r2
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	e00e      	b.n	800215e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	78db      	ldrb	r3, [r3, #3]
 8002144:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	785b      	ldrb	r3, [r3, #1]
 800214a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800214c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002152:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800215a:	4313      	orrs	r3, r2
 800215c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	22ca      	movs	r2, #202	; 0xca
 8002164:	625a      	str	r2, [r3, #36]	; 0x24
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2253      	movs	r2, #83	; 0x53
 800216c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 f8be 	bl	80022f0 <RTC_EnterInitMode>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00b      	beq.n	8002192 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	22ff      	movs	r2, #255	; 0xff
 8002180:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2204      	movs	r2, #4
 8002186:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e033      	b.n	80021fa <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800219c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80021a0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021b0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 0320 	and.w	r3, r3, #32
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d111      	bne.n	80021e4 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 f86d 	bl	80022a0 <HAL_RTC_WaitForSynchro>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00b      	beq.n	80021e4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	22ff      	movs	r2, #255	; 0xff
 80021d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2204      	movs	r2, #4
 80021d8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e00a      	b.n	80021fa <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	22ff      	movs	r2, #255	; 0xff
 80021ea:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2201      	movs	r2, #1
 80021f0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80021f8:	2300      	movs	r3, #0
  }
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	371c      	adds	r7, #28
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd90      	pop	{r4, r7, pc}

08002202 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af00      	add	r7, sp, #0
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800221c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002220:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	0c1b      	lsrs	r3, r3, #16
 8002226:	b2da      	uxtb	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f003 031f 	and.w	r3, r3, #31
 8002236:	b2da      	uxtb	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002244:	b2da      	uxtb	r2, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	0b5b      	lsrs	r3, r3, #13
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	b2da      	uxtb	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d11a      	bne.n	8002296 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	78db      	ldrb	r3, [r3, #3]
 8002264:	4618      	mov	r0, r3
 8002266:	f000 f88d 	bl	8002384 <RTC_Bcd2ToByte>
 800226a:	4603      	mov	r3, r0
 800226c:	461a      	mov	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	785b      	ldrb	r3, [r3, #1]
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f884 	bl	8002384 <RTC_Bcd2ToByte>
 800227c:	4603      	mov	r3, r0
 800227e:	461a      	mov	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	789b      	ldrb	r3, [r3, #2]
 8002288:	4618      	mov	r0, r3
 800228a:	f000 f87b 	bl	8002384 <RTC_Bcd2ToByte>
 800228e:	4603      	mov	r3, r0
 8002290:	461a      	mov	r2, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80022ba:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80022bc:	f7fe fc5e 	bl	8000b7c <HAL_GetTick>
 80022c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80022c2:	e009      	b.n	80022d8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80022c4:	f7fe fc5a 	bl	8000b7c <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022d2:	d901      	bls.n	80022d8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e007      	b.n	80022e8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	f003 0320 	and.w	r3, r3, #32
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0ee      	beq.n	80022c4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002306:	2b00      	cmp	r3, #0
 8002308:	d119      	bne.n	800233e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f04f 32ff 	mov.w	r2, #4294967295
 8002312:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002314:	f7fe fc32 	bl	8000b7c <HAL_GetTick>
 8002318:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800231a:	e009      	b.n	8002330 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800231c:	f7fe fc2e 	bl	8000b7c <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800232a:	d901      	bls.n	8002330 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e007      	b.n	8002340 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0ee      	beq.n	800231c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8002356:	e005      	b.n	8002364 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	3301      	adds	r3, #1
 800235c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	3b0a      	subs	r3, #10
 8002362:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	2b09      	cmp	r3, #9
 8002368:	d8f6      	bhi.n	8002358 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	b2da      	uxtb	r2, r3
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	4313      	orrs	r3, r2
 8002376:	b2db      	uxtb	r3, r3
}
 8002378:	4618      	mov	r0, r3
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	b2db      	uxtb	r3, r3
 8002398:	461a      	mov	r2, r3
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	b2db      	uxtb	r3, r3
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_RTCEx_SetRefClock>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef* hrtc)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	7f1b      	ldrb	r3, [r3, #28]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_RTCEx_SetRefClock+0x14>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e03a      	b.n	800244a <HAL_RTCEx_SetRefClock+0x8a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2202      	movs	r2, #2
 80023de:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	22ca      	movs	r2, #202	; 0xca
 80023e6:	625a      	str	r2, [r3, #36]	; 0x24
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2253      	movs	r2, #83	; 0x53
 80023ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff ff7d 	bl	80022f0 <RTC_EnterInitMode>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00b      	beq.n	8002414 <HAL_RTCEx_SetRefClock+0x54>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	22ff      	movs	r2, #255	; 0xff
 8002402:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2204      	movs	r2, #4
 8002408:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e01a      	b.n	800244a <HAL_RTCEx_SetRefClock+0x8a>
  }
  else
  {
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0210 	orr.w	r2, r2, #16
 8002422:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002432:	60da      	str	r2, [r3, #12]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	22ff      	movs	r2, #255	; 0xff
 800243a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e03f      	b.n	80024e4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d106      	bne.n	800247e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7fe ff1f 	bl	80012bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2224      	movs	r2, #36	; 0x24
 8002482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002494:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fdda 	bl	8003050 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691a      	ldr	r2, [r3, #16]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	695a      	ldr	r2, [r3, #20]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2220      	movs	r2, #32
 80024d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	; 0x28
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	4613      	mov	r3, r2
 80024fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b20      	cmp	r3, #32
 800250a:	d17c      	bne.n	8002606 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <HAL_UART_Transmit+0x2c>
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e075      	b.n	8002608 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_UART_Transmit+0x3e>
 8002526:	2302      	movs	r3, #2
 8002528:	e06e      	b.n	8002608 <HAL_UART_Transmit+0x11c>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2221      	movs	r2, #33	; 0x21
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002540:	f7fe fb1c 	bl	8000b7c <HAL_GetTick>
 8002544:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	88fa      	ldrh	r2, [r7, #6]
 800254a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	88fa      	ldrh	r2, [r7, #6]
 8002550:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800255a:	d108      	bne.n	800256e <HAL_UART_Transmit+0x82>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d104      	bne.n	800256e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002564:	2300      	movs	r3, #0
 8002566:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	61bb      	str	r3, [r7, #24]
 800256c:	e003      	b.n	8002576 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002572:	2300      	movs	r3, #0
 8002574:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800257e:	e02a      	b.n	80025d6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2200      	movs	r2, #0
 8002588:	2180      	movs	r1, #128	; 0x80
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 fb1e 	bl	8002bcc <UART_WaitOnFlagUntilTimeout>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e036      	b.n	8002608 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10b      	bne.n	80025b8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025ae:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	3302      	adds	r3, #2
 80025b4:	61bb      	str	r3, [r7, #24]
 80025b6:	e007      	b.n	80025c8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	781a      	ldrb	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3301      	adds	r3, #1
 80025c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1cf      	bne.n	8002580 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2200      	movs	r2, #0
 80025e8:	2140      	movs	r1, #64	; 0x40
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 faee 	bl	8002bcc <UART_WaitOnFlagUntilTimeout>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e006      	b.n	8002608 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2220      	movs	r2, #32
 80025fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	e000      	b.n	8002608 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002606:	2302      	movs	r3, #2
  }
}
 8002608:	4618      	mov	r0, r3
 800260a:	3720      	adds	r7, #32
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	4613      	mov	r3, r2
 800261c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b20      	cmp	r3, #32
 8002628:	d11d      	bne.n	8002666 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <HAL_UART_Receive_IT+0x26>
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e016      	b.n	8002668 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_UART_Receive_IT+0x38>
 8002644:	2302      	movs	r3, #2
 8002646:	e00f      	b.n	8002668 <HAL_UART_Receive_IT+0x58>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	461a      	mov	r2, r3
 800265a:	68b9      	ldr	r1, [r7, #8]
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 fb23 	bl	8002ca8 <UART_Start_Receive_IT>
 8002662:	4603      	mov	r3, r0
 8002664:	e000      	b.n	8002668 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002666:	2302      	movs	r3, #2
  }
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b0ba      	sub	sp, #232	; 0xe8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002696:	2300      	movs	r3, #0
 8002698:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800269c:	2300      	movs	r3, #0
 800269e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80026ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10f      	bne.n	80026d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ba:	f003 0320 	and.w	r3, r3, #32
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d009      	beq.n	80026d6 <HAL_UART_IRQHandler+0x66>
 80026c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026c6:	f003 0320 	and.w	r3, r3, #32
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fc03 	bl	8002eda <UART_Receive_IT>
      return;
 80026d4:	e256      	b.n	8002b84 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80026d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 80de 	beq.w	800289c <HAL_UART_IRQHandler+0x22c>
 80026e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d106      	bne.n	80026fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80d1 	beq.w	800289c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00b      	beq.n	800271e <HAL_UART_IRQHandler+0xae>
 8002706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f043 0201 	orr.w	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800271e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00b      	beq.n	8002742 <HAL_UART_IRQHandler+0xd2>
 800272a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f043 0202 	orr.w	r2, r3, #2
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00b      	beq.n	8002766 <HAL_UART_IRQHandler+0xf6>
 800274e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d005      	beq.n	8002766 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f043 0204 	orr.w	r2, r3, #4
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d011      	beq.n	8002796 <HAL_UART_IRQHandler+0x126>
 8002772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002776:	f003 0320 	and.w	r3, r3, #32
 800277a:	2b00      	cmp	r3, #0
 800277c:	d105      	bne.n	800278a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800277e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d005      	beq.n	8002796 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f043 0208 	orr.w	r2, r3, #8
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 81ed 	beq.w	8002b7a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027a4:	f003 0320 	and.w	r3, r3, #32
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d008      	beq.n	80027be <HAL_UART_IRQHandler+0x14e>
 80027ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 fb8e 	bl	8002eda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c8:	2b40      	cmp	r3, #64	; 0x40
 80027ca:	bf0c      	ite	eq
 80027cc:	2301      	moveq	r3, #1
 80027ce:	2300      	movne	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d103      	bne.n	80027ea <HAL_UART_IRQHandler+0x17a>
 80027e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d04f      	beq.n	800288a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fa96 	bl	8002d1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fa:	2b40      	cmp	r3, #64	; 0x40
 80027fc:	d141      	bne.n	8002882 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3314      	adds	r3, #20
 8002804:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002808:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800280c:	e853 3f00 	ldrex	r3, [r3]
 8002810:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002814:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800281c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	3314      	adds	r3, #20
 8002826:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800282a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800282e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002832:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002836:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800283a:	e841 2300 	strex	r3, r2, [r1]
 800283e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1d9      	bne.n	80027fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284e:	2b00      	cmp	r3, #0
 8002850:	d013      	beq.n	800287a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002856:	4a7d      	ldr	r2, [pc, #500]	; (8002a4c <HAL_UART_IRQHandler+0x3dc>)
 8002858:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe fb11 	bl	8000e86 <HAL_DMA_Abort_IT>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d016      	beq.n	8002898 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002874:	4610      	mov	r0, r2
 8002876:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002878:	e00e      	b.n	8002898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f990 	bl	8002ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002880:	e00a      	b.n	8002898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f98c 	bl	8002ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002888:	e006      	b.n	8002898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f988 	bl	8002ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002896:	e170      	b.n	8002b7a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002898:	bf00      	nop
    return;
 800289a:	e16e      	b.n	8002b7a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	f040 814a 	bne.w	8002b3a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80028a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 8143 	beq.w	8002b3a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80028b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 813c 	beq.w	8002b3a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028c2:	2300      	movs	r3, #0
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e2:	2b40      	cmp	r3, #64	; 0x40
 80028e4:	f040 80b4 	bne.w	8002a50 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 8140 	beq.w	8002b7e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002902:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002906:	429a      	cmp	r2, r3
 8002908:	f080 8139 	bcs.w	8002b7e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002912:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800291e:	f000 8088 	beq.w	8002a32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	330c      	adds	r3, #12
 8002928:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002930:	e853 3f00 	ldrex	r3, [r3]
 8002934:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002938:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800293c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002940:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	330c      	adds	r3, #12
 800294a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800294e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002952:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002956:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800295a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800295e:	e841 2300 	strex	r3, r2, [r1]
 8002962:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002966:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1d9      	bne.n	8002922 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	3314      	adds	r3, #20
 8002974:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002976:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002978:	e853 3f00 	ldrex	r3, [r3]
 800297c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800297e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002980:	f023 0301 	bic.w	r3, r3, #1
 8002984:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3314      	adds	r3, #20
 800298e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002992:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002996:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002998:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800299a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800299e:	e841 2300 	strex	r3, r2, [r1]
 80029a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80029a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1e1      	bne.n	800296e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	3314      	adds	r3, #20
 80029b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029b4:	e853 3f00 	ldrex	r3, [r3]
 80029b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80029ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	3314      	adds	r3, #20
 80029ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029d6:	e841 2300 	strex	r3, r2, [r1]
 80029da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80029dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1e3      	bne.n	80029aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2220      	movs	r2, #32
 80029e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	330c      	adds	r3, #12
 80029f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029fa:	e853 3f00 	ldrex	r3, [r3]
 80029fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a02:	f023 0310 	bic.w	r3, r3, #16
 8002a06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	330c      	adds	r3, #12
 8002a10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002a14:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a1c:	e841 2300 	strex	r3, r2, [r1]
 8002a20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1e3      	bne.n	80029f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fe f9ba 	bl	8000da6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	4619      	mov	r1, r3
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f8b6 	bl	8002bb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a48:	e099      	b.n	8002b7e <HAL_UART_IRQHandler+0x50e>
 8002a4a:	bf00      	nop
 8002a4c:	08002de3 	.word	0x08002de3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 808b 	beq.w	8002b82 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002a6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 8086 	beq.w	8002b82 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	330c      	adds	r3, #12
 8002a7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a80:	e853 3f00 	ldrex	r3, [r3]
 8002a84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	330c      	adds	r3, #12
 8002a96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a9a:	647a      	str	r2, [r7, #68]	; 0x44
 8002a9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002aa0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002aa2:	e841 2300 	strex	r3, r2, [r1]
 8002aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1e3      	bne.n	8002a76 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	3314      	adds	r3, #20
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	e853 3f00 	ldrex	r3, [r3]
 8002abc:	623b      	str	r3, [r7, #32]
   return(result);
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	f023 0301 	bic.w	r3, r3, #1
 8002ac4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	3314      	adds	r3, #20
 8002ace:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ad2:	633a      	str	r2, [r7, #48]	; 0x30
 8002ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ada:	e841 2300 	strex	r3, r2, [r1]
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1e3      	bne.n	8002aae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	330c      	adds	r3, #12
 8002afa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	e853 3f00 	ldrex	r3, [r3]
 8002b02:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f023 0310 	bic.w	r3, r3, #16
 8002b0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	330c      	adds	r3, #12
 8002b14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b18:	61fa      	str	r2, [r7, #28]
 8002b1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1c:	69b9      	ldr	r1, [r7, #24]
 8002b1e:	69fa      	ldr	r2, [r7, #28]
 8002b20:	e841 2300 	strex	r3, r2, [r1]
 8002b24:	617b      	str	r3, [r7, #20]
   return(result);
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1e3      	bne.n	8002af4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b30:	4619      	mov	r1, r3
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f83e 	bl	8002bb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b38:	e023      	b.n	8002b82 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d009      	beq.n	8002b5a <HAL_UART_IRQHandler+0x4ea>
 8002b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f959 	bl	8002e0a <UART_Transmit_IT>
    return;
 8002b58:	e014      	b.n	8002b84 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00e      	beq.n	8002b84 <HAL_UART_IRQHandler+0x514>
 8002b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d008      	beq.n	8002b84 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f999 	bl	8002eaa <UART_EndTransmit_IT>
    return;
 8002b78:	e004      	b.n	8002b84 <HAL_UART_IRQHandler+0x514>
    return;
 8002b7a:	bf00      	nop
 8002b7c:	e002      	b.n	8002b84 <HAL_UART_IRQHandler+0x514>
      return;
 8002b7e:	bf00      	nop
 8002b80:	e000      	b.n	8002b84 <HAL_UART_IRQHandler+0x514>
      return;
 8002b82:	bf00      	nop
  }
}
 8002b84:	37e8      	adds	r7, #232	; 0xe8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop

08002b8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b090      	sub	sp, #64	; 0x40
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bdc:	e050      	b.n	8002c80 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be4:	d04c      	beq.n	8002c80 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d007      	beq.n	8002bfc <UART_WaitOnFlagUntilTimeout+0x30>
 8002bec:	f7fd ffc6 	bl	8000b7c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d241      	bcs.n	8002c80 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	330c      	adds	r3, #12
 8002c02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c06:	e853 3f00 	ldrex	r3, [r3]
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	330c      	adds	r3, #12
 8002c1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c1c:	637a      	str	r2, [r7, #52]	; 0x34
 8002c1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c24:	e841 2300 	strex	r3, r2, [r1]
 8002c28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1e5      	bne.n	8002bfc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	3314      	adds	r3, #20
 8002c36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	e853 3f00 	ldrex	r3, [r3]
 8002c3e:	613b      	str	r3, [r7, #16]
   return(result);
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f023 0301 	bic.w	r3, r3, #1
 8002c46:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	3314      	adds	r3, #20
 8002c4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c50:	623a      	str	r2, [r7, #32]
 8002c52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c54:	69f9      	ldr	r1, [r7, #28]
 8002c56:	6a3a      	ldr	r2, [r7, #32]
 8002c58:	e841 2300 	strex	r3, r2, [r1]
 8002c5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1e5      	bne.n	8002c30 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e00f      	b.n	8002ca0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	bf0c      	ite	eq
 8002c90:	2301      	moveq	r3, #1
 8002c92:	2300      	movne	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d09f      	beq.n	8002bde <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3740      	adds	r7, #64	; 0x40
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	88fa      	ldrh	r2, [r7, #6]
 8002cc0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	88fa      	ldrh	r2, [r7, #6]
 8002cc6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2222      	movs	r2, #34	; 0x22
 8002cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cec:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695a      	ldr	r2, [r3, #20]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 0201 	orr.w	r2, r2, #1
 8002cfc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 0220 	orr.w	r2, r2, #32
 8002d0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b095      	sub	sp, #84	; 0x54
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	330c      	adds	r3, #12
 8002d2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2e:	e853 3f00 	ldrex	r3, [r3]
 8002d32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	330c      	adds	r3, #12
 8002d42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d44:	643a      	str	r2, [r7, #64]	; 0x40
 8002d46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d4c:	e841 2300 	strex	r3, r2, [r1]
 8002d50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1e5      	bne.n	8002d24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3314      	adds	r3, #20
 8002d5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	e853 3f00 	ldrex	r3, [r3]
 8002d66:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f023 0301 	bic.w	r3, r3, #1
 8002d6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3314      	adds	r3, #20
 8002d76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d80:	e841 2300 	strex	r3, r2, [r1]
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1e5      	bne.n	8002d58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d119      	bne.n	8002dc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	330c      	adds	r3, #12
 8002d9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	e853 3f00 	ldrex	r3, [r3]
 8002da2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f023 0310 	bic.w	r3, r3, #16
 8002daa:	647b      	str	r3, [r7, #68]	; 0x44
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	330c      	adds	r3, #12
 8002db2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002db4:	61ba      	str	r2, [r7, #24]
 8002db6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db8:	6979      	ldr	r1, [r7, #20]
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	e841 2300 	strex	r3, r2, [r1]
 8002dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1e5      	bne.n	8002d94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002dd6:	bf00      	nop
 8002dd8:	3754      	adds	r7, #84	; 0x54
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f7ff fecf 	bl	8002ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e02:	bf00      	nop
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b085      	sub	sp, #20
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b21      	cmp	r3, #33	; 0x21
 8002e1c:	d13e      	bne.n	8002e9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e26:	d114      	bne.n	8002e52 <UART_Transmit_IT+0x48>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d110      	bne.n	8002e52 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	1c9a      	adds	r2, r3, #2
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	621a      	str	r2, [r3, #32]
 8002e50:	e008      	b.n	8002e64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	1c59      	adds	r1, r3, #1
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6211      	str	r1, [r2, #32]
 8002e5c:	781a      	ldrb	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	4619      	mov	r1, r3
 8002e72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10f      	bne.n	8002e98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	e000      	b.n	8002e9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e9c:	2302      	movs	r3, #2
  }
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ec0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff fe5e 	bl	8002b8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b08c      	sub	sp, #48	; 0x30
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b22      	cmp	r3, #34	; 0x22
 8002eec:	f040 80ab 	bne.w	8003046 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef8:	d117      	bne.n	8002f2a <UART_Receive_IT+0x50>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d113      	bne.n	8002f2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	1c9a      	adds	r2, r3, #2
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
 8002f28:	e026      	b.n	8002f78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f3c:	d007      	beq.n	8002f4e <UART_Receive_IT+0x74>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10a      	bne.n	8002f5c <UART_Receive_IT+0x82>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f58:	701a      	strb	r2, [r3, #0]
 8002f5a:	e008      	b.n	8002f6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	4619      	mov	r1, r3
 8002f86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d15a      	bne.n	8003042 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0220 	bic.w	r2, r2, #32
 8002f9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002faa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d135      	bne.n	8003038 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	330c      	adds	r3, #12
 8002fd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	e853 3f00 	ldrex	r3, [r3]
 8002fe0:	613b      	str	r3, [r7, #16]
   return(result);
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f023 0310 	bic.w	r3, r3, #16
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	330c      	adds	r3, #12
 8002ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff2:	623a      	str	r2, [r7, #32]
 8002ff4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff6:	69f9      	ldr	r1, [r7, #28]
 8002ff8:	6a3a      	ldr	r2, [r7, #32]
 8002ffa:	e841 2300 	strex	r3, r2, [r1]
 8002ffe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1e5      	bne.n	8002fd2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b10      	cmp	r3, #16
 8003012:	d10a      	bne.n	800302a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800302e:	4619      	mov	r1, r3
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff fdbf 	bl	8002bb4 <HAL_UARTEx_RxEventCallback>
 8003036:	e002      	b.n	800303e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7fd faf5 	bl	8000628 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	e002      	b.n	8003048 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	e000      	b.n	8003048 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003046:	2302      	movs	r3, #2
  }
}
 8003048:	4618      	mov	r0, r3
 800304a:	3730      	adds	r7, #48	; 0x30
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003054:	b09f      	sub	sp, #124	; 0x7c
 8003056:	af00      	add	r7, sp, #0
 8003058:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800305a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003066:	68d9      	ldr	r1, [r3, #12]
 8003068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	ea40 0301 	orr.w	r3, r0, r1
 8003070:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	431a      	orrs	r2, r3
 800307c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	431a      	orrs	r2, r3
 8003082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	4313      	orrs	r3, r2
 8003088:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800308a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003094:	f021 010c 	bic.w	r1, r1, #12
 8003098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800309e:	430b      	orrs	r3, r1
 80030a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ae:	6999      	ldr	r1, [r3, #24]
 80030b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	ea40 0301 	orr.w	r3, r0, r1
 80030b8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	4bc5      	ldr	r3, [pc, #788]	; (80033d4 <UART_SetConfig+0x384>)
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d004      	beq.n	80030ce <UART_SetConfig+0x7e>
 80030c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	4bc3      	ldr	r3, [pc, #780]	; (80033d8 <UART_SetConfig+0x388>)
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d103      	bne.n	80030d6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030ce:	f7fe fe27 	bl	8001d20 <HAL_RCC_GetPCLK2Freq>
 80030d2:	6778      	str	r0, [r7, #116]	; 0x74
 80030d4:	e002      	b.n	80030dc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030d6:	f7fe fe0f 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 80030da:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e4:	f040 80b6 	bne.w	8003254 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ea:	461c      	mov	r4, r3
 80030ec:	f04f 0500 	mov.w	r5, #0
 80030f0:	4622      	mov	r2, r4
 80030f2:	462b      	mov	r3, r5
 80030f4:	1891      	adds	r1, r2, r2
 80030f6:	6439      	str	r1, [r7, #64]	; 0x40
 80030f8:	415b      	adcs	r3, r3
 80030fa:	647b      	str	r3, [r7, #68]	; 0x44
 80030fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003100:	1912      	adds	r2, r2, r4
 8003102:	eb45 0303 	adc.w	r3, r5, r3
 8003106:	f04f 0000 	mov.w	r0, #0
 800310a:	f04f 0100 	mov.w	r1, #0
 800310e:	00d9      	lsls	r1, r3, #3
 8003110:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003114:	00d0      	lsls	r0, r2, #3
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	1911      	adds	r1, r2, r4
 800311c:	6639      	str	r1, [r7, #96]	; 0x60
 800311e:	416b      	adcs	r3, r5
 8003120:	667b      	str	r3, [r7, #100]	; 0x64
 8003122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	461a      	mov	r2, r3
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	1891      	adds	r1, r2, r2
 800312e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003130:	415b      	adcs	r3, r3
 8003132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003134:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003138:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800313c:	f7fd f8b0 	bl	80002a0 <__aeabi_uldivmod>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4ba5      	ldr	r3, [pc, #660]	; (80033dc <UART_SetConfig+0x38c>)
 8003146:	fba3 2302 	umull	r2, r3, r3, r2
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	011e      	lsls	r6, r3, #4
 800314e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003150:	461c      	mov	r4, r3
 8003152:	f04f 0500 	mov.w	r5, #0
 8003156:	4622      	mov	r2, r4
 8003158:	462b      	mov	r3, r5
 800315a:	1891      	adds	r1, r2, r2
 800315c:	6339      	str	r1, [r7, #48]	; 0x30
 800315e:	415b      	adcs	r3, r3
 8003160:	637b      	str	r3, [r7, #52]	; 0x34
 8003162:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003166:	1912      	adds	r2, r2, r4
 8003168:	eb45 0303 	adc.w	r3, r5, r3
 800316c:	f04f 0000 	mov.w	r0, #0
 8003170:	f04f 0100 	mov.w	r1, #0
 8003174:	00d9      	lsls	r1, r3, #3
 8003176:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800317a:	00d0      	lsls	r0, r2, #3
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	1911      	adds	r1, r2, r4
 8003182:	65b9      	str	r1, [r7, #88]	; 0x58
 8003184:	416b      	adcs	r3, r5
 8003186:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	461a      	mov	r2, r3
 800318e:	f04f 0300 	mov.w	r3, #0
 8003192:	1891      	adds	r1, r2, r2
 8003194:	62b9      	str	r1, [r7, #40]	; 0x28
 8003196:	415b      	adcs	r3, r3
 8003198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800319a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800319e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80031a2:	f7fd f87d 	bl	80002a0 <__aeabi_uldivmod>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4b8c      	ldr	r3, [pc, #560]	; (80033dc <UART_SetConfig+0x38c>)
 80031ac:	fba3 1302 	umull	r1, r3, r3, r2
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	2164      	movs	r1, #100	; 0x64
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	3332      	adds	r3, #50	; 0x32
 80031be:	4a87      	ldr	r2, [pc, #540]	; (80033dc <UART_SetConfig+0x38c>)
 80031c0:	fba2 2303 	umull	r2, r3, r2, r3
 80031c4:	095b      	lsrs	r3, r3, #5
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031cc:	441e      	add	r6, r3
 80031ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031d0:	4618      	mov	r0, r3
 80031d2:	f04f 0100 	mov.w	r1, #0
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	1894      	adds	r4, r2, r2
 80031dc:	623c      	str	r4, [r7, #32]
 80031de:	415b      	adcs	r3, r3
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
 80031e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031e6:	1812      	adds	r2, r2, r0
 80031e8:	eb41 0303 	adc.w	r3, r1, r3
 80031ec:	f04f 0400 	mov.w	r4, #0
 80031f0:	f04f 0500 	mov.w	r5, #0
 80031f4:	00dd      	lsls	r5, r3, #3
 80031f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031fa:	00d4      	lsls	r4, r2, #3
 80031fc:	4622      	mov	r2, r4
 80031fe:	462b      	mov	r3, r5
 8003200:	1814      	adds	r4, r2, r0
 8003202:	653c      	str	r4, [r7, #80]	; 0x50
 8003204:	414b      	adcs	r3, r1
 8003206:	657b      	str	r3, [r7, #84]	; 0x54
 8003208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	461a      	mov	r2, r3
 800320e:	f04f 0300 	mov.w	r3, #0
 8003212:	1891      	adds	r1, r2, r2
 8003214:	61b9      	str	r1, [r7, #24]
 8003216:	415b      	adcs	r3, r3
 8003218:	61fb      	str	r3, [r7, #28]
 800321a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800321e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003222:	f7fd f83d 	bl	80002a0 <__aeabi_uldivmod>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	4b6c      	ldr	r3, [pc, #432]	; (80033dc <UART_SetConfig+0x38c>)
 800322c:	fba3 1302 	umull	r1, r3, r3, r2
 8003230:	095b      	lsrs	r3, r3, #5
 8003232:	2164      	movs	r1, #100	; 0x64
 8003234:	fb01 f303 	mul.w	r3, r1, r3
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	3332      	adds	r3, #50	; 0x32
 800323e:	4a67      	ldr	r2, [pc, #412]	; (80033dc <UART_SetConfig+0x38c>)
 8003240:	fba2 2303 	umull	r2, r3, r2, r3
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	f003 0207 	and.w	r2, r3, #7
 800324a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4432      	add	r2, r6
 8003250:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003252:	e0b9      	b.n	80033c8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003256:	461c      	mov	r4, r3
 8003258:	f04f 0500 	mov.w	r5, #0
 800325c:	4622      	mov	r2, r4
 800325e:	462b      	mov	r3, r5
 8003260:	1891      	adds	r1, r2, r2
 8003262:	6139      	str	r1, [r7, #16]
 8003264:	415b      	adcs	r3, r3
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800326c:	1912      	adds	r2, r2, r4
 800326e:	eb45 0303 	adc.w	r3, r5, r3
 8003272:	f04f 0000 	mov.w	r0, #0
 8003276:	f04f 0100 	mov.w	r1, #0
 800327a:	00d9      	lsls	r1, r3, #3
 800327c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003280:	00d0      	lsls	r0, r2, #3
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	eb12 0804 	adds.w	r8, r2, r4
 800328a:	eb43 0905 	adc.w	r9, r3, r5
 800328e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	4618      	mov	r0, r3
 8003294:	f04f 0100 	mov.w	r1, #0
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	008b      	lsls	r3, r1, #2
 80032a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032a6:	0082      	lsls	r2, r0, #2
 80032a8:	4640      	mov	r0, r8
 80032aa:	4649      	mov	r1, r9
 80032ac:	f7fc fff8 	bl	80002a0 <__aeabi_uldivmod>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4b49      	ldr	r3, [pc, #292]	; (80033dc <UART_SetConfig+0x38c>)
 80032b6:	fba3 2302 	umull	r2, r3, r3, r2
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	011e      	lsls	r6, r3, #4
 80032be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032c0:	4618      	mov	r0, r3
 80032c2:	f04f 0100 	mov.w	r1, #0
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	1894      	adds	r4, r2, r2
 80032cc:	60bc      	str	r4, [r7, #8]
 80032ce:	415b      	adcs	r3, r3
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032d6:	1812      	adds	r2, r2, r0
 80032d8:	eb41 0303 	adc.w	r3, r1, r3
 80032dc:	f04f 0400 	mov.w	r4, #0
 80032e0:	f04f 0500 	mov.w	r5, #0
 80032e4:	00dd      	lsls	r5, r3, #3
 80032e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80032ea:	00d4      	lsls	r4, r2, #3
 80032ec:	4622      	mov	r2, r4
 80032ee:	462b      	mov	r3, r5
 80032f0:	1814      	adds	r4, r2, r0
 80032f2:	64bc      	str	r4, [r7, #72]	; 0x48
 80032f4:	414b      	adcs	r3, r1
 80032f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f04f 0100 	mov.w	r1, #0
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	008b      	lsls	r3, r1, #2
 800330c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003310:	0082      	lsls	r2, r0, #2
 8003312:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003316:	f7fc ffc3 	bl	80002a0 <__aeabi_uldivmod>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4b2f      	ldr	r3, [pc, #188]	; (80033dc <UART_SetConfig+0x38c>)
 8003320:	fba3 1302 	umull	r1, r3, r3, r2
 8003324:	095b      	lsrs	r3, r3, #5
 8003326:	2164      	movs	r1, #100	; 0x64
 8003328:	fb01 f303 	mul.w	r3, r1, r3
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	3332      	adds	r3, #50	; 0x32
 8003332:	4a2a      	ldr	r2, [pc, #168]	; (80033dc <UART_SetConfig+0x38c>)
 8003334:	fba2 2303 	umull	r2, r3, r2, r3
 8003338:	095b      	lsrs	r3, r3, #5
 800333a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800333e:	441e      	add	r6, r3
 8003340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003342:	4618      	mov	r0, r3
 8003344:	f04f 0100 	mov.w	r1, #0
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	1894      	adds	r4, r2, r2
 800334e:	603c      	str	r4, [r7, #0]
 8003350:	415b      	adcs	r3, r3
 8003352:	607b      	str	r3, [r7, #4]
 8003354:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003358:	1812      	adds	r2, r2, r0
 800335a:	eb41 0303 	adc.w	r3, r1, r3
 800335e:	f04f 0400 	mov.w	r4, #0
 8003362:	f04f 0500 	mov.w	r5, #0
 8003366:	00dd      	lsls	r5, r3, #3
 8003368:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800336c:	00d4      	lsls	r4, r2, #3
 800336e:	4622      	mov	r2, r4
 8003370:	462b      	mov	r3, r5
 8003372:	eb12 0a00 	adds.w	sl, r2, r0
 8003376:	eb43 0b01 	adc.w	fp, r3, r1
 800337a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	4618      	mov	r0, r3
 8003380:	f04f 0100 	mov.w	r1, #0
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	008b      	lsls	r3, r1, #2
 800338e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003392:	0082      	lsls	r2, r0, #2
 8003394:	4650      	mov	r0, sl
 8003396:	4659      	mov	r1, fp
 8003398:	f7fc ff82 	bl	80002a0 <__aeabi_uldivmod>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <UART_SetConfig+0x38c>)
 80033a2:	fba3 1302 	umull	r1, r3, r3, r2
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	2164      	movs	r1, #100	; 0x64
 80033aa:	fb01 f303 	mul.w	r3, r1, r3
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	3332      	adds	r3, #50	; 0x32
 80033b4:	4a09      	ldr	r2, [pc, #36]	; (80033dc <UART_SetConfig+0x38c>)
 80033b6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ba:	095b      	lsrs	r3, r3, #5
 80033bc:	f003 020f 	and.w	r2, r3, #15
 80033c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4432      	add	r2, r6
 80033c6:	609a      	str	r2, [r3, #8]
}
 80033c8:	bf00      	nop
 80033ca:	377c      	adds	r7, #124	; 0x7c
 80033cc:	46bd      	mov	sp, r7
 80033ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033d2:	bf00      	nop
 80033d4:	40011000 	.word	0x40011000
 80033d8:	40011400 	.word	0x40011400
 80033dc:	51eb851f 	.word	0x51eb851f

080033e0 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */

	HAL_Init();
 80033e4:	f7fd fb6a 	bl	8000abc <HAL_Init>
	BSP_LED_Init(LED1);
 80033e8:	2000      	movs	r0, #0
 80033ea:	f7fd fa49 	bl	8000880 <BSP_LED_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 80033ee:	f000 f819 	bl	8003424 <SystemClock_Config>
	uartinit() ;
 80033f2:	f7fd f8d1 	bl	8000598 <uartinit>
	rtcInit() ;
 80033f6:	f7fd f943 	bl	8000680 <rtcInit>
    /* Infinite loop */
	selectPortButton('a', 15)  ;
 80033fa:	210f      	movs	r1, #15
 80033fc:	2061      	movs	r0, #97	; 0x61
 80033fe:	f000 f895 	bl	800352c <selectPortButton>
	BSP_LED_On(LED1) ;
 8003402:	2000      	movs	r0, #0
 8003404:	f7fd fa8c 	bl	8000920 <BSP_LED_On>
	while (1)
    {
		//GPIO_PinState
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15)== GPIO_PIN_RESET){ ;
 8003408:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800340c:	4804      	ldr	r0, [pc, #16]	; (8003420 <main+0x40>)
 800340e:	f7fd ff09 	bl	8001224 <HAL_GPIO_ReadPin>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f7      	bne.n	8003408 <main+0x28>

		printRTCParameters();
 8003418:	f7fd f9d2 	bl	80007c0 <printRTCParameters>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15)== GPIO_PIN_RESET){ ;
 800341c:	e7f4      	b.n	8003408 <main+0x28>
 800341e:	bf00      	nop
 8003420:	40020000 	.word	0x40020000

08003424 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b094      	sub	sp, #80	; 0x50
 8003428:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800342a:	f107 0320 	add.w	r3, r7, #32
 800342e:	2230      	movs	r2, #48	; 0x30
 8003430:	2100      	movs	r1, #0
 8003432:	4618      	mov	r0, r3
 8003434:	f000 faba 	bl	80039ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003438:	f107 030c 	add.w	r3, r7, #12
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	60da      	str	r2, [r3, #12]
 8003446:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8003448:	2300      	movs	r3, #0
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	4b2d      	ldr	r3, [pc, #180]	; (8003504 <SystemClock_Config+0xe0>)
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	4a2c      	ldr	r2, [pc, #176]	; (8003504 <SystemClock_Config+0xe0>)
 8003452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003456:	6413      	str	r3, [r2, #64]	; 0x40
 8003458:	4b2a      	ldr	r3, [pc, #168]	; (8003504 <SystemClock_Config+0xe0>)
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003464:	2300      	movs	r3, #0
 8003466:	607b      	str	r3, [r7, #4]
 8003468:	4b27      	ldr	r3, [pc, #156]	; (8003508 <SystemClock_Config+0xe4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a26      	ldr	r2, [pc, #152]	; (8003508 <SystemClock_Config+0xe4>)
 800346e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	4b24      	ldr	r3, [pc, #144]	; (8003508 <SystemClock_Config+0xe4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800347c:	607b      	str	r3, [r7, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003480:	2305      	movs	r3, #5
 8003482:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003484:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
	  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800348a:	2301      	movs	r3, #1
 800348c:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800348e:	2302      	movs	r3, #2
 8003490:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003492:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003496:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 8;
 8003498:	2308      	movs	r3, #8
 800349a:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLN = 360;
 800349c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80034a0:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034a2:	2302      	movs	r3, #2
 80034a4:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 7;
 80034a6:	2307      	movs	r3, #7
 80034a8:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034aa:	f107 0320 	add.w	r3, r7, #32
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fd ffd6 	bl	8001460 <HAL_RCC_OscConfig>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <SystemClock_Config+0x9a>
	  {
	    Error_Handler();
 80034ba:	f000 f827 	bl	800350c <Error_Handler>
	  }
	  /** Activate the Over-Drive mode
	  */
	  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80034be:	f7fd ff7f 	bl	80013c0 <HAL_PWREx_EnableOverDrive>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <SystemClock_Config+0xa8>
	  {
	    Error_Handler();
 80034c8:	f000 f820 	bl	800350c <Error_Handler>
	  }
	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034cc:	230f      	movs	r3, #15
 80034ce:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034d0:	2302      	movs	r3, #2
 80034d2:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80034d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80034dc:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80034de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034e2:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80034e4:	f107 030c 	add.w	r3, r7, #12
 80034e8:	2105      	movs	r1, #5
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fe fa30 	bl	8001950 <HAL_RCC_ClockConfig>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <SystemClock_Config+0xd6>
	  {
	    Error_Handler();
 80034f6:	f000 f809 	bl	800350c <Error_Handler>
	  }
}
 80034fa:	bf00      	nop
 80034fc:	3750      	adds	r7, #80	; 0x50
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800
 8003508:	40007000 	.word	0x40007000

0800350c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_Init(LED2) ;
 8003510:	2001      	movs	r0, #1
 8003512:	f7fd f9b5 	bl	8000880 <BSP_LED_Init>
  BSP_LED_On(LED2);
 8003516:	2001      	movs	r0, #1
 8003518:	f7fd fa02 	bl	8000920 <BSP_LED_On>
  while (1)
  {
	  BSP_LED_Toggle(LED2);
 800351c:	2001      	movs	r0, #1
 800351e:	f7fd fa19 	bl	8000954 <BSP_LED_Toggle>
	  HAL_Delay(100) ;
 8003522:	2064      	movs	r0, #100	; 0x64
 8003524:	f7fd fb36 	bl	8000b94 <HAL_Delay>
	  BSP_LED_Toggle(LED2);
 8003528:	e7f8      	b.n	800351c <Error_Handler+0x10>
	...

0800352c <selectPortButton>:
  }
}


void selectPortButton(char p, uint8_t num_port){
 800352c:	b580      	push	{r7, lr}
 800352e:	b092      	sub	sp, #72	; 0x48
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	460a      	mov	r2, r1
 8003536:	71fb      	strb	r3, [r7, #7]
 8003538:	4613      	mov	r3, r2
 800353a:	71bb      	strb	r3, [r7, #6]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800353c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	60da      	str	r2, [r3, #12]
 800354a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
 800354c:	2300      	movs	r3, #0
 800354e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003550:	2301      	movs	r3, #1
 8003552:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Pin = selectGPIOport(num_port);
 8003554:	79bb      	ldrb	r3, [r7, #6]
 8003556:	4618      	mov	r0, r3
 8003558:	f000 f964 	bl	8003824 <selectGPIOport>
 800355c:	4603      	mov	r3, r0
 800355e:	637b      	str	r3, [r7, #52]	; 0x34
	// if port== 0 - port0 , port == 1 , port1 ....


	switch(p){
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	3b41      	subs	r3, #65	; 0x41
 8003564:	2b2a      	cmp	r3, #42	; 0x2a
 8003566:	f200 8140 	bhi.w	80037ea <selectPortButton+0x2be>
 800356a:	a201      	add	r2, pc, #4	; (adr r2, 8003570 <selectPortButton+0x44>)
 800356c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003570:	0800361d 	.word	0x0800361d
 8003574:	08003647 	.word	0x08003647
 8003578:	08003671 	.word	0x08003671
 800357c:	0800369b 	.word	0x0800369b
 8003580:	080036c5 	.word	0x080036c5
 8003584:	080036ef 	.word	0x080036ef
 8003588:	08003719 	.word	0x08003719
 800358c:	08003743 	.word	0x08003743
 8003590:	0800376d 	.word	0x0800376d
 8003594:	08003797 	.word	0x08003797
 8003598:	080037c1 	.word	0x080037c1
 800359c:	080037eb 	.word	0x080037eb
 80035a0:	080037eb 	.word	0x080037eb
 80035a4:	080037eb 	.word	0x080037eb
 80035a8:	080037eb 	.word	0x080037eb
 80035ac:	080037eb 	.word	0x080037eb
 80035b0:	080037eb 	.word	0x080037eb
 80035b4:	080037eb 	.word	0x080037eb
 80035b8:	080037eb 	.word	0x080037eb
 80035bc:	080037eb 	.word	0x080037eb
 80035c0:	080037eb 	.word	0x080037eb
 80035c4:	080037eb 	.word	0x080037eb
 80035c8:	080037eb 	.word	0x080037eb
 80035cc:	080037eb 	.word	0x080037eb
 80035d0:	080037eb 	.word	0x080037eb
 80035d4:	080037eb 	.word	0x080037eb
 80035d8:	080037eb 	.word	0x080037eb
 80035dc:	080037eb 	.word	0x080037eb
 80035e0:	080037eb 	.word	0x080037eb
 80035e4:	080037eb 	.word	0x080037eb
 80035e8:	080037eb 	.word	0x080037eb
 80035ec:	080037eb 	.word	0x080037eb
 80035f0:	0800361d 	.word	0x0800361d
 80035f4:	08003647 	.word	0x08003647
 80035f8:	08003671 	.word	0x08003671
 80035fc:	0800369b 	.word	0x0800369b
 8003600:	080036c5 	.word	0x080036c5
 8003604:	080036ef 	.word	0x080036ef
 8003608:	08003719 	.word	0x08003719
 800360c:	08003743 	.word	0x08003743
 8003610:	0800376d 	.word	0x0800376d
 8003614:	08003797 	.word	0x08003797
 8003618:	080037c1 	.word	0x080037c1
	case 'a':
	case 'A':
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 800361c:	2300      	movs	r3, #0
 800361e:	633b      	str	r3, [r7, #48]	; 0x30
 8003620:	4b74      	ldr	r3, [pc, #464]	; (80037f4 <selectPortButton+0x2c8>)
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	4a73      	ldr	r2, [pc, #460]	; (80037f4 <selectPortButton+0x2c8>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6313      	str	r3, [r2, #48]	; 0x30
 800362c:	4b71      	ldr	r3, [pc, #452]	; (80037f4 <selectPortButton+0x2c8>)
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	633b      	str	r3, [r7, #48]	; 0x30
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003638:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800363c:	4619      	mov	r1, r3
 800363e:	486e      	ldr	r0, [pc, #440]	; (80037f8 <selectPortButton+0x2cc>)
 8003640:	f7fd fc44 	bl	8000ecc <HAL_GPIO_Init>
    	break ;
 8003644:	e0d2      	b.n	80037ec <selectPortButton+0x2c0>
	case 'b':
	case 'B':
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800364a:	4b6a      	ldr	r3, [pc, #424]	; (80037f4 <selectPortButton+0x2c8>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	4a69      	ldr	r2, [pc, #420]	; (80037f4 <selectPortButton+0x2c8>)
 8003650:	f043 0302 	orr.w	r3, r3, #2
 8003654:	6313      	str	r3, [r2, #48]	; 0x30
 8003656:	4b67      	ldr	r3, [pc, #412]	; (80037f4 <selectPortButton+0x2c8>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003662:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003666:	4619      	mov	r1, r3
 8003668:	4864      	ldr	r0, [pc, #400]	; (80037fc <selectPortButton+0x2d0>)
 800366a:	f7fd fc2f 	bl	8000ecc <HAL_GPIO_Init>

		break ;
 800366e:	e0bd      	b.n	80037ec <selectPortButton+0x2c0>
	case 'c':
	case 'C':
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8003670:	2300      	movs	r3, #0
 8003672:	62bb      	str	r3, [r7, #40]	; 0x28
 8003674:	4b5f      	ldr	r3, [pc, #380]	; (80037f4 <selectPortButton+0x2c8>)
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	4a5e      	ldr	r2, [pc, #376]	; (80037f4 <selectPortButton+0x2c8>)
 800367a:	f043 0304 	orr.w	r3, r3, #4
 800367e:	6313      	str	r3, [r2, #48]	; 0x30
 8003680:	4b5c      	ldr	r3, [pc, #368]	; (80037f4 <selectPortButton+0x2c8>)
 8003682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	62bb      	str	r3, [r7, #40]	; 0x28
 800368a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800368c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003690:	4619      	mov	r1, r3
 8003692:	485b      	ldr	r0, [pc, #364]	; (8003800 <selectPortButton+0x2d4>)
 8003694:	f7fd fc1a 	bl	8000ecc <HAL_GPIO_Init>

		break ;
 8003698:	e0a8      	b.n	80037ec <selectPortButton+0x2c0>
	case 'd':
	case 'D':
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
 800369e:	4b55      	ldr	r3, [pc, #340]	; (80037f4 <selectPortButton+0x2c8>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	4a54      	ldr	r2, [pc, #336]	; (80037f4 <selectPortButton+0x2c8>)
 80036a4:	f043 0308 	orr.w	r3, r3, #8
 80036a8:	6313      	str	r3, [r2, #48]	; 0x30
 80036aa:	4b52      	ldr	r3, [pc, #328]	; (80037f4 <selectPortButton+0x2c8>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	627b      	str	r3, [r7, #36]	; 0x24
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80036ba:	4619      	mov	r1, r3
 80036bc:	4851      	ldr	r0, [pc, #324]	; (8003804 <selectPortButton+0x2d8>)
 80036be:	f7fd fc05 	bl	8000ecc <HAL_GPIO_Init>

		break ;
 80036c2:	e093      	b.n	80037ec <selectPortButton+0x2c0>
	case 'e':
	case 'E':
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80036c4:	2300      	movs	r3, #0
 80036c6:	623b      	str	r3, [r7, #32]
 80036c8:	4b4a      	ldr	r3, [pc, #296]	; (80037f4 <selectPortButton+0x2c8>)
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036cc:	4a49      	ldr	r2, [pc, #292]	; (80037f4 <selectPortButton+0x2c8>)
 80036ce:	f043 0310 	orr.w	r3, r3, #16
 80036d2:	6313      	str	r3, [r2, #48]	; 0x30
 80036d4:	4b47      	ldr	r3, [pc, #284]	; (80037f4 <selectPortButton+0x2c8>)
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	f003 0310 	and.w	r3, r3, #16
 80036dc:	623b      	str	r3, [r7, #32]
 80036de:	6a3b      	ldr	r3, [r7, #32]
    	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80036e4:	4619      	mov	r1, r3
 80036e6:	4848      	ldr	r0, [pc, #288]	; (8003808 <selectPortButton+0x2dc>)
 80036e8:	f7fd fbf0 	bl	8000ecc <HAL_GPIO_Init>

		break ;
 80036ec:	e07e      	b.n	80037ec <selectPortButton+0x2c0>
	case 'f':
	case 'F':
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
 80036f2:	4b40      	ldr	r3, [pc, #256]	; (80037f4 <selectPortButton+0x2c8>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	4a3f      	ldr	r2, [pc, #252]	; (80037f4 <selectPortButton+0x2c8>)
 80036f8:	f043 0320 	orr.w	r3, r3, #32
 80036fc:	6313      	str	r3, [r2, #48]	; 0x30
 80036fe:	4b3d      	ldr	r3, [pc, #244]	; (80037f4 <selectPortButton+0x2c8>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	69fb      	ldr	r3, [r7, #28]
    	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800370a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800370e:	4619      	mov	r1, r3
 8003710:	483e      	ldr	r0, [pc, #248]	; (800380c <selectPortButton+0x2e0>)
 8003712:	f7fd fbdb 	bl	8000ecc <HAL_GPIO_Init>

		break ;
 8003716:	e069      	b.n	80037ec <selectPortButton+0x2c0>
	case 'g':
	case 'G':
		__HAL_RCC_GPIOG_CLK_ENABLE();
 8003718:	2300      	movs	r3, #0
 800371a:	61bb      	str	r3, [r7, #24]
 800371c:	4b35      	ldr	r3, [pc, #212]	; (80037f4 <selectPortButton+0x2c8>)
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	4a34      	ldr	r2, [pc, #208]	; (80037f4 <selectPortButton+0x2c8>)
 8003722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003726:	6313      	str	r3, [r2, #48]	; 0x30
 8003728:	4b32      	ldr	r3, [pc, #200]	; (80037f4 <selectPortButton+0x2c8>)
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003730:	61bb      	str	r3, [r7, #24]
 8003732:	69bb      	ldr	r3, [r7, #24]
    	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003734:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003738:	4619      	mov	r1, r3
 800373a:	4835      	ldr	r0, [pc, #212]	; (8003810 <selectPortButton+0x2e4>)
 800373c:	f7fd fbc6 	bl	8000ecc <HAL_GPIO_Init>

		break ;
 8003740:	e054      	b.n	80037ec <selectPortButton+0x2c0>
	case 'h':
	case 'H':
		__HAL_RCC_GPIOH_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	4b2b      	ldr	r3, [pc, #172]	; (80037f4 <selectPortButton+0x2c8>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	4a2a      	ldr	r2, [pc, #168]	; (80037f4 <selectPortButton+0x2c8>)
 800374c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003750:	6313      	str	r3, [r2, #48]	; 0x30
 8003752:	4b28      	ldr	r3, [pc, #160]	; (80037f4 <selectPortButton+0x2c8>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	697b      	ldr	r3, [r7, #20]
    	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800375e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003762:	4619      	mov	r1, r3
 8003764:	482b      	ldr	r0, [pc, #172]	; (8003814 <selectPortButton+0x2e8>)
 8003766:	f7fd fbb1 	bl	8000ecc <HAL_GPIO_Init>

		break ;
 800376a:	e03f      	b.n	80037ec <selectPortButton+0x2c0>
	case 'i':
	case 'I':
		__HAL_RCC_GPIOI_CLK_ENABLE();
 800376c:	2300      	movs	r3, #0
 800376e:	613b      	str	r3, [r7, #16]
 8003770:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <selectPortButton+0x2c8>)
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003774:	4a1f      	ldr	r2, [pc, #124]	; (80037f4 <selectPortButton+0x2c8>)
 8003776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800377a:	6313      	str	r3, [r2, #48]	; 0x30
 800377c:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <selectPortButton+0x2c8>)
 800377e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003784:	613b      	str	r3, [r7, #16]
 8003786:	693b      	ldr	r3, [r7, #16]
    	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003788:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800378c:	4619      	mov	r1, r3
 800378e:	4822      	ldr	r0, [pc, #136]	; (8003818 <selectPortButton+0x2ec>)
 8003790:	f7fd fb9c 	bl	8000ecc <HAL_GPIO_Init>

		break ;
 8003794:	e02a      	b.n	80037ec <selectPortButton+0x2c0>
	case 'j':
	case 'J':
		__HAL_RCC_GPIOJ_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	4b16      	ldr	r3, [pc, #88]	; (80037f4 <selectPortButton+0x2c8>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	4a15      	ldr	r2, [pc, #84]	; (80037f4 <selectPortButton+0x2c8>)
 80037a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037a4:	6313      	str	r3, [r2, #48]	; 0x30
 80037a6:	4b13      	ldr	r3, [pc, #76]	; (80037f4 <selectPortButton+0x2c8>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
    	HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80037b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037b6:	4619      	mov	r1, r3
 80037b8:	4818      	ldr	r0, [pc, #96]	; (800381c <selectPortButton+0x2f0>)
 80037ba:	f7fd fb87 	bl	8000ecc <HAL_GPIO_Init>

		break ;
 80037be:	e015      	b.n	80037ec <selectPortButton+0x2c0>
	case 'k':
	case 'K':
		__HAL_RCC_GPIOK_CLK_ENABLE();
 80037c0:	2300      	movs	r3, #0
 80037c2:	60bb      	str	r3, [r7, #8]
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <selectPortButton+0x2c8>)
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	4a0a      	ldr	r2, [pc, #40]	; (80037f4 <selectPortButton+0x2c8>)
 80037ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037ce:	6313      	str	r3, [r2, #48]	; 0x30
 80037d0:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <selectPortButton+0x2c8>)
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d8:	60bb      	str	r3, [r7, #8]
 80037da:	68bb      	ldr	r3, [r7, #8]
    	HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80037dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037e0:	4619      	mov	r1, r3
 80037e2:	480f      	ldr	r0, [pc, #60]	; (8003820 <selectPortButton+0x2f4>)
 80037e4:	f7fd fb72 	bl	8000ecc <HAL_GPIO_Init>

		break ;
 80037e8:	e000      	b.n	80037ec <selectPortButton+0x2c0>
	default:
		//management of error
		break ;
 80037ea:	bf00      	nop
	}

}
 80037ec:	bf00      	nop
 80037ee:	3748      	adds	r7, #72	; 0x48
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40020000 	.word	0x40020000
 80037fc:	40020400 	.word	0x40020400
 8003800:	40020800 	.word	0x40020800
 8003804:	40020c00 	.word	0x40020c00
 8003808:	40021000 	.word	0x40021000
 800380c:	40021400 	.word	0x40021400
 8003810:	40021800 	.word	0x40021800
 8003814:	40021c00 	.word	0x40021c00
 8003818:	40022000 	.word	0x40022000
 800381c:	40022400 	.word	0x40022400
 8003820:	40022800 	.word	0x40022800

08003824 <selectGPIOport>:

uint32_t selectGPIOport(uint8_t numport){
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	71fb      	strb	r3, [r7, #7]
	uint32_t responsePortNumber ;
	switch(numport){
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	2b0f      	cmp	r3, #15
 8003832:	d85b      	bhi.n	80038ec <selectGPIOport+0xc8>
 8003834:	a201      	add	r2, pc, #4	; (adr r2, 800383c <selectGPIOport+0x18>)
 8003836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383a:	bf00      	nop
 800383c:	0800387d 	.word	0x0800387d
 8003840:	08003883 	.word	0x08003883
 8003844:	08003889 	.word	0x08003889
 8003848:	0800388f 	.word	0x0800388f
 800384c:	08003895 	.word	0x08003895
 8003850:	0800389b 	.word	0x0800389b
 8003854:	080038a1 	.word	0x080038a1
 8003858:	080038a7 	.word	0x080038a7
 800385c:	080038ad 	.word	0x080038ad
 8003860:	080038b5 	.word	0x080038b5
 8003864:	080038bd 	.word	0x080038bd
 8003868:	080038c5 	.word	0x080038c5
 800386c:	080038cd 	.word	0x080038cd
 8003870:	080038d5 	.word	0x080038d5
 8003874:	080038dd 	.word	0x080038dd
 8003878:	080038e5 	.word	0x080038e5
	case 0:
		responsePortNumber = GPIO_PIN_0 ;
 800387c:	2301      	movs	r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
		break ;
 8003880:	e038      	b.n	80038f4 <selectGPIOport+0xd0>
	case 1:
		responsePortNumber = GPIO_PIN_1 ;
 8003882:	2302      	movs	r3, #2
 8003884:	60fb      	str	r3, [r7, #12]
		break ;
 8003886:	e035      	b.n	80038f4 <selectGPIOport+0xd0>
	case 2:
		responsePortNumber = GPIO_PIN_2 ;
 8003888:	2304      	movs	r3, #4
 800388a:	60fb      	str	r3, [r7, #12]
		break ;
 800388c:	e032      	b.n	80038f4 <selectGPIOport+0xd0>
	case 3:
		responsePortNumber = GPIO_PIN_3 ;
 800388e:	2308      	movs	r3, #8
 8003890:	60fb      	str	r3, [r7, #12]
		break ;
 8003892:	e02f      	b.n	80038f4 <selectGPIOport+0xd0>
	case 4:
		responsePortNumber = GPIO_PIN_4 ;
 8003894:	2310      	movs	r3, #16
 8003896:	60fb      	str	r3, [r7, #12]
		break ;
 8003898:	e02c      	b.n	80038f4 <selectGPIOport+0xd0>
	case 5:
		responsePortNumber = GPIO_PIN_5 ;
 800389a:	2320      	movs	r3, #32
 800389c:	60fb      	str	r3, [r7, #12]
		break ;
 800389e:	e029      	b.n	80038f4 <selectGPIOport+0xd0>
	case 6:
		responsePortNumber = GPIO_PIN_6 ;
 80038a0:	2340      	movs	r3, #64	; 0x40
 80038a2:	60fb      	str	r3, [r7, #12]
		break ;
 80038a4:	e026      	b.n	80038f4 <selectGPIOport+0xd0>
	case 7:
		responsePortNumber = GPIO_PIN_7 ;
 80038a6:	2380      	movs	r3, #128	; 0x80
 80038a8:	60fb      	str	r3, [r7, #12]
		break ;
 80038aa:	e023      	b.n	80038f4 <selectGPIOport+0xd0>
	case 8:
		responsePortNumber = GPIO_PIN_8 ;
 80038ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038b0:	60fb      	str	r3, [r7, #12]
		break ;
 80038b2:	e01f      	b.n	80038f4 <selectGPIOport+0xd0>
	case 9:
		responsePortNumber = GPIO_PIN_9 ;
 80038b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038b8:	60fb      	str	r3, [r7, #12]
		break ;
 80038ba:	e01b      	b.n	80038f4 <selectGPIOport+0xd0>
	case 10:
		responsePortNumber = GPIO_PIN_10 ;
 80038bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038c0:	60fb      	str	r3, [r7, #12]
		break ;
 80038c2:	e017      	b.n	80038f4 <selectGPIOport+0xd0>
	case 11:
		responsePortNumber = GPIO_PIN_11 ;
 80038c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038c8:	60fb      	str	r3, [r7, #12]
		break ;
 80038ca:	e013      	b.n	80038f4 <selectGPIOport+0xd0>
	case 12:
		responsePortNumber = GPIO_PIN_12 ;
 80038cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038d0:	60fb      	str	r3, [r7, #12]
		break ;
 80038d2:	e00f      	b.n	80038f4 <selectGPIOport+0xd0>
	case 13:
		responsePortNumber = GPIO_PIN_13;
 80038d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038d8:	60fb      	str	r3, [r7, #12]
		break ;
 80038da:	e00b      	b.n	80038f4 <selectGPIOport+0xd0>
	case 14:
		responsePortNumber = GPIO_PIN_14 ;
 80038dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038e0:	60fb      	str	r3, [r7, #12]
		break ;
 80038e2:	e007      	b.n	80038f4 <selectGPIOport+0xd0>
	case 15:
		responsePortNumber = GPIO_PIN_14 ;
 80038e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038e8:	60fb      	str	r3, [r7, #12]
		break ;
 80038ea:	e003      	b.n	80038f4 <selectGPIOport+0xd0>
	default:
		responsePortNumber = -1 ;
 80038ec:	f04f 33ff 	mov.w	r3, #4294967295
 80038f0:	60fb      	str	r3, [r7, #12]
		break ;
 80038f2:	bf00      	nop
	}
	return responsePortNumber ;
 80038f4:	68fb      	ldr	r3, [r7, #12]

}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop

08003904 <Reset_Handler>:

   .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800393c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003908:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800390a:	e003      	b.n	8003914 <LoopCopyDataInit>

0800390c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800390e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003910:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003912:	3104      	adds	r1, #4

08003914 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003914:	480b      	ldr	r0, [pc, #44]	; (8003944 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003916:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003918:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800391a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800391c:	d3f6      	bcc.n	800390c <CopyDataInit>
  ldr  r2, =_sbss
 800391e:	4a0b      	ldr	r2, [pc, #44]	; (800394c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003920:	e002      	b.n	8003928 <LoopFillZerobss>

08003922 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003922:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003924:	f842 3b04 	str.w	r3, [r2], #4

08003928 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003928:	4b09      	ldr	r3, [pc, #36]	; (8003950 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800392a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800392c:	d3f9      	bcc.n	8003922 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800392e:	f7fd f82b 	bl	8000988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003932:	f000 f817 	bl	8003964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003936:	f7ff fd53 	bl	80033e0 <main>
  bx  lr    
 800393a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800393c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003940:	08004330 	.word	0x08004330
  ldr  r0, =_sdata
 8003944:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003948:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 800394c:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8003950:	20000138 	.word	0x20000138

08003954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003954:	e7fe      	b.n	8003954 <ADC_IRQHandler>
	...

08003958 <__errno>:
 8003958:	4b01      	ldr	r3, [pc, #4]	; (8003960 <__errno+0x8>)
 800395a:	6818      	ldr	r0, [r3, #0]
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	20000018 	.word	0x20000018

08003964 <__libc_init_array>:
 8003964:	b570      	push	{r4, r5, r6, lr}
 8003966:	4d0d      	ldr	r5, [pc, #52]	; (800399c <__libc_init_array+0x38>)
 8003968:	4c0d      	ldr	r4, [pc, #52]	; (80039a0 <__libc_init_array+0x3c>)
 800396a:	1b64      	subs	r4, r4, r5
 800396c:	10a4      	asrs	r4, r4, #2
 800396e:	2600      	movs	r6, #0
 8003970:	42a6      	cmp	r6, r4
 8003972:	d109      	bne.n	8003988 <__libc_init_array+0x24>
 8003974:	4d0b      	ldr	r5, [pc, #44]	; (80039a4 <__libc_init_array+0x40>)
 8003976:	4c0c      	ldr	r4, [pc, #48]	; (80039a8 <__libc_init_array+0x44>)
 8003978:	f000 fc4e 	bl	8004218 <_init>
 800397c:	1b64      	subs	r4, r4, r5
 800397e:	10a4      	asrs	r4, r4, #2
 8003980:	2600      	movs	r6, #0
 8003982:	42a6      	cmp	r6, r4
 8003984:	d105      	bne.n	8003992 <__libc_init_array+0x2e>
 8003986:	bd70      	pop	{r4, r5, r6, pc}
 8003988:	f855 3b04 	ldr.w	r3, [r5], #4
 800398c:	4798      	blx	r3
 800398e:	3601      	adds	r6, #1
 8003990:	e7ee      	b.n	8003970 <__libc_init_array+0xc>
 8003992:	f855 3b04 	ldr.w	r3, [r5], #4
 8003996:	4798      	blx	r3
 8003998:	3601      	adds	r6, #1
 800399a:	e7f2      	b.n	8003982 <__libc_init_array+0x1e>
 800399c:	08004328 	.word	0x08004328
 80039a0:	08004328 	.word	0x08004328
 80039a4:	08004328 	.word	0x08004328
 80039a8:	0800432c 	.word	0x0800432c

080039ac <memset>:
 80039ac:	4402      	add	r2, r0
 80039ae:	4603      	mov	r3, r0
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d100      	bne.n	80039b6 <memset+0xa>
 80039b4:	4770      	bx	lr
 80039b6:	f803 1b01 	strb.w	r1, [r3], #1
 80039ba:	e7f9      	b.n	80039b0 <memset+0x4>

080039bc <siprintf>:
 80039bc:	b40e      	push	{r1, r2, r3}
 80039be:	b500      	push	{lr}
 80039c0:	b09c      	sub	sp, #112	; 0x70
 80039c2:	ab1d      	add	r3, sp, #116	; 0x74
 80039c4:	9002      	str	r0, [sp, #8]
 80039c6:	9006      	str	r0, [sp, #24]
 80039c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039cc:	4809      	ldr	r0, [pc, #36]	; (80039f4 <siprintf+0x38>)
 80039ce:	9107      	str	r1, [sp, #28]
 80039d0:	9104      	str	r1, [sp, #16]
 80039d2:	4909      	ldr	r1, [pc, #36]	; (80039f8 <siprintf+0x3c>)
 80039d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80039d8:	9105      	str	r1, [sp, #20]
 80039da:	6800      	ldr	r0, [r0, #0]
 80039dc:	9301      	str	r3, [sp, #4]
 80039de:	a902      	add	r1, sp, #8
 80039e0:	f000 f868 	bl	8003ab4 <_svfiprintf_r>
 80039e4:	9b02      	ldr	r3, [sp, #8]
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
 80039ea:	b01c      	add	sp, #112	; 0x70
 80039ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80039f0:	b003      	add	sp, #12
 80039f2:	4770      	bx	lr
 80039f4:	20000018 	.word	0x20000018
 80039f8:	ffff0208 	.word	0xffff0208

080039fc <__ssputs_r>:
 80039fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a00:	688e      	ldr	r6, [r1, #8]
 8003a02:	429e      	cmp	r6, r3
 8003a04:	4682      	mov	sl, r0
 8003a06:	460c      	mov	r4, r1
 8003a08:	4690      	mov	r8, r2
 8003a0a:	461f      	mov	r7, r3
 8003a0c:	d838      	bhi.n	8003a80 <__ssputs_r+0x84>
 8003a0e:	898a      	ldrh	r2, [r1, #12]
 8003a10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a14:	d032      	beq.n	8003a7c <__ssputs_r+0x80>
 8003a16:	6825      	ldr	r5, [r4, #0]
 8003a18:	6909      	ldr	r1, [r1, #16]
 8003a1a:	eba5 0901 	sub.w	r9, r5, r1
 8003a1e:	6965      	ldr	r5, [r4, #20]
 8003a20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a28:	3301      	adds	r3, #1
 8003a2a:	444b      	add	r3, r9
 8003a2c:	106d      	asrs	r5, r5, #1
 8003a2e:	429d      	cmp	r5, r3
 8003a30:	bf38      	it	cc
 8003a32:	461d      	movcc	r5, r3
 8003a34:	0553      	lsls	r3, r2, #21
 8003a36:	d531      	bpl.n	8003a9c <__ssputs_r+0xa0>
 8003a38:	4629      	mov	r1, r5
 8003a3a:	f000 fb47 	bl	80040cc <_malloc_r>
 8003a3e:	4606      	mov	r6, r0
 8003a40:	b950      	cbnz	r0, 8003a58 <__ssputs_r+0x5c>
 8003a42:	230c      	movs	r3, #12
 8003a44:	f8ca 3000 	str.w	r3, [sl]
 8003a48:	89a3      	ldrh	r3, [r4, #12]
 8003a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a4e:	81a3      	strh	r3, [r4, #12]
 8003a50:	f04f 30ff 	mov.w	r0, #4294967295
 8003a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a58:	6921      	ldr	r1, [r4, #16]
 8003a5a:	464a      	mov	r2, r9
 8003a5c:	f000 fabe 	bl	8003fdc <memcpy>
 8003a60:	89a3      	ldrh	r3, [r4, #12]
 8003a62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6a:	81a3      	strh	r3, [r4, #12]
 8003a6c:	6126      	str	r6, [r4, #16]
 8003a6e:	6165      	str	r5, [r4, #20]
 8003a70:	444e      	add	r6, r9
 8003a72:	eba5 0509 	sub.w	r5, r5, r9
 8003a76:	6026      	str	r6, [r4, #0]
 8003a78:	60a5      	str	r5, [r4, #8]
 8003a7a:	463e      	mov	r6, r7
 8003a7c:	42be      	cmp	r6, r7
 8003a7e:	d900      	bls.n	8003a82 <__ssputs_r+0x86>
 8003a80:	463e      	mov	r6, r7
 8003a82:	4632      	mov	r2, r6
 8003a84:	6820      	ldr	r0, [r4, #0]
 8003a86:	4641      	mov	r1, r8
 8003a88:	f000 fab6 	bl	8003ff8 <memmove>
 8003a8c:	68a3      	ldr	r3, [r4, #8]
 8003a8e:	6822      	ldr	r2, [r4, #0]
 8003a90:	1b9b      	subs	r3, r3, r6
 8003a92:	4432      	add	r2, r6
 8003a94:	60a3      	str	r3, [r4, #8]
 8003a96:	6022      	str	r2, [r4, #0]
 8003a98:	2000      	movs	r0, #0
 8003a9a:	e7db      	b.n	8003a54 <__ssputs_r+0x58>
 8003a9c:	462a      	mov	r2, r5
 8003a9e:	f000 fb6f 	bl	8004180 <_realloc_r>
 8003aa2:	4606      	mov	r6, r0
 8003aa4:	2800      	cmp	r0, #0
 8003aa6:	d1e1      	bne.n	8003a6c <__ssputs_r+0x70>
 8003aa8:	6921      	ldr	r1, [r4, #16]
 8003aaa:	4650      	mov	r0, sl
 8003aac:	f000 fabe 	bl	800402c <_free_r>
 8003ab0:	e7c7      	b.n	8003a42 <__ssputs_r+0x46>
	...

08003ab4 <_svfiprintf_r>:
 8003ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab8:	4698      	mov	r8, r3
 8003aba:	898b      	ldrh	r3, [r1, #12]
 8003abc:	061b      	lsls	r3, r3, #24
 8003abe:	b09d      	sub	sp, #116	; 0x74
 8003ac0:	4607      	mov	r7, r0
 8003ac2:	460d      	mov	r5, r1
 8003ac4:	4614      	mov	r4, r2
 8003ac6:	d50e      	bpl.n	8003ae6 <_svfiprintf_r+0x32>
 8003ac8:	690b      	ldr	r3, [r1, #16]
 8003aca:	b963      	cbnz	r3, 8003ae6 <_svfiprintf_r+0x32>
 8003acc:	2140      	movs	r1, #64	; 0x40
 8003ace:	f000 fafd 	bl	80040cc <_malloc_r>
 8003ad2:	6028      	str	r0, [r5, #0]
 8003ad4:	6128      	str	r0, [r5, #16]
 8003ad6:	b920      	cbnz	r0, 8003ae2 <_svfiprintf_r+0x2e>
 8003ad8:	230c      	movs	r3, #12
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae0:	e0d1      	b.n	8003c86 <_svfiprintf_r+0x1d2>
 8003ae2:	2340      	movs	r3, #64	; 0x40
 8003ae4:	616b      	str	r3, [r5, #20]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8003aea:	2320      	movs	r3, #32
 8003aec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003af0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003af4:	2330      	movs	r3, #48	; 0x30
 8003af6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003ca0 <_svfiprintf_r+0x1ec>
 8003afa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003afe:	f04f 0901 	mov.w	r9, #1
 8003b02:	4623      	mov	r3, r4
 8003b04:	469a      	mov	sl, r3
 8003b06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b0a:	b10a      	cbz	r2, 8003b10 <_svfiprintf_r+0x5c>
 8003b0c:	2a25      	cmp	r2, #37	; 0x25
 8003b0e:	d1f9      	bne.n	8003b04 <_svfiprintf_r+0x50>
 8003b10:	ebba 0b04 	subs.w	fp, sl, r4
 8003b14:	d00b      	beq.n	8003b2e <_svfiprintf_r+0x7a>
 8003b16:	465b      	mov	r3, fp
 8003b18:	4622      	mov	r2, r4
 8003b1a:	4629      	mov	r1, r5
 8003b1c:	4638      	mov	r0, r7
 8003b1e:	f7ff ff6d 	bl	80039fc <__ssputs_r>
 8003b22:	3001      	adds	r0, #1
 8003b24:	f000 80aa 	beq.w	8003c7c <_svfiprintf_r+0x1c8>
 8003b28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b2a:	445a      	add	r2, fp
 8003b2c:	9209      	str	r2, [sp, #36]	; 0x24
 8003b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 80a2 	beq.w	8003c7c <_svfiprintf_r+0x1c8>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b42:	f10a 0a01 	add.w	sl, sl, #1
 8003b46:	9304      	str	r3, [sp, #16]
 8003b48:	9307      	str	r3, [sp, #28]
 8003b4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b4e:	931a      	str	r3, [sp, #104]	; 0x68
 8003b50:	4654      	mov	r4, sl
 8003b52:	2205      	movs	r2, #5
 8003b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b58:	4851      	ldr	r0, [pc, #324]	; (8003ca0 <_svfiprintf_r+0x1ec>)
 8003b5a:	f7fc fb51 	bl	8000200 <memchr>
 8003b5e:	9a04      	ldr	r2, [sp, #16]
 8003b60:	b9d8      	cbnz	r0, 8003b9a <_svfiprintf_r+0xe6>
 8003b62:	06d0      	lsls	r0, r2, #27
 8003b64:	bf44      	itt	mi
 8003b66:	2320      	movmi	r3, #32
 8003b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b6c:	0711      	lsls	r1, r2, #28
 8003b6e:	bf44      	itt	mi
 8003b70:	232b      	movmi	r3, #43	; 0x2b
 8003b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b76:	f89a 3000 	ldrb.w	r3, [sl]
 8003b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8003b7c:	d015      	beq.n	8003baa <_svfiprintf_r+0xf6>
 8003b7e:	9a07      	ldr	r2, [sp, #28]
 8003b80:	4654      	mov	r4, sl
 8003b82:	2000      	movs	r0, #0
 8003b84:	f04f 0c0a 	mov.w	ip, #10
 8003b88:	4621      	mov	r1, r4
 8003b8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b8e:	3b30      	subs	r3, #48	; 0x30
 8003b90:	2b09      	cmp	r3, #9
 8003b92:	d94e      	bls.n	8003c32 <_svfiprintf_r+0x17e>
 8003b94:	b1b0      	cbz	r0, 8003bc4 <_svfiprintf_r+0x110>
 8003b96:	9207      	str	r2, [sp, #28]
 8003b98:	e014      	b.n	8003bc4 <_svfiprintf_r+0x110>
 8003b9a:	eba0 0308 	sub.w	r3, r0, r8
 8003b9e:	fa09 f303 	lsl.w	r3, r9, r3
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	9304      	str	r3, [sp, #16]
 8003ba6:	46a2      	mov	sl, r4
 8003ba8:	e7d2      	b.n	8003b50 <_svfiprintf_r+0x9c>
 8003baa:	9b03      	ldr	r3, [sp, #12]
 8003bac:	1d19      	adds	r1, r3, #4
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	9103      	str	r1, [sp, #12]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	bfbb      	ittet	lt
 8003bb6:	425b      	neglt	r3, r3
 8003bb8:	f042 0202 	orrlt.w	r2, r2, #2
 8003bbc:	9307      	strge	r3, [sp, #28]
 8003bbe:	9307      	strlt	r3, [sp, #28]
 8003bc0:	bfb8      	it	lt
 8003bc2:	9204      	strlt	r2, [sp, #16]
 8003bc4:	7823      	ldrb	r3, [r4, #0]
 8003bc6:	2b2e      	cmp	r3, #46	; 0x2e
 8003bc8:	d10c      	bne.n	8003be4 <_svfiprintf_r+0x130>
 8003bca:	7863      	ldrb	r3, [r4, #1]
 8003bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8003bce:	d135      	bne.n	8003c3c <_svfiprintf_r+0x188>
 8003bd0:	9b03      	ldr	r3, [sp, #12]
 8003bd2:	1d1a      	adds	r2, r3, #4
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	9203      	str	r2, [sp, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bfb8      	it	lt
 8003bdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8003be0:	3402      	adds	r4, #2
 8003be2:	9305      	str	r3, [sp, #20]
 8003be4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003cb0 <_svfiprintf_r+0x1fc>
 8003be8:	7821      	ldrb	r1, [r4, #0]
 8003bea:	2203      	movs	r2, #3
 8003bec:	4650      	mov	r0, sl
 8003bee:	f7fc fb07 	bl	8000200 <memchr>
 8003bf2:	b140      	cbz	r0, 8003c06 <_svfiprintf_r+0x152>
 8003bf4:	2340      	movs	r3, #64	; 0x40
 8003bf6:	eba0 000a 	sub.w	r0, r0, sl
 8003bfa:	fa03 f000 	lsl.w	r0, r3, r0
 8003bfe:	9b04      	ldr	r3, [sp, #16]
 8003c00:	4303      	orrs	r3, r0
 8003c02:	3401      	adds	r4, #1
 8003c04:	9304      	str	r3, [sp, #16]
 8003c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c0a:	4826      	ldr	r0, [pc, #152]	; (8003ca4 <_svfiprintf_r+0x1f0>)
 8003c0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c10:	2206      	movs	r2, #6
 8003c12:	f7fc faf5 	bl	8000200 <memchr>
 8003c16:	2800      	cmp	r0, #0
 8003c18:	d038      	beq.n	8003c8c <_svfiprintf_r+0x1d8>
 8003c1a:	4b23      	ldr	r3, [pc, #140]	; (8003ca8 <_svfiprintf_r+0x1f4>)
 8003c1c:	bb1b      	cbnz	r3, 8003c66 <_svfiprintf_r+0x1b2>
 8003c1e:	9b03      	ldr	r3, [sp, #12]
 8003c20:	3307      	adds	r3, #7
 8003c22:	f023 0307 	bic.w	r3, r3, #7
 8003c26:	3308      	adds	r3, #8
 8003c28:	9303      	str	r3, [sp, #12]
 8003c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c2c:	4433      	add	r3, r6
 8003c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8003c30:	e767      	b.n	8003b02 <_svfiprintf_r+0x4e>
 8003c32:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c36:	460c      	mov	r4, r1
 8003c38:	2001      	movs	r0, #1
 8003c3a:	e7a5      	b.n	8003b88 <_svfiprintf_r+0xd4>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	3401      	adds	r4, #1
 8003c40:	9305      	str	r3, [sp, #20]
 8003c42:	4619      	mov	r1, r3
 8003c44:	f04f 0c0a 	mov.w	ip, #10
 8003c48:	4620      	mov	r0, r4
 8003c4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c4e:	3a30      	subs	r2, #48	; 0x30
 8003c50:	2a09      	cmp	r2, #9
 8003c52:	d903      	bls.n	8003c5c <_svfiprintf_r+0x1a8>
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0c5      	beq.n	8003be4 <_svfiprintf_r+0x130>
 8003c58:	9105      	str	r1, [sp, #20]
 8003c5a:	e7c3      	b.n	8003be4 <_svfiprintf_r+0x130>
 8003c5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c60:	4604      	mov	r4, r0
 8003c62:	2301      	movs	r3, #1
 8003c64:	e7f0      	b.n	8003c48 <_svfiprintf_r+0x194>
 8003c66:	ab03      	add	r3, sp, #12
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	462a      	mov	r2, r5
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <_svfiprintf_r+0x1f8>)
 8003c6e:	a904      	add	r1, sp, #16
 8003c70:	4638      	mov	r0, r7
 8003c72:	f3af 8000 	nop.w
 8003c76:	1c42      	adds	r2, r0, #1
 8003c78:	4606      	mov	r6, r0
 8003c7a:	d1d6      	bne.n	8003c2a <_svfiprintf_r+0x176>
 8003c7c:	89ab      	ldrh	r3, [r5, #12]
 8003c7e:	065b      	lsls	r3, r3, #25
 8003c80:	f53f af2c 	bmi.w	8003adc <_svfiprintf_r+0x28>
 8003c84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c86:	b01d      	add	sp, #116	; 0x74
 8003c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c8c:	ab03      	add	r3, sp, #12
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	462a      	mov	r2, r5
 8003c92:	4b06      	ldr	r3, [pc, #24]	; (8003cac <_svfiprintf_r+0x1f8>)
 8003c94:	a904      	add	r1, sp, #16
 8003c96:	4638      	mov	r0, r7
 8003c98:	f000 f87a 	bl	8003d90 <_printf_i>
 8003c9c:	e7eb      	b.n	8003c76 <_svfiprintf_r+0x1c2>
 8003c9e:	bf00      	nop
 8003ca0:	080042ec 	.word	0x080042ec
 8003ca4:	080042f6 	.word	0x080042f6
 8003ca8:	00000000 	.word	0x00000000
 8003cac:	080039fd 	.word	0x080039fd
 8003cb0:	080042f2 	.word	0x080042f2

08003cb4 <_printf_common>:
 8003cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb8:	4616      	mov	r6, r2
 8003cba:	4699      	mov	r9, r3
 8003cbc:	688a      	ldr	r2, [r1, #8]
 8003cbe:	690b      	ldr	r3, [r1, #16]
 8003cc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	bfb8      	it	lt
 8003cc8:	4613      	movlt	r3, r2
 8003cca:	6033      	str	r3, [r6, #0]
 8003ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cd0:	4607      	mov	r7, r0
 8003cd2:	460c      	mov	r4, r1
 8003cd4:	b10a      	cbz	r2, 8003cda <_printf_common+0x26>
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	6033      	str	r3, [r6, #0]
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	0699      	lsls	r1, r3, #26
 8003cde:	bf42      	ittt	mi
 8003ce0:	6833      	ldrmi	r3, [r6, #0]
 8003ce2:	3302      	addmi	r3, #2
 8003ce4:	6033      	strmi	r3, [r6, #0]
 8003ce6:	6825      	ldr	r5, [r4, #0]
 8003ce8:	f015 0506 	ands.w	r5, r5, #6
 8003cec:	d106      	bne.n	8003cfc <_printf_common+0x48>
 8003cee:	f104 0a19 	add.w	sl, r4, #25
 8003cf2:	68e3      	ldr	r3, [r4, #12]
 8003cf4:	6832      	ldr	r2, [r6, #0]
 8003cf6:	1a9b      	subs	r3, r3, r2
 8003cf8:	42ab      	cmp	r3, r5
 8003cfa:	dc26      	bgt.n	8003d4a <_printf_common+0x96>
 8003cfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d00:	1e13      	subs	r3, r2, #0
 8003d02:	6822      	ldr	r2, [r4, #0]
 8003d04:	bf18      	it	ne
 8003d06:	2301      	movne	r3, #1
 8003d08:	0692      	lsls	r2, r2, #26
 8003d0a:	d42b      	bmi.n	8003d64 <_printf_common+0xb0>
 8003d0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d10:	4649      	mov	r1, r9
 8003d12:	4638      	mov	r0, r7
 8003d14:	47c0      	blx	r8
 8003d16:	3001      	adds	r0, #1
 8003d18:	d01e      	beq.n	8003d58 <_printf_common+0xa4>
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	68e5      	ldr	r5, [r4, #12]
 8003d1e:	6832      	ldr	r2, [r6, #0]
 8003d20:	f003 0306 	and.w	r3, r3, #6
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	bf08      	it	eq
 8003d28:	1aad      	subeq	r5, r5, r2
 8003d2a:	68a3      	ldr	r3, [r4, #8]
 8003d2c:	6922      	ldr	r2, [r4, #16]
 8003d2e:	bf0c      	ite	eq
 8003d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d34:	2500      	movne	r5, #0
 8003d36:	4293      	cmp	r3, r2
 8003d38:	bfc4      	itt	gt
 8003d3a:	1a9b      	subgt	r3, r3, r2
 8003d3c:	18ed      	addgt	r5, r5, r3
 8003d3e:	2600      	movs	r6, #0
 8003d40:	341a      	adds	r4, #26
 8003d42:	42b5      	cmp	r5, r6
 8003d44:	d11a      	bne.n	8003d7c <_printf_common+0xc8>
 8003d46:	2000      	movs	r0, #0
 8003d48:	e008      	b.n	8003d5c <_printf_common+0xa8>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	4652      	mov	r2, sl
 8003d4e:	4649      	mov	r1, r9
 8003d50:	4638      	mov	r0, r7
 8003d52:	47c0      	blx	r8
 8003d54:	3001      	adds	r0, #1
 8003d56:	d103      	bne.n	8003d60 <_printf_common+0xac>
 8003d58:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d60:	3501      	adds	r5, #1
 8003d62:	e7c6      	b.n	8003cf2 <_printf_common+0x3e>
 8003d64:	18e1      	adds	r1, r4, r3
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	2030      	movs	r0, #48	; 0x30
 8003d6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d6e:	4422      	add	r2, r4
 8003d70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d78:	3302      	adds	r3, #2
 8003d7a:	e7c7      	b.n	8003d0c <_printf_common+0x58>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	4622      	mov	r2, r4
 8003d80:	4649      	mov	r1, r9
 8003d82:	4638      	mov	r0, r7
 8003d84:	47c0      	blx	r8
 8003d86:	3001      	adds	r0, #1
 8003d88:	d0e6      	beq.n	8003d58 <_printf_common+0xa4>
 8003d8a:	3601      	adds	r6, #1
 8003d8c:	e7d9      	b.n	8003d42 <_printf_common+0x8e>
	...

08003d90 <_printf_i>:
 8003d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d94:	460c      	mov	r4, r1
 8003d96:	4691      	mov	r9, r2
 8003d98:	7e27      	ldrb	r7, [r4, #24]
 8003d9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003d9c:	2f78      	cmp	r7, #120	; 0x78
 8003d9e:	4680      	mov	r8, r0
 8003da0:	469a      	mov	sl, r3
 8003da2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003da6:	d807      	bhi.n	8003db8 <_printf_i+0x28>
 8003da8:	2f62      	cmp	r7, #98	; 0x62
 8003daa:	d80a      	bhi.n	8003dc2 <_printf_i+0x32>
 8003dac:	2f00      	cmp	r7, #0
 8003dae:	f000 80d8 	beq.w	8003f62 <_printf_i+0x1d2>
 8003db2:	2f58      	cmp	r7, #88	; 0x58
 8003db4:	f000 80a3 	beq.w	8003efe <_printf_i+0x16e>
 8003db8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003dbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003dc0:	e03a      	b.n	8003e38 <_printf_i+0xa8>
 8003dc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003dc6:	2b15      	cmp	r3, #21
 8003dc8:	d8f6      	bhi.n	8003db8 <_printf_i+0x28>
 8003dca:	a001      	add	r0, pc, #4	; (adr r0, 8003dd0 <_printf_i+0x40>)
 8003dcc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003dd0:	08003e29 	.word	0x08003e29
 8003dd4:	08003e3d 	.word	0x08003e3d
 8003dd8:	08003db9 	.word	0x08003db9
 8003ddc:	08003db9 	.word	0x08003db9
 8003de0:	08003db9 	.word	0x08003db9
 8003de4:	08003db9 	.word	0x08003db9
 8003de8:	08003e3d 	.word	0x08003e3d
 8003dec:	08003db9 	.word	0x08003db9
 8003df0:	08003db9 	.word	0x08003db9
 8003df4:	08003db9 	.word	0x08003db9
 8003df8:	08003db9 	.word	0x08003db9
 8003dfc:	08003f49 	.word	0x08003f49
 8003e00:	08003e6d 	.word	0x08003e6d
 8003e04:	08003f2b 	.word	0x08003f2b
 8003e08:	08003db9 	.word	0x08003db9
 8003e0c:	08003db9 	.word	0x08003db9
 8003e10:	08003f6b 	.word	0x08003f6b
 8003e14:	08003db9 	.word	0x08003db9
 8003e18:	08003e6d 	.word	0x08003e6d
 8003e1c:	08003db9 	.word	0x08003db9
 8003e20:	08003db9 	.word	0x08003db9
 8003e24:	08003f33 	.word	0x08003f33
 8003e28:	680b      	ldr	r3, [r1, #0]
 8003e2a:	1d1a      	adds	r2, r3, #4
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	600a      	str	r2, [r1, #0]
 8003e30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e0a3      	b.n	8003f84 <_printf_i+0x1f4>
 8003e3c:	6825      	ldr	r5, [r4, #0]
 8003e3e:	6808      	ldr	r0, [r1, #0]
 8003e40:	062e      	lsls	r6, r5, #24
 8003e42:	f100 0304 	add.w	r3, r0, #4
 8003e46:	d50a      	bpl.n	8003e5e <_printf_i+0xce>
 8003e48:	6805      	ldr	r5, [r0, #0]
 8003e4a:	600b      	str	r3, [r1, #0]
 8003e4c:	2d00      	cmp	r5, #0
 8003e4e:	da03      	bge.n	8003e58 <_printf_i+0xc8>
 8003e50:	232d      	movs	r3, #45	; 0x2d
 8003e52:	426d      	negs	r5, r5
 8003e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e58:	485e      	ldr	r0, [pc, #376]	; (8003fd4 <_printf_i+0x244>)
 8003e5a:	230a      	movs	r3, #10
 8003e5c:	e019      	b.n	8003e92 <_printf_i+0x102>
 8003e5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003e62:	6805      	ldr	r5, [r0, #0]
 8003e64:	600b      	str	r3, [r1, #0]
 8003e66:	bf18      	it	ne
 8003e68:	b22d      	sxthne	r5, r5
 8003e6a:	e7ef      	b.n	8003e4c <_printf_i+0xbc>
 8003e6c:	680b      	ldr	r3, [r1, #0]
 8003e6e:	6825      	ldr	r5, [r4, #0]
 8003e70:	1d18      	adds	r0, r3, #4
 8003e72:	6008      	str	r0, [r1, #0]
 8003e74:	0628      	lsls	r0, r5, #24
 8003e76:	d501      	bpl.n	8003e7c <_printf_i+0xec>
 8003e78:	681d      	ldr	r5, [r3, #0]
 8003e7a:	e002      	b.n	8003e82 <_printf_i+0xf2>
 8003e7c:	0669      	lsls	r1, r5, #25
 8003e7e:	d5fb      	bpl.n	8003e78 <_printf_i+0xe8>
 8003e80:	881d      	ldrh	r5, [r3, #0]
 8003e82:	4854      	ldr	r0, [pc, #336]	; (8003fd4 <_printf_i+0x244>)
 8003e84:	2f6f      	cmp	r7, #111	; 0x6f
 8003e86:	bf0c      	ite	eq
 8003e88:	2308      	moveq	r3, #8
 8003e8a:	230a      	movne	r3, #10
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e92:	6866      	ldr	r6, [r4, #4]
 8003e94:	60a6      	str	r6, [r4, #8]
 8003e96:	2e00      	cmp	r6, #0
 8003e98:	bfa2      	ittt	ge
 8003e9a:	6821      	ldrge	r1, [r4, #0]
 8003e9c:	f021 0104 	bicge.w	r1, r1, #4
 8003ea0:	6021      	strge	r1, [r4, #0]
 8003ea2:	b90d      	cbnz	r5, 8003ea8 <_printf_i+0x118>
 8003ea4:	2e00      	cmp	r6, #0
 8003ea6:	d04d      	beq.n	8003f44 <_printf_i+0x1b4>
 8003ea8:	4616      	mov	r6, r2
 8003eaa:	fbb5 f1f3 	udiv	r1, r5, r3
 8003eae:	fb03 5711 	mls	r7, r3, r1, r5
 8003eb2:	5dc7      	ldrb	r7, [r0, r7]
 8003eb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003eb8:	462f      	mov	r7, r5
 8003eba:	42bb      	cmp	r3, r7
 8003ebc:	460d      	mov	r5, r1
 8003ebe:	d9f4      	bls.n	8003eaa <_printf_i+0x11a>
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d10b      	bne.n	8003edc <_printf_i+0x14c>
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	07df      	lsls	r7, r3, #31
 8003ec8:	d508      	bpl.n	8003edc <_printf_i+0x14c>
 8003eca:	6923      	ldr	r3, [r4, #16]
 8003ecc:	6861      	ldr	r1, [r4, #4]
 8003ece:	4299      	cmp	r1, r3
 8003ed0:	bfde      	ittt	le
 8003ed2:	2330      	movle	r3, #48	; 0x30
 8003ed4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ed8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003edc:	1b92      	subs	r2, r2, r6
 8003ede:	6122      	str	r2, [r4, #16]
 8003ee0:	f8cd a000 	str.w	sl, [sp]
 8003ee4:	464b      	mov	r3, r9
 8003ee6:	aa03      	add	r2, sp, #12
 8003ee8:	4621      	mov	r1, r4
 8003eea:	4640      	mov	r0, r8
 8003eec:	f7ff fee2 	bl	8003cb4 <_printf_common>
 8003ef0:	3001      	adds	r0, #1
 8003ef2:	d14c      	bne.n	8003f8e <_printf_i+0x1fe>
 8003ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef8:	b004      	add	sp, #16
 8003efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003efe:	4835      	ldr	r0, [pc, #212]	; (8003fd4 <_printf_i+0x244>)
 8003f00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f04:	6823      	ldr	r3, [r4, #0]
 8003f06:	680e      	ldr	r6, [r1, #0]
 8003f08:	061f      	lsls	r7, r3, #24
 8003f0a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003f0e:	600e      	str	r6, [r1, #0]
 8003f10:	d514      	bpl.n	8003f3c <_printf_i+0x1ac>
 8003f12:	07d9      	lsls	r1, r3, #31
 8003f14:	bf44      	itt	mi
 8003f16:	f043 0320 	orrmi.w	r3, r3, #32
 8003f1a:	6023      	strmi	r3, [r4, #0]
 8003f1c:	b91d      	cbnz	r5, 8003f26 <_printf_i+0x196>
 8003f1e:	6823      	ldr	r3, [r4, #0]
 8003f20:	f023 0320 	bic.w	r3, r3, #32
 8003f24:	6023      	str	r3, [r4, #0]
 8003f26:	2310      	movs	r3, #16
 8003f28:	e7b0      	b.n	8003e8c <_printf_i+0xfc>
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	f043 0320 	orr.w	r3, r3, #32
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	2378      	movs	r3, #120	; 0x78
 8003f34:	4828      	ldr	r0, [pc, #160]	; (8003fd8 <_printf_i+0x248>)
 8003f36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f3a:	e7e3      	b.n	8003f04 <_printf_i+0x174>
 8003f3c:	065e      	lsls	r6, r3, #25
 8003f3e:	bf48      	it	mi
 8003f40:	b2ad      	uxthmi	r5, r5
 8003f42:	e7e6      	b.n	8003f12 <_printf_i+0x182>
 8003f44:	4616      	mov	r6, r2
 8003f46:	e7bb      	b.n	8003ec0 <_printf_i+0x130>
 8003f48:	680b      	ldr	r3, [r1, #0]
 8003f4a:	6826      	ldr	r6, [r4, #0]
 8003f4c:	6960      	ldr	r0, [r4, #20]
 8003f4e:	1d1d      	adds	r5, r3, #4
 8003f50:	600d      	str	r5, [r1, #0]
 8003f52:	0635      	lsls	r5, r6, #24
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	d501      	bpl.n	8003f5c <_printf_i+0x1cc>
 8003f58:	6018      	str	r0, [r3, #0]
 8003f5a:	e002      	b.n	8003f62 <_printf_i+0x1d2>
 8003f5c:	0671      	lsls	r1, r6, #25
 8003f5e:	d5fb      	bpl.n	8003f58 <_printf_i+0x1c8>
 8003f60:	8018      	strh	r0, [r3, #0]
 8003f62:	2300      	movs	r3, #0
 8003f64:	6123      	str	r3, [r4, #16]
 8003f66:	4616      	mov	r6, r2
 8003f68:	e7ba      	b.n	8003ee0 <_printf_i+0x150>
 8003f6a:	680b      	ldr	r3, [r1, #0]
 8003f6c:	1d1a      	adds	r2, r3, #4
 8003f6e:	600a      	str	r2, [r1, #0]
 8003f70:	681e      	ldr	r6, [r3, #0]
 8003f72:	6862      	ldr	r2, [r4, #4]
 8003f74:	2100      	movs	r1, #0
 8003f76:	4630      	mov	r0, r6
 8003f78:	f7fc f942 	bl	8000200 <memchr>
 8003f7c:	b108      	cbz	r0, 8003f82 <_printf_i+0x1f2>
 8003f7e:	1b80      	subs	r0, r0, r6
 8003f80:	6060      	str	r0, [r4, #4]
 8003f82:	6863      	ldr	r3, [r4, #4]
 8003f84:	6123      	str	r3, [r4, #16]
 8003f86:	2300      	movs	r3, #0
 8003f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f8c:	e7a8      	b.n	8003ee0 <_printf_i+0x150>
 8003f8e:	6923      	ldr	r3, [r4, #16]
 8003f90:	4632      	mov	r2, r6
 8003f92:	4649      	mov	r1, r9
 8003f94:	4640      	mov	r0, r8
 8003f96:	47d0      	blx	sl
 8003f98:	3001      	adds	r0, #1
 8003f9a:	d0ab      	beq.n	8003ef4 <_printf_i+0x164>
 8003f9c:	6823      	ldr	r3, [r4, #0]
 8003f9e:	079b      	lsls	r3, r3, #30
 8003fa0:	d413      	bmi.n	8003fca <_printf_i+0x23a>
 8003fa2:	68e0      	ldr	r0, [r4, #12]
 8003fa4:	9b03      	ldr	r3, [sp, #12]
 8003fa6:	4298      	cmp	r0, r3
 8003fa8:	bfb8      	it	lt
 8003faa:	4618      	movlt	r0, r3
 8003fac:	e7a4      	b.n	8003ef8 <_printf_i+0x168>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	4632      	mov	r2, r6
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	4640      	mov	r0, r8
 8003fb6:	47d0      	blx	sl
 8003fb8:	3001      	adds	r0, #1
 8003fba:	d09b      	beq.n	8003ef4 <_printf_i+0x164>
 8003fbc:	3501      	adds	r5, #1
 8003fbe:	68e3      	ldr	r3, [r4, #12]
 8003fc0:	9903      	ldr	r1, [sp, #12]
 8003fc2:	1a5b      	subs	r3, r3, r1
 8003fc4:	42ab      	cmp	r3, r5
 8003fc6:	dcf2      	bgt.n	8003fae <_printf_i+0x21e>
 8003fc8:	e7eb      	b.n	8003fa2 <_printf_i+0x212>
 8003fca:	2500      	movs	r5, #0
 8003fcc:	f104 0619 	add.w	r6, r4, #25
 8003fd0:	e7f5      	b.n	8003fbe <_printf_i+0x22e>
 8003fd2:	bf00      	nop
 8003fd4:	080042fd 	.word	0x080042fd
 8003fd8:	0800430e 	.word	0x0800430e

08003fdc <memcpy>:
 8003fdc:	440a      	add	r2, r1
 8003fde:	4291      	cmp	r1, r2
 8003fe0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fe4:	d100      	bne.n	8003fe8 <memcpy+0xc>
 8003fe6:	4770      	bx	lr
 8003fe8:	b510      	push	{r4, lr}
 8003fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ff2:	4291      	cmp	r1, r2
 8003ff4:	d1f9      	bne.n	8003fea <memcpy+0xe>
 8003ff6:	bd10      	pop	{r4, pc}

08003ff8 <memmove>:
 8003ff8:	4288      	cmp	r0, r1
 8003ffa:	b510      	push	{r4, lr}
 8003ffc:	eb01 0402 	add.w	r4, r1, r2
 8004000:	d902      	bls.n	8004008 <memmove+0x10>
 8004002:	4284      	cmp	r4, r0
 8004004:	4623      	mov	r3, r4
 8004006:	d807      	bhi.n	8004018 <memmove+0x20>
 8004008:	1e43      	subs	r3, r0, #1
 800400a:	42a1      	cmp	r1, r4
 800400c:	d008      	beq.n	8004020 <memmove+0x28>
 800400e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004012:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004016:	e7f8      	b.n	800400a <memmove+0x12>
 8004018:	4402      	add	r2, r0
 800401a:	4601      	mov	r1, r0
 800401c:	428a      	cmp	r2, r1
 800401e:	d100      	bne.n	8004022 <memmove+0x2a>
 8004020:	bd10      	pop	{r4, pc}
 8004022:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004026:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800402a:	e7f7      	b.n	800401c <memmove+0x24>

0800402c <_free_r>:
 800402c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800402e:	2900      	cmp	r1, #0
 8004030:	d048      	beq.n	80040c4 <_free_r+0x98>
 8004032:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004036:	9001      	str	r0, [sp, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	f1a1 0404 	sub.w	r4, r1, #4
 800403e:	bfb8      	it	lt
 8004040:	18e4      	addlt	r4, r4, r3
 8004042:	f000 f8d3 	bl	80041ec <__malloc_lock>
 8004046:	4a20      	ldr	r2, [pc, #128]	; (80040c8 <_free_r+0x9c>)
 8004048:	9801      	ldr	r0, [sp, #4]
 800404a:	6813      	ldr	r3, [r2, #0]
 800404c:	4615      	mov	r5, r2
 800404e:	b933      	cbnz	r3, 800405e <_free_r+0x32>
 8004050:	6063      	str	r3, [r4, #4]
 8004052:	6014      	str	r4, [r2, #0]
 8004054:	b003      	add	sp, #12
 8004056:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800405a:	f000 b8cd 	b.w	80041f8 <__malloc_unlock>
 800405e:	42a3      	cmp	r3, r4
 8004060:	d90b      	bls.n	800407a <_free_r+0x4e>
 8004062:	6821      	ldr	r1, [r4, #0]
 8004064:	1862      	adds	r2, r4, r1
 8004066:	4293      	cmp	r3, r2
 8004068:	bf04      	itt	eq
 800406a:	681a      	ldreq	r2, [r3, #0]
 800406c:	685b      	ldreq	r3, [r3, #4]
 800406e:	6063      	str	r3, [r4, #4]
 8004070:	bf04      	itt	eq
 8004072:	1852      	addeq	r2, r2, r1
 8004074:	6022      	streq	r2, [r4, #0]
 8004076:	602c      	str	r4, [r5, #0]
 8004078:	e7ec      	b.n	8004054 <_free_r+0x28>
 800407a:	461a      	mov	r2, r3
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	b10b      	cbz	r3, 8004084 <_free_r+0x58>
 8004080:	42a3      	cmp	r3, r4
 8004082:	d9fa      	bls.n	800407a <_free_r+0x4e>
 8004084:	6811      	ldr	r1, [r2, #0]
 8004086:	1855      	adds	r5, r2, r1
 8004088:	42a5      	cmp	r5, r4
 800408a:	d10b      	bne.n	80040a4 <_free_r+0x78>
 800408c:	6824      	ldr	r4, [r4, #0]
 800408e:	4421      	add	r1, r4
 8004090:	1854      	adds	r4, r2, r1
 8004092:	42a3      	cmp	r3, r4
 8004094:	6011      	str	r1, [r2, #0]
 8004096:	d1dd      	bne.n	8004054 <_free_r+0x28>
 8004098:	681c      	ldr	r4, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	6053      	str	r3, [r2, #4]
 800409e:	4421      	add	r1, r4
 80040a0:	6011      	str	r1, [r2, #0]
 80040a2:	e7d7      	b.n	8004054 <_free_r+0x28>
 80040a4:	d902      	bls.n	80040ac <_free_r+0x80>
 80040a6:	230c      	movs	r3, #12
 80040a8:	6003      	str	r3, [r0, #0]
 80040aa:	e7d3      	b.n	8004054 <_free_r+0x28>
 80040ac:	6825      	ldr	r5, [r4, #0]
 80040ae:	1961      	adds	r1, r4, r5
 80040b0:	428b      	cmp	r3, r1
 80040b2:	bf04      	itt	eq
 80040b4:	6819      	ldreq	r1, [r3, #0]
 80040b6:	685b      	ldreq	r3, [r3, #4]
 80040b8:	6063      	str	r3, [r4, #4]
 80040ba:	bf04      	itt	eq
 80040bc:	1949      	addeq	r1, r1, r5
 80040be:	6021      	streq	r1, [r4, #0]
 80040c0:	6054      	str	r4, [r2, #4]
 80040c2:	e7c7      	b.n	8004054 <_free_r+0x28>
 80040c4:	b003      	add	sp, #12
 80040c6:	bd30      	pop	{r4, r5, pc}
 80040c8:	200000d4 	.word	0x200000d4

080040cc <_malloc_r>:
 80040cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ce:	1ccd      	adds	r5, r1, #3
 80040d0:	f025 0503 	bic.w	r5, r5, #3
 80040d4:	3508      	adds	r5, #8
 80040d6:	2d0c      	cmp	r5, #12
 80040d8:	bf38      	it	cc
 80040da:	250c      	movcc	r5, #12
 80040dc:	2d00      	cmp	r5, #0
 80040de:	4606      	mov	r6, r0
 80040e0:	db01      	blt.n	80040e6 <_malloc_r+0x1a>
 80040e2:	42a9      	cmp	r1, r5
 80040e4:	d903      	bls.n	80040ee <_malloc_r+0x22>
 80040e6:	230c      	movs	r3, #12
 80040e8:	6033      	str	r3, [r6, #0]
 80040ea:	2000      	movs	r0, #0
 80040ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040ee:	f000 f87d 	bl	80041ec <__malloc_lock>
 80040f2:	4921      	ldr	r1, [pc, #132]	; (8004178 <_malloc_r+0xac>)
 80040f4:	680a      	ldr	r2, [r1, #0]
 80040f6:	4614      	mov	r4, r2
 80040f8:	b99c      	cbnz	r4, 8004122 <_malloc_r+0x56>
 80040fa:	4f20      	ldr	r7, [pc, #128]	; (800417c <_malloc_r+0xb0>)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	b923      	cbnz	r3, 800410a <_malloc_r+0x3e>
 8004100:	4621      	mov	r1, r4
 8004102:	4630      	mov	r0, r6
 8004104:	f000 f862 	bl	80041cc <_sbrk_r>
 8004108:	6038      	str	r0, [r7, #0]
 800410a:	4629      	mov	r1, r5
 800410c:	4630      	mov	r0, r6
 800410e:	f000 f85d 	bl	80041cc <_sbrk_r>
 8004112:	1c43      	adds	r3, r0, #1
 8004114:	d123      	bne.n	800415e <_malloc_r+0x92>
 8004116:	230c      	movs	r3, #12
 8004118:	6033      	str	r3, [r6, #0]
 800411a:	4630      	mov	r0, r6
 800411c:	f000 f86c 	bl	80041f8 <__malloc_unlock>
 8004120:	e7e3      	b.n	80040ea <_malloc_r+0x1e>
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	1b5b      	subs	r3, r3, r5
 8004126:	d417      	bmi.n	8004158 <_malloc_r+0x8c>
 8004128:	2b0b      	cmp	r3, #11
 800412a:	d903      	bls.n	8004134 <_malloc_r+0x68>
 800412c:	6023      	str	r3, [r4, #0]
 800412e:	441c      	add	r4, r3
 8004130:	6025      	str	r5, [r4, #0]
 8004132:	e004      	b.n	800413e <_malloc_r+0x72>
 8004134:	6863      	ldr	r3, [r4, #4]
 8004136:	42a2      	cmp	r2, r4
 8004138:	bf0c      	ite	eq
 800413a:	600b      	streq	r3, [r1, #0]
 800413c:	6053      	strne	r3, [r2, #4]
 800413e:	4630      	mov	r0, r6
 8004140:	f000 f85a 	bl	80041f8 <__malloc_unlock>
 8004144:	f104 000b 	add.w	r0, r4, #11
 8004148:	1d23      	adds	r3, r4, #4
 800414a:	f020 0007 	bic.w	r0, r0, #7
 800414e:	1ac2      	subs	r2, r0, r3
 8004150:	d0cc      	beq.n	80040ec <_malloc_r+0x20>
 8004152:	1a1b      	subs	r3, r3, r0
 8004154:	50a3      	str	r3, [r4, r2]
 8004156:	e7c9      	b.n	80040ec <_malloc_r+0x20>
 8004158:	4622      	mov	r2, r4
 800415a:	6864      	ldr	r4, [r4, #4]
 800415c:	e7cc      	b.n	80040f8 <_malloc_r+0x2c>
 800415e:	1cc4      	adds	r4, r0, #3
 8004160:	f024 0403 	bic.w	r4, r4, #3
 8004164:	42a0      	cmp	r0, r4
 8004166:	d0e3      	beq.n	8004130 <_malloc_r+0x64>
 8004168:	1a21      	subs	r1, r4, r0
 800416a:	4630      	mov	r0, r6
 800416c:	f000 f82e 	bl	80041cc <_sbrk_r>
 8004170:	3001      	adds	r0, #1
 8004172:	d1dd      	bne.n	8004130 <_malloc_r+0x64>
 8004174:	e7cf      	b.n	8004116 <_malloc_r+0x4a>
 8004176:	bf00      	nop
 8004178:	200000d4 	.word	0x200000d4
 800417c:	200000d8 	.word	0x200000d8

08004180 <_realloc_r>:
 8004180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004182:	4607      	mov	r7, r0
 8004184:	4614      	mov	r4, r2
 8004186:	460e      	mov	r6, r1
 8004188:	b921      	cbnz	r1, 8004194 <_realloc_r+0x14>
 800418a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800418e:	4611      	mov	r1, r2
 8004190:	f7ff bf9c 	b.w	80040cc <_malloc_r>
 8004194:	b922      	cbnz	r2, 80041a0 <_realloc_r+0x20>
 8004196:	f7ff ff49 	bl	800402c <_free_r>
 800419a:	4625      	mov	r5, r4
 800419c:	4628      	mov	r0, r5
 800419e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041a0:	f000 f830 	bl	8004204 <_malloc_usable_size_r>
 80041a4:	42a0      	cmp	r0, r4
 80041a6:	d20f      	bcs.n	80041c8 <_realloc_r+0x48>
 80041a8:	4621      	mov	r1, r4
 80041aa:	4638      	mov	r0, r7
 80041ac:	f7ff ff8e 	bl	80040cc <_malloc_r>
 80041b0:	4605      	mov	r5, r0
 80041b2:	2800      	cmp	r0, #0
 80041b4:	d0f2      	beq.n	800419c <_realloc_r+0x1c>
 80041b6:	4631      	mov	r1, r6
 80041b8:	4622      	mov	r2, r4
 80041ba:	f7ff ff0f 	bl	8003fdc <memcpy>
 80041be:	4631      	mov	r1, r6
 80041c0:	4638      	mov	r0, r7
 80041c2:	f7ff ff33 	bl	800402c <_free_r>
 80041c6:	e7e9      	b.n	800419c <_realloc_r+0x1c>
 80041c8:	4635      	mov	r5, r6
 80041ca:	e7e7      	b.n	800419c <_realloc_r+0x1c>

080041cc <_sbrk_r>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	4d06      	ldr	r5, [pc, #24]	; (80041e8 <_sbrk_r+0x1c>)
 80041d0:	2300      	movs	r3, #0
 80041d2:	4604      	mov	r4, r0
 80041d4:	4608      	mov	r0, r1
 80041d6:	602b      	str	r3, [r5, #0]
 80041d8:	f7fc fc3a 	bl	8000a50 <_sbrk>
 80041dc:	1c43      	adds	r3, r0, #1
 80041de:	d102      	bne.n	80041e6 <_sbrk_r+0x1a>
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	b103      	cbz	r3, 80041e6 <_sbrk_r+0x1a>
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	bd38      	pop	{r3, r4, r5, pc}
 80041e8:	20000128 	.word	0x20000128

080041ec <__malloc_lock>:
 80041ec:	4801      	ldr	r0, [pc, #4]	; (80041f4 <__malloc_lock+0x8>)
 80041ee:	f000 b811 	b.w	8004214 <__retarget_lock_acquire_recursive>
 80041f2:	bf00      	nop
 80041f4:	20000130 	.word	0x20000130

080041f8 <__malloc_unlock>:
 80041f8:	4801      	ldr	r0, [pc, #4]	; (8004200 <__malloc_unlock+0x8>)
 80041fa:	f000 b80c 	b.w	8004216 <__retarget_lock_release_recursive>
 80041fe:	bf00      	nop
 8004200:	20000130 	.word	0x20000130

08004204 <_malloc_usable_size_r>:
 8004204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004208:	1f18      	subs	r0, r3, #4
 800420a:	2b00      	cmp	r3, #0
 800420c:	bfbc      	itt	lt
 800420e:	580b      	ldrlt	r3, [r1, r0]
 8004210:	18c0      	addlt	r0, r0, r3
 8004212:	4770      	bx	lr

08004214 <__retarget_lock_acquire_recursive>:
 8004214:	4770      	bx	lr

08004216 <__retarget_lock_release_recursive>:
 8004216:	4770      	bx	lr

08004218 <_init>:
 8004218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421a:	bf00      	nop
 800421c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421e:	bc08      	pop	{r3}
 8004220:	469e      	mov	lr, r3
 8004222:	4770      	bx	lr

08004224 <_fini>:
 8004224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004226:	bf00      	nop
 8004228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800422a:	bc08      	pop	{r3}
 800422c:	469e      	mov	lr, r3
 800422e:	4770      	bx	lr
